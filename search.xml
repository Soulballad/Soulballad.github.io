<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Gradle】-6.Gradle多模块项目</title>
      <link href="posts/96cae014.html"/>
      <url>posts/96cae014.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Gradle】-5.Gradle组件说明</title>
      <link href="posts/1d64b598.html"/>
      <url>posts/1d64b598.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Gradle】-4.Gradle构建Spring Boot项目</title>
      <link href="posts/4d80b27.html"/>
      <url>posts/4d80b27.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Gradle】-3.Gradle构建Java项目</title>
      <link href="posts/ce500afa.html"/>
      <url>posts/ce500afa.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Gradle】-2.Gradle安装和常用命令</title>
      <link href="posts/83b68e34.html"/>
      <url>posts/83b68e34.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Gradle】-1.Gradle基础介绍</title>
      <link href="posts/8c005aec.html"/>
      <url>posts/8c005aec.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-16.Spring Boot Starter 加载和解析</title>
      <link href="posts/80c21ac2.html"/>
      <url>posts/80c21ac2.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-自定义-starter-原理分析"><a href="#1-自定义-starter-原理分析" class="headerlink" title="1.自定义 starter 原理分析"></a>1.自定义 starter 原理分析</h2><p>demo-spring-boot-starter 中 Hello 接口定义了 hello 方法，它又三个实现类，分别是：HelloGirl、HelloJava、HelloWorld。</p><p>它们三个都是在 HelloAutoConfiguration 中进行的声明，声明时通过条件注解 <code>@ConditionalOnProperty</code> 来区分具体要激活的 bean，而条件注解的值通过外部配置传入，所以就将选择权交给了使用者；同时这里还声明了 HelloTemplate，HelloTemplate 需要用到的属性值通过 HelloProperties 从外部配置文件中传入。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200730200120564.png" alt="image-20200730200120564"></p><p>HelloAutoConfiguration 配置在 <code>META-INF\spring.factories</code> 中，spring boot 会通过 SpringFactoriesLoader 来自动加载该位置的类，这是一种 SPI 机制，所以依赖了 demo-spring-boot-starter 的项目，会自动加载 HelloAutoConfiguration 这个装配类。</p><p><code>test-spring-boot-starter</code> 中的 application.properties 中配置了 <code>com.soulballad.hello.java.enable=true</code> 配置，所以会自动激活 HelloJava 的 bean；同时配置的HelloProperties 中其他属性也会一并被加载到上下文中。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200730200329099.png" alt="image-20200730200329099"></p><p>所以在 HelloController 中调用 helloTemplate 的 hello 方式时，最终会调用到 HelloJava 类。</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-15.Spring Boot MessageConverter 执行和原理</title>
      <link href="posts/a5bcdca6.html"/>
      <url>posts/a5bcdca6.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-自定义MessageConverter执行流程"><a href="#1-自定义MessageConverter执行流程" class="headerlink" title="1.自定义MessageConverter执行流程"></a>1.自定义MessageConverter执行流程</h2><p>以 UserController#add1 为例，简单分析一下源码</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200729214822124.png" alt="image-20200729214822124.png"></p><p>在 AbstractMessageConverterMethodArgumentResolver#readWithMessageConverters 中有这样一段</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Object <span class="token function">readWithMessageConverters</span><span class="token punctuation">(</span>HttpInputMessage inputMessage<span class="token punctuation">,</span> MethodParameter parameter<span class="token punctuation">,</span> Type targetType<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> HttpMediaTypeNotSupportedException<span class="token punctuation">,</span> HttpMessageNotReadableException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmptyBodyCheckingHttpInputMessage</span><span class="token punctuation">(</span>inputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历所有的 messageConverters</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> converter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converterType <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">)</span> converter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            GenericHttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> genericConverter <span class="token operator">=</span>                <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">GenericHttpMessageConverter</span> <span class="token operator">?</span> <span class="token punctuation">(</span>GenericHttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> converter <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行 canRead 方法，判断是否可以支持当前的 Content-Type</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> null <span class="token operator">?</span> genericConverter<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> contextClass<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span> <span class="token operator">:</span>                <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> converter<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token comment" spellcheck="true">// 如果可以支持，判断是否有消息体</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">hasBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 解析前处理逻辑</span>                    HttpInputMessage msgToUse <span class="token operator">=</span>                        <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beforeBodyRead</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 调用 read 方法解析消息内容</span>                    body <span class="token operator">=</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> null <span class="token operator">?</span> genericConverter<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> contextClass<span class="token punctuation">,</span> msgToUse<span class="token punctuation">)</span> <span class="token operator">:</span>                            <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpMessageConverter<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> msgToUse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 解析后处理逻辑</span>                    body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterBodyRead</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> msgToUse<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 消息体为空时处理逻辑</span>                    body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleEmptyBody</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> message<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpMessageNotReadableException</span><span class="token punctuation">(</span><span class="token string">"I/O error while reading input message"</span><span class="token punctuation">,</span> ex<span class="token punctuation">,</span> inputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">return</span> body<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里需要遍历 messageConverters 来寻找一个合适的处理器，那么这里的 messageConverters 如何获取到自定义的 HTTPMessageConverter 呢？</p><p>其实，在项目启动的时候，自定义 HTTPMessageConverter 被加载到 applicationContext 中。RequestMappingHandlerAdapter 在初始化完成后，调用其 afterPropertiesSet</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do this first, it may add ResponseBody advice beans</span>    <span class="token function">initControllerAdviceCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取参数处理的 resolvers</span>        List<span class="token operator">&lt;</span>HandlerMethodArgumentResolver<span class="token operator">></span> resolvers <span class="token operator">=</span> <span class="token function">getDefaultArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethodArgumentResolverComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResolvers</span><span class="token punctuation">(</span>resolvers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>initBinderArgumentResolvers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>HandlerMethodArgumentResolver<span class="token operator">></span> resolvers <span class="token operator">=</span> <span class="token function">getDefaultInitBinderArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initBinderArgumentResolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethodArgumentResolverComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResolvers</span><span class="token punctuation">(</span>resolvers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>HandlerMethodReturnValueHandler<span class="token operator">></span> handlers <span class="token operator">=</span> <span class="token function">getDefaultReturnValueHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethodReturnValueHandlerComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addHandlers</span><span class="token punctuation">(</span>handlers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 getDefaultArgumentResolvers 中有声明 RequestResponseBodyMethodProcessor 和 RequestPartMethodArgumentResolver，二者都需要调用 getMessageConverters 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> List<span class="token operator">&lt;</span>HandlerMethodArgumentResolver<span class="token operator">></span> <span class="token function">getDefaultArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>HandlerMethodArgumentResolver<span class="token operator">></span> resolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Annotation-based argument resolution</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParamMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParamMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathVariableMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathVariableMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MatrixVariableMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MatrixVariableMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletModelAttributeMethodProcessor</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestResponseBodyMethodProcessor</span><span class="token punctuation">(</span><span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestResponseBodyAdvice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestPartMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestResponseBodyAdvice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestHeaderMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestHeaderMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletCookieValueMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExpressionValueMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionAttributeMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestAttributeMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Type-based argument resolution</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletRequestMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletResponseMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpEntityMethodProcessor</span><span class="token punctuation">(</span><span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestResponseBodyAdvice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedirectAttributesMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ModelMethodProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapMethodProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ErrorsMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionStatusMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UriComponentsBuilderMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Custom arguments</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getCustomArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        resolvers<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">getCustomArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Catch-all</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParamMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletModelAttributeMethodProcessor</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resolvers<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的 messageConverters 通过构造函数加入了一部分，也在 WebMvcAutoConfiguration 中进行了扩展。</p><h2 id="2-自定义MessageConverter加载"><a href="#2-自定义MessageConverter加载" class="headerlink" title="2.自定义MessageConverter加载"></a>2.自定义MessageConverter加载</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200729222813002.png" alt="image-20200729222813002.png"></p><p>在 spring boot 启动的时候，会加载到 WebMvcAutoConfiguration.EnableWebMvcConfiguration 中 requestMappingHandlerAdapter 方法，这个方法用来声明一个 RequestMappingHandlerAdapter 的 bean，它又通过调用 super.requestMappingHandlerAdapter 来进行实例化。</p><p>在 super.requestMappingHandlerAdapter 通过<code>adapter.setMessageConverters(getMessageConverters());</code> 将 messageConverters 设置到 adapter 上，这里的 getMessageConverters 实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 配置 messageConverters</span>        <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果messageConverters为空，加载默认的配置</span>            <span class="token function">addDefaultHttpMessageConverters</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 加载扩展的 messageConverter</span>        <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 extendMessageConverters 中通过委派，调用 DelegatingWebMvcConfiguration 的 extendMessageConverters 来扩展 messageConverters，最终调用到 WebMvcConfigurer 的 extendMessageConverters 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>WebMvcConfigurer delegate <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegates<span class="token punctuation">)</span> <span class="token punctuation">{</span>        delegate<span class="token punctuation">.</span><span class="token function">extendMessageConverters</span><span class="token punctuation">(</span>converters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>而 WebMvcConfig 恰好是 WebMvcConfigurer 的实现类，重写了它的 extendMessageConverters 方法，所以自定义的 HTTPMessageConverter 被加载到 RequestMappingHandlerAdapter 中。</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-14.Spring Boot WebFlux Server 装配及启动</title>
      <link href="posts/f9fd82a8.html"/>
      <url>posts/f9fd82a8.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Webflux-Server-如何启动？"><a href="#1-Webflux-Server-如何启动？" class="headerlink" title="1.Webflux Server 如何启动？"></a>1.Webflux Server 如何启动？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728221934648.png"></p><p>使用 webflux 时，默认的 applicationContext 为 AnnotationConfigReactiveWebServerApplicationContext</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> ConfigurableApplicationContext <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> contextClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContextClass<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>contextClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> SERVLET<span class="token operator">:</span>                    contextClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DEFAULT_SERVLET_WEB_CONTEXT_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> REACTIVE<span class="token operator">:</span>                    contextClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DEFAULT_REACTIVE_WEB_CONTEXT_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    contextClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DEFAULT_CONTEXT_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                <span class="token string">"Unable create a default ApplicationContext, please specify an ApplicationContextClass"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>ConfigurableApplicationContext<span class="token punctuation">)</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以在 AnnotationConfigReactiveWebServerApplicationContext 中进行初始化和启动</p><h2 id="2-Webflux-默认-Server-为何是-Netty？"><a href="#2-Webflux-默认-Server-为何是-Netty？" class="headerlink" title="2.Webflux 默认 Server 为何是 Netty？"></a>2.Webflux 默认 Server 为何是 Netty？</h2><p>先看下 spring-boot-starter-webflux 的依赖结构</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728222250093.png" alt="image-20200728222250093"></p><p>在 spring-boot-autoconfigure/spring.factories 中有一个自动装配的类 ReactiveWebServerFactoryAutoConfiguration</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728222459008.png" alt="image-20200728222459008"></p><p>它的内容如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>ReactiveHttpInputMessage<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> ConditionalOnWebApplication<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>REACTIVE<span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ReactiveWebServerFactoryAutoConfiguration<span class="token punctuation">.</span>BeanPostProcessorsRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         ReactiveWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedTomcat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         ReactiveWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedJetty<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         ReactiveWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedUndertow<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         ReactiveWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedNetty<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveWebServerFactoryAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ReactiveWebServerFactoryCustomizer <span class="token function">reactiveWebServerFactoryCustomizer</span><span class="token punctuation">(</span>ServerProperties serverProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveWebServerFactoryCustomizer</span><span class="token punctuation">(</span>serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"org.apache.catalina.startup.Tomcat"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> TomcatReactiveWebServerFactoryCustomizer <span class="token function">tomcatReactiveWebServerFactoryCustomizer</span><span class="token punctuation">(</span>        ServerProperties serverProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatReactiveWebServerFactoryCustomizer</span><span class="token punctuation">(</span>serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"server.forward-headers-strategy"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"framework"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ForwardedHeaderTransformer <span class="token function">forwardedHeaderTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ForwardedHeaderTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * Registers a {@link WebServerFactoryCustomizerBeanPostProcessor}. Registered via    * {@link ImportBeanDefinitionRegistrar} for early registration.    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BeanPostProcessorsRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span> BeanFactoryAware <span class="token punctuation">{</span>        <span class="token keyword">private</span> ConfigurableListableBeanFactory beanFactory<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span>BeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> <span class="token punctuation">(</span>ConfigurableListableBeanFactory<span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">registerSyntheticBeanIfMissing</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">"webServerFactoryCustomizerBeanPostProcessor"</span><span class="token punctuation">,</span>                                           WebServerFactoryCustomizerBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerSyntheticBeanIfMissing</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                RootBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                beanDefinition<span class="token punctuation">.</span><span class="token function">setSynthetic</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它里面通过 @Import 分别引入了 EmbeddedTomcat、EmbeddedJetty、EmbeddedUndertow、EmbeddedNetty，它们都是 ReactiveWebServerFactoryConfiguration 的内部类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveWebServerFactoryConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>ReactiveWebServerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> HttpServer<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedNetty</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        ReactorResourceFactory <span class="token function">reactorServerResourceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReactorResourceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        NettyReactiveWebServerFactory <span class="token function">nettyReactiveWebServerFactory</span><span class="token punctuation">(</span>ReactorResourceFactory resourceFactory<span class="token punctuation">,</span>                                                                    ObjectProvider<span class="token operator">&lt;</span>NettyRouteProvider<span class="token operator">></span> routes<span class="token punctuation">,</span> ObjectProvider<span class="token operator">&lt;</span>NettyServerCustomizer<span class="token operator">></span> serverCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            NettyReactiveWebServerFactory serverFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyReactiveWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverFactory<span class="token punctuation">.</span><span class="token function">setResourceFactory</span><span class="token punctuation">(</span>resourceFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            routes<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>serverFactory<span class="token operator">:</span><span class="token operator">:</span>addRouteProviders<span class="token punctuation">)</span><span class="token punctuation">;</span>            serverFactory<span class="token punctuation">.</span><span class="token function">getServerCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>serverCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> serverFactory<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>ReactiveWebServerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>startup<span class="token punctuation">.</span>Tomcat<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedTomcat</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        TomcatReactiveWebServerFactory <span class="token function">tomcatReactiveWebServerFactory</span><span class="token punctuation">(</span>            ObjectProvider<span class="token operator">&lt;</span>TomcatConnectorCustomizer<span class="token operator">></span> connectorCustomizers<span class="token punctuation">,</span>            ObjectProvider<span class="token operator">&lt;</span>TomcatContextCustomizer<span class="token operator">></span> contextCustomizers<span class="token punctuation">,</span>            ObjectProvider<span class="token operator">&lt;</span>TomcatProtocolHandlerCustomizer<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> protocolHandlerCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TomcatReactiveWebServerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatReactiveWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            factory<span class="token punctuation">.</span><span class="token function">getTomcatConnectorCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>connectorCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            factory<span class="token punctuation">.</span><span class="token function">getTomcatContextCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>contextCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            factory<span class="token punctuation">.</span><span class="token function">getTomcatProtocolHandlerCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>protocolHandlerCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> factory<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>ReactiveWebServerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>jetty<span class="token punctuation">.</span>server<span class="token punctuation">.</span>Server<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedJetty</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        JettyResourceFactory <span class="token function">jettyServerResourceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JettyResourceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        JettyReactiveWebServerFactory <span class="token function">jettyReactiveWebServerFactory</span><span class="token punctuation">(</span>JettyResourceFactory resourceFactory<span class="token punctuation">,</span>                                                                    ObjectProvider<span class="token operator">&lt;</span>JettyServerCustomizer<span class="token operator">></span> serverCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            JettyReactiveWebServerFactory serverFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JettyReactiveWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverFactory<span class="token punctuation">.</span><span class="token function">getServerCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>serverCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverFactory<span class="token punctuation">.</span><span class="token function">setResourceFactory</span><span class="token punctuation">(</span>resourceFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> serverFactory<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>ReactiveWebServerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Undertow<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedUndertow</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        UndertowReactiveWebServerFactory <span class="token function">undertowReactiveWebServerFactory</span><span class="token punctuation">(</span>            ObjectProvider<span class="token operator">&lt;</span>UndertowBuilderCustomizer<span class="token operator">></span> builderCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            UndertowReactiveWebServerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UndertowReactiveWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            factory<span class="token punctuation">.</span><span class="token function">getBuilderCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>builderCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> factory<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它们生效的条件分别是：</p><ul><li>EmbeddedTomcat： @ConditionalOnClass – Tomcat.class(apache)</li><li>EmbeddedJetty： @ConditionalOnClass – Server.class(jetty)</li><li>EmbeddedUndertow： @ConditionalOnClass – Undertow.class</li><li>EmbeddedNetty： @ConditionalOnClass – HttpServer.class</li></ul><p>结合上面的依赖分析，spring-boot-starter-webflux 中依赖了 reactor-netty.jar，而 HttpServer.class 恰好在 reactor-netty.jar 包中，所以 netty 生效。最终使用 EmbeddedNetty 启动服务。</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-13.Spring Boot WebFlux 工作流程及原理</title>
      <link href="posts/c79d003e.html"/>
      <url>posts/c79d003e.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Spring-WebFlux-运行流程"><a href="#1-Spring-WebFlux-运行流程" class="headerlink" title="1.Spring  WebFlux 运行流程"></a>1.Spring  WebFlux 运行流程</h2><p>在 Spring Mvc 中处理核心类是 DispatcherServlet，在 Spring WebFlux 中则是 DispatcherHandler。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727221259596.png" alt="image-20200727221259596"></p><ol><li>用户发送请求至请求处理器 DispatcherHandler。</li><li>DispatcherHandler 收到请求调用 handle 方法，判断是否有 handlerMappings ，如果没有直接返回 404；否则执行下一步。</li><li>从 handlerMappings 找到一个处理当前请求的映射器 HandlerMapping，一般使用的是 url 映射器。</li><li>如果没有找到能处理当前请求的映射器，返回404；否则调用 HandlerMapping。</li><li>使用找到的映射器；并从 handlerAdapters 中找到一个适配器；调用适配器的 handle 方法。</li><li>调用完成返回 HandlerResult，里面封装了返回值，映射器，异常等信息。</li><li>将 handlerResult 返回给 DispatcherHandler。</li><li>DispatcherHandler 处理返回的 HandleResult。</li><li>从 resultHandlers 中找到一个结果处理器。</li><li>返回这个结果处理器。</li><li>然后调用它的 handleResult 方法，生成响应信息。</li><li>将响应信息返回，比如直接输出的内容、设置到responseBody中的返回体或者渲染页面等。</li><li>将响应信息返回给 DispatcherHandler 。</li><li>DispatcherHandler 返回响应给用户。</li></ol><h2 id="2-Spring-WebFlux-运行原理"><a href="#2-Spring-WebFlux-运行原理" class="headerlink" title="2.Spring WebFlux 运行原理"></a>2.Spring WebFlux 运行原理</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727231134648.png" alt="image-20200727231134648.png"></p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-12.Spring Boot Mybatis 查询流程及实现原理</title>
      <link href="posts/906fe0fc.html"/>
      <url>posts/906fe0fc.html</url>
      
        <content type="html"><![CDATA[<p>以 UserServiceImpl#findUserByName 为例，分析一下相关源码。</p><h2 id="1-mybatis-的加载"><a href="#1-mybatis-的加载" class="headerlink" title="1.mybatis 的加载"></a>1.mybatis 的加载</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726184744481.png" alt="image-20200726184744481"></p><p>SqlSessionFactoryBean 实现了 InitializingBean 接口，重写了 afterPropertiesSet 方法，在这个方法中对 sqlSessionFactory 进行了初始化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>  <span class="token function">notNull</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token string">"Property 'dataSource' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">notNull</span><span class="token punctuation">(</span>sqlSessionFactoryBuilder<span class="token punctuation">,</span> <span class="token string">"Property 'sqlSessionFactoryBuilder' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">(</span>configuration <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> configLocation <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>configuration <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> configLocation <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">"Property 'configuration' and 'configLocation' can not specified with together"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory <span class="token operator">=</span> <span class="token function">buildSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 buildSqlSessionFactory 中解析 config 和 mapper 配置文件、扫描注解，将所有配置信息保存到 configuration 中。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 解析 mybatis-config.xml</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseConfiguration</span><span class="token punctuation">(</span>XNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// issue #117 read properties first</span>        <span class="token comment" spellcheck="true">// 解析 properties 节点</span>        <span class="token function">propertiesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 settings 节点</span>        Properties settings <span class="token operator">=</span> <span class="token function">settingsAsProperties</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadCustomVfs</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadCustomLogImpl</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 typeAliases 节点</span>        <span class="token function">typeAliasesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeAliases"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 plugins 节点</span>        <span class="token function">pluginElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"plugins"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 objectFactory 节点</span>        <span class="token function">objectFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 objectWrapperFactory 节点</span>        <span class="token function">objectWrapperFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectWrapperFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 reflectorFactory 节点</span>        <span class="token function">reflectorFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"reflectorFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">settingsElement</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// read it after objectFactory and objectWrapperFactory issue #631</span>        <span class="token function">environmentsElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"environments"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">databaseIdProviderElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"databaseIdProvider"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">typeHandlerElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeHandlers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mapperElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"mappers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing SQL Mapper Configuration. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 解析 UserMapper.xml</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configuration<span class="token punctuation">.</span><span class="token function">isResourceLoaded</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解析 mapper 节点</span>        <span class="token function">configurationElement</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"/mapper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">addLoadedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成 MappedStatement 对象，保存到 configuration 中</span>        <span class="token function">bindMapperForNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">parsePendingResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parsePendingCacheRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parsePendingStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-UserMapper-的动态代理"><a href="#2-UserMapper-的动态代理" class="headerlink" title="2.UserMapper 的动态代理"></a>2.UserMapper 的动态代理</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726190240145.png" alt="image-20200726190240145"></p><p>MapperFactoryBean 是 UserMapper 实例化是对应的 beanClass，它继承自 DaoSupport 间接实现了 InitializingBean 接口，同时自己实现了 FactoryBean 接口，在 UserMapper 实例化时，会调用它的 getObject 方法，按照自定义逻辑创建对象。</p><p>在 getObject 中，它要返回一个 Mapper 对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> T <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的 getSqlSession 实际上调用父类 SqlSessionDaoSupport 的方法，返回一个 SqlSessionTemplate。它是 SqlSession 的一个实现类，重写了 SqlSession 中一些操作数据库的常用方法，相当于一个工具类。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getMapper</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getMapper</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> SqlSession sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> mapperRegistry<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>getMapper 是从解析配置文件后保存的 mapperRegistry 中获取一个 mapper 对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getMapper</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> SqlSession sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// MapperProxyFactory 工厂类</span>    <span class="token keyword">final</span> MapperProxyFactory<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperProxyFactory <span class="token operator">=</span> <span class="token punctuation">(</span>MapperProxyFactory<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> knownMappers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mapperProxyFactory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Type "</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">" is not known to the MapperRegistry."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mapperProxyFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Error getting mapper instance. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它通过 MapperProxyFactory 工厂类来创建具体的对象，创建时，最终生成为 Mapper 的代理对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> T <span class="token function">newInstance</span><span class="token punctuation">(</span>MapperProxy<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// jdk 动态代理</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> mapperInterface <span class="token punctuation">}</span><span class="token punctuation">,</span> mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> T <span class="token function">newInstance</span><span class="token punctuation">(</span>SqlSession sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> MapperProxy<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperProxy</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> mapperInterface<span class="token punctuation">,</span> methodCache<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">newInstance</span><span class="token punctuation">(</span>mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-mybatis查询执行流程"><a href="#3-mybatis查询执行流程" class="headerlink" title="3.mybatis查询执行流程"></a>3.mybatis查询执行流程</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726193730269.jpg" alt="image-20200726193730269"></p><p>由于 UserMapper 实际上是一个 MapperProxy 的代理对象，所以 UserServiceImpl 在调用 UserMapper 中方法时，实际调用到 MapperProxy 中的 invoke 方法。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726213127704.png" alt="image-20200726213127704"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 返回一个 PlainMethodInvoker 对象，并调用 invoke 方法</span>            <span class="token keyword">return</span> <span class="token function">cachedInvoker</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> ExceptionUtil<span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>PlainMethodInvoker 是 MapperMethodInvoker 的一个实现，它的 invoke 方法如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> SqlSession sqlSession<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token keyword">return</span> mapperMethod<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终调用 sqlSession.selectOne 方法，这里的 sqlSession 是 SqlSessionTemplate</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">selectOne</span><span class="token punctuation">(</span>String statement<span class="token punctuation">,</span> Object parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionProxy<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而 sqlSessionProxy 是 sqlSession 的一个代理对象，它在 SqlSessionTemplate 构造函数中创建</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">SqlSessionTemplate</span><span class="token punctuation">(</span>SqlSessionFactory sqlSessionFactory<span class="token punctuation">,</span> ExecutorType executorType<span class="token punctuation">,</span>                          PersistenceExceptionTranslator exceptionTranslator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">notNull</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">,</span> <span class="token string">"Property 'sqlSessionFactory' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">notNull</span><span class="token punctuation">(</span>executorType<span class="token punctuation">,</span> <span class="token string">"Property 'executorType' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>executorType <span class="token operator">=</span> executorType<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator <span class="token operator">=</span> exceptionTranslator<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// jdk 代理，代理对象是 SqlSessionInterceptor，被代理对象时 SqlSessionFactory 的实例    </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionProxy <span class="token operator">=</span> <span class="token punctuation">(</span>SqlSession<span class="token punctuation">)</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>SqlSessionFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> SqlSession<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以执行 SqlSessionInterceptor 中的 invoke 方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取 sqlSession，返回一个 DefaultSqlSession</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span>SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">,</span>                                          SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>executorType<span class="token punctuation">,</span> SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用 selectOne 方法</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSqlSessionTransactional</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// force commit even on non-dirty sessions because some databases require</span>            <span class="token comment" spellcheck="true">// a commit/rollback before calling close()</span>            sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Throwable unwrapped <span class="token operator">=</span> <span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> unwrapped <span class="token keyword">instanceof</span> <span class="token class-name">PersistenceException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// release the connection to avoid a deadlock if the translator is no loaded. See issue #22</span>            <span class="token function">closeSqlSession</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSession <span class="token operator">=</span> null<span class="token punctuation">;</span>            Throwable translated <span class="token operator">=</span> SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator                <span class="token punctuation">.</span><span class="token function">translateExceptionIfPossible</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PersistenceException<span class="token punctuation">)</span> unwrapped<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>translated <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                unwrapped <span class="token operator">=</span> translated<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> unwrapped<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSession <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">closeSqlSession</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过反射调用 selectOne 方法，目标对象是 DefaultSqlSession，</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span>String statement<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// MappedStatement 中封装了每个 sql 操作中各项参数</span>        MappedStatement ms <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用 executor 进行查询</span>        <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> <span class="token function">wrapCollection</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> Executor<span class="token punctuation">.</span>NO_RESULT_HANDLER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> ExceptionFactory<span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error querying database.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的 executor 获取 DefaultSqlSession 时创建</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Executor <span class="token function">newExecutor</span><span class="token punctuation">(</span>Transaction transaction<span class="token punctuation">,</span> ExecutorType executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行器类型，默认是 Simple</span>    executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> null <span class="token operator">?</span> defaultExecutorType <span class="token operator">:</span> executorType<span class="token punctuation">;</span>    executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> null <span class="token operator">?</span> ExecutorType<span class="token punctuation">.</span>SIMPLE <span class="token operator">:</span> executorType<span class="token punctuation">;</span>    Executor executor<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ExecutorType<span class="token punctuation">.</span>BATCH <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ExecutorType<span class="token punctuation">.</span>REUSE <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReuseExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个 SimpleExecutor</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// cacheEnabled 默认为 true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用 CachingExecutor 对 SimpleExecutor 进行装饰</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这里使用插件对 executor 进行代理，生成拦截器链。当前没配置插件</span>    executor <span class="token operator">=</span> <span class="token punctuation">(</span>Executor<span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> executor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>获取到的 executor 类型为 CachingExecutor，它装饰了 SimpleExecutor，SimpleExecutor 继承于 BaseExecutor。</p><p>所以执行查询时先调用 CachingExecutor#query，调用 delegate.query 时，又调用 BaseExecutor#query，这个 query 方法为模板 方法，最终调用到 SimpleExecutor#queryFromDatabase。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> CacheKey key<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">;</span>    localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> EXECUTION_PLACEHOLDER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行查询</span>        list <span class="token operator">=</span> <span class="token function">doQuery</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        localCache<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> StatementType<span class="token punctuation">.</span>CALLABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        localOutputParameterCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 doQuery 方法中，调用 handler.query</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">doQuery</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Configuration configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 handler</span>        StatementHandler handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构建 statement，包括获取 connection、设置参数</span>        stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用 handler 查询</span>        <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的 handler 是被 RoutingStatementHandler 装饰的 PreparedStatementHandler</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    PreparedStatement ps <span class="token operator">=</span> <span class="token punctuation">(</span>PreparedStatement<span class="token punctuation">)</span> statement<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行sql</span>    ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理结果集</span>    <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">.</span><span class="token function">handleResultSets</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终调用 PreparedStatement 的 execute 方法完成查询。</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-11.Spring Boot JdbcTemplate 查询流程及原理</title>
      <link href="posts/b8ed8d8.html"/>
      <url>posts/b8ed8d8.html</url>
      
        <content type="html"><![CDATA[<p>JdbcTemplate 是 spring 提供的一个操作数据库的工具类，它是模板方法模式的一种实现。它本身不会注入到 spring 容器中，需要在使用时声明。在创建 JdbcTemplate 对象时一般需要传入一个 datasource，所以在 DataSourceConfig 中同时读二者进行了声明。</p><h2 id="1-JdbcTemplate-查询执行流程"><a href="#1-JdbcTemplate-查询执行流程" class="headerlink" title="1.JdbcTemplate 查询执行流程"></a>1.JdbcTemplate 查询执行流程</h2><p>这里以 UserService#findUserById 为例说明，其他类似</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726163317151.png" alt="image-20200726163317151"></p><p>主要流程还是 jdbc 连接数据的操作，需要用户自己实现结果集映射，重写 RowMapper 中的 mapRow 方法。</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-10.Spring Boot Jpa 查询流程及实现原理</title>
      <link href="posts/4ba425af.html"/>
      <url>posts/4ba425af.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Repository-如何加载的？"><a href="#1-Repository-如何加载的？" class="headerlink" title="1.@Repository 如何加载的？"></a>1.@Repository 如何加载的？</h2><p>SpringBooApplication 应用启动时，会调用 createApplicationContext 方法，这里指定了默认 web 应用的类型是 AnnotationConfigServletWebServerApplicationContext。在 AnnotationConfigServletWebServerApplicationContext 的构造函数中，调用了 AnnotatedBeanDefinitionReader 的构造方法，最终通过 registerAnnotationConfigProcessors 方法将一些和注解扫描相关的 Processor 注册到 context 中，其中有一个类是 ConfigurationClassPostProcessor，这个比较关键。</p><p>在调用 refreshContext 方法时，最终会调用到 AbstractApplicationContext 的 refresh 方法，在这个流程中，invokeBeanFactoryPostProcessors 方法触发了 ConfigurationClassPostProcessor，将注解进行扫描，从而注册到 registry 中。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200722214637396.png" alt="image-20200722214637396"></p><h2 id="2-UserRepository-的动态代理"><a href="#2-UserRepository-的动态代理" class="headerlink" title="2.UserRepository 的动态代理"></a>2.UserRepository 的动态代理</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726121906729.png" alt="image-20200726121906729"></p><p>UserRepository 继承自 JpaRepository，JpaRepository 有一个 FactoryBean 叫 JpaRepositoryFactoryBean，它实现了InitializingBean 接口，在 afterPropertiesSet 中进行了代理操作。同时它也实现了 FactoryBean 接口，提供一个 getObject 方法来获取 bean 的实例。</p><p>在 factory.getRepository 方法中，有一个 getRepositoryInformation 方法，它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> RepositoryInformation <span class="token function">getRepositoryInformation</span><span class="token punctuation">(</span>RepositoryMetadata metadata<span class="token punctuation">,</span>                                                       RepositoryComposition composition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    RepositoryInformationCacheKey cacheKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RepositoryInformationCacheKey</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> composition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> repositoryInformationCache<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> key <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的 baseClass 为 SimpleJpaRepository</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> baseClass <span class="token operator">=</span> repositoryBaseClass<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token function">getRepositoryBaseClass</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRepositoryInformation</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> baseClass<span class="token punctuation">,</span> composition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的 getRepositoryBaseClass 获取一个 baseClass，实际返回一个 SimpleJpaRepository.class，这个 baseClass 在后面作为被代理对象使用。</p><p>在 getTargetRepositoryViaReflection 方法中，根据这个 baseClass，通过反射创建对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>R<span class="token operator">></span> R <span class="token function">getTargetRepositoryViaReflection</span><span class="token punctuation">(</span>RepositoryInformation information<span class="token punctuation">,</span>      Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> constructorArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取到 baseClass，即为 SimpleJpaRepository</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> baseClass <span class="token operator">=</span> information<span class="token punctuation">.</span><span class="token function">getRepositoryBaseClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">getTargetRepositoryViaReflection</span><span class="token punctuation">(</span>baseClass<span class="token punctuation">,</span> constructorArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>R<span class="token operator">></span> R <span class="token function">getTargetRepositoryViaReflection</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> baseClass<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> constructorArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Optional<span class="token operator">&lt;</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> constructor <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">findConstructor</span><span class="token punctuation">(</span>baseClass<span class="token punctuation">,</span> constructorArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过反射创建对象对象</span>        <span class="token keyword">return</span> constructor<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>it <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>R<span class="token punctuation">)</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> constructorArguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>                        <span class="token string">"No suitable constructor found on %s to match the given arguments: %s. Make sure you implement a constructor taking these"</span><span class="token punctuation">,</span>                        baseClass<span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>constructorArguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Object<span class="token operator">:</span><span class="token operator">:</span>getClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>然后将这个对象作为 target 放到 result 中，result 又添加了一些 advisor 和 advice，这些在查询时被构建成链接器链</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取到一个 SimpleJpaRepository 实例</span>Object target <span class="token operator">=</span> <span class="token function">getTargetRepository</span><span class="token punctuation">(</span>information<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create proxy</span>ProxyFactory result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作为目标对象</span>result<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>result<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span>repositoryInterface<span class="token punctuation">,</span> Repository<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> TransactionalProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>MethodInvocationValidator<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>repositoryInterface<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   result<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInvocationValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 添加 advisor</span>result<span class="token punctuation">.</span><span class="token function">addAdvisor</span><span class="token punctuation">(</span>ExposeInvocationInterceptor<span class="token punctuation">.</span>ADVISOR<span class="token punctuation">)</span><span class="token punctuation">;</span>postProcessors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>processor <span class="token operator">-</span><span class="token operator">></span> processor<span class="token punctuation">.</span><span class="token function">postProcess</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> information<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>DefaultMethodInvokingMethodInterceptor<span class="token punctuation">.</span><span class="token function">hasDefaultMethods</span><span class="token punctuation">(</span>repositoryInterface<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   result<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultMethodInvokingMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 添加 advice</span>ProjectionFactory projectionFactory <span class="token operator">=</span> <span class="token function">getProjectionFactory</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>result<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryExecutorMethodInterceptor</span><span class="token punctuation">(</span>information<span class="token punctuation">,</span> projectionFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>composition <span class="token operator">=</span> composition<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>RepositoryFragment<span class="token punctuation">.</span><span class="token function">implemented</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImplementationMethodExecutionInterceptor</span><span class="token punctuation">(</span>composition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取代理对象</span>T repository <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726123554363.png" alt="image-20200726123554363"></p><p>最终生成的代理对象即为如下所示</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726123414685.png" alt="image-20200726123414685"></p><h2 id="3-Jpa-查询流程是怎样的？"><a href="#3-Jpa-查询流程是怎样的？" class="headerlink" title="3.Jpa 查询流程是怎样的？"></a>3.Jpa 查询流程是怎样的？</h2><p>这里以 UserServiceImpl#findUserByName 说一下 jpa 的查询流程</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726135828933.png" alt="image-20200726135828933"></p><p>在 UserServiceImpl 调用了 UserRepository，UserRepository 是一个代理对象，它被 JdkDynamicAopProxy 所代理，所以执行 UserRepository  中方法时，会调用 JdkDynamicAopProxy 中 invoke 方法。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>   Object oldProxy <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   TargetSource targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>targetSource<span class="token punctuation">;</span>   Object target <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>equalsDefined <span class="token operator">&amp;&amp;</span> AopUtils<span class="token punctuation">.</span><span class="token function">isEqualsMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// The target does not implement the equals(Object) method itself.</span>         <span class="token keyword">return</span> <span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>hashCodeDefined <span class="token operator">&amp;&amp;</span> AopUtils<span class="token punctuation">.</span><span class="token function">isHashCodeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// The target does not implement the hashCode() method itself.</span>         <span class="token keyword">return</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DecoratingProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// There is only getDecoratedClass() declared -> dispatch to proxy config.</span>         <span class="token keyword">return</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">ultimateTargetClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>opaque <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>Advised<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Service invocations on ProxyConfig with the proxy config...</span>         <span class="token keyword">return</span> AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Object retVal<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Make invocation available if necessary.</span>         oldProxy <span class="token operator">=</span> AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>         setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// Get as late as possible to minimize the time we "own" the target,</span>      <span class="token comment" spellcheck="true">// in case it comes from a pool.</span>       <span class="token comment" spellcheck="true">// 获取目标对象</span>      target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">?</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Get the interception chain for this method.</span>       <span class="token comment" spellcheck="true">// 构建拦截链</span>      List<span class="token operator">&lt;</span>Object<span class="token operator">></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Check whether we have any advice. If we don't, we can fallback on direct</span>      <span class="token comment" spellcheck="true">// reflective invocation of the target, and avoid creating a MethodInvocation.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// We can skip creating a MethodInvocation: just invoke the target directly</span>         <span class="token comment" spellcheck="true">// Note that the final invoker must be an InvokerInterceptor so we know it does</span>         <span class="token comment" spellcheck="true">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span>         Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         retVal <span class="token operator">=</span> AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// We need to create a method invocation...</span>         MethodInvocation invocation <span class="token operator">=</span>               <span class="token keyword">new</span> <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Proceed to the joinpoint through the interceptor chain.</span>         retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// Massage return value if necessary.</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> retVal <span class="token operator">==</span> target <span class="token operator">&amp;&amp;</span>            returnType <span class="token operator">!=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span>RawTargetAccess<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Special case: it returned "this" and the return type of the method</span>         <span class="token comment" spellcheck="true">// is type-compatible. Note that we can't help if the target sets</span>         <span class="token comment" spellcheck="true">// a reference to itself in another returned object.</span>         retVal <span class="token operator">=</span> proxy<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> returnType <span class="token operator">!=</span> Void<span class="token punctuation">.</span>TYPE <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopInvocationException</span><span class="token punctuation">(</span>               <span class="token string">"Null return value from advice does not match primitive return type for: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Must have come from TargetSource.</span>         targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Restore old proxy.</span>         AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 JdkDynamicAopProxy  中会通过 getInterceptorsAndDynamicInterceptionAdvice 获取到一条链，实际上它是一个拦截器链，它由一下几个部分组成：</p><ul><li>ExposeInvocationInterceptor： 将当前的invocation设置到上下文中</li><li>CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor： 判断是自定义方法还是jpa中方法，如果是自定义方法直接执行下一个拦截器；否则绑定资源再执行下一个拦截器</li><li>PersistenceExceptionTranslationInterceptor： 捕获RuntimeException，出现异常之后拦截器才生效</li><li>TransactionInterceptor： 给后面要执行的拦截器添加后置事务处理</li><li>DefaultMethodInvokingMethodInterceptor： 判断是否 defaultMethod，如果不是走下一个拦截器；否则使用MethodHandle执行</li><li>RepositoryFactorySupport$QueryExecutorMethodInterceptor： 执行自定义查询</li><li>RepositoryFactorySupport$ImplementationMethodExecutionInterceptor：拦截 RepositoryComposition</li><li>PersistenceExceptionTranslationInterceptor：异常处理拦截器</li></ul><p>最终在 QueryExecutorMethodInterceptor 中调用 doInvoke 方法执行自定义查询</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> Object <span class="token function">doInvoke</span><span class="token punctuation">(</span>MethodInvocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Method method <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasQueryFor</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行查询</span>        <span class="token keyword">return</span> queries<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 继续执行下一个拦截器</span>    <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 execute 中，通过调用 AbstractJpaQuery#execute -&gt; AbstractJpaQuery#doExecute -&gt; JpaQueryExecution#execute -&gt; JpaQueryExecution.SingleEntityExecution#doExecute -&gt; AbstractProducedQuery#getSingleResult -&gt; AbstractProducedQuery#list -&gt; AbstractProducedQuery#doList -&gt; org.hibernate.internal.SessionImpl#list，使用 hibernate 完成查询。</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-9.Spring Boot Admin 请求和通信原理</title>
      <link href="posts/79a11b69.html"/>
      <url>posts/79a11b69.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-admin-server-的请求原理"><a href="#1-admin-server-的请求原理" class="headerlink" title="1.admin server 的请求原理"></a>1.admin server 的请求原理</h2><p>Spring Boot Admin 组件中，通过 <code>@EnableAdminServer</code> 标识一个 admin server 组件，并启动。EnableAdminServer 的内容如下.</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AdminServerMarkerConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAdminServer</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>EnableAdminServer 通过 @Import 导入一个 AdminServerMarkerConfiguration 配置类。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminServerMarkerConfiguration</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Marker <span class="token function">adminServerMarker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Marker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Marker</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>AdminServerMarkerConfiguration 中定义了一个静态内部类 Marker，并将它声明为 Bean。那么这个 admin server 又是如何生效的呢？实际上，admin server 有一个自动装配类 AdminServerAutoConfiguration，这个类的内容如下。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>AdminServerMarkerConfiguration<span class="token punctuation">.</span>Marker<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>AdminServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ImportAutoConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">{</span> AdminServerInstanceWebClientConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> AdminServerWebConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> WebClientAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminServerAutoConfiguration</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> AdminServerProperties adminServerProperties<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">AdminServerAutoConfiguration</span><span class="token punctuation">(</span>AdminServerProperties adminServerProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties <span class="token operator">=</span> adminServerProperties<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> InstanceRegistry <span class="token function">instanceRegistry</span><span class="token punctuation">(</span>InstanceRepository instanceRepository<span class="token punctuation">,</span>         InstanceIdGenerator instanceIdGenerator<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InstanceRegistry</span><span class="token punctuation">(</span>instanceRepository<span class="token punctuation">,</span> instanceIdGenerator<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> ApplicationRegistry <span class="token function">applicationRegistry</span><span class="token punctuation">(</span>InstanceRegistry instanceRegistry<span class="token punctuation">,</span>         InstanceEventPublisher instanceEventPublisher<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationRegistry</span><span class="token punctuation">(</span>instanceRegistry<span class="token punctuation">,</span> instanceEventPublisher<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> InstanceIdGenerator <span class="token function">instanceIdGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashingInstanceUrlIdGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> StatusUpdater <span class="token function">statusUpdater</span><span class="token punctuation">(</span>InstanceRepository instanceRepository<span class="token punctuation">,</span>         InstanceWebClient<span class="token punctuation">.</span>Builder instanceWebClientBulder<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StatusUpdater</span><span class="token punctuation">(</span>instanceRepository<span class="token punctuation">,</span> instanceWebClientBulder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">"stop"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> StatusUpdateTrigger <span class="token function">statusUpdateTrigger</span><span class="token punctuation">(</span>StatusUpdater statusUpdater<span class="token punctuation">,</span> Publisher<span class="token operator">&lt;</span>InstanceEvent<span class="token operator">></span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>      StatusUpdateTrigger trigger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatusUpdateTrigger</span><span class="token punctuation">(</span>statusUpdater<span class="token punctuation">,</span> events<span class="token punctuation">)</span><span class="token punctuation">;</span>      trigger<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      trigger<span class="token punctuation">.</span><span class="token function">setLifetime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> trigger<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> EndpointDetector <span class="token function">endpointDetector</span><span class="token punctuation">(</span>InstanceRepository instanceRepository<span class="token punctuation">,</span>         InstanceWebClient<span class="token punctuation">.</span>Builder instanceWebClientBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>      InstanceWebClient instanceWebClient <span class="token operator">=</span> instanceWebClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ChainingStrategy strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainingStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryIndexEndpointStrategy</span><span class="token punctuation">(</span>instanceWebClient<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ProbeEndpointsStrategy</span><span class="token punctuation">(</span>instanceWebClient<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getProbedEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EndpointDetector</span><span class="token punctuation">(</span>instanceRepository<span class="token punctuation">,</span> strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">"stop"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> EndpointDetectionTrigger <span class="token function">endpointDetectionTrigger</span><span class="token punctuation">(</span>EndpointDetector endpointDetector<span class="token punctuation">,</span>         Publisher<span class="token operator">&lt;</span>InstanceEvent<span class="token operator">></span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EndpointDetectionTrigger</span><span class="token punctuation">(</span>endpointDetector<span class="token punctuation">,</span> events<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> InfoUpdater <span class="token function">infoUpdater</span><span class="token punctuation">(</span>InstanceRepository instanceRepository<span class="token punctuation">,</span>         InstanceWebClient<span class="token punctuation">.</span>Builder instanceWebClientBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InfoUpdater</span><span class="token punctuation">(</span>instanceRepository<span class="token punctuation">,</span> instanceWebClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">"stop"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> InfoUpdateTrigger <span class="token function">infoUpdateTrigger</span><span class="token punctuation">(</span>InfoUpdater infoUpdater<span class="token punctuation">,</span> Publisher<span class="token operator">&lt;</span>InstanceEvent<span class="token operator">></span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>      InfoUpdateTrigger trigger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfoUpdateTrigger</span><span class="token punctuation">(</span>infoUpdater<span class="token punctuation">,</span> events<span class="token punctuation">)</span><span class="token punctuation">;</span>      trigger<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInfoInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      trigger<span class="token punctuation">.</span><span class="token function">setLifetime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInfoLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> trigger<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>InstanceEventStore<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> InMemoryEventStore <span class="token function">eventStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryEventStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">"stop"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>InstanceRepository<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> SnapshottingInstanceRepository <span class="token function">instanceRepository</span><span class="token punctuation">(</span>InstanceEventStore eventStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SnapshottingInstanceRepository</span><span class="token punctuation">(</span>eventStore<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>AdminServerAutoConfiguration 通过 @ImportAutoConfiguration 导入了 AdminServerWebConfiguration 和 </p><p>AdminServerInstanceWebClientConfiguration。查看 AdminServerWebConfiguration 内容</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminServerWebConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AdminServerProperties adminServerProperties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AdminServerWebConfiguration</span><span class="token punctuation">(</span>AdminServerProperties adminServerProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties <span class="token operator">=</span> adminServerProperties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SimpleModule <span class="token function">adminJacksonModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleModule module <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        module<span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span>Registration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RegistrationDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        module<span class="token punctuation">.</span><span class="token function">setSerializerModifier</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegistrationBeanSerializerModifier</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">SanitizingMapSerializer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getMetadataKeysToSanitize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> module<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> InstancesController <span class="token function">instancesController</span><span class="token punctuation">(</span>InstanceRegistry instanceRegistry<span class="token punctuation">,</span> InstanceEventStore eventStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InstancesController</span><span class="token punctuation">(</span>instanceRegistry<span class="token punctuation">,</span> eventStore<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> ApplicationsController <span class="token function">applicationsController</span><span class="token punctuation">(</span>ApplicationRegistry applicationRegistry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationsController</span><span class="token punctuation">(</span>applicationRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// reactive web configuration ...</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> ConditionalOnWebApplication<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span>    <span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span>WebMvcAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServletRestApiConfirguation</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> AdminServerProperties adminServerProperties<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ServletRestApiConfirguation</span><span class="token punctuation">(</span>AdminServerProperties adminServerProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties <span class="token operator">=</span> adminServerProperties<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token keyword">public</span> de<span class="token punctuation">.</span>codecentric<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>server<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>InstancesProxyController <span class="token function">instancesProxyController</span><span class="token punctuation">(</span>            InstanceRegistry instanceRegistry<span class="token punctuation">,</span> InstanceWebClient<span class="token punctuation">.</span>Builder instanceWebClientBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">de<span class="token punctuation">.</span>codecentric<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>server<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>InstancesProxyController</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getInstanceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIgnoredHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instanceRegistry<span class="token punctuation">,</span>                instanceWebClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMappingHandlerMapping <span class="token function">adminHandlerMapping</span><span class="token punctuation">(</span>            ContentNegotiationManager contentNegotiationManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>            org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMappingHandlerMapping mapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">de<span class="token punctuation">.</span>codecentric<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>server<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>AdminControllerHandlerMapping</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mapping<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mapping<span class="token punctuation">.</span><span class="token function">setContentNegotiationManager</span><span class="token punctuation">(</span>contentNegotiationManager<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> mapping<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>默认 servlet 情况下，会使用 ServletRestApiConfirguation  配置，生成 web mvc 的服务。在 ServletRestApiConfirguation 声明了 AdminControllerHandlerMapping 的 RequestMappingHandlerMapping 实例对象。</p><p>这个 AdminControllerHandlerMapping 用来处理被 @AdminController 修饰的类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isHandler</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> AnnotatedElementUtils<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>beanType<span class="token punctuation">,</span> AdminController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>spring-boot-admin-server.jar 中提供了一些被 @AdminController 修饰的类，比如：ApplicationsController、NotificationFilterController、InstancesController、InstancesProxyController 等。ApplicationsController 内容如下。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AdminController</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationsController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ApplicationsController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ServerSentEvent<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> PING <span class="token operator">=</span> ServerSentEvent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Flux<span class="token operator">&lt;</span>ServerSentEvent<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> PING_FLUX <span class="token operator">=</span> Flux<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span>ZERO<span class="token punctuation">,</span> Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span>10L<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tick<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> PING<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ApplicationRegistry registry<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ApplicationsController</span><span class="token punctuation">(</span>ApplicationRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>registry <span class="token operator">=</span> registry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/applications"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> MediaType<span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span>    <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>Application<span class="token operator">></span> <span class="token function">applications</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> registry<span class="token punctuation">.</span><span class="token function">getApplications</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/applications/{name}"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> MediaType<span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ResponseEntity<span class="token operator">&lt;</span>Application<span class="token operator">>></span> <span class="token function">application</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> registry<span class="token punctuation">.</span><span class="token function">getApplication</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ResponseEntity<span class="token operator">:</span><span class="token operator">:</span>ok<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">defaultIfEmpty</span><span class="token punctuation">(</span>ResponseEntity<span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/applications"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> MediaType<span class="token punctuation">.</span>TEXT_EVENT_STREAM_VALUE<span class="token punctuation">)</span>    <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>ServerSentEvent<span class="token operator">&lt;</span>Application<span class="token operator">>></span> <span class="token function">applicationsStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> registry<span class="token punctuation">.</span><span class="token function">getApplicationStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ServerSentEvent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">mergeWith</span><span class="token punctuation">(</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/applications/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ResponseEntity<span class="token operator">&lt;</span>Void<span class="token operator">>></span> <span class="token function">unregister</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Unregister application with name '{}'"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registry<span class="token punctuation">.</span><span class="token function">deregister</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>deregistered<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>deregistered<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                           <span class="token operator">?</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">noContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Flux<span class="token operator">&lt;</span>ServerSentEvent<span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Flux<span class="token operator">&lt;</span>ServerSentEvent<span class="token operator">&lt;</span>T<span class="token operator">>></span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Flux<span class="token punctuation">)</span> PING_FLUX<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中 applications() 方法刚好处理 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 跳转后的 <a href="http://localhost:8080/applications" target="_blank" rel="noopener">http://localhost:8080/applications</a> 请求。</p><h2 id="2-server-和-client-之间通信"><a href="#2-server-和-client-之间通信" class="headerlink" title="2.server 和 client 之间通信"></a>2.server 和 client 之间通信</h2><p>在 spring-boot-admin-server 中有自动装配类 AdminServerAutoConfiguration，相应地，在 spring-boot-admin-client 也有一个自动装配类。它是 SpringBootAdminClientAutoConfiguration。</p><p>这个 SpringBootAdminClientAutoConfiguration 声明了如下主要类型</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>SpringBootAdminClientEnabledCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> WebEndpointAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> RestTemplateAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebClientAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ClientProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> InstanceProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ManagementServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootAdminClientAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> ApplicationRegistrator <span class="token function">registrator</span><span class="token punctuation">(</span>RegistrationClient registrationClient<span class="token punctuation">,</span> ClientProperties client<span class="token punctuation">,</span> ApplicationFactory applicationFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationRegistrator</span><span class="token punctuation">(</span>applicationFactory<span class="token punctuation">,</span> registrationClient<span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getAdminUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">isRegisterOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> RegistrationApplicationListener <span class="token function">registrationListener</span><span class="token punctuation">(</span>ClientProperties client<span class="token punctuation">,</span>                                                                ApplicationRegistrator registrator<span class="token punctuation">,</span> Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RegistrationApplicationListener listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegistrationApplicationListener</span><span class="token punctuation">(</span>registrator<span class="token punctuation">)</span><span class="token punctuation">;</span>        listener<span class="token punctuation">.</span><span class="token function">setAutoRegister</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">isAutoRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listener<span class="token punctuation">.</span><span class="token function">setAutoDeregister</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">isAutoDeregistration</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listener<span class="token punctuation">.</span><span class="token function">setRegisterPeriod</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> listener<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> StartupDateMetadataContributor <span class="token function">startupDateMetadataContributor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StartupDateMetadataContributor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span>    <span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span>DispatcherServletAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServletConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token keyword">public</span> ApplicationFactory <span class="token function">applicationFactory</span><span class="token punctuation">(</span>InstanceProperties instance<span class="token punctuation">,</span> ManagementServerProperties management<span class="token punctuation">,</span> ServerProperties server<span class="token punctuation">,</span> ServletContext servletContext<span class="token punctuation">,</span> PathMappedEndpoints pathMappedEndpoints<span class="token punctuation">,</span> WebEndpointProperties webEndpoint<span class="token punctuation">,</span> ObjectProvider<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>MetadataContributor<span class="token operator">>></span> metadataContributors<span class="token punctuation">,</span> DispatcherServletPath dispatcherServletPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletApplicationFactory</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> management<span class="token punctuation">,</span> server<span class="token punctuation">,</span> servletContext<span class="token punctuation">,</span> pathMappedEndpoints<span class="token punctuation">,</span> webEndpoint<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CompositeMetadataContributor</span><span class="token punctuation">(</span>                metadataContributors<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span>Collections<span class="token operator">:</span><span class="token operator">:</span>emptyList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dispatcherServletPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>RestTemplateBuilder<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BlockingRegistrationClientConfig</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token keyword">public</span> BlockingRegistrationClient <span class="token function">registrationClient</span><span class="token punctuation">(</span>ClientProperties client<span class="token punctuation">)</span> <span class="token punctuation">{</span>            RestTemplateBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplateBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getConnectTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getReadTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> client<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                builder <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">basicAuthentication</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BlockingRegistrationClient</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>ApplicationRegistrator 用来注册到 admin-server，其中定义了 register 和 deregister 方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Registers the client application at spring-boot-admin-server */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationRegistrator</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ApplicationRegistrator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> ConcurrentHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> LongAdder<span class="token operator">></span> attempts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicReference<span class="token operator">&lt;</span>String<span class="token operator">></span> registeredId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> ApplicationFactory applicationFactory<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> adminUrls<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> registerOnce<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> RegistrationClient registrationClient<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">ApplicationRegistrator</span><span class="token punctuation">(</span>ApplicationFactory applicationFactory<span class="token punctuation">,</span> RegistrationClient registrationClient<span class="token punctuation">,</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> adminUrls<span class="token punctuation">,</span> <span class="token keyword">boolean</span> registerOnce<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>applicationFactory <span class="token operator">=</span> applicationFactory<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls <span class="token operator">=</span> adminUrls<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>registerOnce <span class="token operator">=</span> registerOnce<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>registrationClient <span class="token operator">=</span> registrationClient<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * Registers the client application at spring-boot-admin-server.    * @return true if successful registration on at least one admin server    */</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Application application <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationFactory<span class="token punctuation">.</span><span class="token function">createApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> isRegistrationSuccessful <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String adminUrl <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">)</span> <span class="token punctuation">{</span>         LongAdder attempt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attempts<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">LongAdder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">boolean</span> successful <span class="token operator">=</span> <span class="token function">register</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> adminUrl<span class="token punctuation">,</span> attempt<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>successful<span class="token punctuation">)</span> <span class="token punctuation">{</span>            attempt<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            attempt<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isRegistrationSuccessful <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerOnce<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> isRegistrationSuccessful<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span>Application application<span class="token punctuation">,</span> String adminUrl<span class="token punctuation">,</span> <span class="token keyword">boolean</span> firstAttempt<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         String id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registrationClient<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> application<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Application registered itself as {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Application refreshed itself as {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>firstAttempt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>                  <span class="token string">"Failed to register application as {} at spring-boot-admin ({}): {}. Further attempts are logged on DEBUG level"</span><span class="token punctuation">,</span>                  application<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Failed to register application as {} at spring-boot-admin ({}): {}"</span><span class="token punctuation">,</span> application<span class="token punctuation">,</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      String id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String adminUrl <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>registrationClient<span class="token punctuation">.</span><span class="token function">deregister</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerOnce<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Failed to deregister application (id={}) at spring-boot-admin ({}): {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> adminUrl<span class="token punctuation">,</span>                  ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * @return the id of this client as given by the admin server. Returns null if the    * client has not registered against the admin server yet.    */</span>   <span class="token keyword">public</span> String <span class="token function">getRegisteredId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>RegistrationApplicationListener 则是用来触发开始注册和停止注册任务，它实现了 InitializingBean 和 DisposableBean 接口，分别定定义了初始化完成后和销毁前的处理方式。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> ThreadPoolTaskScheduler taskScheduler<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">RegistrationApplicationListener</span><span class="token punctuation">(</span>ApplicationRegistrator registrator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>registrator<span class="token punctuation">,</span> <span class="token function">registrationTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明线程池</span><span class="token keyword">private</span> <span class="token keyword">static</span> ThreadPoolTaskScheduler <span class="token function">registrationTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ThreadPoolTaskScheduler taskScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    taskScheduler<span class="token punctuation">.</span><span class="token function">setPoolSize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    taskScheduler<span class="token punctuation">.</span><span class="token function">setRemoveOnCancelPolicy</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    taskScheduler<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"registrationTask"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> taskScheduler<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RegistrationApplicationListener</span><span class="token punctuation">(</span>ApplicationRegistrator registrator<span class="token punctuation">,</span> ThreadPoolTaskScheduler taskScheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>registrator <span class="token operator">=</span> registrator<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>taskScheduler <span class="token operator">=</span> taskScheduler<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现 InitializingBean 中 afterPropertiesSet 方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    taskScheduler<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现 DisposableBean 中 destroy 方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    taskScheduler<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>同时，它还接收 ApplicationReadyEvent 事件和 ContextClosedEvent 事件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 接收 ApplicationReadyEvent 事件</span><span class="token annotation punctuation">@EventListener</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>LOWEST_PRECEDENCE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationReady</span><span class="token punctuation">(</span>ApplicationReadyEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autoRegister<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 启动开始注册任务</span>        <span class="token function">startRegisterTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 接收 ContextClosedEvent 事件</span><span class="token annotation punctuation">@EventListener</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>LOWEST_PRECEDENCE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClosedContext</span><span class="token punctuation">(</span>ContextClosedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null        <span class="token operator">||</span> <span class="token string">"bootstrap"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 停止注册任务</span>        <span class="token function">stopRegisterTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>autoDeregister<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 删除注册内容</span>            registrator<span class="token punctuation">.</span><span class="token function">deregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 启动注册任务</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startRegisterTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scheduledTask <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>scheduledTask<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开启定时任务，默认执行周期 10s，定时任务调用 registrator::register 方法</span>    scheduledTask <span class="token operator">=</span> taskScheduler<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>registrator<span class="token operator">:</span><span class="token operator">:</span>register<span class="token punctuation">,</span> registerPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Scheduled registration task for every {}ms"</span><span class="token punctuation">,</span> registerPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 停止注册任务</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stopRegisterTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scheduledTask <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>scheduledTask<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取消任务</span>        scheduledTask<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Canceled registration task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中 registrator.register 实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Application application <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationFactory<span class="token punctuation">.</span><span class="token function">createApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isRegistrationSuccessful <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String adminUrl <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LongAdder attempt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attempts<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">LongAdder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册</span>        <span class="token keyword">boolean</span> successful <span class="token operator">=</span> <span class="token function">register</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> adminUrl<span class="token punctuation">,</span> attempt<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>successful<span class="token punctuation">)</span> <span class="token punctuation">{</span>            attempt<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            attempt<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isRegistrationSuccessful <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerOnce<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> isRegistrationSuccessful<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span>Application application<span class="token punctuation">,</span> String adminUrl<span class="token punctuation">,</span> <span class="token keyword">boolean</span> firstAttempt<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用 registrationClient 的 register 方法</span>        String id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registrationClient<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> application<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Application registered itself as {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Application refreshed itself as {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstAttempt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>                <span class="token string">"Failed to register application as {} at spring-boot-admin ({}): {}. Further attempts are logged on DEBUG level"</span><span class="token punctuation">,</span>                application<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Failed to register application as {} at spring-boot-admin ({}): {}"</span><span class="token punctuation">,</span> application<span class="token punctuation">,</span>                         <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终调用 registrationClient.register 方法，它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingRegistrationClient</span> <span class="token keyword">implements</span> <span class="token class-name">RegistrationClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ParameterizedTypeReference<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> RESPONSE_TYPE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterizedTypeReference</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BlockingRegistrationClient</span><span class="token punctuation">(</span>RestTemplate restTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> restTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 向指定的 adminUrl 方式 Post 请求</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">register</span><span class="token punctuation">(</span>String adminUrl<span class="token punctuation">,</span> Application application<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResponseEntity<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> response <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createRequestHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RESPONSE_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> HttpHeaders <span class="token function">createRequestHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HttpHeaders headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">setAccept</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> HttpHeaders<span class="token punctuation">.</span><span class="token function">readOnlyHttpHeaders</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>registrator.deregister</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String adminUrl <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用 registrationClient 的 deregister 方法</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>registrationClient<span class="token punctuation">.</span><span class="token function">deregister</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerOnce<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Failed to deregister application (id={}) at spring-boot-admin ({}): {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> adminUrl<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终调用 registrationClient.deregister 方法，它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deregister</span><span class="token punctuation">(</span>String adminUrl<span class="token punctuation">,</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用 Delete 方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>adminUrl <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-8.Spring Boot WebEndpoint 请求原理</title>
      <link href="posts/740f06b3.html"/>
      <url>posts/740f06b3.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-web-endpoint-请求原理"><a href="#1-web-endpoint-请求原理" class="headerlink" title="1.web endpoint 请求原理"></a>1.web endpoint 请求原理</h2><p>spring boot actuator 中有很多 endpoints，这里以 web endpoints 来简单分析一下原理。</p><p>spring-boot-starter-actuator.jar 依赖于 spring-boot-starter-actuator-autoconfigure.jar，spring-boot-starter-actuator-autoconfigure.jar 的结构如下，其中有用于自动装配的 spring.factories、源码、元数据的json信息以及元数据的配置信息。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719182234844.png" alt="image-20200719182234844"></p><p>在 spring.factories 中配置了很多的自动装配类，其中有一个叫 WebMvcEndpointManagementContextConfiguration，这个类中声明了 WebMvcEndpointHandlerMapping 的Bean。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ManagementContextConfiguration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebEndpointsSupplier<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>CorsEndpointProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcEndpointManagementContextConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> WebMvcEndpointHandlerMapping <span class="token function">webEndpointServletHandlerMapping</span><span class="token punctuation">(</span>WebEndpointsSupplier webEndpointsSupplier<span class="token punctuation">,</span>                                                                         ServletEndpointsSupplier servletEndpointsSupplier<span class="token punctuation">,</span> ControllerEndpointsSupplier controllerEndpointsSupplier<span class="token punctuation">,</span>                                                                         EndpointMediaTypes endpointMediaTypes<span class="token punctuation">,</span> CorsEndpointProperties corsProperties<span class="token punctuation">,</span>                                                                         WebEndpointProperties webEndpointProperties<span class="token punctuation">,</span> Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>ExposableEndpoint<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> allEndpoints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>ExposableWebEndpoint<span class="token operator">></span> webEndpoints <span class="token operator">=</span> webEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allEndpoints<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>webEndpoints<span class="token punctuation">)</span><span class="token punctuation">;</span>        allEndpoints<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>servletEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allEndpoints<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>controllerEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String basePath <span class="token operator">=</span> webEndpointProperties<span class="token punctuation">.</span><span class="token function">getBasePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EndpointMapping endpointMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EndpointMapping</span><span class="token punctuation">(</span>basePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> shouldRegisterLinksMapping <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>basePath<span class="token punctuation">)</span>            <span class="token operator">||</span> ManagementPortType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ManagementPortType<span class="token punctuation">.</span>DIFFERENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcEndpointHandlerMapping</span><span class="token punctuation">(</span>endpointMapping<span class="token punctuation">,</span> webEndpoints<span class="token punctuation">,</span> endpointMediaTypes<span class="token punctuation">,</span> corsProperties<span class="token punctuation">.</span><span class="token function">toCorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EndpointLinksResolver</span><span class="token punctuation">(</span>allEndpoints<span class="token punctuation">,</span> basePath<span class="token punctuation">)</span><span class="token punctuation">,</span> shouldRegisterLinksMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> ControllerEndpointHandlerMapping <span class="token function">controllerEndpointHandlerMapping</span><span class="token punctuation">(</span>        ControllerEndpointsSupplier controllerEndpointsSupplier<span class="token punctuation">,</span> CorsEndpointProperties corsProperties<span class="token punctuation">,</span>        WebEndpointProperties webEndpointProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        EndpointMapping endpointMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EndpointMapping</span><span class="token punctuation">(</span>webEndpointProperties<span class="token punctuation">.</span><span class="token function">getBasePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ControllerEndpointHandlerMapping</span><span class="token punctuation">(</span>endpointMapping<span class="token punctuation">,</span> controllerEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                    corsProperties<span class="token punctuation">.</span><span class="token function">toCorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>WebMvcEndpointHandlerMapping 的类图如下</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719183030011.png" alt="image-20200719183030011"></p><p>它有一个内部类 WebMvcLinksHandler，实现了 links 方法，通过 request 请求中的 url 找到对应的 handler，这里的 linksResolver 是一个 EndpointLinksResolver，他里面包含所有已经开启的 endpoint 信息</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcEndpointHandlerMapping</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractWebMvcEndpointHandlerMapping</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> EndpointLinksResolver linksResolver<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Creates a new {@code WebMvcEndpointHandlerMapping} instance that provides mappings     * for the given endpoints.     * @param endpointMapping the base mapping for all endpoints     * @param endpoints the web endpoints     * @param endpointMediaTypes media types consumed and produced by the endpoints     * @param corsConfiguration the CORS configuration for the endpoints or {@code null}     * @param linksResolver resolver for determining links to available endpoints     * @param shouldRegisterLinksMapping whether the links endpoint should be registered     */</span>    <span class="token keyword">public</span> <span class="token function">WebMvcEndpointHandlerMapping</span><span class="token punctuation">(</span>EndpointMapping endpointMapping<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>ExposableWebEndpoint<span class="token operator">></span> endpoints<span class="token punctuation">,</span>                                        EndpointMediaTypes endpointMediaTypes<span class="token punctuation">,</span> CorsConfiguration corsConfiguration<span class="token punctuation">,</span>                                        EndpointLinksResolver linksResolver<span class="token punctuation">,</span> <span class="token keyword">boolean</span> shouldRegisterLinksMapping<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>endpointMapping<span class="token punctuation">,</span> endpoints<span class="token punctuation">,</span> endpointMediaTypes<span class="token punctuation">,</span> corsConfiguration<span class="token punctuation">,</span> shouldRegisterLinksMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>linksResolver <span class="token operator">=</span> linksResolver<span class="token punctuation">;</span>        <span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> LinksHandler <span class="token function">getLinksHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcLinksHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Handler for root endpoint providing links.     */</span>    <span class="token keyword">class</span> <span class="token class-name">WebMvcLinksHandler</span> <span class="token keyword">implements</span> <span class="token class-name">LinksHandler</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token annotation punctuation">@ResponseBody</span>        <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Link<span class="token operator">>></span> <span class="token function">links</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">"_links"</span><span class="token punctuation">,</span>                                            WebMvcEndpointHandlerMapping<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>linksResolver<span class="token punctuation">.</span><span class="token function">resolveLinks</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Actuator root web endpoint"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>WebMvcEndpointHandlerMapping 继承自 AbstractWebMvcEndpointHandlerMapping，AbstractWebMvcEndpointHandlerMapping 继承自 RequestMappingInfoHandlerMapping，最终继承自 AbstractHandlerMethodMapping。AbstractHandlerMethodMapping 实现了 InitializingBean 接口，重写了 afterPropertiesSet()，所以在初始化的时候会调用该方法。该方法实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">initHandlerMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> 在 AbstractWebMvcEndpointHandlerMapping 中进行了重写</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initHandlerMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>ExposableWebEndpoint endpoint <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>endpoints<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>WebOperation operation <span class="token operator">:</span> endpoint<span class="token punctuation">.</span><span class="token function">getOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">registerMappingForOperation</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> operation<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shouldRegisterLinksMapping<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">registerLinksMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 registerLinksMapping 方法中将映射关系保存起来</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerLinksMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    PatternsRequestCondition patterns <span class="token operator">=</span> <span class="token function">patternsRequestConditionForPattern</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RequestMethodsRequestCondition methods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestMethodsRequestCondition</span><span class="token punctuation">(</span>RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">;</span>    ProducesRequestCondition produces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducesRequestCondition</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>endpointMediaTypes<span class="token punctuation">.</span><span class="token function">getProduced</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                     <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>endpointMediaTypes<span class="token punctuation">.</span><span class="token function">getProduced</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RequestMappingInfo mapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestMappingInfo</span><span class="token punctuation">(</span>patterns<span class="token punctuation">,</span> methods<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> produces<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 handler</span>    LinksHandler linksHandler <span class="token operator">=</span> <span class="token function">getLinksHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册映射关系</span>    <span class="token function">registerMapping</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> linksHandler<span class="token punctuation">,</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">findMethod</span><span class="token punctuation">(</span>linksHandler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"links"</span><span class="token punctuation">,</span>                                                                      HttpServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpServletResponse<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的 getLinksHandler 获取的 handler 即为上面提到的 WebMvcLinksHandler，最终调用 registerMapping 方法保存到 mappingRegistry 中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerMapping</span><span class="token punctuation">(</span>T mapping<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Register \""</span> <span class="token operator">+</span> mapping <span class="token operator">+</span> <span class="token string">"\" to "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">toGenericString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>mappingRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719184717237.png" alt="image-20200719184717237"></p><p>在请求 <a href="http://localhost:8080/actuator" target="_blank" rel="noopener">http://localhost:8080/actuator</a> 时，通过 DispatcherServlet 获取到一个 HandlerMapping，即为 AbstractWebMvcEndpointHandlerMapping，然后再调用  invokeHandlerMethod 方法时，最终调用到 </p><p>WebMvcEndpointHandlerMapping.WebMvcLinksHandler#links 方法，它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Link<span class="token operator">>></span> <span class="token function">links</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">"_links"</span><span class="token punctuation">,</span>         WebMvcEndpointHandlerMapping<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>linksResolver<span class="token punctuation">.</span><span class="token function">resolveLinks</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终返回 endpoints 对应的映射关系</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719185348091.png" alt="image-20200719185348091"></p><p>根据这里的返回结果，会调用到 HandlerMethodReturnValueHandlerComposite#handleReturnValue ，选择一个具体的 Handler 实现为 RequestResponseBodyMethodProcessor，最终调用 它的 handleReturnValue 方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleReturnValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Object returnValue<span class="token punctuation">,</span> MethodParameter returnType<span class="token punctuation">,</span> ModelAndViewContainer mavContainer<span class="token punctuation">,</span> NativeWebRequest webRequest<span class="token punctuation">)</span>    <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> HttpMediaTypeNotAcceptableException<span class="token punctuation">,</span> HttpMessageNotWritableException <span class="token punctuation">{</span>    mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServletServerHttpRequest inputMessage <span class="token operator">=</span> <span class="token function">createInputMessage</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    ServletServerHttpResponse outputMessage <span class="token operator">=</span> <span class="token function">createOutputMessage</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Try even with null return value. ResponseBodyAdvice could get involved.</span>    <span class="token function">writeWithMessageConverters</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">,</span> returnType<span class="token punctuation">,</span> inputMessage<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终选择合适的 MessageConverter 将返回值进行输出</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">writeWithMessageConverters</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> T value<span class="token punctuation">,</span> MethodParameter returnType<span class="token punctuation">,</span> ServletServerHttpRequest inputMessage<span class="token punctuation">,</span> ServletServerHttpResponse outputMessage<span class="token punctuation">)</span>      <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> HttpMediaTypeNotAcceptableException<span class="token punctuation">,</span> HttpMessageNotWritableException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// ..</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedMediaType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      selectedMediaType <span class="token operator">=</span> selectedMediaType<span class="token punctuation">.</span><span class="token function">removeQualityValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> converter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span> <span class="token punctuation">{</span>         GenericHttpMessageConverter genericConverter <span class="token operator">=</span> <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">GenericHttpMessageConverter</span> <span class="token operator">?</span>               <span class="token punctuation">(</span>GenericHttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> converter <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> null <span class="token operator">?</span>               <span class="token punctuation">(</span><span class="token punctuation">(</span>GenericHttpMessageConverter<span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> valueType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">)</span> <span class="token operator">:</span>               converter<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span>valueType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> returnType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span>                  <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">)</span> converter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  inputMessage<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               Object theBody <span class="token operator">=</span> body<span class="token punctuation">;</span>               LogFormatUtils<span class="token punctuation">.</span><span class="token function">traceDebug</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> traceOn <span class="token operator">-</span><span class="token operator">></span>                     <span class="token string">"Writing ["</span> <span class="token operator">+</span> LogFormatUtils<span class="token punctuation">.</span><span class="token function">formatValue</span><span class="token punctuation">(</span>theBody<span class="token punctuation">,</span> <span class="token operator">!</span>traceOn<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">addContentDispositionHeader</span><span class="token punctuation">(</span>inputMessage<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  genericConverter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpMessageConverter<span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Nothing to write: null body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-7.Spring Boot Email 是如何装配的</title>
      <link href="posts/16cb54e2.html"/>
      <url>posts/16cb54e2.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Email-自动装配"><a href="#1-Email-自动装配" class="headerlink" title="1.Email 自动装配"></a>1.Email 自动装配</h2><p>JavaMailSender 仅有一个实现 JavaMailSenderImpl</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719163739485.png" alt="image-20200719163739485"></p><p>在 Mail 的自动装配类 MailSenderAutoConfiguration 中有如下定义</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> MimeMessage<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MimeType<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MailSender<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>MailSender<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>MailSenderCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>MailProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> MailSenderJndiConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MailSenderPropertiesConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailSenderAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MailSenderCondition</span> <span class="token keyword">extends</span> <span class="token class-name">AnyNestedCondition</span> <span class="token punctuation">{</span>        <span class="token function">MailSenderCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>ConfigurationPhase<span class="token punctuation">.</span>PARSE_CONFIGURATION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mail"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"host"</span><span class="token punctuation">)</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HostProperty</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mail"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"jndi-name"</span><span class="token punctuation">)</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JndiNameProperty</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MailSenderAutoConfiguration 通过 @Import 对 MailSenderJndiConfiguration 和 MailSenderPropertiesConfiguration 进行导入，这两个类中声明了 JavaMailSenderImpl 对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>Session<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mail"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"jndi-name"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnJndi</span><span class="token keyword">class</span> <span class="token class-name">MailSenderJndiConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> MailProperties properties<span class="token punctuation">;</span>    <span class="token function">MailSenderJndiConfiguration</span><span class="token punctuation">(</span>MailProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    JavaMailSenderImpl <span class="token function">mailSender</span><span class="token punctuation">(</span>Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JavaMailSenderImpl sender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaMailSenderImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sender<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getDefaultEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sender<span class="token punctuation">.</span><span class="token function">setSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    Session <span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String jndiName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getJndiName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> JndiLocatorDelegate<span class="token punctuation">.</span><span class="token function">createDefaultResourceRefLocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>jndiName<span class="token punctuation">,</span> Session<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NamingException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Unable to find Session in JNDI location %s"</span><span class="token punctuation">,</span> jndiName<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-6.Spring Boot Banner 是如何打印的</title>
      <link href="posts/c0ad46e7.html"/>
      <url>posts/c0ad46e7.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-banner-是如何打印的？"><a href="#1-banner-是如何打印的？" class="headerlink" title="1.banner 是如何打印的？"></a>1.banner 是如何打印的？</h2><p>banner 是如何打印的呢？</p><p>在 spring boot 项目启动时，调用 run 方法，最终会调用到 printBanner 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ApplicationArguments applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableEnvironment environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印 banner</span>        Banner printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Banner <span class="token function">printBanner</span><span class="token punctuation">(</span>ConfigurableEnvironment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果关闭 banner，直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bannerMode <span class="token operator">==</span> Banner<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>OFF<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 默认 resourceLoader=null，使用 DefaultResourceLoader</span>    ResourceLoader resourceLoader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader        <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SpringApplicationBannerPrinter bannerPrinter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplicationBannerPrinter</span><span class="token punctuation">(</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>banner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// bannerMode 有3中取值，OFF、CONSOLE、LOG，这里默认为 CONSOLE</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bannerMode <span class="token operator">==</span> Mode<span class="token punctuation">.</span>LOG<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bannerPrinter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 打印 banner</span>    <span class="token keyword">return</span> bannerPrinter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">,</span> System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>bannerPrinter.print</p><pre class=" language-java"><code class="language-java">Banner <span class="token function">print</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> sourceClass<span class="token punctuation">,</span> PrintStream out<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取 banner，先获获取图片类型，再获取文本类型，都没有则答应 Spring Boot</span>    Banner banner <span class="token operator">=</span> <span class="token function">getBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果有多种类型，循环打印；按照添加顺序，先图片再文本</span>    banner<span class="token punctuation">.</span><span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> sourceClass<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PrintedBanner</span><span class="token punctuation">(</span>banner<span class="token punctuation">,</span> sourceClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>banner.printBanner</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> sourceClass<span class="token punctuation">,</span> PrintStream out<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Banner banner <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>banners<span class="token punctuation">)</span> <span class="token punctuation">{</span>        banner<span class="token punctuation">.</span><span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> sourceClass<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里进行文本打印，ResourceBanner.printBanner</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> sourceClass<span class="token punctuation">,</span> PrintStream out<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取编码格式</span>        String banner <span class="token operator">=</span> StreamUtils<span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                 environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.banner.charset"</span><span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理 banner 文件中属性值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertyResolver resolver <span class="token operator">:</span> <span class="token function">getPropertyResolvers</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> sourceClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            banner <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>banner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 使用 java bio 进行打印</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>banner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>            <span class="token string">"Banner not printable: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resource <span class="token operator">+</span> <span class="token string">" ("</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": '"</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"')"</span><span class="token punctuation">,</span>            ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-5.Spring Boot Profile 是如何生效的</title>
      <link href="posts/32c5ef91.html"/>
      <url>posts/32c5ef91.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Spring-Boot-中-Profile-是如何生效的？"><a href="#1-Spring-Boot-中-Profile-是如何生效的？" class="headerlink" title="1.Spring Boot 中 Profile 是如何生效的？"></a>1.Spring Boot 中 Profile 是如何生效的？</h2><p>在启动类启动的时候，按照如下顺序调用 SpringApplication.run -&gt; prepareEnvironment -&gt; </p><p>listeners.environmentPrepared -&gt; listener.environmentPrepared -&gt; initialMulticaster.multicastEvent</p><p>-&gt; getApplicationListeners -&gt; invokeListener -&gt; doInvokeListener -&gt; listener.onApplicationEvent</p><p>在 ApplicationListener 中，有一个 ConfigFileApplicationListener，这个监听器用来解析配置文件，所以会调用它的 onApplicationEvent 方法，它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ApplicationEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationEnvironmentPreparedEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onApplicationEnvironmentPreparedEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ApplicationEnvironmentPreparedEvent<span class="token punctuation">)</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationPreparedEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onApplicationPreparedEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动时这里的 event 是 ApplicationEnvironmentPreparedEvent，所以会执行 onApplicationEnvironmentPreparedEvent 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onApplicationEnvironmentPreparedEvent</span><span class="token punctuation">(</span>ApplicationEnvironmentPreparedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从 spring.factories 中获取 EnvironmentPostProcessor</span>    List<span class="token operator">&lt;</span>EnvironmentPostProcessor<span class="token operator">></span> postProcessors <span class="token operator">=</span> <span class="token function">loadPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将当前 ConfigFileApplicationListener 加入到 postProcessors 中</span>    postProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据 @Ordered 配置的顺序进行排序</span>    AnnotationAwareOrderComparator<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>postProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 触发 postProcessEnvironment 方法</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>EnvironmentPostProcessor postProcessor <span class="token operator">:</span> postProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>        postProcessor<span class="token punctuation">.</span><span class="token function">postProcessEnvironment</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getSpringApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ConfigFileApplicationListener 的 postProcessEnvironment 实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessEnvironment</span><span class="token punctuation">(</span>ConfigurableEnvironment environment<span class="token punctuation">,</span> SpringApplication application<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加配置文件</span>    <span class="token function">addPropertySources</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> application<span class="token punctuation">.</span><span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addPropertySources</span><span class="token punctuation">(</span>ConfigurableEnvironment environment<span class="token punctuation">,</span> ResourceLoader resourceLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    RandomValuePropertySource<span class="token punctuation">.</span><span class="token function">addToEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加载配置文件</span>    <span class="token keyword">new</span> <span class="token class-name">Loader</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> resourceLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Loader 的构造函数中，使用 SpringFactoriesLoader 加载 PropertySourceLoader，它有两个实现类：PropertiesPropertySourceLoader 和 YamlPropertySourceLoader，前者解析 .properties 和 .xml，后者解析 .yml 和 .yaml，在 spring.factories 中，PropertiesPropertySourceLoader 在前，所以先解析 .properties 文件，YamlPropertySourceLoader中 .yml 在前，先解析 .yml</p><pre class=" language-java"><code class="language-java"><span class="token function">Loader</span><span class="token punctuation">(</span>ConfigurableEnvironment environment<span class="token punctuation">,</span> ResourceLoader resourceLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> environment<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>placeholdersResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertySourcesPlaceholdersResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> <span class="token punctuation">(</span>resourceLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> resourceLoader <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>propertySourceLoaders <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactories</span><span class="token punctuation">(</span>PropertySourceLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                                                                     <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 load() 方法中，获取所有的 profiles，然后通过 load 方法记在对应的配置文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    FilteredPropertySource<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> DEFAULT_PROPERTIES<span class="token punctuation">,</span> LOAD_FILTERED_PROPERTY<span class="token punctuation">,</span> <span class="token punctuation">(</span>defaultProperties<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>profiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>processedProfiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>activatedProfiles <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化 Profiles</span>        <span class="token function">initializeProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Profile profile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDefaultProfile</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">addProfileToEnvironment</span><span class="token punctuation">(</span>profile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 加载配置文件</span>            <span class="token function">load</span><span class="token punctuation">(</span>profile<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>getPositiveProfileFilter<span class="token punctuation">,</span>                 <span class="token function">addToLoaded</span><span class="token punctuation">(</span>MutablePropertySources<span class="token operator">:</span><span class="token operator">:</span>addLast<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>processedProfiles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">load</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>getNegativeProfileFilter<span class="token punctuation">,</span> <span class="token function">addToLoaded</span><span class="token punctuation">(</span>MutablePropertySources<span class="token operator">:</span><span class="token operator">:</span>addFirst<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addLoadedPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">applyActiveProfiles</span><span class="token punctuation">(</span>defaultProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>initializeProfiles()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initializeProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// The default profile for these purposes is represented as null. We add it</span>    <span class="token comment" spellcheck="true">// first so that it is processed first and has lowest priority.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 spring.profiles.active 值</span>    Set<span class="token operator">&lt;</span>Profile<span class="token operator">></span> activatedViaProperty <span class="token operator">=</span> <span class="token function">getProfilesFromProperty</span><span class="token punctuation">(</span>ACTIVE_PROFILES_PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 spring.profiles.include 值</span>    Set<span class="token operator">&lt;</span>Profile<span class="token operator">></span> includedViaProperty <span class="token operator">=</span> <span class="token function">getProfilesFromProperty</span><span class="token punctuation">(</span>INCLUDE_PROFILES_PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从其他途径获取 profile</span>    List<span class="token operator">&lt;</span>Profile<span class="token operator">></span> otherActiveProfiles <span class="token operator">=</span> <span class="token function">getOtherActiveProfiles</span><span class="token punctuation">(</span>activatedViaProperty<span class="token punctuation">,</span> includedViaProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>otherActiveProfiles<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Any pre-existing active profiles set via property sources (e.g.</span>    <span class="token comment" spellcheck="true">// System properties) take precedence over those added in config files.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>includedViaProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addActiveProfiles</span><span class="token punctuation">(</span>activatedViaProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// only has null profile</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String defaultProfileName <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">getDefaultProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Profile defaultProfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Profile</span><span class="token punctuation">(</span>defaultProfileName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>defaultProfile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>load()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span>Profile profile<span class="token punctuation">,</span> DocumentFilterFactory filterFactory<span class="token punctuation">,</span> DocumentConsumer consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">getSearchLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isFolder <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> isFolder <span class="token operator">?</span> <span class="token function">getSearchNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> NO_SEARCH_NAMES<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加载配置文件</span>        names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">load</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> name<span class="token punctuation">,</span> profile<span class="token punctuation">,</span> filterFactory<span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span>String location<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Profile profile<span class="token punctuation">,</span> DocumentFilterFactory filterFactory<span class="token punctuation">,</span>                  DocumentConsumer consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertySourceLoader loader <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertySourceLoaders<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canLoadFileExtension</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 加载配置文件</span>                <span class="token function">load</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> location<span class="token punctuation">,</span> profile<span class="token punctuation">,</span> filterFactory<span class="token punctuation">.</span><span class="token function">getDocumentFilter</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"File extension of config file location '"</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"' is not known to any PropertySourceLoader. If the location is meant to reference "</span>  <span class="token operator">+</span> <span class="token string">"a directory, it must end in '/'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> processed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertySourceLoader loader <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertySourceLoaders<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String fileExtension <span class="token operator">:</span> loader<span class="token punctuation">.</span><span class="token function">getFileExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>processed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fileExtension<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">loadForFileExtension</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> location <span class="token operator">+</span> name<span class="token punctuation">,</span> <span class="token string">"."</span> <span class="token operator">+</span> fileExtension<span class="token punctuation">,</span> profile<span class="token punctuation">,</span> filterFactory<span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-4.Spring Boot 参数校验是如何实现的</title>
      <link href="posts/24d616a1.html"/>
      <url>posts/24d616a1.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-注解校验如何生效的？"><a href="#1-注解校验如何生效的？" class="headerlink" title="1.注解校验如何生效的？"></a>1.注解校验如何生效的？</h2><p>在 UserController#add 方法上有使用 @Valid 注解，标明这个方法需要校验，同时也可以使用 @Validated 注解标明要校验的位置。那么 @Valid 是如何生效的呢？</p><p>在 <a href="https://blog.csdn.net/u010139373/article/details/107303452" target="_blank" rel="noopener">SpringBoot学习(三)——WebMVC及其工作原理</a> 中，有跟踪 Spring MVC 的运行原理，@Valid 的注解校验就在 </p><p>RequestMappingHandlerAdapter#invokeHandlerMethod 方法中</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712204316361.png" alt="image-20200712204316361"></p><p>在 ConstraintTree#validateSingleConstraint 中使用具体的 Validator 对参数进行校验</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> V<span class="token operator">></span> Set<span class="token operator">&lt;</span>ConstraintViolation<span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token function">validateSingleConstraint</span><span class="token punctuation">(</span>ValidationContext<span class="token operator">&lt;</span>T<span class="token operator">></span> executionContext<span class="token punctuation">,</span> ValueContext<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> valueContext<span class="token punctuation">,</span> ConstraintValidatorContextImpl constraintValidatorContext<span class="token punctuation">,</span> ConstraintValidator<span class="token operator">&lt;</span>A<span class="token punctuation">,</span> V<span class="token operator">></span> validator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> isValid<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        V validatedValue <span class="token operator">=</span> valueContext<span class="token punctuation">.</span><span class="token function">getCurrentValidatedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isValid <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>validatedValue<span class="token punctuation">,</span> constraintValidatorContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>var7 <span class="token keyword">instanceof</span> <span class="token class-name">ConstraintDeclarationException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var7<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> LOG<span class="token punctuation">.</span><span class="token function">getExceptionDuringIsValidCallException</span><span class="token punctuation">(</span>var7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">!</span>isValid <span class="token operator">?</span> executionContext<span class="token punctuation">.</span><span class="token function">createConstraintViolations</span><span class="token punctuation">(</span>valueContext<span class="token punctuation">,</span> constraintValidatorContext<span class="token punctuation">)</span> <span class="token operator">:</span> Collections<span class="token punctuation">.</span><span class="token function">emptySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712204519662.png" alt="image-20200712204519662"></p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-3.Spring Boot WebMVC 工作流程及原理 </title>
      <link href="posts/f12c731c.html"/>
      <url>posts/f12c731c.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Spring-WebMvc-运行流程是怎样的？"><a href="#1-Spring-WebMvc-运行流程是怎样的？" class="headerlink" title="1.Spring  WebMvc 运行流程是怎样的？"></a>1.Spring  WebMvc 运行流程是怎样的？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712125443758.png" alt="image-20200712125443758"></p><ol><li>用户发送请求至前端控制器 DispatcherServlet。</li><li>DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。</li><li>处理器映射器找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet，一般使用的是 url 映射器。</li><li>DispatcherServlet 调用 HandlerAdapter 处理器适配器。</li><li>HandlerAdapter 经过适配调用具体的处理器(Controller，也叫后端控制器)。</li><li>Controller 执行完成返回 ModelAndView。</li><li>HandlerAdapter 将 ModelAndView 返回给 DispatcherServlet。</li><li>DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。</li><li>ViewReslover 解析后返回具体 View。</li><li>DispatcherServlet 根据 View 进行渲染视图（即将模型数据填充至视图中）。</li><li>DispatcherServlet 返回响应给用户。</li></ol><h2 id="2-Spring-WebMvc-的原理"><a href="#2-Spring-WebMvc-的原理" class="headerlink" title="2.Spring  WebMvc 的原理"></a>2.Spring  WebMvc 的原理</h2><p>DispatcherServlet 其实也是一个 HttpServlet，它的类图如下</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712130010099.png" alt="image-20200712130010099"></p><p>在传统的 HttpServlet 中，它的生命周期包含 init、service、destroy，在 service 中一般有 doGet、doPost 分别来处理 get、post 请求。DispatcherServlet 即是在 HttpServlet 上面进行的扩展。</p><p>SpringMvc 的初始化时序图：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712135114830.png" alt="image-20200712135114830"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initStrategies</span><span class="token punctuation">(</span>ApplicationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化上传组件，用于文件上传等</span>    <span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化本地化组件，用于国际化</span>    <span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化主题组件</span>    <span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化处理器映射器</span>    <span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化处理器适配器</span>    <span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化异常处理器</span>    <span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化请求-视图名称翻译器</span>    <span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化视图处理器</span>    <span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化 FlashMapManager</span>    <span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>SpringMvc 的运行时序图：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712133642964.png" alt="image-20200712133642964"></p><h2 id="3-DispatcherServlet-是如何初始化的？"><a href="#3-DispatcherServlet-是如何初始化的？" class="headerlink" title="3.DispatcherServlet 是如何初始化的？"></a>3.DispatcherServlet 是如何初始化的？</h2><p>在一般的 Spring WebMvc 项目中，通常会在 web.xml 中配置好 DispatcherServlet，如下所示</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置DispatcherServlet --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 指定spring mvc配置文件位置 不指定使用默认情况 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:application-context.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 设置启动顺序 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- ServLet 匹配映射 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><p>那么，在 Spring Boot 项目中，DispatcherServlet 又是如何配置的呢？</p><p>其实，在 <code>spring-boot-autoconfigure/META-INF/spring.factories</code> 中有这样一个配置</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712140206806.png" alt="image-20200712140206806"></p><p>这个 DispatcherServletAutoConfiguration 即是 DispatcherServlet 的自动装配类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span>ServletWebServerFactoryAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServletAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME <span class="token operator">=</span> <span class="token string">"dispatcherServlet"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>DefaultDispatcherServletCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>ServletRegistration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> HttpProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebMvcProperties<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServletConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DEFAULT_DISPATCHER_SERVLET_BEAN_NAME<span class="token punctuation">)</span>        <span class="token keyword">public</span> DispatcherServlet <span class="token function">dispatcherServlet</span><span class="token punctuation">(</span>HttpProperties httpProperties<span class="token punctuation">,</span> WebMvcProperties webMvcProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            DispatcherServlet dispatcherServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcherServlet<span class="token punctuation">.</span><span class="token function">setDispatchOptionsRequest</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isDispatchOptionsRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcherServlet<span class="token punctuation">.</span><span class="token function">setDispatchTraceRequest</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isDispatchTraceRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcherServlet<span class="token punctuation">.</span><span class="token function">setThrowExceptionIfNoHandlerFound</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isThrowExceptionIfNoHandlerFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcherServlet<span class="token punctuation">.</span><span class="token function">setPublishEvents</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isPublishRequestHandledEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcherServlet<span class="token punctuation">.</span><span class="token function">setEnableLoggingRequestDetails</span><span class="token punctuation">(</span>httpProperties<span class="token punctuation">.</span><span class="token function">isLogRequestDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> dispatcherServlet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-2.Spring Boot 是如何解析配置注解的</title>
      <link href="posts/3ca6fc82.html"/>
      <url>posts/3ca6fc82.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-ConfigurationProperties-是如何生效的？"><a href="#1-ConfigurationProperties-是如何生效的？" class="headerlink" title="1.@ConfigurationProperties 是如何生效的？"></a>1.@ConfigurationProperties 是如何生效的？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711210302871.png" alt="image-20200711210302871"></p><p>@SpringBootApplication 注解是一个复合注解，它里面包含一个 @ConfigurationPropertiesScan，这个里面又有一个 @EnableConfigurationProperties，@ConfigurationProperties 的作用与它有关。</p><p>@ConfigurationProperties 中通过 @Import 引入一个 EnableConfigurationPropertiesRegistrar，它里面有一个 registerBeanDefinitions 方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">registerInfrastructureBeans</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    ConfigurationPropertiesBeanRegistrar beanRegistrar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationPropertiesBeanRegistrar</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getTypes</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>beanRegistrar<span class="token operator">:</span><span class="token operator">:</span>register<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>registerBeanDefinitions 调用一个 registerInfrastructureBeans ，这个方法将 属性绑定后置处理器、bean 校验器、元数据注入到 registry 中，这里的 registry 保存了所有 bean 信息。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerInfrastructureBeans</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ConfigurationPropertiesBindingPostProcessor<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    ConfigurationPropertiesBeanDefinitionValidator<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    ConfigurationBeanFactoryMetadata<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过查看类图可以知道，ConfigurationPropertiesBindingPostProcessor 是 BeanPostProcessor 的一个实现类</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711215341386.png" alt="image-20200711215341386"></p><p>它在 bean 实例化的时候发生作用，BeanPostProcessor 提供了 postProcessBeforeInitialization 和 </p><p>postProcessAfterInitialization 两个方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 ConfigurationPropertiesBindingPostProcessor 的 postProcessBeforeInitialization 方法中提供了对于属性值的注入</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 属性绑定</span>    <span class="token function">bind</span><span class="token punctuation">(</span>ConfigurationPropertiesBean<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 bind 方法中，通过 ConfigurationPropertiesBinder 来绑定 ConfigurationProperties 中属性</p><pre class=" language-java"><code class="language-java">BindResult<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">bind</span><span class="token punctuation">(</span>ConfigurationPropertiesBean propertiesBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Bindable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> target <span class="token operator">=</span> propertiesBean<span class="token punctuation">.</span><span class="token function">asBindTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取目标 bean 上的 @ConfigurationProperties 注解</span>    ConfigurationProperties annotation <span class="token operator">=</span> propertiesBean<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 BindHandler</span>    BindHandler bindHandler <span class="token operator">=</span> <span class="token function">getBindHandler</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过配置的 prefix 和 BindHandler 进行属性绑定</span>    <span class="token keyword">return</span> <span class="token function">getBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> bindHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>到这里已经比较清晰了，后面的就是从 应用上下文中获取属性值，然后转换成对应的类型，再将属性值设置给目标对象。</p><h2 id="2-Value-是如何生效的？"><a href="#2-Value-是如何生效的？" class="headerlink" title="2.@Value 是如何生效的？"></a>2.@Value 是如何生效的？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711214716859.png" alt="image-20200711214716859"></p><p>这个流程中，doCreateBean 前面的流程实际上是 spirng bean 的初始化流程，在初始化过程中，会对 bean 的依赖和字段进行填充；BeanPostProcessor 也是在这个阶段发生作用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bp <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        InstantiationAwareBeanPostProcessor ibp <span class="token operator">=</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor<span class="token punctuation">)</span> bp<span class="token punctuation">;</span>        PropertyValues pvsToUse <span class="token operator">=</span> ibp<span class="token punctuation">.</span><span class="token function">postProcessProperties</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pvsToUse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>filteredPds <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                filteredPds <span class="token operator">=</span> <span class="token function">filterPropertyDescriptorsForDependencyCheck</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> mbd<span class="token punctuation">.</span>allowCaching<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            pvsToUse <span class="token operator">=</span> ibp<span class="token punctuation">.</span><span class="token function">postProcessPropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> filteredPds<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pvsToUse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        pvs <span class="token operator">=</span> pvsToUse<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用注解进行 bean 注入的时候，会有一个 AutowiredAnnotationBeanPostProcessor 的处理类，它里面有一个 postProcessProperties 方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> PropertyValues <span class="token function">postProcessProperties</span><span class="token punctuation">(</span>PropertyValues pvs<span class="token punctuation">,</span> Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    InjectionMetadata metadata <span class="token operator">=</span> <span class="token function">findAutowiringMetadata</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        metadata<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">"Injection of autowired dependencies failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pvs<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>InjectionMetadata 是类的注入元数据，这里通过它来对 bean 中的属性进行注入，它里面提供了多种注入元件，而 ConfigurationProperties 主要通过字段属性进行注入</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711221221448.png" alt="image-20200711221221448"></p><p>AutowiredFieldElement 的 inject 方法实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String beanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> PropertyValues pvs<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Field field <span class="token operator">=</span> <span class="token punctuation">(</span>Field<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>member<span class="token punctuation">;</span>    Object value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否已缓存，如果缓存了，直接获取</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> <span class="token function">resolvedCachedArgument</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cachedFieldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果没有缓存，需要从 beanFactory 中获取具体值，然后缓存起来</span>        DependencyDescriptor desc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DependencyDescriptor</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>required<span class="token punctuation">)</span><span class="token punctuation">;</span>        desc<span class="token punctuation">.</span><span class="token function">setContainingClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> autowiredBeanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>beanFactory <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"No BeanFactory available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TypeConverter typeConverter <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">resolveDependency</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> typeConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsatisfiedDependencyException</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InjectionPoint</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>required<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>cachedFieldValue <span class="token operator">=</span> desc<span class="token punctuation">;</span>                    <span class="token function">registerDependentBeans</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        String autowiredBeanName <span class="token operator">=</span> autowiredBeanNames<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                            beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 将获取到的值缓存起来</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>cachedFieldValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShortcutDependencyDescriptor</span><span class="token punctuation">(</span>                                desc<span class="token punctuation">,</span> autowiredBeanName<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>cachedFieldValue <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 修改标记</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>cached <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 最终将获取到的值，通过反射进行注入</span>        ReflectionUtils<span class="token punctuation">.</span><span class="token function">makeAccessible</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来调用流程是 resolveDependency -&gt; doResolveDependency -&gt; resolveEmbeddedValue</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> String <span class="token function">resolveEmbeddedValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String result <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>StringValueResolver resolver <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后调用到 PropertyPlaceholderConfigurer，通过解析配置文件获取到最终值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> String <span class="token function">resolveStringValue</span><span class="token punctuation">(</span>String strVal<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    String resolved <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">replacePlaceholders</span><span class="token punctuation">(</span>strVal<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trimValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>        resolved <span class="token operator">=</span> resolved<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>resolved<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>nullValue<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> resolved<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-1.Spring Boot 的启动流程和加载原理</title>
      <link href="posts/464104e0.html"/>
      <url>posts/464104e0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Spring-Boot-启动流程是怎样的？"><a href="#1-Spring-Boot-启动流程是怎样的？" class="headerlink" title="1.Spring Boot 启动流程是怎样的？"></a>1.Spring Boot 启动流程是怎样的？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709221114156.png" alt="image-20200709221114156"></p><p>从 main 方法开始</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootDemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SpringApplication.run -&gt; ConfigurableApplicationContext</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    StopWatch stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ConfigurableApplicationContext context <span class="token operator">=</span> null<span class="token punctuation">;</span>    Collection<span class="token operator">&lt;</span>SpringBootExceptionReporter<span class="token operator">></span> exceptionReporters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置 “java.awt.headless” 属性</span>    <span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用 SpringFactoryLoader 获取 SpringApplicationRunListener 实例的 listeners</span>    SpringApplicationRunListeners listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 逐个启动 SpringApplicationRunListener，应用开始启动事件</span>    listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ApplicationArguments applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 Environment，根据 webType 获取不同类型；并配置 propertySource 和 profiles</span>        ConfigurableEnvironment environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印 banner</span>        Banner printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 spring 应用上下文，类型和 webType 有关</span>        context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用 SpringFactoryLoader 获取 SpringBootExceptionReporter 实例的 exceptionReporters</span>        exceptionReporters <span class="token operator">=</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>SpringBootExceptionReporter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                                                         <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> ConfigurableApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上下文预处理，spring boot</span>        <span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 刷新上下文，spring context</span>        <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上下文后置处理，暂为空</span>        <span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// listeners 启动完成事件</span>        listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 触发 ApplicationRunner 和 CommandLineRunner</span>        <span class="token function">callRunners</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 引用运行事件，开始监听</span>        listeners<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-Spring-Boot-如何加载-Tomcat？"><a href="#2-Spring-Boot-如何加载-Tomcat？" class="headerlink" title="2.Spring Boot 如何加载 Tomcat？"></a>2.Spring Boot 如何加载 Tomcat？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709223727507.png" alt="image-20200709223727506"></p><p>SpringApplication.run -&gt; ConfigurableApplicationContext ，跟踪 tomcat 的创建过程，主要看 createApplicationContext() 和 refreshContext() 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>        context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>        <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>createApplicationContext() 创建 spring 应用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> ConfigurableApplicationContext <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> contextClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContextClass<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>contextClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> SERVLET<span class="token operator">:</span>                    contextClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DEFAULT_SERVLET_WEB_CONTEXT_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> REACTIVE<span class="token operator">:</span>                    contextClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DEFAULT_REACTIVE_WEB_CONTEXT_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    contextClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DEFAULT_CONTEXT_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                <span class="token string">"Unable create a default ApplicationContext, please specify an ApplicationContextClass"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>ConfigurableApplicationContext<span class="token punctuation">)</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终创建的应用类型和 webApplicationType 有关，webApplicationType 在 SpringApplication 的构造函数中进行实例化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">SpringApplication</span><span class="token punctuation">(</span>ResourceLoader resourceLoader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> primarySources<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> resourceLoader<span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">,</span> <span class="token string">"PrimarySources must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>primarySources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType <span class="token operator">=</span> WebApplicationType<span class="token punctuation">.</span><span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>ApplicationContextInitializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>ApplicationListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>默认类型为 WebApplicationType.SERVLET</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> WebApplicationType <span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span>WEBFLUX_INDICATOR_CLASS<span class="token punctuation">,</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span>WEBMVC_INDICATOR_CLASS<span class="token punctuation">,</span> null<span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span>JERSEY_INDICATOR_CLASS<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> WebApplicationType<span class="token punctuation">.</span>REACTIVE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String className <span class="token operator">:</span> SERVLET_INDICATOR_CLASSES<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> WebApplicationType<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> WebApplicationType<span class="token punctuation">.</span>SERVLET<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 refreshContext 中调用了 refresh(context) 方法，这里的 applicationContext 为 AnnotationConfigServletWebServerApplicationContext</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Assert<span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>AbstractApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractApplicationContext<span class="token punctuation">)</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后调用 AbstractApplicationContext.refresh() 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> var9<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>onRefresh() 是一个钩子方法，根据上面分析，这里使用的是 servlet，所以会调用到 </p><p>ServletWebServerApplicationContext.onRefresh()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Unable to start web server"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 ServletWebServerApplicationContext 中调用 createWebServer() 创建 web 服务</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    WebServer webServer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webServer<span class="token punctuation">;</span>    ServletContext servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>webServer <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> servletContext <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServletWebServerFactory factory <span class="token operator">=</span> <span class="token function">getWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>webServer <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Cannot initialize servlet context"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的 factory 通过 ServletWebServerFactory 来实例化，所以创建 ServletWebServer</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709225432357.png" alt="image-20200709225432357"></p><p>最终在 TomcatServletWebServerFactory 中创建了 Tomcat、Connector、Engine、Host 等，这里可以结合 apache-tomcat 的配置文件 server.xml 来分析几者之间的层级关系</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709225721299.png" alt="image-20200709225721299"></p><h2 id="3-Spring-Boot-默认容器为何是-tomcat？"><a href="#3-Spring-Boot-默认容器为何是-tomcat？" class="headerlink" title="3.Spring Boot 默认容器为何是 tomcat？"></a>3.Spring Boot 默认容器为何是 tomcat？</h2><p>先看下 spring-boot-starter-web 的依赖结构</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200710214932703.png" alt="image-20200710214932703"></p><p>spring-boot-starter-web 依赖了 spring-boot-starter-tomcat，又依赖了 tomcat-embed-core。但是只凭这个，并不能说明默认容器为 tomca 的原因。</p><p>要弄清这个问题，就要涉及到 Spring Boot 的自动装配，以及 WebServer 的装配。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200710220743014.png" alt="image-20200710220743014"></p><p>@SpringBootApplication 是一个复合注解，它包含如下内容</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConfigurationPropertiesScan</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>其中 @EnableAutoConfiguration 和自动装配相关，@EnableAutoConfiguration 声明如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>@Import 导入一个 AutoConfigurationImportSelector，这个 Selector 中 selectImports() 实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> NO_IMPORTS<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    AutoConfigurationMetadata autoConfigurationMetadata <span class="token operator">=</span> AutoConfigurationMetadataLoader        <span class="token punctuation">.</span><span class="token function">loadMetadata</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    AutoConfigurationEntry autoConfigurationEntry <span class="token operator">=</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>autoConfigurationMetadata<span class="token punctuation">,</span>                                                                              annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>autoConfigurationEntry<span class="token punctuation">.</span><span class="token function">getConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中 getAutoConfigurationEntry 获取自动装配类型，它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> AutoConfigurationEntry <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>AutoConfigurationMetadata autoConfigurationMetadata<span class="token punctuation">,</span>                                                           AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 是否开启自动装配，默认开启，可通过 spring.boot.enableautoconfiguration 进行配置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> EMPTY_ENTRY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取元注解中的属性，它是一个 LinkedHashMap</span>    AnnotationAttributes attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取要自动装配类的类名</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 去重</span>    configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 要排除的装配类</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 过滤</span>    configurations <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 触发自动装配导入事件</span>    <span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfigurationEntry</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 getCandidateConfigurations 获取所有自动装配类，这个方法通过 SpringFactoriesLoader 加载 META-INF/spring.factories 中的内容，在 spring-boot-autoconfigure 的 spring.factories 中有如下内容</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200710222137689.png" alt="image-20200710222137689"></p><p>其中有一条配置为 EmbeddedWebServerFactoryCustomizerAutoConfiguration，这个即为内容 webServer 的自动装配类</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200710222221906.png" alt="image-20200710222221906"></p><p>它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedWebServerFactoryCustomizerAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Tomcat is being used.     */</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Tomcat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> UpgradeProtocol<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TomcatWebServerFactoryCustomizerConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> TomcatWebServerFactoryCustomizer <span class="token function">tomcatWebServerFactoryCustomizer</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span>                                                                                 ServerProperties serverProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatWebServerFactoryCustomizer</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Jetty is being used.     */</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Server<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Loader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebAppContext<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JettyWebServerFactoryCustomizerConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> JettyWebServerFactoryCustomizer <span class="token function">jettyWebServerFactoryCustomizer</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span>                                                                               ServerProperties serverProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JettyWebServerFactoryCustomizer</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Undertow is being used.     */</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Undertow<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> SslClientAuthMode<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UndertowWebServerFactoryCustomizerConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> UndertowWebServerFactoryCustomizer <span class="token function">undertowWebServerFactoryCustomizer</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span>                                                                                     ServerProperties serverProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UndertowWebServerFactoryCustomizer</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Netty is being used.     */</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>HttpServer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NettyWebServerFactoryCustomizerConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> NettyWebServerFactoryCustomizer <span class="token function">nettyWebServerFactoryCustomizer</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span>                                                                               ServerProperties serverProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NettyWebServerFactoryCustomizer</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结合上面 spring-boot-starter-web 中引入了 tomcat-embed-core 依赖，可以发现，默认装配的类型即为 </p><p>TomcatWebServerFactoryCustomizerConfiguration</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-17.Spring Boot Starter自定义</title>
      <link href="posts/610a5a80.html"/>
      <url>posts/610a5a80.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>A typical Spring Boot starter contains code to auto-configure and customize the infrastructure of a given technology, let’s call that “acme”. To make it easily extensible, a number of configuration keys in a dedicated namespace can be exposed to the environment. Finally, a single “starter” dependency is provided to help users get started as easily as possible.</p></blockquote><p>典型的Spring Boot Starter包含用于自动配置和自定义特定技术的基础架构的代码，我们称其为“ acme”。为了使其易于扩展，可以将专用命名空间中的许多配置项公开给环境。最后，提供了一个 starter 依赖项，以帮助用户尽可能轻松地使用它。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><blockquote><p>Concretely, a custom starter can contain the following:</p><ul><li>The <code>autoconfigure</code> module that contains the auto-configuration code for “acme”.</li><li>The <code>starter</code> module that provides a dependency to the <code>autoconfigure</code> module as well as “acme” and any additional dependencies that are typically useful. In a nutshell, adding the starter should provide everything needed to start using that library.</li></ul><p>This separation in two modules is in no way necessary. If “acme” has several flavours, options or optional features, then it is better to separate the auto-configuration as you can clearly express the fact some features are optional. Besides, you have the ability to craft a starter that provides an opinion about those optional dependencies. At the same time, others can rely only on the <code>autoconfigure</code> module and craft their own starter with different opinions.</p><p>If the auto-configuration is relatively straightforward and does not have optional feature, merging the two modules in the starter is definitely an option.</p></blockquote><p>具体而言，自定义启动器可以包含以下内容：</p><ul><li>自动配置模块，其中包含“ acme”的自动配置代码。</li><li>启动程序模块，它提供对自动配置模块的依赖以及“ acme”和通常有用的任何其他依赖。简而言之，添加启动程序应提供开始使用该库所需的一切。</li></ul><p>完全没有必要将这两个模块分开。如果“ acme”具有多种功能，选项或可选功能，则最好将自动配置分开，因为您可以清楚地表示某些功能是可选的。此外，您还可以制作一个启动器，以提供有关那些可选依赖项的意见。同时，其他人只能依靠自动配置模块并以不同的意见来制作自己的启动器。如果自动配置相对简单并且不具有可选功能，则将两个模块合并在启动器中绝对是一种选择。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200730193439123.png" alt="image-20200730193439123"></p><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>包含两个项目，两个项目的作用如下：</p><ul><li>demo-spring-boot-starter：自定义的starter，有一个Hello接口和几个实现类，通过自动装配类从外部获取配置来选择具体要激活的实例，同时helloTemplate的模板工具类来调用Hello中的hello方法。</li><li>test-spring-boot-starter：依赖 demo-spring-boot-starter，测试它的功能</li></ul><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><strong>demo-spring-boot-starter</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200730193759728.png" alt="image-20200730193759728"></p><p><strong>test-spring-boot-starter</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200730193916069.png" alt="image-20200730193916069"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><p><strong>demo-spring-boot-starter</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>test-spring-boot-starter</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.soulballad.usage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p><strong>demo-spring-boot-starter</strong></p><p>META-INF\spring.factories</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 配置自动装配</span><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">\  com.soulballad.usage.springboot.autoconfiguration.HelloAutoConfiguration</span></code></pre><p><strong>test-spring-boot-starter</strong></p><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">com.soulballad.hello.java.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">com.soulballad.hello.detail.name</span><span class="token punctuation">=</span><span class="token attr-value">zhangsan</span><span class="token attr-name">com.soulballad.hello.detail.age</span><span class="token punctuation">=</span><span class="token attr-value">20</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p><strong>demo-spring-boot-starter</strong></p><p>Hello.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>HelloGirl.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloGirl</span> <span class="token keyword">implements</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello girl"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HelloJava.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJava</span> <span class="token keyword">implements</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello java"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HelloWorld.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">implements</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HelloProperties.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> HelloProperties<span class="token punctuation">.</span>HELLO_PREFIX<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HELLO_PREFIX <span class="token operator">=</span> <span class="token string">"com.soulballad.hello"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> detail<span class="token punctuation">;</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> detail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDetail</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> detail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>detail <span class="token operator">=</span> detail<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HelloAutoConfiguration.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HelloProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloTemplate <span class="token function">helloTemplate</span><span class="token punctuation">(</span>Hello hello<span class="token punctuation">,</span> HelloProperties helloProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloTemplate</span><span class="token punctuation">(</span>hello<span class="token punctuation">,</span> helloProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> HelloProperties<span class="token punctuation">.</span>HELLO_PREFIX <span class="token operator">+</span> <span class="token string">".world"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"enable"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Hello <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> HelloProperties<span class="token punctuation">.</span>HELLO_PREFIX <span class="token operator">+</span> <span class="token string">".java"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"enable"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Hello <span class="token function">helloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> HelloProperties<span class="token punctuation">.</span>HELLO_PREFIX <span class="token operator">+</span> <span class="token string">".girl"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"enable"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Hello <span class="token function">helloGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HelloTemplate.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloTemplate</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Hello hello<span class="token punctuation">;</span>    <span class="token keyword">private</span> HelloProperties helloProperties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HelloTemplate</span><span class="token punctuation">(</span>Hello hello<span class="token punctuation">,</span> HelloProperties helloProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hello <span class="token operator">=</span> hello<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>helloProperties <span class="token operator">=</span> helloProperties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> objectMap <span class="token operator">=</span> helloProperties<span class="token punctuation">.</span><span class="token function">getDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String helloName <span class="token operator">=</span> hello<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String description <span class="token operator">=</span> <span class="token string">"helloName: "</span> <span class="token operator">+</span> helloName <span class="token operator">+</span> <span class="token string">", properties: "</span> <span class="token operator">+</span> objectMap<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hello<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>test-spring-boot-starter</strong></p><p>HelloController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HelloTemplate helloTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> helloTemplate<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-11-custom-starter" target="_blank" rel="noopener">spring-boot/spring-boot-11-custom-starter</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>使用maven将 <code>demo-spring-boot-starter</code> 打成 jar 包，然后在 <code>test-spring-boot-starter</code> 中依赖这个 jar包</p><p>启动 <code>test-spring-boot-starter</code> 中 TestSpringBootStarterApplication.main 方法，在 test-spring-boot-starter.http 访问下列地址，观察输出信息是否符合预期。</p><pre class=" language-http"><code class="language-http">### GET /helloGET http://localhost:8080/hello</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200730195430873.png" alt="image-20200730195430873"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features-custom-starter-naming" target="_blank" rel="noopener">Spring Boot Features/Starter</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Starter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-16.Spring Boot MessageConverter消息转换器</title>
      <link href="posts/d815b741.html"/>
      <url>posts/d815b741.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring MVC uses the <code>HttpMessageConverter</code> interface to convert HTTP requests and responses. Sensible defaults are included out of the box. For example, objects can be automatically converted to JSON (by using the Jackson library) or XML (by using the Jackson XML extension, if available, or by using JAXB if the Jackson XML extension is not available). By default, strings are encoded in <code>UTF-8</code>.</p></blockquote><p>Spring MVC使用HttpMessageConverter接口转换HTTP请求和响应。开箱即用中包含明智的默认设置。例如，可以将对象自动转换为JSON（通过使用Jackson库）或XML（通过使用Jackson XML扩展（如果可用）或通过使用JAXB（如果Jackson XML扩展不可用））。默认情况下，字符串以UTF-8编码。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><p>HttpMessageConverter 是一个接口，它包含以下几个方法</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200729211313871.png" alt="image-20200729211313871"></p><ul><li>canRead： 判断是否支持解析当前 MediaType</li><li>canWrite： 判断是否支持输出当前 MediaType</li><li>getSupportedMediaTypes： 获取支持的 MediaTypes</li><li>read： 解析http消息内容</li><li>write： 输出指定MediaType的消息内容</li></ul><p>这里的MediaType即为http请求中常见的 Content-Type；例如：application/json、application/xml等</p><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>自定义HttpMessageConverter消息转换器，实现消息的解析和输出</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200729212037648.png" alt="image-20200729212037648"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>无配置</p><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> BigDecimal salary<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> Date birthday<span class="token punctuation">,</span> BigDecimal salary<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>UserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicLong ID_GENERATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> UserModel<span class="token operator">></span> USER_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel user1 <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"23456.11"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user2 <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"12345.67"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"13888888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>USER_MAP<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">findById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> id <span class="token operator">=</span> ID_GENERATOR<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">update</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>WebMvcConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 扩展 MessageConverter，将 PropertiesHttpMessageConverter 放在第一位</span>        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PropertiesHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>PropertiesHttpMessageConverter.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesHttpMessageConverter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHttpMessageConverter</span><span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">PropertiesHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"text/properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCharset</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">readInternal</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">,</span> HttpInputMessage inputMessage<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> HttpMessageNotReadableException <span class="token punctuation">{</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getDefaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 要求对象必须有无参构造函数</span>        Object instance <span class="token operator">=</span> ReflectUtils<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>field <span class="token operator">-</span><span class="token operator">></span> props<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            String property <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> fieldType <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ReflectionUtils<span class="token punctuation">.</span><span class="token function">setField</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> <span class="token function">resolveFieldValue</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> fieldType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">writeInternal</span><span class="token punctuation">(</span>Object user<span class="token punctuation">,</span> HttpOutputMessage outputMessage<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> HttpMessageNotReadableException <span class="token punctuation">{</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            String fieldName <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object fieldValue <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>fieldValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>outputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getDefaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"written by properties message converter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Object <span class="token function">resolveFieldValue</span><span class="token punctuation">(</span>String property<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Short<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Short<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Byte<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Byte<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> property<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Float<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Float<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Double<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> property<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add1"</span><span class="token punctuation">,</span> consumes <span class="token operator">=</span> <span class="token string">"text/properties"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">add1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add2"</span><span class="token punctuation">,</span> consumes <span class="token operator">=</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"text/properties"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">add2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-10-message-converter" target="_blank" rel="noopener">spring-boot/spring-boot-10-message-converter</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBoot10MessageConverterApplication.main 方法，在 spring-boot-message-converter.http 访问下列地址，观察输出信息是否符合预期。</p><p><strong>接收 <code>text/properties</code> 类型的参数，输出 <code>application/json</code> 格式内容</strong></p><pre class=" language-http"><code class="language-http">### POST /user/add1POST http://localhost:8080/user/add1<span class="token header-name keyword">Accept:</span> application/json;charset=utf-8<span class="token header-name keyword">Content-Type:</span> text/properties;charset=utf-8name=wangwuage=22birthday=1996-05-05salary=6666.66phone=13555555555</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200729212747549.png" alt="image-20200729212747549"></p><p><strong>接收 <code>application/json</code> 类型的参数，输出 <code>text/properties</code> 格式内容</strong></p><pre class=" language-http"><code class="language-http">### POST /user/add2POST http://localhost:8080/user/add2<span class="token header-name keyword">Accept:</span> text/properties;charset=utf-8<span class="token header-name keyword">Content-Type:</span> application/json;charset=utf-8<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span><span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1996-05-05"</span><span class="token punctuation">,</span><span class="token string">"salary"</span><span class="token punctuation">:</span> <span class="token string">"6666.66"</span><span class="token punctuation">,</span><span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13555555555"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200729212844773.png" alt="image-20200729212844773"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters" target="_blank" rel="noopener">Spring Boot Features/message-converters</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-15.Spring Boot WebFlux路由</title>
      <link href="posts/30eaadc6.html"/>
      <url>posts/30eaadc6.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>In WebFlux.fn, an HTTP request is handled with a <code>HandlerFunction</code>: a function that takes <code>ServerRequest</code> and returns a delayed <code>ServerResponse</code> (i.e. <code>Mono&lt;ServerResponse&gt;</code>). Both the request and the response object have immutable contracts that offer JDK 8-friendly access to the HTTP request and response. <code>HandlerFunction</code> is the equivalent of the body of a <code>@RequestMapping</code> method in the annotation-based programming model.</p><p>Incoming requests are routed to a handler function with a <code>RouterFunction</code>: a function that takes <code>ServerRequest</code> and returns a delayed <code>HandlerFunction</code> (i.e. <code>Mono&lt;HandlerFunction&gt;</code>). When the router function matches, a handler function is returned; otherwise an empty Mono. <code>RouterFunction</code> is the equivalent of a <code>@RequestMapping</code> annotation, but with the major difference that router functions provide not just data, but also behavior.</p><p><code>RouterFunctions.route()</code> provides a router builder that facilitates the creation of routers, as the following example shows:</p></blockquote><p>在WebFlux.fn中，HTTP请求由HandlerFunction处理：该函数接受ServerRequest并返回延迟的ServerResponse（即Mono <serverresponse>）。请求和响应对象都具有不可变的协定，这些协定为JDK 8提供了对HTTP请求和响应的友好访问。 HandlerFunction等效于基于注释的编程模型中@RequestMapping方法的主体。传入的请求被路由到带有RouterFunction的处理程序函数：该函数接受ServerRequest并返回延迟的HandlerFunction（即Mono <handlerfunction>）。当路由器功能匹配时，返回处理程序功能。否则为空Mono。 RouterFunction等效于@RequestMapping批注，但主要区别在于路由器功能不仅提供数据，而且还提供行为。 RouterFunctions.route() 提供了一个路由器构建器，可简化路由器的创建过程。</handlerfunction></serverresponse></p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><blockquote><p>Router functions are used to route the requests to the corresponding <code>HandlerFunction</code>. Typically, you do not write router functions yourself, but rather use a method on the <code>RouterFunctions</code> utility class to create one. <code>RouterFunctions.route()</code> (no parameters) provides you with a fluent builder for creating a router function, whereas <code>RouterFunctions.route(RequestPredicate, HandlerFunction)</code> offers a direct way to create a router.</p><p>Generally, it is recommended to use the <code>route()</code> builder, as it provides convenient short-cuts for typical mapping scenarios without requiring hard-to-discover static imports. For instance, the router function builder offers the method <code>GET(String, HandlerFunction)</code> to create a mapping for GET requests; and <code>POST(String, HandlerFunction)</code> for POSTs.</p><p>Besides HTTP method-based mapping, the route builder offers a way to introduce additional predicates when mapping to requests. For each HTTP method there is an overloaded variant that takes a <code>RequestPredicate</code> as a parameter, though which additional constraints can be expressed.</p></blockquote><p>路由器功能用于将请求路由到相应的HandlerFunction。通常，您不是自己编写路由器功能，而是使用RouterFunctions实用程序类上的方法创建一个。 RouterFunctions.route()(无参数)为您提供了一个流畅的生成器来创建路由器功能，而RouterFunctions.route(RequestPredicate，HandlerFunction)提供了直接创建路由器的方法。通常，建议使用route()构建器，因为它为典型的映射方案提供了便捷的捷径，而无需发现静态导入。例如，路由器功能构建器提供了GET(String，HandlerFunction)方法来为GET请求创建映射。和POST(String，HandlerFunction)进行POST。除了基于HTTP方法的映射外，路由构建器还提供了一种在映射到请求时引入其他谓词的方法。对于每个HTTP方法，都有一个以RequestPredicate作为参数的重载变体，尽管可以表达其他约束。</p><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>使用 <code>RouterFunction</code> 的方式使用 webflux</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728211754999.png" alt="image-20200728211754999"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>无配置</p><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>UserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 预置两条数据，所以起始值从2开始</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicLong ID_GENERATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模拟数据库操作</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> UserModel<span class="token operator">></span> USER_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"2000-01-02"</span><span class="token punctuation">,</span> <span class="token string">"beijing"</span><span class="token punctuation">,</span> <span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"1990-03-23"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"13888888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>USER_MAP<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">findById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> id <span class="token operator">=</span> ID_GENERATOR<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">update</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserHandler.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ServerResponse.ok().body(Flux.fromIterable(userRepository.findAll()), UserModel.class);</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>Flux<span class="token punctuation">.</span><span class="token function">fromStream</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">findById</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span> UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span>ServerResponse<span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 404 Not Found</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>            request<span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>userModel <span class="token operator">-</span><span class="token operator">></span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">update</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*request.bodyToMono(UserModel.class)            .flatMap(user -> Mono.justOrEmpty(userRepository.findById(user.getId()))                .then(ServerResponse.ok().body(Mono.just(userRepository.update(user)), UserModel.class))                // .switchIfEmpty(Mono.error(new NotFoundException(String.valueOf(user.getId())))))                .switchIfEmpty(ServerResponse.notFound().build()));*/</span>        <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>body <span class="token operator">-</span><span class="token operator">></span> Mono<span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>foundUser <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                foundUser<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                foundUser<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                foundUser<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                foundUser<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                foundUser<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>foundUser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>u <span class="token operator">-</span><span class="token operator">></span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token function">fromObject</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span>ServerResponse<span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">deleteById</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Long id <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">"not found!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 控制台异常：RuntimeException: 30</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">deleteId</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Long id <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span>ServerResponse<span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserRouter.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RequestPredicates<span class="token punctuation">.</span>DELETE<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RequestPredicates<span class="token punctuation">.</span>GET<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RequestPredicates<span class="token punctuation">.</span>POST<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RequestPredicates<span class="token punctuation">.</span>PUT<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RequestPredicates<span class="token punctuation">.</span>accept<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RequestPredicates<span class="token punctuation">.</span>contentType<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RouterFunctions<span class="token punctuation">.</span>route<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>MediaType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RouterFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>ServerResponse<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRouter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserHandler userHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RouterFunction<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">routerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>list<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andRoute</span><span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/find/{id}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>findById<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andRoute</span><span class="token punctuation">(</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>add<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andRoute</span><span class="token punctuation">(</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">"/user/update"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>update<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andRoute</span><span class="token punctuation">(</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">"/user/delete/{id}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>deleteId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-07-webflux/spring-boot-webflux-router" target="_blank" rel="noopener">spring-boot/spring-boot-07-webflux/spring-boot-webflux-router</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootWebfluxRouterApplication.main 方法，在 spring-boot-webflux-router.http 访问下列地址，观察输出信息是否符合预期。</p><p><strong>查询用户列表</strong></p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728212327686.png" alt="image-20200728212327686"></p><p><strong>根据id查询用户</strong></p><pre class=" language-http"><code class="language-http">### GET /user/find/{id}GET http://localhost:8080/user/find/1<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728212428240.png" alt="image-20200728212428240"></p><p><strong>新增用户</strong></p><pre class=" language-http"><code class="language-http">### POST /user/addPOST http://localhost:8080/user/add<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1995-06-23"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"guangzhou"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13777777777"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728212520918.png" alt="image-20200728212520918"></p><p><strong>更新用户（成功）</strong></p><pre class=" language-http"><code class="language-http">### PUT /user/update successPUT http://localhost:8080/user/update<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"lisi2"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1988-03-23"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"shanghai2"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13888888882"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728212644646.png" alt="image-20200728212644646"></p><p><strong>更新用户（失败）</strong></p><pre class=" language-http"><code class="language-http">### PUT /user/update fail  // 404 Not Found (id)PUT http://localhost:8080/user/update<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">222</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"lisi2"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1988-03-23"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"shanghai2"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13888888882"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728212727205.png" alt="image-20200728212727205"></p><p><strong>删除用户</strong></p><pre class=" language-http"><code class="language-http">### DELETE /user/delete/{id}DELETE http://localhost:8080/user/delete/3<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728212821991.png" alt="image-20200728212821991"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/web-reactive.html#webflux-new-framework" target="_blank" rel="noopener">Spring Framework/WebFlux</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> WebFlux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-14.Spring Boot WebFlux初体验</title>
      <link href="posts/c98023ce.html"/>
      <url>posts/c98023ce.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring WebFlux is the new reactive web framework introduced in Spring Framework 5.0. Unlike Spring MVC, it does not require the Servlet API, is fully asynchronous and non-blocking, and implements the <a href="https://www.reactive-streams.org/" target="_blank" rel="noopener">Reactive Streams</a> specification through <a href="https://projectreactor.io/" target="_blank" rel="noopener">the Reactor project</a>.</p><p>Spring WebFlux comes in two flavors: functional and annotation-based. The annotation-based one is quite close to the Spring MVC model, as shown in the following example:</p></blockquote><p>Spring WebFlux 是 Spring Framework 5.0 中引入的新的响应式Web框架。与Spring MVC不同，它不需要Servlet API，是完全异步和非阻塞的，并且通过Reactor项目实现Reactive Streams规范。 Spring WebFlux有两种形式：功能性的和基于注释的。基于注释的模型非常类似于Spring MVC模型，如本文所示</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><blockquote><p>Reactive Streams plays an important role for interoperability. It is of interest to libraries and infrastructure components but less useful as an application API, because it is too low-level. Applications need a higher-level and richer, functional API to compose async logic — similar to the Java 8 <code>Stream</code> API but not only for collections. This is the role that reactive libraries play.</p><p><a href="https://github.com/reactor/reactor" target="_blank" rel="noopener">Reactor</a> is the reactive library of choice for Spring WebFlux. It provides the <a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html" target="_blank" rel="noopener"><code>Mono</code></a> and <a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html" target="_blank" rel="noopener"><code>Flux</code></a> API types to work on data sequences of 0..1 (<code>Mono</code>) and 0..N (<code>Flux</code>) through a rich set of operators aligned with the ReactiveX <a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="noopener">vocabulary of operators</a>. Reactor is a Reactive Streams library and, therefore, all of its operators support non-blocking back pressure. Reactor has a strong focus on server-side Java. It is developed in close collaboration with Spring.</p><p>WebFlux requires Reactor as a core dependency but it is interoperable with other reactive libraries via Reactive Streams. As a general rule, a WebFlux API accepts a plain <code>Publisher</code> as input, adapts it to a Reactor type internally, uses that, and returns either a <code>Flux</code> or a <code>Mono</code> as output. So, you can pass any <code>Publisher</code> as input and you can apply operations on the output, but you need to adapt the output for use with another reactive library. Whenever feasible (for example, annotated controllers), WebFlux adapts transparently to the use of RxJava or another reactive library. See <a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/web-reactive.html#webflux-reactive-libraries" target="_blank" rel="noopener">Reactive Libraries</a> for more details.</p></blockquote><p>响应流对于互操作性起着重要作用。库和基础结构组件对此很感兴趣，但由于它太底层了，它作为应用程序API的用处不大。应用程序需要更高级别且功能更丰富的API来构成异步逻辑，这与Java 8 Stream API相似，但不仅适用于集合。这就是反应式库的作用。 </p><p>Reactor是Spring WebFlux的首选反应库。它提供了Mono和Flux API类型，以通过与ReactiveX运算符词汇对齐的一组丰富的运算符来处理 0..1 (<code>Mono</code>) 和 0..N (<code>Flux</code>) 的数据序列。 Reactor是Reactive Streams库，因此，它的所有运算符都支持无阻塞背压。 Reactor非常注重服务器端Java。它是与Spring紧密合作开发的。 </p><p>WebFlux需要Reactor作为核心依赖项，但是它可以通过Reactive Streams与其他React库进行互操作。通常，WebFlux API接受普通的发布者作为输入，在内部将其适应于Reactor类型，使用该类型，然后返回 <code>Flux</code> 或<code>Mono</code> 作为输出。因此，您可以将任何发布服务器作为输入传递，并且可以对输出应用操作，但是您需要调整输出以与其他反应式库一起使用。只要可行（例如，带注释的控制器），WebFlux就会透明地适应RxJava或其他反应式库的使用。有关更多详细信息，请参见反应式库。</p><h2 id="1-3-对比"><a href="#1-3-对比" class="headerlink" title="1.3 对比"></a>1.3 对比</h2><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>通过 <code>@RestController</code> 类似 Spring Mvc 的方式演示 Spring WebFlux 的使用</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727203818388.png" alt="image-20200727203818388"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>无内容</p><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>UserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 预置两条数据，所以起始值从2开始</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicLong ID_GENERATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模拟数据库操作</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> UserModel<span class="token operator">></span> USER_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"2000-01-02"</span><span class="token punctuation">,</span> <span class="token string">"beijing"</span><span class="token punctuation">,</span> <span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"1990-03-23"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"13888888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>USER_MAP<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">findById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> id <span class="token operator">=</span> ID_GENERATOR<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">update</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Flux<span class="token punctuation">.</span><span class="token function">fromStream</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/find/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/delete/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-07-webflux/spring-boot-webflux-demo" target="_blank" rel="noopener">spring-boot/spring-boot-07-webflux/spring-boot-webflux-demo</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootWebfluxDemoApplication.main 方法，在 spring-boot-webflux-demo.http 访问下列地址，观察输出信息是否符合预期。</p><p><strong>查询用户列表</strong></p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727204816422.png" alt="image-20200727204816422"></p><p><strong>根据id查询用户</strong></p><pre class=" language-http"><code class="language-http">### GET /user/find/{id}GET http://localhost:8080/user/find/1<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727204913432.png" alt="image-20200727204913432"></p><p><strong>新增用户</strong></p><pre class=" language-http"><code class="language-http">### POST /user/addPOST http://localhost:8080/user/add<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1995-06-23"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"guangzhou"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13777777777"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727204953806.png" alt="image-20200727204953806"></p><p><strong>修改用户</strong></p><pre class=" language-http"><code class="language-http">### PUT /user/updatePUT http://localhost:8080/user/update<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"lisi2"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1988-03-23"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"shanghai2"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13888888882"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727205119947.png" alt="image-20200727205119947"></p><p><strong>根据id删除用户</strong></p><pre class=" language-http"><code class="language-http">### DELETE /user/delete/{id}DELETE http://localhost:8080/user/delete/3<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727205246770.png" alt="image-20200727205246770"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features" target="_blank" rel="noopener">Spring-Boot-Features/WebFlux</a></li><li><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/web-reactive.html#webflux-new-framework" target="_blank" rel="noopener">Spring Framework/WebFlux</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> WebFlux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-13.Spring Boot Jpa多数据源</title>
      <link href="posts/c3139111.html"/>
      <url>posts/c3139111.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>在实际项目中一般是一个数据源，但是在某些特殊场景可能需要多个数据源，这里以 spring boot jpa 为例演示一下多数据源的配置和使用。</p><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>配置两个数据源，分别是 masterDataSource 和 slaveDataSource，它们由两个配置类 MasterConfiguration 和 SlaveConfiguration 来加载，分别扫描不同路径下的 repository。最后通过测试类来调用。</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727200503199.png" alt="image-20200727200503199"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># master 数据源</span><span class="token attr-name">spring.datasource.master.jdbc-url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://172.16.11.125:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><span class="token attr-name">spring.datasource.master.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.master.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">spring.datasource.master.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment" spellcheck="true"># slave 数据源</span><span class="token attr-name">spring.datasource.slave.jdbc-url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://172.16.11.125:3306/test_jpa?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><span class="token attr-name">spring.datasource.slave.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.slave.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">spring.datasource.slave.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment" spellcheck="true"># 打印sql、自动建表、格式化sql</span><span class="token attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.jpa.generate-ddl</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token attr-value">create</span><span class="token attr-name">spring.jpa.properties.hibernate.format_sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.jpa.properties.hibernate.hbm2ddl.auto</span><span class="token punctuation">=</span><span class="token attr-value">create</span><span class="token attr-name">spring.jpa.properties.hibernate.dialect</span><span class="token punctuation">=</span><span class="token attr-value">org.hibernate.dialect.MySQL5InnoDBDialect</span><span class="token comment" spellcheck="true"># 日志打印</span><span class="token attr-name">logging.level.root</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span><span class="token attr-name">logging.level.org.hibernate</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span><span class="token attr-name">logging.level.org.hibernate.type.descriptor.sql.BasicBinder</span><span class="token punctuation">=</span><span class="token attr-value">TRACE</span><span class="token attr-name">logging.level.org.hibernate.type.descriptor.sql.BasicExtractor</span><span class="token punctuation">=</span><span class="token attr-value">TRACE</span><span class="token attr-name">logging.level.com.soulballad.usage</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>MasterUserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MasterUserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>UserModel<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>    UserModel <span class="token function">findByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    UserModel <span class="token function">findByPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>SlaveUserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SlaveUserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>UserModel<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>    UserModel <span class="token function">findByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    UserModel <span class="token function">findByPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>DataSourceConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JpaProperties jpaProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HibernateProperties hibernateProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"masterDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.master"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">masterDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"slaveDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.slave"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">slaveDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"vendorProperties"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getVendorProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hibernateProperties<span class="token punctuation">.</span><span class="token function">determineHibernateProperties</span><span class="token punctuation">(</span>jpaProperties<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HibernateSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MasterConfiguration.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>entityManagerFactoryRef <span class="token operator">=</span> <span class="token string">"entityManagerFactoryMaster"</span><span class="token punctuation">,</span>    transactionManagerRef <span class="token operator">=</span> <span class="token string">"transactionManagerMaster"</span><span class="token punctuation">,</span>    basePackages <span class="token operator">=</span> <span class="token string">"com.soulballad.usage.springboot.repository.master"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// repo(dao)所在位置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MasterConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"masterDataSource"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> DataSource masterDataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"vendorProperties"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> vendorProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"entityManagerFactoryMaster"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="token function">entityManagerFactoryBean</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>masterDataSource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span>vendorProperties<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">packages</span><span class="token punctuation">(</span><span class="token string">"com.soulballad.usage.springboot.model"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 实体类所在位置</span>            <span class="token punctuation">.</span><span class="token function">persistenceUnit</span><span class="token punctuation">(</span><span class="token string">"masterPersistenceUnit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"entityManagerMaster"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> EntityManager <span class="token function">entityManager</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">entityManagerFactoryBean</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"transactionManagerMaster"</span><span class="token punctuation">)</span>    PlatformTransactionManager <span class="token function">transactionManager</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JpaTransactionManager</span><span class="token punctuation">(</span><span class="token function">entityManagerFactoryBean</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SlaveConfiguration.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>entityManagerFactoryRef <span class="token operator">=</span> <span class="token string">"entityManageFactorySlave"</span><span class="token punctuation">,</span>    transactionManagerRef <span class="token operator">=</span> <span class="token string">"transactionManagerSlave"</span><span class="token punctuation">,</span>    basePackages <span class="token operator">=</span> <span class="token string">"com.soulballad.usage.springboot.repository.slave"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlaveConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"slaveDataSource"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> DataSource slaveDataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"vendorProperties"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> vendorProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"entityManageFactorySlave"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="token function">entityManagerFactoryBean</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>slaveDataSource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span>vendorProperties<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">packages</span><span class="token punctuation">(</span><span class="token string">"com.soulballad.usage.springboot.model"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">persistenceUnit</span><span class="token punctuation">(</span><span class="token string">"slavePersistenceUnit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"entityManageSlave"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> EntityManager <span class="token function">entityManager</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">entityManagerFactoryBean</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"transactionManagerSlave"</span><span class="token punctuation">)</span>    PlatformTransactionManager <span class="token function">transactionManager</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JpaTransactionManager</span><span class="token punctuation">(</span><span class="token function">entityManagerFactoryBean</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试类</strong>：</p><p>UserRepositoryTest.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepositoryTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MasterUserRepository masterUserRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> SlaveUserRepository slaveUserRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"2000-01-01"</span><span class="token punctuation">,</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span> <span class="token string">"13888888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"1999-01-01"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"13777777777"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"1998-01-01"</span><span class="token punctuation">,</span> <span class="token string">"beijing"</span><span class="token punctuation">,</span> <span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"zhaoliu"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"1997-01-01"</span><span class="token punctuation">,</span> <span class="token string">"guangzhou"</span><span class="token punctuation">,</span> <span class="token string">"13555555555"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"sunqi"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"1996-01-01"</span><span class="token punctuation">,</span> <span class="token string">"wuhan"</span><span class="token punctuation">,</span> <span class="token string">"13444444444"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> userList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">,</span> user4<span class="token punctuation">,</span> user5<span class="token punctuation">)</span><span class="token punctuation">;</span>        masterUserRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>        slaveUserRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_findByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel masterUser <span class="token operator">=</span> masterUserRepository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel slaveUser <span class="token operator">=</span> slaveUserRepository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>masterUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>slaveUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_findUserByPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel masterUser <span class="token operator">=</span> masterUserRepository<span class="token punctuation">.</span><span class="token function">findByPhone</span><span class="token punctuation">(</span><span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel slaveUser <span class="token operator">=</span> slaveUserRepository<span class="token punctuation">.</span><span class="token function">findByPhone</span><span class="token punctuation">(</span><span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>masterUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>slaveUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-06-jdbc/spring-boot-multi-datasource" target="_blank" rel="noopener">spring-boot/spring-boot-06-jdbc/spring-boot-multi-datasource</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootMultiDatasourceApplication.main 方法，执行测试类 UserRepositoryTest 中方法，观察结果是否符合预期。</p><p>UserRepositoryTest#test_findByName</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727201741838.png" alt="image-20200727201741838"></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727201521687.png" alt="image-20200727201521687"></p><p>UserRepositoryTest#test_findByName</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727202013956.png" alt="image-20200727202013956"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> JDBC </tag>
            
            <tag> Jpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-12.Spring Boot Mybatis操作数据库</title>
      <link href="posts/4c1ad05.html"/>
      <url>posts/4c1ad05.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>The MyBatis-Spring-Boot-Starter help you build quickly MyBatis applications on top of the <a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a>.</p><p>By using this module you will achieve:</p><ul><li>Build standalone applications</li><li>Reduce the boilerplate to almost zero</li><li>Less XML configuration</li></ul></blockquote><p>MyBatis-Spring-Boot-Starter可帮助您在<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a>之上快速构建MyBatis应用程序。</p><p>通过使用此模块，您将实现：</p><ul><li>构建独立的应用程序</li><li>将样板减少到几乎为零</li><li>减少XML配置</li></ul><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><blockquote><p>As you may already know, to use MyBatis with Spring you need at least an <code>SqlSessionFactory</code> and at least one mapper interface.</p><p>MyBatis-Spring-Boot-Starter will:</p><ul><li>Autodetect an existing <code>DataSource</code></li><li>Will create and register an instance of a <code>SqlSessionFactory</code> passing that <code>DataSource</code> as an input using the <code>SqlSessionFactoryBean</code></li><li>Will create and register an instance of a <code>SqlSessionTemplate</code> got out of the <code>SqlSessionFactory</code></li><li>Auto-scan your mappers, link them to the <code>SqlSessionTemplate</code> and register them to Spring context so they can be injected into your beans</li></ul></blockquote><p>MyBatis-Spring-Boot-Starter 将会：</p><ul><li>自动检测已有的 <code>DataSource</code></li><li>将创建并注册一个 <code>SqlSessionFactory</code> 实例，并使用 <code>SqlSessionFactoryBean</code> 将该 <code>DataSource</code> 作为输入</li><li>将创建并注册一个从 <code>SqlSessionFactory</code> 中获取的 <code>SqlSessionTemplate</code> 实例</li><li>自动扫描您的映射器，将它们链接到 <code>SqlSessionTemplate</code> 并将它们注册到 Spring 上下文中，以便可以将它们注入到您的 bean 中</li></ul><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>spring boot 集成 mybatis，使用了 xml 和注解 两种配置方式。实现了单表的增删改查。</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200723214856482.png" alt="image-20200723214856482"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">mybatis.config-location</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mybatis/mybatis-config.xml</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mybatis/mapper/*.xml</span><span class="token attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token attr-value">com.soulballad.usage.springboot</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://172.16.11.125:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span></code></pre><p>mybatis-config.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Long<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Long<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HashMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.HashMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LinkedHashMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.LinkedHashMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.ArrayList<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LinkedList<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.LinkedList<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>UserMapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.soulballad.usage.springboot.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.soulballad.usage.springboot.model.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id, `name`, age, birthday, address, phone    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUserByName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        FROM t_user        WHERE `name` like concat('%', #{name}, '%')    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUserByPhone<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        FROM t_user        WHERE phone = ${phone}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateByName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.soulballad.usage.springboot.model.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        UPDATE t_user SET phone = #{phone} WHERE `name` = #{name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteByName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       DELETE FROM t_user WHERE `name` = #{name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>UserMapper.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT id, `name`, age, birthday, address, phone FROM t_user"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"phone"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"phone"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserModel <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    Page&lt;UserModel> findByPage(SpringDataWebProperties.Pageable pageable);</span>    List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findUserByPhone</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span> String phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">updateByName</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO t_user(`name`, age, birthday, address, phone) VALUES(#{name}, #{age}, #{birthday}, #{address}, #{phone})"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询所有数据     * @return user     */</span>    List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称查询     * @param name name     * @return user     */</span>    UserModel <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据电话查询     * @param phone 电话     * @return user     */</span>    List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findUserByPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称更新电话     * @param phone 电话     * @param name 名称     * @return 影响行数     */</span>    UserModel <span class="token function">updateByName</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称删除     * @param name 名称     * @return 影响行数     */</span>    UserModel <span class="token function">deleteByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增     * @param user user     * @return user     */</span>    UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findUserByPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">findUserByPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">updateByName</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">updateByName</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel user <span class="token operator">=</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">deleteByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userMapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/findByName/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/findByPhone/{phone}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findByPhone</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/updateByName"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">updateByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">updateByName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/deleteByName/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">deleteByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-06-jdbc/spring-boot-mybatis" target="_blank" rel="noopener">spring-boot/spring-boot-06-jdbc/spring-boot-mybatis</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootMybatisApplication.main 方法，在 spring-boot-mybatis.http 访问下列地址，观察输出信息是否符合预期。</p><p><strong>查询用户列表（所有）</strong></p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210408036.png" alt="image-20200721210408036"></p><p><strong>根据用户名查询</strong></p><pre class=" language-http"><code class="language-http">### GET /user/findByName/{name}GET http://localhost:8080/user/findByName/lisi<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210526269.png" alt="image-20200721210526269"></p><p><strong>根据手机号查询</strong></p><pre class=" language-http"><code class="language-http">### GET /user/findByPhone/{phone}GET http://localhost:8080/user/findByPhone/13666666666<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210624524.png" alt="image-20200721210624524"></p><p><strong>添加用户</strong></p><pre class=" language-http"><code class="language-http">### POST user/addPOST http://localhost:8080/user/add<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"abcd12"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1987-07-20"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"washington"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"15666666666"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726164659485.png" alt="image-20200726164659485"></p><p><strong>更新用户信息</strong></p><pre class=" language-http"><code class="language-http">### PUT /user/updateByNamePUT http://localhost:8080/user/updateByName<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13456789012"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210849107.png" alt="image-20200721210849107"></p><p><strong>删除用户</strong></p><pre class=" language-http"><code class="language-http">### DELETE /user/deleteByName/{name}DELETE http://localhost:8080/user/deleteByName/zhangsan<span class="token header-name keyword">Content-Type:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210950916.png" alt="image-20200721210950916"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">Mybatis官网</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> JDBC </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-11.Spring Boot JdbcTemplate操作数据库</title>
      <link href="posts/168bdb80.html"/>
      <url>posts/168bdb80.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>This is the central class in the JDBC core package. It simplifies the use of JDBC and helps to avoid common errors. It executes core JDBC workflow, leaving application code to provide SQL and extract results. This class executes SQL queries or updates, initiating iteration over ResultSets and catching JDBC exceptions and translating them to the generic, more informative exception hierarchy defined in the dao package.</p></blockquote><p>这是JDBC核心软件包中的中心类。它简化了JDBC的使用并有助于避免常见错误。它执行核心的JDBC工作流程，留下应用程序代码以提供SQL并提取结果。此类执行SQL查询或更新，在ResultSets上启动迭代并捕获JDBC异常，并将其转换为dao包中定义的通用，信息量更大的异常层次结构。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>使用 JdbcTemplate 连接 mysql 数据库，进行常见的数据库操作，并在 web 项目中展示。</p><p>同时配置了两个数据源，分别是：master、slave，可以方便的在二者之间切换。</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200722221011781.png" alt="image-20200722221011781"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.master.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://172.16.11.125:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><span class="token attr-name">spring.datasource.master.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.master.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">spring.datasource.master.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">spring.datasource.slave.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://172.16.11.125:3306/test_jpa?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><span class="token attr-name">spring.datasource.slave.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.slave.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">spring.datasource.slave.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>DataSourceConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.master"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSourceProperties <span class="token function">masterDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.slave"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSourceProperties <span class="token function">slaveDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token keyword">public</span> DataSource <span class="token function">masterDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">masterDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">slaveDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">slaveDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"masterJdbcTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JdbcTemplate <span class="token function">masterJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token function">masterDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"slaveJdbcTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JdbcTemplate <span class="token function">slaveJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token function">slaveDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserRowMapper.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRowMapper</span> <span class="token keyword">implements</span> <span class="token class-name">RowMapper</span><span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">mapRow</span><span class="token punctuation">(</span>ResultSet resultSet<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据id查找     * @param id id     * @return userModel     */</span>    UserModel <span class="token function">findUserById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称查找     * @param name name     * @return userModel     */</span>    UserModel <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询所有     * @return userModel     */</span>    List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增     * @param userModel userModel     * @return userModel     */</span>    UserModel <span class="token function">addUser</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增2     * @param userModel userModel     * @return userModel     */</span>    UserModel <span class="token function">insertUser</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增并获取主键     * @param userModel userModel     * @return userModel     */</span>    UserModel <span class="token function">insertAndGetPK</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据id更新地址     * @param address 地址     * @param id id     * @return userModel     */</span>    UserModel <span class="token function">updateAddressById</span><span class="token punctuation">(</span>String address<span class="token punctuation">,</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据id删除     * @param id id     * @return userModel     */</span>    UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserServiceImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"masterJdbcTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">findUserById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select id, `name`, age, birthday, address, phone from t_user where id = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select id, `name`, age, birthday, address, phone from t_user where name = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select id, `name`, age, birthday, address, phone from t_user"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// List&lt;Map&lt;String, Object>> maps = jdbcTemplate.queryForList(sql);</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token punctuation">(</span>UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">addUser</span><span class="token punctuation">(</span>UserModel user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO t_user(`name`, age, birthday, address, phone) VALUES (?, ?, ?, ?, ?);"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// jdbcTemplate.update(sql, new Object[] {user.getName(), user.getAge(), user.getBirthday(), user.getAddress(),</span>        <span class="token comment" spellcheck="true">// user.getPhone()});</span>        <span class="token comment" spellcheck="true">// 批量操作使用 batchUpdate</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">insertUser</span><span class="token punctuation">(</span>UserModel user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO t_user(`name`, age, birthday, address, phone) VALUES (?, ?, ?, ?, ?);"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> ps <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">insertAndGetPK</span><span class="token punctuation">(</span>UserModel user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO t_user(`name`, age, birthday, address, phone) VALUES (?, ?, ?, ?, ?);"</span><span class="token punctuation">;</span>        KeyHolder keyHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneratedKeyHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>connection <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            PreparedStatement ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ps<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> keyHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> pk <span class="token operator">=</span> keyHolder<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"insertAndGetPK pk is {}"</span><span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserById</span><span class="token punctuation">(</span>pk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">updateAddressById</span><span class="token punctuation">(</span>String address<span class="token punctuation">,</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"UPDATE t_user set address = ? where id = ?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> address<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"DELETE FROM t_user where id = ?"</span><span class="token punctuation">;</span>        UserModel user <span class="token operator">=</span> <span class="token function">findUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/findByName/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/findById/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/insert"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/insertAndGet"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">insertAndGet</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">insertAndGetPK</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/updateAddressById"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">updateAddressById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">updateAddressById</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/deleteById/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-06-jdbc/spring-boot-jdbc-template" target="_blank" rel="noopener">spring-boot/spring-boot-06-jdbc/spring-boot-jdbc-template</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootJdbcTemplateApplication.main 方法，在 spring-boot-jdbc-template.http 访问下列地址，观察输出信息是否符合预期。</p><p><strong>查询列表</strong></p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726154942345.png" alt="image-20200726154942345"></p><p><strong>根据姓名查询</strong></p><pre class=" language-http"><code class="language-http">### GET /user/findByName/{name}GET http://localhost:8080/user/findByName/zhangsan<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155020898.png" alt="image-20200726155020898"></p><p><strong>根据id查询</strong></p><pre class=" language-http"><code class="language-http">### GET /user/findById/{id}GET http://localhost:8080/user/findById/2<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155125169.png" alt="image-20200726155125169"></p><p><strong>添加用户</strong></p><pre class=" language-http"><code class="language-http">### POST /user/addPOST http://localhost:8080/user/add<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"aa123"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">31</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1989-05-21"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"hangzhou"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"15666666666"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155240977.png" alt="image-20200726155240977"></p><p><strong>添加用户2</strong></p><pre class=" language-http"><code class="language-http">### POST /user/insertPOST http://localhost:8080/user/insert<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"bb123"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1988-06-07"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"xian"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13455555555"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155320939.png" alt="image-20200726155320939"></p><p><strong>新增用户并返回主键</strong></p><pre class=" language-http"><code class="language-http">POST http://localhost:8080/user/insertAndGet<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"cc123"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1978-03-15"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"nanjing"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13999999999"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155456317.png" alt="image-20200726155456317"></p><p><strong>更新用户地址</strong></p><pre class=" language-http"><code class="language-http">### PUT /user/updateAddressByIdPUT http://localhost:8080/user/updateAddressById<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"suzhou"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155534709.png" alt="image-20200726155534709"></p><p><strong>根据id删除</strong></p><pre class=" language-http"><code class="language-http">### DELETE /user/deleteByIdDELETE http://localhost:8080/user/deleteById/7<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155706289.png" alt="image-20200726155706289"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> JDBC </tag>
            
            <tag> JdbcTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-10.Spring Boot Jpa操作数据库</title>
      <link href="posts/170665fe.html"/>
      <url>posts/170665fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>The Java Persistence API is a standard technology that lets you “map” objects to relational databases. The <code>spring-boot-starter-data-jpa</code> POM provides a quick way to get started. It provides the following key dependencies:</p><ul><li>Hibernate: One of the most popular JPA implementations.</li><li>Spring Data JPA: Makes it easy to implement JPA-based repositories.</li><li>Spring ORMs: Core ORM support from the Spring Framework.</li></ul></blockquote><p>Java Persistence API 是一种标准技术，可让您将对象“映射”到关系数据库。 spring-boot-starter-data-jpa POM提供了一种快速入门的方法。它提供以下关键依赖性：</p><ul><li>Hibernate：最流行的JPA实现之一。</li><li>Spring Data JPA：使基于JPA的存储库的实现变得容易。</li><li>Spring ORMs：Spring 框架对Core ORM的支持。</li></ul><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721204052309.png" alt="image-20200721204052309"></p><ul><li>基于Spring和JPA构建存储库的先进支持</li><li>支持 Querydsl 谓词，从而支持类型安全的JPA查询</li><li>实体类的透明审核</li><li>分页支持，动态查询执行，集成自定义数据访问代码的能力</li><li>在启动时验证 @Query 带注释的查询</li><li>支持基于XML的实体映射</li><li>通过引入 @EnableJpaRepositories，支持基于 JavaConfig 的存储库配置</li></ul><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>演示基于 <code>spring-boot-starter-data-jpa</code> 来操作数据库的简单 web mvc 项目。包括以下常用场景：</p><ul><li>单表的增、删、改、查</li><li>多表关联查询（这里使用2张表）</li><li>复杂条件混合查询</li><li>分页查询</li></ul><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721204828632.png" alt="image-20200721204828632"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://172.16.11.125:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment" spellcheck="true"># 打印sql</span><span class="token attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 自动建表</span><span class="token attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token attr-value">create</span><span class="token comment" spellcheck="true"># 方言；innodb存储引擎</span><span class="token attr-name">spring.jpa.properties.hibernate.dialect</span><span class="token punctuation">=</span><span class="token attr-value">org.hibernate.dialect.MySQL5InnoDBDialect</span><span class="token comment" spellcheck="true"># 格式化sql</span><span class="token attr-name">spring.jpa.properties.hibernate.format_sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 打印sql中参数</span><span class="token attr-name">logging.level.org.hibernate.type.descriptor.sql.BasicBinder</span><span class="token punctuation">=</span><span class="token attr-value">trace</span><span class="token attr-name">spring.data.web.pageable.default-page-size</span><span class="token punctuation">=</span><span class="token attr-value">3</span><span class="token attr-name">spring.data.web.pageable.page-parameter</span><span class="token punctuation">=</span><span class="token attr-value">pageNum</span><span class="token attr-name">spring.data.web.pageable.size-parameter</span><span class="token punctuation">=</span><span class="token attr-value">pageSize</span><span class="token attr-name">spring.data.web.sort.sort-parameter</span><span class="token punctuation">=</span><span class="token attr-value">orderBy</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>Order.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>SEQUENCE<span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long userId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String orderCode<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> BigDecimal totalMoney<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String orderDate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span>Long userId<span class="token punctuation">,</span> String orderCode<span class="token punctuation">,</span> BigDecimal totalMoney<span class="token punctuation">,</span> String orderDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderCode <span class="token operator">=</span> orderCode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>totalMoney <span class="token operator">=</span> totalMoney<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderDate <span class="token operator">=</span> orderDate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>User.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>OrderRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Order<span class="token punctuation">,</span> Long<span class="token operator">></span><span class="token punctuation">,</span> JpaSpecificationExecutor<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"select "</span>        <span class="token operator">+</span> <span class="token string">"o.id as orderId, o.orderCode as orderCode, o.orderDate as orderDate, o.userId as userId, "</span>        <span class="token operator">+</span> <span class="token string">"u.address as address, u.phone as phone, u.age as age from Order o inner join User u on o.userId = u.id where o.orderCode = ?1"</span><span class="token punctuation">)</span>    OrderInfo <span class="token function">selectOrderByCode</span><span class="token punctuation">(</span>String orderCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"select u from User u where u.name = ?1"</span><span class="token punctuation">)</span>    User <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"select u from User u"</span><span class="token punctuation">)</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByPage</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"select u from User u where u.phone = :phone"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUserByPhone</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span> String phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Modifying</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"update User set phone = ?1 where name = ?2"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">updateByName</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Modifying</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"delete from User where name = :name"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>OrderService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询所有user     * @return order     */</span>    List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据订单号关联查询     * @param orderCode 订单号     * @return OrderInfo     */</span>    OrderInfo <span class="token function">selectOrderByCode</span><span class="token punctuation">(</span>String orderCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用example查询     * @param order 查询参数     * @return Order     */</span>    List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectByExample</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 多条件组合查询     * @param orderParam 查询参数     * @return Order     */</span>    Page<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectByCondition</span><span class="token punctuation">(</span>OrderParam orderParam<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询所有数据     * @return user     */</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称查询     * @param name name     * @return user     */</span>    User <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据电话查询     * @param phone 电话     * @return user     */</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUserByPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 分页查询     * @param pageable 分页参数     * @return user     */</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByPage</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称更新电话     * @param phone 电话     * @param name 名称     * @return 影响行数     */</span>    User <span class="token function">updateByName</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称删除     * @param name 名称     * @return 影响行数     */</span>    User <span class="token function">deleteByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增     * @param user user     * @return user     */</span>    User <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUserByPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findUserByPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByPage</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findByPage</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">updateByName</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userRepository<span class="token punctuation">.</span><span class="token function">updateByName</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">deleteByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">deleteByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>OrderServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderRepository orderRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> OrderInfo <span class="token function">selectOrderByCode</span><span class="token punctuation">(</span>String orderCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderRepository<span class="token punctuation">.</span><span class="token function">selectOrderByCode</span><span class="token punctuation">(</span>orderCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectByExample</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// exact：精确比配 contains: 模糊匹配 startsWith：从头匹配</span>        <span class="token comment" spellcheck="true">// 同 matcher -> matcher.exact();</span>        ExampleMatcher exampleMatcher <span class="token operator">=</span> <span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> GenericPropertyMatcher<span class="token operator">:</span><span class="token operator">:</span>exact<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">"orderCode"</span><span class="token punctuation">,</span> GenericPropertyMatcher<span class="token operator">:</span><span class="token operator">:</span>contains<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">"orderDate"</span><span class="token punctuation">,</span> GenericPropertyMatcher<span class="token operator">:</span><span class="token operator">:</span>startsWith<span class="token punctuation">)</span><span class="token punctuation">;</span>        Example<span class="token operator">&lt;</span>Order<span class="token operator">></span> example <span class="token operator">=</span> Example<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> exampleMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> orderRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectByCondition</span><span class="token punctuation">(</span>OrderParam orderParam<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> query<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Predicate<span class="token operator">></span> predicates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// equal userId</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>orderParam<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// like orderCode</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>orderParam<span class="token punctuation">.</span><span class="token function">getOrderCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"orderCode"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%"</span> <span class="token operator">+</span> orderParam<span class="token punctuation">.</span><span class="token function">getOrderCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// between</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>orderParam<span class="token punctuation">.</span><span class="token function">getOrderStartDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>orderParam<span class="token punctuation">.</span><span class="token function">getOrderEndDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"orderDate"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">.</span><span class="token function">getOrderStartDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">.</span><span class="token function">getOrderEndDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// greater than</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>orderParam<span class="token punctuation">.</span><span class="token function">getTotalMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"totalMoney"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">.</span><span class="token function">getTotalMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>predicates<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRestriction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>OrderInfo.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderInfo</span> <span class="token punctuation">{</span>    Long <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Long <span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getOrderCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getOrderDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>OrderParam.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderParam</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String orderCode<span class="token punctuation">;</span>    <span class="token keyword">private</span> BigDecimal totalMoney<span class="token punctuation">;</span>    <span class="token keyword">private</span> String orderStartDate<span class="token punctuation">;</span>    <span class="token keyword">private</span> String orderEndDate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get&amp;set</span><span class="token punctuation">}</span></code></pre><p>OrderController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderService orderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/queryByCode/{orderCode}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> OrderInfo <span class="token function">queryByCode</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String orderCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">selectOrderByCode</span><span class="token punctuation">(</span>orderCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/queryByExample"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectByExample</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/queryByCondition"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">queryByCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> OrderParam orderParam<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">selectByCondition</span><span class="token punctuation">(</span>orderParam<span class="token punctuation">,</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/findByName/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/findByPhone/{phone}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByPhone</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/page"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">page</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findByPage</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/updateByName"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">updateByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">updateByName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/deleteByName/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">deleteByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>InitializeDataCommand.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitializeDataCommand</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderRepository orderRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"2000-01-01"</span><span class="token punctuation">,</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span> <span class="token string">"13888888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"1999-01-01"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"13777777777"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"1998-01-01"</span><span class="token punctuation">,</span> <span class="token string">"beijing"</span><span class="token punctuation">,</span> <span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhaoliu"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"1997-01-01"</span><span class="token punctuation">,</span> <span class="token string">"guangzhou"</span><span class="token punctuation">,</span> <span class="token string">"13555555555"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"sunqi"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"1996-01-01"</span><span class="token punctuation">,</span> <span class="token string">"wuhan"</span><span class="token punctuation">,</span> <span class="token string">"13444444444"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecureRandom random <span class="token operator">=</span> SecureRandom<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"SHA1PRNG"</span><span class="token punctuation">,</span> <span class="token string">"SUN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalDateTime now <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">,</span> user4<span class="token punctuation">,</span> user5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Order<span class="token operator">></span> orders <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            Order order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            order<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            order<span class="token punctuation">.</span><span class="token function">setOrderCode</span><span class="token punctuation">(</span><span class="token string">"OC202005231205000"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            order<span class="token punctuation">.</span><span class="token function">setOrderDate</span><span class="token punctuation">(</span>dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            order<span class="token punctuation">.</span><span class="token function">setTotalMoney</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> order<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-06-jdbc/spring-boot-data-jpa" target="_blank" rel="noopener">spring-boot/spring-boot-06-jdbc/spring-boot-data-jpa</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootJpaDemoApplication.main 方法，在 spring-boot-data-jpa.http 访问下列地址，观察输出信息是否符合预期。</p><h2 id="4-1-t-user"><a href="#4-1-t-user" class="headerlink" title="4.1 t_user"></a>4.1 t_user</h2><p><strong>查询用户列表（所有）</strong></p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210408036.png" alt="image-20200721210408036"></p><p><strong>根据用户名查询</strong></p><pre class=" language-http"><code class="language-http">### GET /user/findByName/{name}GET http://localhost:8080/user/findByName/lisi<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210526269.png" alt="image-20200721210526269"></p><p><strong>根据手机号查询</strong></p><pre class=" language-http"><code class="language-http">### GET /user/findByPhone/{phone}GET http://localhost:8080/user/findByPhone/13666666666<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210624524.png" alt="image-20200721210624524"></p><p><strong>查询用户列表（分页）</strong></p><pre class=" language-http"><code class="language-http">### GET /user/pageGET http://localhost:8080/user/page<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"pageable"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>     <span class="token string">"pageNumber"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>     <span class="token string">"pageSize"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>     <span class="token string">"orderBy"</span><span class="token punctuation">:</span><span class="token string">"age desc"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210744826.png" alt="image-20200721210744826"></p><p><strong>更新用户信息</strong></p><pre class=" language-http"><code class="language-http">### PUT /user/updateByNamePUT http://localhost:8080/user/updateByName<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13456789012"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210849107.png" alt="image-20200721210849107"></p><p><strong>删除用户</strong></p><pre class=" language-http"><code class="language-http">### DELETE /user/deleteByName/{name}DELETE http://localhost:8080/user/deleteByName/zhangsan<span class="token header-name keyword">Content-Type:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210950916.png" alt="image-20200721210950916"></p><h2 id="4-2-t-order"><a href="#4-2-t-order" class="headerlink" title="4.2 t_order"></a>4.2 t_order</h2><p><strong>查询订单列表（所有）</strong></p><pre class=" language-http"><code class="language-http">### GET  /order/listGET http://localhost:8080/order/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721211249281.png" alt="image-20200721211249281"></p><p><strong>根据订单编号关联查询</strong></p><pre class=" language-http"><code class="language-http">### GET /order/queryByCode/{orderCode}GET http://localhost:8080/order/queryByCode/OC2020052312050002<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721211331472.png" alt="image-20200721211331472"></p><p><strong>多条件查询订单</strong></p><pre class=" language-http"><code class="language-http">### GET /order/queryByExampleGET http://localhost:8080/order/queryByExample<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"userId"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"orderCode"</span><span class="token punctuation">:</span><span class="token string">"OC202005231"</span><span class="token punctuation">,</span><span class="token string">"orderDate"</span><span class="token punctuation">:</span> <span class="token string">"2020-05-17"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721211616720.png" alt="image-20200721211616720"></p><p><strong>多条件混合查询</strong></p><pre class=" language-http"><code class="language-http">### GET /order/queryByConditionGET http://localhost:8080/order/queryByCondition<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"userId"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token string">"orderCode"</span><span class="token punctuation">:</span> <span class="token string">"OC20200523"</span><span class="token punctuation">,</span>  <span class="token string">"totalMoney"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token string">"orderStartDate"</span><span class="token punctuation">:</span> <span class="token string">"2020-02-10 16:17:12"</span><span class="token punctuation">,</span>  <span class="token string">"orderEndDate"</span><span class="token punctuation">:</span> <span class="token string">"2020-05-30 16:17:12"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721211716482.png" alt="image-20200721211716482"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://spring.io/projects/spring-data-jpa#overview" target="_blank" rel="noopener">官方 spring-data-jpa</a></li><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features-jpa-and-spring-data" target="_blank" rel="noopener">官方文档-Spring Boot Features/JPA</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> JDBC </tag>
            
            <tag> Jpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-9.Spring Boot Admin</title>
      <link href="posts/cae2760d.html"/>
      <url>posts/cae2760d.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring Boot Admin is a community project to manage and monitor your <a href="http://projects.spring.io/spring-boot/" target="_blank" rel="noopener">Spring Boot</a> ® applications. The applications register with our Spring Boot Admin Client (via HTTP) or are discovered using Spring Cloud ® (e.g. Eureka, Consul). The UI is just a Vue.js application on top of the Spring Boot Actuator endpoints.</p></blockquote><p>Spring Boot Admin是一个社区项目，用于管理和监视Spring Boot® 应用程序。这些应用程序在我们的Spring Boot Admin Client中注册（通过HTTP），或者使用Spring Cloud®（例如，Eureka，Consul）发现。 UI只是Spring Boot Actuator端点之上的 Vue.js 应用程序。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ul><li>Show health status：显示健康状况</li><li>Show details, like：显示详细信息，例如<ul><li>JVM &amp; memory metrics：JVM 和 内存指标</li><li>micrometer.io metrics：micrometer io指标</li><li>Datasource metrics：数据源指标</li><li>Cache metrics：缓存指标</li></ul></li><li>Show build-info number：显示构建信息编号</li><li>Follow and download logfile：追踪并下载日志文件</li><li>View jvm system- &amp; environment-properties：查看 jvm 系统属性和环境属性</li><li>View Spring Boot Configuration Properties：查看 Spring Boot 配置属性</li><li>Support for Spring Cloud’s postable /env- &amp;/refresh-endpoint：支持Spring Cloud的可发布/ env-和// refresh-endpoint</li><li>Easy loglevel management：轻松的日志级别管理</li><li>Interact with JMX-beans：与JMX-beans交互</li><li>View thread dump：查看线程转储</li><li>View http-traces：查看http跟踪</li><li>View auditevents：查看审计事件</li><li>View http-endpoints：查看http端点</li><li>View scheduled tasks：查看定时任务</li><li>View and delete active sessions (using spring-session)：查看和删除活动会话（使用spring-session）</li><li>View Flyway / Liquibase database migrations：查看Flyway / Liquibase数据库迁移</li><li>Download heapdump：下载 heapdump</li><li>Notification on status change (via e-mail, Slack, Hipchat, …)：状态更改通知（通过电子邮件，Slack，Hipchat等）</li><li>Event journal of status changes (non persistent)：状态更改的事件日志（非持久性）</li></ul><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>使用 spring boot admin 需要两个项目：一个是 admin 项目，一个是 client 项目。admin 项目开启 SpringBoot Admin 功能，client 项目注册到 admin 项目上。</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719210837867.png" alt="image-20200719210837867"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><p>spring-boot-admin –&gt; pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>spring-boot-admin-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>spring-boot-admin-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span></code></pre><p>spring-boot-admin-server –&gt; pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>spring-boot-admin-client –&gt; pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>spring-boot-admin-server –&gt; application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-admin-server</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span></code></pre><p>spring-boot-admin-client –&gt; application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-admin-client</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9090</span><span class="token comment" spellcheck="true"># 指定admin-server地址</span><span class="token attr-name">spring.boot.admin.client.url</span><span class="token punctuation">=</span><span class="token attr-value">http://localhost:8080</span><span class="token comment" spellcheck="true"># 监控所有的endpoint</span><span class="token attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token attr-value">*</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>SpringBootAdminServerApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAdminServer</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootAdminServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootAdminServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SpringBootAdminClientApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootAdminClientApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootAdminClientApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-05-basis/spring-boot-admin" target="_blank" rel="noopener">spring-boot/spring-boot-05-basis/spring-boot-admin</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>先启动 SpringBootAdminServerApplication.main 方法，再启动 SpringBootAdminClientApplication.main 方法。</p><p>访问 <a href="http://localhost:8080/%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E5%88%B0" target="_blank" rel="noopener">http://localhost:8080/，会自动跳转到</a> Spring Boot Admin 界面，可以看到 spring-boot-admin-client 已经注册上来了</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719211412428.png" alt="image-20200719211412428"></p><p>点击 spring-boot-admin-client，可以查看各项监控指标</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719211606654.png" alt="image-20200719211606654"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://github.com/codecentric/spring-boot-admin" target="_blank" rel="noopener">Spring Boot Admin</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-8.Spring Boot Actuator监控</title>
      <link href="posts/d660b501.html"/>
      <url>posts/d660b501.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring Boot includes a number of additional features to help you monitor and manage your application when you push it to production. You can choose to manage and monitor your application by using HTTP endpoints or with JMX. Auditing, health, and metrics gathering can also be automatically applied to your application.</p></blockquote><p>Spring Boot包含许多附加功能，可在您将应用程序投入生产时帮助您监控和管理应用程序。您可以选择使用HTTP端点或JMX管理和监控您的应用程序。审计，健康状况和指标收集也可以自动应用于您的应用程序。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><blockquote><p>Actuator endpoints let you monitor and interact with your application. Spring Boot includes a number of built-in endpoints and lets you add your own. For example, the <code>health</code> endpoint provides basic application health information.</p></blockquote><p>监控端点使您可以监控应用程序并与之交互。 Spring Boot包含许多内置端点，您可以添加自己的端点。例如，运行健康状况端点提供基本的应用程序运行状况信息。</p><p>The following technology-agnostic endpoints are available：</p><table><thead><tr><th>ID</th><th>Description</th></tr></thead><tbody><tr><td>auditevents</td><td>Exposes audit events information for the current application. Requires an  AuditEventRepository bean.</td></tr><tr><td>beans</td><td>Displays a complete list of all the Spring beans in your application.</td></tr><tr><td>caches</td><td>Exposes available caches.</td></tr><tr><td>conditions</td><td>Shows the conditions that were evaluated on configuration and  auto-configuration classes and the reasons why they did or did not match.</td></tr><tr><td>configprops</td><td>Displays a collated list of all @ConfigurationProperties.</td></tr><tr><td>env</td><td>Exposes properties from Spring’s ConfigurableEnvironment.</td></tr><tr><td>flyway</td><td>Shows any Flyway database migrations that have been applied. Requires one  or more Flyway beans.</td></tr><tr><td>health</td><td>Shows application health information.</td></tr><tr><td>httptrace</td><td>Displays HTTP trace information (by default, the last 100 HTTP  request-response exchanges). Requires an HttpTraceRepository bean.</td></tr><tr><td>info</td><td>Displays arbitrary application info.</td></tr><tr><td>integrationgraph</td><td>Shows the Spring Integration graph. Requires a dependency on  spring-integration-core.</td></tr><tr><td>loggers</td><td>Shows and modifies the configuration of loggers in the application.</td></tr><tr><td>liquibase</td><td>Shows any Liquibase database migrations that have been applied. Requires  one or more Liquibase beans.</td></tr><tr><td>metrics</td><td>Shows ‘metrics’ information for the current application.</td></tr><tr><td>mappings</td><td>Displays a collated list of all @RequestMapping paths.</td></tr><tr><td>scheduledtasks</td><td>Displays the scheduled tasks in your application.</td></tr><tr><td>sessions</td><td>Allows retrieval and deletion of user sessions from a Spring  Session-backed session store. Requires a Servlet-based web application using  Spring Session.</td></tr><tr><td>shutdown</td><td>Lets the application be gracefully shutdown. Disabled by default.</td></tr><tr><td>threaddump</td><td>Performs a thread dump.</td></tr></tbody></table><p>If your application is a web application (Spring MVC, Spring WebFlux, or Jersey), you can use the following additional endpoints：</p><table><thead><tr><th>ID</th><th>Description</th></tr></thead><tbody><tr><td>heapdump</td><td>Returns an hprof heap dump file.</td></tr><tr><td>jolokia</td><td>Exposes JMX beans over HTTP (when Jolokia is on the classpath, not  available for WebFlux). Requires a dependency on jolokia-core.</td></tr><tr><td>logfile</td><td>Returns the contents of the logfile (if logging.file.name or  logging.file.path properties have been set). Supports the use of the HTTP  Range header to retrieve part of the log file’s content.</td></tr><tr><td>prometheus</td><td>Exposes metrics in a format that can be scraped by a Prometheus server.  Requires a dependency on micrometer-registry-prometheus.</td></tr></tbody></table><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>开启 endpoint，使用 http 进行访问</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719175106586.png" alt="image-20200719175106586"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">info.app.version</span><span class="token punctuation">=</span><span class="token attr-value">1.0.0</span><span class="token attr-name">info.app.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-actuator</span><span class="token attr-name">info.app.test</span><span class="token punctuation">=</span><span class="token attr-value">test</span><span class="token comment" spellcheck="true"># 启动所有endpoint</span><span class="token attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token attr-value">*</span><span class="token comment" spellcheck="true"># 显示详细信息</span><span class="token attr-name">management.endpoint.health.show-details</span><span class="token punctuation">=</span><span class="token attr-value">always</span><span class="token comment" spellcheck="true"># 关闭应用程序</span><span class="token attr-name">management.endpoint.shutdown.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>HelloController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-05-basis/spring-boot-actuator" target="_blank" rel="noopener">spring-boot/spring-boot-05-basis/spring-boot-actuator</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootActuatorApplication.main 方法，在 spring-boot-actuator.http 访问下列地址，观察输出信息。</p><pre class=" language-http"><code class="language-http">### GET /actuatorGET http://localhost:8080/actuator</code></pre><p>请求响应信息如下</p><pre class=" language-json"><code class="language-json">GET http<span class="token operator">:</span>//localhost<span class="token operator">:</span><span class="token number">8080</span>/actuatorHTTP/<span class="token number">1.1</span> <span class="token number">200</span> Content-Type<span class="token operator">:</span> application/vnd.spring-boot.actuator.v3+jsonTransfer-Encoding<span class="token operator">:</span> chunkedDate<span class="token operator">:</span> Sun<span class="token punctuation">,</span> <span class="token number">19</span> Jul <span class="token number">2020</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">32</span> GMT<span class="token punctuation">{</span>  <span class="token property">"_links"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"self"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"beans"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/beans"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"caches-cache"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/caches/{cache}"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"caches"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/caches"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"health"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/health"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"health-path"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/health/{*path}"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"info"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/info"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"conditions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/conditions"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"shutdown"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/shutdown"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"configprops"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/configprops"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/env"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"env-toMatch"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/env/{toMatch}"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"loggers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/loggers"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"loggers-name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/loggers/{name}"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"heapdump"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/heapdump"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"threaddump"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/threaddump"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"metrics"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/metrics"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"metrics-requiredMetricName"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/metrics/{requiredMetricName}"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"scheduledtasks"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/scheduledtasks"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/mappings"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Response code<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">;</span> Time<span class="token operator">:</span> 48ms<span class="token punctuation">;</span> Content length<span class="token operator">:</span> <span class="token number">1659</span> bytes</code></pre><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/production-ready-features.html#production-ready" target="_blank" rel="noopener">官方文档-Spring Boot Features/Actuator</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Actuator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-7.Spring Boot Email邮件发送</title>
      <link href="posts/a2a90ed3.html"/>
      <url>posts/a2a90ed3.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>The Spring Framework provides an easy abstraction for sending email by using the <code>JavaMailSender</code> interface, and Spring Boot provides auto-configuration for it as well as a starter module.</p></blockquote><p>Spring Framework 通过使用 JavaMailSender 接口提供了用于发送电子邮件的简单抽象，Spring Boot 为它以及启动程序模块提供了自动装配。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><blockquote><p>If <code>spring.mail.host</code> and the relevant libraries (as defined by <code>spring-boot-starter-mail</code>) are available, a default <code>JavaMailSender</code> is created if none exists. The sender can be further customized by configuration items from the <code>spring.mail</code> namespace. See <a href="https://github.com/spring-projects/spring-boot/tree/v2.2.8.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java" target="_blank" rel="noopener"><code>MailProperties</code></a> for more details.</p></blockquote><p>如果有 “ spring.mail.host” 和相关的库（由“ spring-boot-starter-mail”定义）可用，那么如果不存在默认的“ JavaMailSender”，则会创建一个。可以通过 spring.mail 命名空间中的配置项进一步定制发送者。参考 <a href="https://github.com/spring-projects/spring-boot/tree/v2.2.8.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java" target="_blank" rel="noopener"><code>MailProperties</code></a> 以获取更多详细信息。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mail"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_CHARSET<span class="token punctuation">;</span>    <span class="token keyword">private</span> String host<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer port<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> String protocol <span class="token operator">=</span> <span class="token string">"smtp"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Charset defaultEncoding<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> properties<span class="token punctuation">;</span>    <span class="token keyword">private</span> String jndiName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get&amp;set</span><span class="token punctuation">}</span></code></pre><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>测试 spring boot 发送 email</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719163127844.png" alt="image-20200719163127844"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-email</span><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value">pop.qq.com</span><span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value">aaa@123.com</span><span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value">eiosdal</span><span class="token attr-name">spring.mail.default-encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span><span class="token attr-name">mail.from.addr</span><span class="token punctuation">=</span><span class="token attr-value">aaa@123.com</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>EmailSenderService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmailSenderService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 发送简单邮件     * @param to 目的地     * @param subject 主题     * @param content 内容     */</span>    <span class="token keyword">void</span> <span class="token function">sendSimpleEmail</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发送含有html内容的邮件     * @param to 目的地     * @param subject 主题     * @param content 内容     */</span>    <span class="token keyword">void</span> <span class="token function">sendHtmlEmail</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发送带有附件的邮件     * @param to 目的地     * @param subject 主题     * @param content 内容     * @param filePath 附件路径     */</span>    <span class="token keyword">void</span> <span class="token function">sendEmailWithAttachments</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">,</span> String filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发送带有静态资源（图片）的邮件     * @param to 目的地     * @param subject 主题     * @param content 内容     * @param resPath 资源路径     * @param resId 资源id     */</span>    <span class="token keyword">void</span> <span class="token function">sendEmailWithInlineResource</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">,</span> String resPath<span class="token punctuation">,</span> String resId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>EmailSenderServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailSenderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmailSenderService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> JavaMailSender mailSender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${mail.from.addr}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String from<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSimpleEmail</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleMailMessage message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendHtmlEmail</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MimeMessageHelper messageHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            messageHelper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>            messageHelper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>            messageHelper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>            messageHelper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendEmailWithAttachments</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">,</span> String filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileSystemResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String fileName <span class="token operator">=</span> filePath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>filePath<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span>separator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendEmailWithInlineResource</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">,</span> String resPath<span class="token punctuation">,</span> String resId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileSystemResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>resPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">addInline</span><span class="token punctuation">(</span>resId<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-05-basis/spring-boot-email" target="_blank" rel="noopener">spring-boot/spring-boot-05-basis/spring-boot-email</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>使用测试类进行测试，测试时替换成实际的邮件地址和内容</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootEmailApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmailSenderService senderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_send_simpleEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        senderService<span class="token punctuation">.</span><span class="token function">sendSimpleEmail</span><span class="token punctuation">(</span><span class="token string">"bbb@324.com"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features-email" target="_blank" rel="noopener">官方文档-Spring Boot Features/Email</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Email </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-6.Spring Boot Banner自定义</title>
      <link href="posts/82defbf4.html"/>
      <url>posts/82defbf4.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>The banner that is printed on start up can be changed by adding a <code>banner.txt</code> file to your classpath or by setting the <code>spring.banner.location</code> property to the location of such a file. If the file has an encoding other than UTF-8, you can set <code>spring.banner.charset</code>. In addition to a text file, you can also add a <code>banner.gif</code>, <code>banner.jpg</code>, or <code>banner.png</code> image file to your classpath or set the <code>spring.banner.image.location</code> property. Images are converted into an ASCII art representation and printed above any text banner.</p></blockquote><p>banner 是在启动时打印的内容，可以通过在 classpath 下添加 “ banner.txt” 文件或 设置“ spring.banner.location” 属性值来改变 banner 的内容。如果文件的编码不是UTF-8，则可以通过<code>spring.banner.charset</code> 进行设置。除了文本文件之外，您还可以在 classpath 下添加 <code>banner.gif</code>，<code>banner.jpg</code> 或 <code>banner.png</code> 图像文件或设置 <code>spring.banner.image.location</code> 属性。图片将被转换为 ASCII 的形式进行展现并在文本内容之前打印。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><p>banner.txt 可以包含如下内容</p><table><thead><tr><th align="left">Variable</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>${application.version}</code></td><td align="left">The version number of your application, as declared in <code>MANIFEST.MF</code>. For example, <code>Implementation-Version: 1.0</code> is printed as <code>1.0</code>.</td></tr><tr><td align="left"><code>${application.formatted-version}</code></td><td align="left">The version number of your application, as declared in <code>MANIFEST.MF</code> and formatted for display (surrounded with brackets and prefixed with <code>v</code>). For example <code>(v1.0)</code>.</td></tr><tr><td align="left"><code>${spring-boot.version}</code></td><td align="left">The Spring Boot version that you are using. For example <code>2.2.8.RELEASE</code>.</td></tr><tr><td align="left"><code>${spring-boot.formatted-version}</code></td><td align="left">The Spring Boot version that you are using, formatted for display (surrounded with brackets and prefixed with <code>v</code>). For example <code>(v2.2.8.RELEASE)</code>.</td></tr><tr><td align="left"><code>${Ansi.NAME}</code> (or <code>${AnsiColor.NAME}</code>, <code>${AnsiBackground.NAME}</code>, <code>${AnsiStyle.NAME}</code>)</td><td align="left">Where <code>NAME</code> is the name of an ANSI escape code. See <a href="https://github.com/spring-projects/spring-boot/tree/v2.2.8.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiPropertySource.java" target="_blank" rel="noopener"><code>AnsiPropertySource</code></a> for details.</td></tr><tr><td align="left"><code>${application.title}</code></td><td align="left">The title of your application, as declared in <code>MANIFEST.MF</code>. For example <code>Implementation-Title: MyApp</code> is printed as <code>MyApp</code>.</td></tr></tbody></table><blockquote><p> The <code>SpringApplication.setBanner(…)</code> method can be used if you want to generate a banner programmatically. Use the <code>org.springframework.boot.Banner</code> interface and implement your own <code>printBanner()</code> method.</p><p>You can also use the <code>spring.main.banner-mode</code> property to determine if the banner has to be printed on <code>System.out</code> (<code>console</code>), sent to the configured logger (<code>log</code>), or not produced at all (<code>off</code>).</p></blockquote><p>如果您要以编程方式生成 banner，则可以使用 SpringApplication.setBanner(…) 方法。使用org.springframework.boot.Banner 接口并实现自己的 printBanner() 方法。您还可以使用 spring.main.banner-mode 属性来确定横幅是否必须在 System.out（控制台）上打印，发送到配置的 logger（日志）或者完全不生成（关闭）。</p><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>自定义 banner.txt，在项目启动时打印自定义 banner</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200713193628565.png" alt="image-20200713193628565"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">application.version</span><span class="token punctuation">=</span><span class="token attr-value">0.0.1-SNAPSHOT</span><span class="token attr-name">application.formatted-version</span><span class="token punctuation">=</span><span class="token attr-value">0.0.1</span><span class="token attr-name">application.title</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-banner</span></code></pre><p>banner.txt</p><pre class=" language-tex"><code class="language-tex">${application.version}${application.formatted-version}${application.title}${AnsiColor.BRIGHT_GREEN}$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$${AnsiColor.BRIGHT_CYAN}$$       _________  __  __/ / /_  ____ _/ / /___ _____/ /    $$${AnsiColor.BRIGHT_CYAN}$$      / ___/ __ \/ / / / / __ \/ __ `/ / / __ `/ __  /     $$${AnsiColor.BRIGHT_CYAN}$$     (__  ) /_/ / /_/ / / /_/ / /_/ / / / /_/ / /_/ /      $$${AnsiColor.BRIGHT_CYAN}$$    /____/\____/\__,_/_/_.___/\__,_/_/_/\__,_/\__,_/       $$${AnsiColor.BRIGHT_GREEN}$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$               ${AnsiColor.BRIGHT_RED}Spring Boot: ${spring-boot.formatted-version}</code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-05-basis/spring-boot-banner" target="_blank" rel="noopener">spring-boot/spring-boot-05-basis/spring-boot-banner</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootBannerApplication.main 方法，打印出 banner.txt 中内容</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200713193939809.png" alt="image-20200713193939809"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features-banner" target="_blank" rel="noopener">官方文档-Spring Boot Features/Banner</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Banner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-5.Spring Boot Profile环境隔离</title>
      <link href="posts/4ce990ec.html"/>
      <url>posts/4ce990ec.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring Profiles provide a way to segregate parts of your application configuration and make it be available only in certain environments. Any <code>@Component</code>, <code>@Configuration</code> or <code>@ConfigurationProperties</code> can be marked with <code>@Profile</code> to limit when it is loaded</p></blockquote><p>Spring Profiles 提供了一种隔离应用程序配置部分并使之仅在某些环境中可用的方法。任何 @Component，@ Configuration 或 @ConfigurationProperties 都可以用 @Profile 标记来限制它的加载。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ol><li>可在 xml 中使用；</li><li>可以修饰类、注解、方法；</li><li>可以通过 命令行、系统属性、启动变量、配置文件 等方式激活；</li></ol><h1 id="2-环境"><a href="#2-环境" class="headerlink" title="2.环境"></a>2.环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>提供了 dev、prod 两套环境的配置和代码，测试激活不同的 profile，功能是否如预期</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712213800400.png" alt="image-20200712213800400"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre><p>application-dev.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-profile</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token attr-name">user.age</span><span class="token punctuation">=</span><span class="token attr-value">20</span></code></pre><p>application-prod.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-profile</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9090</span><span class="token attr-name">user.age</span><span class="token punctuation">=</span><span class="token attr-value">30</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${user.age}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"UserModel{name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">", age='"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>DevConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DevConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserModel <span class="token function">userModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ProdConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"prod"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProdConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserModel <span class="token function">userModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserController</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/get"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/dev"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">devUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"dev-user"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"prod"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/prod"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">prodUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"prod-user"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-05-basis/spring-boot-profile" target="_blank" rel="noopener">spring-boor/spring-boot-05-basis/spring-boot-profile</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><h2 id="4-1-profile-的几种激活方式"><a href="#4-1-profile-的几种激活方式" class="headerlink" title="4.1 profile 的几种激活方式"></a>4.1 profile 的几种激活方式</h2><ol><li><p>使用 jar 包启动时，指定为命令行参数</p><pre class=" language-shell"><code class="language-shell">java -jar spring-boot-profile-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev</code></pre></li><li><p>使用 jar 包启动时，指定为启动参数</p><pre class=" language-shell"><code class="language-shell">java -Dspring.profiles.active=dev -jar spring-boot-profile-0.0.1-SNAPSHOT.jar</code></pre></li><li><p>通过配置文件指定</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre></li><li><p>通过代码设定为系统变量</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"spring.profiles.active"</span><span class="token punctuation">,</span> <span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>启动类中指定</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">SpringApplicationBuilder</span><span class="token punctuation">(</span>SpringBootProfileApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span><span class="token string">"spring.profiles.active=dev"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>idea 启动时指定（配置任意一处即可）</p><p><img src="E:\笔记\自己整理\typora-user-images\image-20200712215905336.png" alt="image-20200712215905335"></p></li><li><p>web.xml 中配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>spring.profiles.active<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span></code></pre></li></ol><p><strong>优先级</strong></p><blockquote><p>命令行方式 &gt; Java系统属性方式 &gt; 系统变量方式 &gt; 配置文件方式</p></blockquote><p>profile 值可以指定多个，例如： –spring.profiles.active=dev,test</p><h2 id="4-2-profile-测试"><a href="#4-2-profile-测试" class="headerlink" title="4.2 profile 测试"></a>4.2 profile 测试</h2><p>按照上面任意一种方式激活 profile，分别设置为 dev 和 prod，启动 SpringBootProfileApplication.main 方法，在 spring-boot-profile.http 访问下列地址，观察输出信息是否符合预期。</p><h3 id="4-2-1-profile-dev"><a href="#4-2-1-profile-dev" class="headerlink" title="4.2.1 profile=dev"></a>4.2.1 profile=dev</h3><pre class=" language-http"><code class="language-http">### GET /user/getGET http://localhost:8080/user/get</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712220956293.png" alt="image-20200712220956293"></p><pre class=" language-http"><code class="language-http">### GET /user/devGET http://localhost:8080/user/dev</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712221024383.png" alt="image-20200712221024383"></p><h3 id="4-2-1-profile-prod"><a href="#4-2-1-profile-prod" class="headerlink" title="4.2.1 profile=prod"></a>4.2.1 profile=prod</h3><pre class=" language-http"><code class="language-http">### GET /user/getGET http://localhost:9090/user/get</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712221132961.png" alt="image-20200712221132961"></p><pre class=" language-http"><code class="language-http">### GET /user/prodGET http://localhost:9090/user/prod</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712221202214.png" alt="image-20200712221202214"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features-profiles" target="_blank" rel="noopener">官方文档–Spring Boot Features/Profiles</a></li><li><a href="https://www.cnblogs.com/jingmoxukong/p/10151785.html" target="_blank" rel="noopener">SpringBoot 教程之 profile 的应用</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Profile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-4.Spring Boot Validation 参数校验</title>
      <link href="posts/28985c9a.html"/>
      <url>posts/28985c9a.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>The method validation feature supported by Bean Validation 1.1 is automatically enabled as long as a JSR-303 implementation (such as Hibernate validator) is on the classpath. This lets bean methods be annotated with <code>javax.validation</code> constraints on their parameters and/or on their return value. Target classes with such annotated methods need to be annotated with the <code>@Validated</code> annotation at the type level for their methods to be searched for inline constraint annotations.</p></blockquote><p>只要 JSR-303 的实现（例如Hibernate验证器）在 classpath下，就会自动启用 Bean Validation 1.1 支持的方法验证功能。这使 bean 方法的参数和/或返回值可以使用 javax.validation 注解进行约束。具有此类注释方法的目标类需要在类型级别使用@Validated注释进行注释，以便在其方法中搜索内联约束注释。</p><h1 id="2-环境"><a href="#2-环境" class="headerlink" title="2.环境"></a>2.环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li><li>数据库：h2</li></ol><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><h2 id="3-1-功能说明"><a href="#3-1-功能说明" class="headerlink" title="3.1 功能说明"></a>3.1 功能说明</h2><p>用户 User 类里面有 id、name、age、idCard 等字段，这些字段在处理的时候通过注解进行校验；其中 name、age 字段校验使用的是 spring boot 依赖的组件中提供的注解；而 idCard 使用自定义注解 @IdCard；这些注解都支持国际化，最终通过 jpa 保存到 h2 数据库中。</p><p>UserCommand 用来预置几条数据。</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712172518494.png" alt="image-20200712172518494"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 开启h2数据库</span><span class="token attr-name">spring.h2.console.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 配置h2数据库</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:h2:mem:user</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">org.h2.Driver</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">sad</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">sae</span><span class="token comment" spellcheck="true"># 是否显示sql语句</span><span class="token attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">hibernate.dialect</span><span class="token punctuation">=</span><span class="token attr-value">org.hibernate.dialect.H2Dialect</span><span class="token attr-name">hibernate.hbm2ddl.auto</span><span class="token punctuation">=</span><span class="token attr-value">create</span></code></pre><p>ValidationMessages.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">com.soulballad.usage.model.validation.id.card.message</span><span class="token punctuation">=</span><span class="token attr-value">the id card length must be 18 and matches rule</span><span class="token attr-name">model.user.NAME_SIZE_BETWEEN_2_AND_20</span><span class="token punctuation">=</span><span class="token attr-value">the length of name must be greater than 2 and less than 20</span><span class="token attr-name">model.user.NAME_NOT_BLANK</span><span class="token punctuation">=</span><span class="token attr-value">name cannot be blank</span><span class="token attr-name">model.user.AGE_MIN_1</span><span class="token punctuation">=</span><span class="token attr-value">the minimum of age is 1</span><span class="token attr-name">model.user.AGE_MAX_200</span><span class="token punctuation">=</span><span class="token attr-value">the maximum of age is 200</span><span class="token attr-name">model.user.AGE_NOT_NULL</span><span class="token punctuation">=</span><span class="token attr-value">age cannot be null</span><span class="token attr-name">model.user.ID_CARD_NOT_NULL</span><span class="token punctuation">=</span><span class="token attr-value">id card cannot be null</span></code></pre><p>ValidationMessages_zh_CN.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 身份证号必须是符合规则的18位</span><span class="token attr-name">com.soulballad.usage.model.validation.id.card.message</span><span class="token punctuation">=</span><span class="token attr-value">\u8eab\u4efd\u8bc1\u53f7\u5fc5\u987b\u662f\u7b26\u5408\u89c4\u5219\u768418\u4f4d</span><span class="token comment" spellcheck="true"># 姓名长度必须大于2小于20</span><span class="token attr-name">model.user.NAME_SIZE_BETWEEN_2_AND_20</span><span class="token punctuation">=</span><span class="token attr-value">\u59d3\u540d\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e2\u5c0f\u4e8e20</span><span class="token comment" spellcheck="true"># 姓名不能为空</span><span class="token attr-name">model.user.NAME_NOT_BLANK</span><span class="token punctuation">=</span><span class="token attr-value">\u59d3\u540d\u4e0d\u80fd\u4e3a\u7a7a</span><span class="token comment" spellcheck="true"># 年龄最小为1</span><span class="token attr-name">model.user.AGE_MIN_1</span><span class="token punctuation">=</span><span class="token attr-value">\u5e74\u9f84\u6700\u5c0f\u4e3a1</span><span class="token comment" spellcheck="true"># 年龄最大为200</span><span class="token attr-name">model.user.AGE_MAX_200</span><span class="token punctuation">=</span><span class="token attr-value">\u5e74\u9f84\u6700\u5927\u4e3a200</span><span class="token comment" spellcheck="true"># 年龄不能为空</span><span class="token attr-name">model.user.AGE_NOT_NULL</span><span class="token punctuation">=</span><span class="token attr-value">\u5e74\u9f84\u4e0d\u80fd\u4e3a\u7a7a</span><span class="token comment" spellcheck="true"># 身份证号不能为空</span><span class="token attr-name">model.user.ID_CARD_NOT_NULL</span><span class="token punctuation">=</span><span class="token attr-value">\u8eab\u4efd\u8bc1\u53f7\u4e0d\u80fd\u4e3a\u7a7a</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>User.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@JsonIgnoreProperties</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"hibernateLazyInitializer"</span><span class="token punctuation">,</span> <span class="token string">"handler"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"{model.user.NAME_SIZE_BETWEEN_2_AND_20}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"{model.user.NAME_NOT_BLANK}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"{model.user.AGE_MIN_1}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"{model.user.AGE_MAX_200}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"{model.user.AGE_NOT_NULL}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@IdCard</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"{model.user.ID_CARD_NOT_NULL}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String idCard<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get&amp;set&amp;constructors&amp;toString</span><span class="token punctuation">}</span></code></pre><p>UserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>UserServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">getUserById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">delete</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>IdCard.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @apiNote : 自定义注解校验 {@link com.soulballad.usage.springboot.model.User} 中的idCard字段该注解中参数和 {@link NotNull} 中成员一致，不过 {@link NotNull} 中通过 {@link Repeatable} 声明了它是可复用的， *  并通过 {@link Constraint} 注解声明注解的功能实现类 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span>IdCardValidator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">IdCard</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ValidationMessages.properties 扩展自</span>    <span class="token comment" spellcheck="true">// org.hibernate.validator.hibernate-validator.6.0.19.Final.hibernate-validator-6.0.19.Final.jar!\org\hibernate\validator\ValidationMessages.properties</span>    String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"{com.soulballad.usage.model.validation.id.card.message}"</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>IdCardValidator.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @apiNote : IdCard校验：注解{@link IdCard}的校验功能实现，需要实现{@link ConstraintValidator}接口， 泛型中两个参数分别为 {@link IdCard} 和 @IdCard *          修饰的字段对应类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdCardValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token operator">&lt;</span>IdCard<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> ConstraintValidatorContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 校验身份证号：正规身份证号 18=2(省)+2(市)+2(区/县)+8(出生日期)+2(顺序码)+1(性别)+1(校验码)</span>        <span class="token comment" spellcheck="true">// 这里使用正则简单校验一下</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 身份证号正则表达式</span>        String regex <span class="token operator">=</span> <span class="token string">"^[1-9]\\d{5}(18|19|20)\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Pattern<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>IdCard constraintAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/get/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/delete/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/update"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>PUT<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserCommand.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserCommand</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 身份证号由 http://sfz.uzuzuz.com/ 在线生成</span>        User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"110101200303072399"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">"110113198708074275"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token string">"110113197308182272"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>3L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-04-bean-validate" target="_blank" rel="noopener">spring-boot/spring-boot-04-bean-validate</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBoot04BeanValidateApplication.main 方法，在 spring-boot-04-bean-validate.http 访问下列地址，观察输出信息是否符合预期。</p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712175001915.png" alt="image-20200712175001915"></p><pre class=" language-http"><code class="language-http">### GET /user/get/{id}GET http://localhost:8080/user/get/1<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712175029788.png" alt="image-20200712175029788"></p><pre class=" language-http"><code class="language-http">### POST /user/add successPOST http://localhost:8080/user/add<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Cache-Control:</span> no-cache<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"zhaoliu"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span>  <span class="token string">"idCard"</span><span class="token punctuation">:</span> <span class="token string">"110101200303072399"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712175147586.png" alt="image-20200712175147586"></p><pre class=" language-http"><code class="language-http">### POST /user/add idCard&amp;name&amp;age illegalPOST http://localhost:8080/user/add<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Accept:</span> */*# Accept-Language: en_US 使用此配置可选择中、英文错误提示<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">243</span><span class="token punctuation">,</span>  <span class="token string">"idCard"</span><span class="token punctuation">:</span> <span class="token string">"1101003072399"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712182715264.png" alt="image-20200712182715264"></p><pre class=" language-http"><code class="language-http">### PUT /user/update successPUT http://localhost:8080/user/update<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Accept:</span> */*<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"sunqi"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span>  <span class="token string">"idCard"</span><span class="token punctuation">:</span> <span class="token string">"110101200303072399"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712182912860.png" alt="image-20200712182912860"></p><pre class=" language-http"><code class="language-http">### DELETE /user/delete/{id} successDELETE http://localhost:8080/user/delete/1<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Accept:</span> */*</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712183003589.png" alt="image-20200712183003589"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Validation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-3.Spring Boot WebMVC</title>
      <link href="posts/8cee4bf5.html"/>
      <url>posts/8cee4bf5.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>The Spring portfolio provides two parallel stacks. One is based on a Servlet API with Spring MVC and Spring Data constructs. The other is a fully reactive stack that takes advantage of Spring WebFlux and Spring Data’s reactive repositories. In both cases, Spring Security has you covered with native support for both stacks. <a href="https://spring.io/reactive" target="_blank" rel="noopener">https://spring.io/reactive</a></p></blockquote><p>Spring产品组合提供了两个并行技术栈。一种基于带有 Spring MVC 和 Spring Data 结构的 Servlet API。另一个是完全响应式技术栈，该栈利用了 Spring WebFlux 和 Spring Data 的响应式存储库。在这两种情况下，Spring Security 都为两个堆栈提供了本机支持。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ol><li><strong>清晰的角色划分</strong>：控制器(controller)、验证器(validator)、命令对象(command obect)、表单对象(form object)、模型对象(model object)、Servlet分发器(DispatcherServlet)、处理器映射(handler mapping)、试图解析器(view resoler)等等。每一个角色都可以由一个专门的对象来实现。</li><li>强大而直接的配置方式：将框架类和应用程序类都能作为JavaBean配置，支持跨多个context的引用，例如，在web控制器中对业务对象和验证器validator)的引用。</li><li>可适配、非侵入：可以根据不同的应用场景，选择合适的控制器子类(simple型、command型、from型、wizard型、multi-action型或者自定义)，而不是一个单一控制器(比如Action/ActionForm)继承。</li><li>可重用的业务代码：可以使用现有的业务对象作为命令或表单对象，而不需要去扩展某个特定框架的基类。</li><li>可定制的绑定(binding)和验证(validation)：比如将类型不匹配作为应用级的验证错误，这可以保证错误的值。再比如本地化的日期和数字绑定等等。在其他某些框架中，你只能使用字符串表单对象，需要手动解析它并转换到业务对象。</li><li>可定制的handler mapping和view resolution：Spring提供从最简单的URL映射，到复杂的、专用的定制策略。与某些web MVC框架强制开发人员使用单一特定技术相比，Spring显得更加灵活。</li><li>灵活的model转换：在Springweb框架中，使用基于Map的键/值对来达到轻易的与各种视图技术集成。</li><li>可定制的本地化和主题(theme)解析：支持在JSP中可选择地使用Spring标签库、支持JSTL、支持Velocity(不需要额外的中间层)等等。</li><li>简单而强大的JSP标签库(Spring Tag Library)：支持包括诸如数据绑定和主题(theme)之类的许多功能。他提供在标记方面的最大灵活性。</li><li>JSP表单标签库：在Spring2.0中引入的表单标签库，使用在JSP编写表单更加容易。</li><li>Spring Bean的生命周期可以被限制在当前的HTTp Request或者HTTp Session。准确的说，这并非Spring MVC框架本身特性，而应归属于Spring MVC使用的WebApplicationContext容器。</li></ol><h2 id="1-3-对比-WebFlux"><a href="#1-3-对比-WebFlux" class="headerlink" title="1.3 对比 WebFlux"></a>1.3 对比 WebFlux</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712115043143.png" alt="image-20200712115043143"></p><h1 id="2-环境"><a href="#2-环境" class="headerlink" title="2.环境"></a>2.环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><h2 id="3-1-代码结构"><a href="#3-1-代码结构" class="headerlink" title="3.1 代码结构"></a>3.1 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712115216437.png" alt="image-20200712115216437"></p><h2 id="3-2-maven-依赖"><a href="#3-2-maven-依赖" class="headerlink" title="3.2 maven 依赖"></a>3.2 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-3-java代码"><a href="#3-3-java代码" class="headerlink" title="3.3 java代码"></a>3.3 java代码</h2><p>User.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * id     */</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 姓名     */</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 生成id</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicInteger ID_GENERATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模拟内存数据库</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> User<span class="token operator">></span> USER_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>USER_MAP<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> User <span class="token function">getUserById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> User <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>ID_GENERATOR<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> User <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> User <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> nameList <span class="token operator">=</span> USER_MAP<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nameList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">getUserById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">exist</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/get/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">,</span> UriComponentsBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"duplicated"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"the user already exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>ALREADY_REPORTED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpHeaders headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/user/get/{id}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildAndExpand</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>CREATED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/update"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>PUT<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/delete/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-4-git-地址"><a href="#3-4-git-地址" class="headerlink" title="3.4 git 地址"></a>3.4 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-03-webmvc" target="_blank" rel="noopener">spring-boot/spring-boot-03-webmvc</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBoot03WebApplication.main 方法，在 spring-boot-03-webmvc.http 访问下列地址，观察输出信息是否符合预期。</p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712121034670.png" alt="image-20200712121034670"></p><p>由于数据保存在内存中，最开始没有数据，所以返回为空。可以调用 /add 添加数据后再查询</p><pre class=" language-http"><code class="language-http">### GET /user/get/{id}GET http://localhost:8080/user/get/1</code></pre><p>通过 id 查询同样为空，可以调用 /add 添加数据后再查询</p><pre class=" language-http"><code class="language-http">### POST /user/addPOST http://localhost:8080/user/add<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712121240211.png" alt="image-20200712121240211"></p><p>这里响应码为 201，同时响应头中 location 设定为一个新的地址</p><pre class=" language-http"><code class="language-http">### PUT /user/updatePUT http://localhost:8080/user/update<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Accept:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"lisi"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712121406103.png" alt="image-20200712121406103"></p><pre class=" language-http"><code class="language-http">### DELETE /user/delete/{id}DELETE http://localhost:8080/user/delete/1</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712121427892.png" alt="image-20200712121427892"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://www.cnblogs.com/Renyi-Fan/p/7847738.html" target="_blank" rel="noopener">SpringMVC的优点</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> WebMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-2.Spring Boot ConfigurationProperties 配置</title>
      <link href="posts/b9258c0.html"/>
      <url>posts/b9258c0.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Annotation for externalized configuration. Add this to a class definition or a @Bean method in a @Configuration class if you want to bind and validate some external Properties (e.g. from a .properties file). </p><p>Binding is either performed by calling setters on the annotated class or, if @ConstructorBinding is in use, by binding to the constructor parameters. </p><p>Note that contrary to  @Value, SpEL expressions are not evaluated since property values are externalized.</p></blockquote><p>一个外部化配置的注解。如果您要绑定和验证某些外部属性（例如，来自.properties文件），则将其添加到类定义或 @Configuration 类中的 @Bean 方法中。</p><p>绑定可以通过在带注释的类上调用setter来执行，或者，如果正在使用 @ConstructorBinding，则可以通过绑定到构造函数参数来执行。</p><p>请注意，与@Value相反，由于属性值是外部化的，因此不评估SpEL表达式。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ConfigurationProperties</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">ignoreInvalidFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">ignoreUnknownFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-对比-Value"><a href="#1-3-对比-Value" class="headerlink" title="1.3 对比 @Value"></a>1.3 对比 @Value</h2><table><thead><tr><th></th><th>@Configuration</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SPEL语法</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><h1 id="2-环境"><a href="#2-环境" class="headerlink" title="2.环境"></a>2.环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><h2 id="3-1-代码结构"><a href="#3-1-代码结构" class="headerlink" title="3.1 代码结构"></a>3.1 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711201606906.png" alt="image-20200711201606906"></p><h2 id="3-2-maven-依赖"><a href="#3-2-maven-依赖" class="headerlink" title="3.2 maven 依赖"></a>3.2 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h2 id="3-3-配置文件"><a href="#3-3-配置文件" class="headerlink" title="3.3 配置文件"></a>3.3 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">user.prop.name</span><span class="token punctuation">=</span><span class="token attr-value">zhangsan</span><span class="token attr-name">user.prop.age</span><span class="token punctuation">=</span><span class="token attr-value">20</span></code></pre><h2 id="3-4-java代码"><a href="#3-4-java代码" class="headerlink" title="3.4 java代码"></a>3.4 java代码</h2><p>UserProperties.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Validated</span> <span class="token comment" spellcheck="true">// JSR303数据校验</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"user.prop"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProperties</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserProps.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProps</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${user.prop.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// SPEL 表达式</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{10 * 2}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserProperties userProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserProps userProps<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/get/1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getUser1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userProperties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'s age is "</span> <span class="token operator">+</span> userProperties<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/get/2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userProps<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'s age is "</span> <span class="token operator">+</span> userProps<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-5-git-地址"><a href="#3-5-git-地址" class="headerlink" title="3.5 git 地址"></a>3.5 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-02-config" target="_blank" rel="noopener">spring-boot/spring-boot-02-config</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBoot02ConfigApplication.main 方法，在 spring-boot-02-config.http 访问如下两个地址，输出 “zhangsan’s age is 20” 表示请求成功</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711202711465.png" alt="image-20200711202711465"></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711202749942.png" alt="image-20200711202749942"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://blog.csdn.net/qq_43513205/article/details/86564166" target="_blank" rel="noopener">@ConfigurationProperties与@Value的区别</a></li><li><a href="https://blog.csdn.net/wyzdwb/article/details/87458325" target="_blank" rel="noopener">springboot中@Value的工作原理</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Configuration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-1.第一个Spring Boot应用</title>
      <link href="posts/3aaee350.html"/>
      <url>posts/3aaee350.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”. We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.</p></blockquote><p>Spring Boot 可以轻松创建单独的，基于生产级的 Spring 应用程序，您需要做的可能“<strong>仅仅是去运行</strong>”。 我们提供了 Spring Platform 对 Spring 框架和第三方库进行处理，尽可能的降低使用的复杂度。大多数情况下 Spring Boot 应用只需要非常少的配置。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ul><li>Create stand-alone Spring applications（创建独立的 spring 应用）</li><li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files) （集成 tomcat，jetty，undertow 等内置容器，无需打包成 war 包）</li><li>Provide opinionated ‘starter’ dependencies to simplify your build configuration （提供众多 starter 扩展来简化依赖配置）</li><li>Automatically configure Spring and 3rd party libraries whenever possible（无论何时都可以自动装配 spring 和第三方依赖）</li><li>Provide production-ready features such as metrics, health checks, and externalized configuration（提供生产环境特性，如 指标信息、健康检查和外部化配置等）</li><li>Absolutely no code generation and no requirement for XML configuration （无需代码生成和 xml 配置）</li></ul><h2 id="1-3-对比-Spring"><a href="#1-3-对比-Spring" class="headerlink" title="1.3 对比 Spring"></a>1.3 对比 Spring</h2><ol><li><p>Spring 是一种生态，它包含各种组件，针对开发中存在的问题提供了多种解决方案；</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200407193005410.png" alt="image-20200407193005410"></p></li><li><p>Spring Boot 为快速启动且最小化配置的 Spring 应用而设计，并且具备用于构建生产级应用的各种特性，提供了一些内置 starter；</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709204302088.png" alt="image-20200709204302088"></p></li><li><p>Spring 应用需要复杂配置，一般在需要在 xml 中配置各种依赖；Spring Boot 简化了这些配置，默认使用注解进行扫描，最多只需要在 application.properties 中提供额外配置；</p></li><li><p>使用 maven 构建 Spring 应用需要提供各种 pom 依赖；而 Spring Boot 只需要提供了 starter 即可，starter 中已经对所需依赖进行了封装；</p></li><li><p>Spring 应用最终需要打成 war 包放到 Severlet 容器中进行运行；而 Spring Boot 可以打成 jar 包，使用 java -jar 命令直接运行；</p></li><li><p>…</p></li></ol><h1 id="2-环境"><a href="#2-环境" class="headerlink" title="2.环境"></a>2.环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><h2 id="3-1-代码结构"><a href="#3-1-代码结构" class="headerlink" title="3.1 代码结构"></a>3.1 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709233145417.png" alt="image-20200709233145417"></p><h2 id="3-2-maven-依赖"><a href="#3-2-maven-依赖" class="headerlink" title="3.2 maven 依赖"></a>3.2 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h2 id="3-3-java代码"><a href="#3-3-java代码" class="headerlink" title="3.3 java代码"></a>3.3 java代码</h2><p>DemoController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/demo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"demo"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-4-git-地址"><a href="#3-4-git-地址" class="headerlink" title="3.4 git 地址"></a>3.4 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-01-demo" target="_blank" rel="noopener">spring-boot/spring-boot-01-demo</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootDemoApplication.main 方法，访问如下地址，页面显示 “demo” 表示服务运行正常</p><pre class=" language-http"><code class="language-http">### GET /demoGET http://localhost:8080/demo</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709205650117.png" alt="image-20200709205650117"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> WebMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Arthas】-2.Arthas应用场景</title>
      <link href="posts/de8c797a.html"/>
      <url>posts/de8c797a.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-ognl获取bean"><a href="#1-ognl获取bean" class="headerlink" title="1. ognl获取bean"></a>1. ognl获取bean</h1><p>SpringContextUtil，通常代码中会有类似这样的工具类用来获取 bean 实例</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringContextUtil</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        SpringContextUtil<span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id can not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id must be greater than 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用 arthas 连接 spring 应用，执行如下操作：</p><blockquote><ol><li><p>查找全类名</p><pre class=" language-shell"><code class="language-shell">sc *SpringContextUtil</code></pre></li><li><p>查找类加载器</p><pre class=" language-shell"><code class="language-shell">sc -d *SpringContextUtil | grep classLoaderHash</code></pre></li><li><p>使用ognl表达式获取bean，并调用方法</p><pre class=" language-shell"><code class="language-shell">> ognl -c 18b4aac2 '@com.soulballad.usage.arthasdemo.util.SpringContextUtil@getBean("userController").getUser(2)'</code></pre></li></ol></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519154539999.png" alt="image-20200519154539999"></p><br><h1 id="2-watch观测方法调用"><a href="#2-watch观测方法调用" class="headerlink" title="2. watch观测方法调用"></a>2. watch观测方法调用</h1><pre class=" language-shell"><code class="language-shell"># 查看 UserController 下所有方法的 参数、对象、返回值watch com.soulballad.usage.arthasdemo.web.UserController * '{params,target,returnObj}'</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519155222425.png" alt="image-20200519155222425"></p><p>watch 支持方法调用前、调用后、异常抛出等多个场景观测，同时还可以在第四个参数中使用条件进行过滤，比如：</p><pre class=" language-shell"><code class="language-shell">watch com.soulballad.usage.arthasdemo.web.UserController * '{returnObj}' 'params[0]>10'watch com.soulballad.usage.arthasdemo.web.UserController * '{returnObj}' '#cost>10'</code></pre><br><h1 id="3-热更新"><a href="#3-热更新" class="headerlink" title="3. 热更新"></a>3. 热更新</h1><p>步骤：使用jad反编译 -&gt; 修改文件 -&gt; 使用mc重新编译修改后的文件-&gt;使用redefine加载重新编译后的类</p><p>上述 UserController 访问 <code>user/0</code>，会出现如下错误：</p><blockquote><p>There was an unexpected error (type=Internal Server Error, status=500).<br>id must be greater than 1</p></blockquote><p>现对其进行热更新</p><blockquote><ol><li><p>反编译 UserController </p><pre class=" language-shell"><code class="language-shell"># --source-only 只输出源码jad --source-only com.soulballad.usage.arthasdemo.web.UserController > UserController.java</code></pre></li><li><p>修改编译后的文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>soulballad<span class="token punctuation">.</span>usage<span class="token punctuation">.</span>arthasdemo<span class="token punctuation">.</span>web<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>soulballad<span class="token punctuation">.</span>usage<span class="token punctuation">.</span>arthasdemo<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>soulballad<span class="token punctuation">.</span>usage<span class="token punctuation">.</span>arthasdemo<span class="token punctuation">.</span>util<span class="token punctuation">.</span>SpringContextUtil<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"/user/{id}"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id can not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// throw new IllegalArgumentException("id must be greater than 1");</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>重新编译</p><pre class=" language-shell"><code class="language-shell"># 使用mc重新编译修改后的文件，这里需要使用 -c 指定类加载器sc -d com.soulballad.usage.arthasdemo.web.UserController | grep classLoaderHashmc -c 18b4aac2 UserController.java</code></pre><p>编译完成会出现一个路径，这个路径就是编译后class文件的位置</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519160730384.png" alt="image-20200519160730384"></p></li><li><p>使用redefine重新加载</p><pre class=" language-shell"><code class="language-shell"># redefine 后面使用上一步的路径，需要将 \ 转成 /redefine ../UserController.class</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519160948601.png" alt="image-20200519160948601"></p></li><li><p>更新后结果</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519161238976.png" alt="image-20200519161238976"></p></li></ol></blockquote><br><h1 id="4-更新日志级别"><a href="#4-更新日志级别" class="headerlink" title="4. 更新日志级别"></a>4. 更新日志级别</h1><p>查找类加载器</p><pre class=" language-shell"><code class="language-shell">sc -d *UserController | grep classLoaderHash</code></pre><p>查看更新前日志级别</p><pre class=" language-shell"><code class="language-shell">ognl -c 18b4aac2 '@com.soulballad.usage.arthasdemo.web.UserController@LOGGER'</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519161959204.png" alt="image-20200519161959204"></p><p>更新日志级别为 DEBUG</p><pre class=" language-shell"><code class="language-shell">ognl -c 18b4aac2 '@com.soulballad.usage.arthasdemo.web.UserController@LOGGER.setLevel(@ch.qos.logback.classic.Level@DEBUG)'</code></pre><p>查看更新后日志级别</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519163825883.png" alt="image-20200519163825883"></p><br><h1 id="5-tt获取spring上下文"><a href="#5-tt获取spring上下文" class="headerlink" title="5. tt获取spring上下文"></a>5. tt获取spring上下文</h1><p>执行 <code>tt</code> 命令来记录 <code>RequestMappingHandlerAdapter#invokeHandlerMethod</code> 的请求</p><pre class=" language-shell"><code class="language-shell">tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod</code></pre><p>然后访问 <code>user/1</code>，arthas 会记录访问时间片（time fragment）</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519164201326.png" alt="image-20200519164201326"></p><p>可以用 <code>tt</code> 命令的 <code>-i</code> 参数来指定index，并且用 <code>-w</code> 参数来执行ognl表达式来获取spring context：</p><pre class=" language-shell"><code class="language-shell">tt -i 1000 -w 'target.getApplicationContext()'</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519164620433.png" alt="image-20200519164620433"></p><p>可以从 applicationContext 中获取 bean，触发方法调用</p><pre class=" language-shell"><code class="language-shell">tt -i 1000 -w 'target.getApplicationContext().getBean("userController").getUser(2)'</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519164751963.png" alt="image-20200519164751963"></p><br><h1 id="6-链接"><a href="#6-链接" class="headerlink" title="6. 链接"></a>6. 链接</h1><ul><li>Arthas: <a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">https://github.com/alibaba/arthas</a></li><li><a href="https://alibaba.github.io/arthas/tt.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/tt.html</a></li><li><a href="https://alibaba.github.io/arthas/ognl.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/ognl.html</a></li><li><a href="https://alibaba.github.io/arthas/redefine.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/redefine.html</a></li><li><a href="https://alibaba.github.io/arthas/watch.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/watch.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 问题定位分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arthas </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Arthas】-1.Arthas基础命令</title>
      <link href="posts/b0a6b96a.html"/>
      <url>posts/b0a6b96a.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Arthas-简介"><a href="#1-Arthas-简介" class="headerlink" title="1. Arthas 简介"></a>1. Arthas 简介</h1><p>Arthas 是 Alibaba 开源的 Java 诊断工具，根据官方介绍，它提供了如下工功能：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517111859.png" alt="image-20200517111854420"></p><p>官方文档地址： <a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">https://alibaba.github.io/arthas/</a></p><p>github 源码地址： <a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">https://github.com/alibaba/arthas</a></p><br><h1 id="2-Arthas-安装"><a href="#2-Arthas-安装" class="headerlink" title="2. Arthas 安装"></a>2. Arthas 安装</h1><h2 id="启动-Arthas"><a href="#启动-Arthas" class="headerlink" title="启动 Arthas"></a>启动 Arthas</h2><pre class=" language-shell"><code class="language-shell"># 下载 arthascurl -O https://alibaba.github.io/arthas/arthas-boot.jar# 通过如下命令启动java -jar arthas-boot.jar</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517161911.png" alt="image-20200517155128106"></p><p>选择进程 id 按下回车，就可以连接到对应的 java 应用，首次启动会下载一些文件到 “<code>C:/Users/${user}/.arthas/lib/3.2.0/arthas</code>“ 目录</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200517154635722.png" alt="20200517154635722"></p><p>arthas 启动支持多个参数，可以使用 <code>-h</code> 查看</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517161841.png" alt="image-20200517161835635"></p><pre class=" language-shell"><code class="language-shell">EXAMPLES:  java -jar arthas-boot.jar <pid>  java -jar arthas-boot.jar --target-ip 0.0.0.0  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws'  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws'--agent-id bvDOe8XbTM2pQWjF4cfw  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>  java -jar arthas-boot.jar -f batch.as <pid>  java -jar arthas-boot.jar --use-version 3.2.0  java -jar arthas-boot.jar --versions  java -jar arthas-boot.jar --session-timeout 3600  java -jar arthas-boot.jar --attach-only  java -jar arthas-boot.jar --repo-mirror aliyun --use-httpWIKI:  https://alibaba.github.io/arthas</code></pre><br><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>arthas 连接成功后，使用 help 可以看到提供的一些命令</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517161913.png" alt="image-20200517155940521"></p><p>每个命令可以使用 <code>-h</code> 参数查看帮助信息，里面有<code>EXAMPLES</code>和<code>WIKI</code>链接</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517161912.png" alt="image-20200517154635722"></p><br><h2 id="webconsole"><a href="#webconsole" class="headerlink" title="webconsole"></a>webconsole</h2><p>arthas 启动后，可以通过浏览器进行访问，地址 <a href="http://localhost:8563/" target="_blank" rel="noopener">http://localhost:8563/</a></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194019.png" alt="image-20200517162105397"></p><br><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><p>如果只是退出当前的连接，可以用<code>quit</code>或者<code>exit</code>命令。Attach到目标进程上的arthas还会继续运行，端口会保持开放，下次连接时可以直接连接上。</p><p>如果想完全退出arthas，可以执行<code>stop</code>命令。</p><br><h1 id="3-Arthas-命令"><a href="#3-Arthas-命令" class="headerlink" title="3. Arthas 命令"></a>3. Arthas 命令</h1><h2 id="dashboard"><a href="#dashboard" class="headerlink" title="dashboard"></a>dashboard</h2><p>查看面板信息，主要包含cpu 内存使用信息，可以按  <code>Ctrl+C</code> 或者 输入 <code>q</code> 退出</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517163427.png" alt="_images/dashboard.png"></p><p>数据说明</p><ul><li>ID: Java级别的线程ID，注意这个ID不能跟jstack中的nativeID一一对应</li><li>NAME: 线程名</li><li>GROUP: 线程组名</li><li>PRIORITY: 线程优先级, 1~10之间的数字，越大表示优先级越高</li><li>STATE: 线程的状态</li><li>CPU%: 线程消耗的cpu占比，采样100ms，将所有线程在这100ms内的cpu使用量求和，再算出每个线程的cpu使用占比。</li><li>TIME: 线程运行总时间，数据格式为<code>分：秒</code></li><li>INTERRUPTED: 线程当前的中断位状态</li><li>DAEMON: 是否是daemon线程</li></ul><br><h2 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h2><p>查看线程使用情况</p><pre class=" language-shell"><code class="language-shell"># 查看所有线程信息thread# 查看具体线程的栈，查看线程ID 16的栈：thread 16# 查看CPU使用率top n线程的栈thread -n 3# 查看5秒内的CPU使用率top n线程栈thread -n 3 -i 5000# 查找线程是否有阻塞thread -b</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517163428.png" alt="image-20200517163025955"></p><br><h2 id="sysprop"><a href="#sysprop" class="headerlink" title="sysprop"></a>sysprop</h2><p>查看当前JVM的系统属性，支持 pipeline</p><pre class=" language-shell"><code class="language-shell">sysprop # 查询所有属性sysprop key # 查看key对应的属性sysprop key value # 修改属性值sysprop | grep java # 查询包含java的属性sysprop | wc -l # 统计数量</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194020.png" alt="image-20200517163647024"></p><br><h2 id="sysenv"><a href="#sysenv" class="headerlink" title="sysenv"></a>sysenv</h2><p>查看当前JVM的环境属性</p><p>用法和 sysprop 类似，不支持修改</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194024.png" alt="image-20200517170505831"></p><br><h2 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h2><p>查看logger信息，更新logger level</p><pre class=" language-shell"><code class="language-shell">logger # 查看所有logger对象信息logger -n [name] # 查看名为name的logger信息logger -c [classloader] -n [name] -l ERROR # 修改名为name的logger级别为ERROR，需指定类加载器</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194023.png" alt="image-20200517165827604"></p><br><h2 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h2><p>查看JVM已加载的类信息</p><pre class=" language-shell"><code class="language-shell">sc -d org.apache.commons.lang.StringUtils # 查看StringUtils详细信息sc -d org/apache/commons/lang/StringUtils # 查看StringUtils详细信息sc -d *StringUtils # 查看StringUtils，根据*匹配sc -d -f org.apache.commons.lang.StringUtils # 查看类及成员变量信息，f要配合d使用才有效</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194022.png" alt="image-20200517165504773"></p><br><h2 id="sm"><a href="#sm" class="headerlink" title="sm"></a>sm</h2><p>查看已加载类的方法信息，用法和 <code>sc</code> 类似</p><pre class=" language-shell"><code class="language-shell">sm java.lang.String # 查看String的所有方法sm -d org.apache.commons.lang.StringUtils # 查看String方法详情sm -d org/apache/commons/lang/StringUtils # 查看String方法详情sm *StringUtils *  # 查看String方法，根据*匹配</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194025.png" alt="image-20200517170620766"></p><br><h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><p>dump 已加载类的 bytecode 到特定目录</p><pre class=" language-shell"><code class="language-shell">dump java.lang.String # dump java.lang.String.class文件dump java.lang.* # dump 批量dumpdump -d /tmp/output java.lang.String # dump到指定目录dump org/apache/commons/lang/StringUtils # dump，支持目录格式dump *StringUtils # dump，根据*匹配</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194021.png" alt="image-20200517164153476"></p><br><h2 id="jad"><a href="#jad" class="headerlink" title="jad"></a>jad</h2><p>反编译指定已加载类的源码</p><pre class=" language-shell"><code class="language-shell">jad java.lang.String # 反编译String类jad java.lang.String toString # 反编译指定方法jad --source-only java.lang.String # 反编绎时只显示源代码jad -c 39eb305e org/apache/log4j/Logger # 反编译指定classloader</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194027.png" alt="image-20200517171304855"></p><br><h2 id="classloader"><a href="#classloader" class="headerlink" title="classloader"></a>classloader</h2><p>查看classloader的继承树，urls，类加载信息</p><pre class=" language-shell"><code class="language-shell">classloader    # 列出所有classLoaderclassloader -t # 树形结构列出所有classLoaderclassloader -l # 统计每个classLoader加载类数量classloader -c 327a647b # 查看具体的classLoaderclassloader -a # 列出所有加载的类classloader -c 659e0bfd --load demo.MathGame # 使用指定classLoader加载类</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194026.png" alt="image-20200517171909021"></p><br><h2 id="mc"><a href="#mc" class="headerlink" title="mc"></a>mc</h2><p>编译<code>.java</code>文件生成<code>.class</code></p><pre class=" language-shell"><code class="language-shell">mc /tmp/Test.java    # 编译Test.javamc -c 327a647b /tmp/Test.java # 使用 -c 指定classLoadermc -d /tmp/output /tmp/ClassA.java /tmp/ClassB.java # 使用 -d 指定输出目录</code></pre><br><h2 id="redefine"><a href="#redefine" class="headerlink" title="redefine"></a>redefine</h2><p>加载外部的<code>.class</code>文件</p><blockquote><p><code>redefine</code>命令和<code>jad</code>/<code>watch</code>/<code>trace</code>/<code>monitor</code>/<code>tt</code>等命令会冲突。执行完<code>redefine</code>之后，如果再执行上面提到的命令，则会把<code>redefine</code>的字节码重置。 原因是jdk本身redefine和Retransform是不同的机制，同时使用两种机制来更新字节码，只有最后修改的会生效。</p></blockquote><pre class=" language-shell"><code class="language-shell">redefine /tmp/Test.class    # 加载类redefine -c 327a647b /tmp/Test.class /tmp/Test\$Inner.class # 指定classLoader</code></pre><p>通常结合 jad/mc 使用</p><ul><li>jad命令反编译，然后可以用其它编译器，比如vim来修改源码</li><li>mc命令来内存编译修改过的代码</li><li>用redefine命令加载新的字节码</li></ul><p>redefine的限制</p><ul><li>不允许新增加 field/method</li><li>正在跑的函数，没有退出不能生效</li></ul><br><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>方法执行数据观测</p><pre class=" language-shell"><code class="language-shell"># 方法调用前观察，可以是非静态方法watch -b org.apache.commons.lang.StringUtils isBlank params# 在方法结束之后(正常返回和异常返回)观察watch -f org.apache.commons.lang.StringUtils isBlank returnObj# 指定输出结果的属性遍历深度，2watch org.apache.commons.lang.StringUtils isBlank '{params, target, returnObj}' -x 2# 耗时100ms时输出watch *StringUtils isBlank params '#cost>100'</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id can not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id must be greater than 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用如下 watch 命令，然后访问 <a href="http://localhost:9090/user/10" target="_blank" rel="noopener">http://localhost:9090/user/10</a></p><pre class=" language-shell"><code class="language-shell">watch com.soulballad.usage.arthasdemo.web.UserController getUser "{params,target,returnObj}" -x 2 -b -s -n 2</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194029.png" alt="image-20200517175917004"></p><ul><li>参数里<code>-n 2</code>，表示只执行两次</li><li>输出结果中，第一次输出的是方法调用前的观察结果，第二次输出的是方法返回后的表达式的结果</li><li>结果的输出顺序和事件发生的先后顺序一致，和命令中 <code>-s -b</code> 的顺序无关</li></ul><br><h2 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h2><p>方法内部调用路径，并输出方法路径上的每个节点上耗时</p><pre class=" language-shell"><code class="language-shell">trace org.apache.commons.lang.StringUtils isBlank # 查看isBlank方法调用路径及耗时trace *StringUtils isBlank # 使用*匹配trace *StringUtils isBlank '#cost>100' # 过滤只输出耗时大于100ms的记录# 正则表达式，支持多个路径记录trace -E com.test.ClassA|org.test.ClassB method1|method2|method3 trace demo.MathGame run -n 5 # 只执行5次trace demo.MathGame run --skipJDKMethod false # 不跳过jdk中方法，默认为true</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194028.png" alt="image-20200517180614199"></p><br><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>输出当前方法被调用的调用路径</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194031.png" alt="image-20200517181157825"></p><p>支持条件过滤和 ognl 表达式</p><br><h2 id="tt"><a href="#tt" class="headerlink" title="tt"></a>tt</h2><p>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</p><pre class=" language-shell"><code class="language-shell">tt -t *StringUtils isEmpty # 记录isEmpty方法调用tt -t *StringUtils isEmpty params[0].length==1 # 解决方法重载tt -l # 查看所有记录tt -i 1000 # 查询index为1000的记录详情tt -i 1000 -p # 根据index重新触发调用tt -i 1000 -p --replay-times 3 --replay-interval 3000 # 指定触发间隔和次数tt --delete-all # 删除所有记录</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194030.png" alt="image-20200517190220743"></p><br><h2 id="ognl"><a href="#ognl" class="headerlink" title="ognl"></a>ognl</h2><p>执行ognl表达式</p><pre class=" language-shell"><code class="language-shell">ognl '@java.lang.System@out.println("hello")' # 调用静态函数ognl -x 2 '@Singleton@getInstance()' # 2层ognl '@Demo@staticFiled' # 输出静态变量值# 把java.home和java.runtime.name的系统属性放到一个集合中输出ognl '#value1=@System@getProperty("java.home"), #value2=@System@getProperty("java.runtime.name"), {#value1, #value2}'ognl -c 5d113a51 '@com.taobao.arthas.core.GlobalOptions@isDump' # 输出false</code></pre>]]></content>
      
      
      <categories>
          
          <category> 问题定位分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arthas </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github Pages和Hexo搭建博客</title>
      <link href="posts/3555e3.html"/>
      <url>posts/3555e3.html</url>
      
        <content type="html"><![CDATA[<h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_14" target="_blank" rel="noopener">● 前言</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_22" target="_blank" rel="noopener">● 入门</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Nodejsfont_33" target="_blank" rel="noopener">● 安装 Node.js</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Gitfont_40" target="_blank" rel="noopener">● 安装 Git</a></li><li><ul><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Gitfont_46" target="_blank" rel="noopener">• 检验Git是否安装成功</a></li></ul></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_Hexo_font_56" target="_blank" rel="noopener">● 安装Hexo</a></li><li><ul><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_Hexo_font_64" target="_blank" rel="noopener">• Hexo 初始化配置</a></li></ul></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_73" target="_blank" rel="noopener">● 本地查看效果</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Github_Pages_font_86" target="_blank" rel="noopener">● 将博客部署到 Github Pages 上</a></li><li><ul><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000___Github_font_89" target="_blank" rel="noopener">• 注册 Github 账户</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_92" target="_blank" rel="noopener">• 创建项目代码库</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__SSH_font_96" target="_blank" rel="noopener">• 配置 SSH 密钥</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__GitHub_font_127" target="_blank" rel="noopener">• 在 GitHub 账户中添加你的公钥</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__font_140" target="_blank" rel="noopener">• 测试</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Git__font_153" target="_blank" rel="noopener">• 配置 Git 个人信息</a></li></ul></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Hexo__Github_font_162" target="_blank" rel="noopener">● 将本地的 Hexo 文件更新到 Github 的库中</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_201" target="_blank" rel="noopener">● 在博客上发表文章</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_259" target="_blank" rel="noopener">● 为博客更换自己喜欢的主题</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Hexo_font_301" target="_blank" rel="noopener">● 为你的 Hexo 博客配置个性域名</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_327" target="_blank" rel="noopener">● 博客美化和实用功能的添加</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_332" target="_blank" rel="noopener">● 结语</a></li></ul><hr><h1 id="●-前言"><a href="#●-前言" class="headerlink" title="● 前言"></a>● 前言</h1><p>这是一篇有关如何使用 Github Pages 和 Hexo 搭建属于自己独立博客的详尽教程，本人是软件工程专业本科生，目前只学习了C和C++编程语言，对网站开发的有关知识几乎为零，这也是我搭建好自己的博客之后写的第一篇博客，刚开始搭建博客的时候自己也是网上各种百度，由于自己属于小白那种，历经了千辛万苦才弄好，所以借这个机会写一篇小白真正能看懂的博客搭建教程，教你一步一步走向成功的彼岸！</p><p>推荐文章： <a href="http://www.cnblogs.com/jhzhu/p/3893297.html" target="_blank" rel="noopener">《我为什么写博客》</a> （By 知明所以）<br>　　　　 　<a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="noopener">《为什么你应该（从现在开始就）写博客》</a> (By 刘未鹏 | Mind Hacks)</p><h1 id="●-入门"><a href="#●-入门" class="headerlink" title="● 入门"></a>● 入门</h1><blockquote><p>Github Pages</p></blockquote><p>Github Pages可以被认为是用户编写的、托管在github上的静态网页。使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。此外还可以绑定自己的域名。</p><blockquote><p>Hexo</p></blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="●-安装-Node-js"><a href="#●-安装-Node-js" class="headerlink" title="● 安装 Node.js"></a>● 安装 Node.js</h1><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">点击此处</a>访问官网，按需下载相应版本，默认安装可以了<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY0ODFkMzc0MC5wbmc" alt="img"></p><p>注：本人在安装过程中出现了Warning 1909,无法创建快捷方式，这种情况很少出现，如果在安装过程中也有这种情况请参考百度文库（win10系统实测可行）：<a href="https://wenku.baidu.com/view/4ad59110964bcf84b9d57ba5.html" target="_blank" rel="noopener">《Win7安装程序警告1909无法创建快捷方式》</a><br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY0Yzk5ZjcwOC5wbmc" alt="img"></p><h1 id="●-安装-Git"><a href="#●-安装-Git" class="headerlink" title="● 安装 Git"></a>● 安装 Git</h1><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">点击此处</a>访问官网，按需下载相应版本，默认安装即可<br>参考资料：<a href="https://www.cnblogs.com/jytx/p/5602927.html" target="_blank" rel="noopener">《如何在windows下安装GIT》</a> （By 俊雨廷休）<br>　　　　　<a href="http://git.oschina.net/progit/" target="_blank" rel="noopener">《Pro Git（中文版）》</a></p><h2 id="•-检验Git是否安装成功"><a href="#•-检验Git是否安装成功" class="headerlink" title="• 检验Git是否安装成功"></a>• 检验Git是否安装成功</h2><p>同时按下 Win 键和 R 键打开运行窗口,输入 cmd ，然后输入以下命令，有相应版本信息显示则安装成功，若不正确可以卸载软件重新安装，此外若安装成功，在桌面右键鼠标，可以看到菜单里多了 Git GUI Here 和 Git Bash Here两个选项，第一个是图形界面的Git操作，另一个是命令行</p><pre><code>$ git --version  $ node -v  $ npm -v</code></pre><p><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY0ZWU4YTc5NC5wbmc" alt="img"><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY1MGVjMjA5Mi5wbmc" alt="img"></p><h1 id="●-安装Hexo"><a href="#●-安装Hexo" class="headerlink" title="● 安装Hexo"></a>● 安装Hexo</h1><p>选择一个磁盘，新建一个文件夹，自己重命名文件夹（如：我的文件夹为：Ｅ\TRHX_Blog），博客相关文件将储存在此文件夹下，在该文件夹下右键鼠标，点击 Git Bash Here，输入以下 npm 命令即可安装，第一个命令表示安装 hexo，第二个命令表示安装 hexo 部署到 git page 的 deployer，如图所示即为安装成功</p><pre><code>$ npm install hexo-cli -g  $ npm install hexo-deployer-git --save  </code></pre><p><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY1M2Q0YjAxOS5wbmc" alt="img"></p><h2 id="•-Hexo-初始化配置"><a href="#•-Hexo-初始化配置" class="headerlink" title="• Hexo 初始化配置"></a>• Hexo 初始化配置</h2><p>在刚才新建的文件夹里面再次新建一个 Hexo 文件夹（如：我的文件夹为：E\TRHX_Blog\Hexo）,进入该 Hexo 文件夹右键鼠标，点击 Git Bash Here，输入以下命令，如图所示则安装成功</p><pre><code>$ hexo init</code></pre><p><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY1NjZiNGI2Yi5wbmc" alt="img"></p><p>Hexo 安装完成后，将会在指定文件夹中新建所需要的文件，Hexo 文件夹下的目录如下：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY1OGQyZWVlNS5wbmc" alt="img"></p><h1 id="●-本地查看效果"><a href="#●-本地查看效果" class="headerlink" title="● 本地查看效果"></a>● 本地查看效果</h1><p>执行以下命令，执行完即可登录 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看效果</p><pre><code>$ hexo generate  $ hexo server  </code></pre><p>显示以下信息说明操作成功：</p><pre><code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></pre><p>登录 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看效果：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY1YjdjNzRkMi5wbmc" alt="img"></p><h1 id="●-将博客部署到-Github-Pages-上"><a href="#●-将博客部署到-Github-Pages-上" class="headerlink" title="● 将博客部署到 Github Pages 上"></a>● 将博客部署到 Github Pages 上</h1><p>到目前为止，我们的本地博客就成功搭建了，但是现在我们只能通过本地连接查看博客，我们要做的是让其他人也能够访问我们的博客，这就需要我们将博客部署到Github Pages上</p><h2 id="•-注册-Github-账户"><a href="#•-注册-Github-账户" class="headerlink" title="• 注册 Github 账户"></a>• 注册 Github 账户</h2><p><a href="https://github.com/" target="_blank" rel="noopener">点击此处</a>访问 Github 官网，点击 Sign Up 注册账户</p><h2 id="•-创建项目代码库"><a href="#•-创建项目代码库" class="headerlink" title="• 创建项目代码库"></a>• 创建项目代码库</h2><p>点击 New repository 开始创建，步骤及注意事项见下图：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY1ZTA5MzBjMi5wbmc" alt="img"></p><h2 id="•-配置-SSH-密钥"><a href="#•-配置-SSH-密钥" class="headerlink" title="• 配置 SSH 密钥"></a>• 配置 SSH 密钥</h2><p>只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面（如：我的文件夹为：Ｅ\TRHX_Blog） Git Bash Here 输入以下命令：</p><pre><code>$ ssh-keygen -t rsa -C "your email@example.com" //引号里面填写你的邮箱地址，比如我的是tanrenhou@126.com</code></pre><p>之后会出现：</p><pre><code>Generating public/private rsa key pair.  Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):  //到这里可以直接回车将密钥按默认文件进行存储</code></pre><p>然后会出现：</p><pre><code>Enter passphrase (empty for no passphrase):  //这里是要你输入密码，其实不需要输什么密码，直接回车就行 Enter same passphrase again:  </code></pre><p>接下来屏幕会显示：</p><pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.  Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.  The key fingerprint is:  这里是各种字母数字组成的字符串，结尾是你的邮箱  The key's randomart image is:  这里也是各种字母数字符号组成的字符串</code></pre><p>运行以下命令，将公钥的内容复制到系统粘贴板上</p><pre><code>$ clip &lt; ~/.ssh/id_rsa.pub</code></pre><h2 id="•-在-GitHub-账户中添加你的公钥"><a href="#•-在-GitHub-账户中添加你的公钥" class="headerlink" title="• 在 GitHub 账户中添加你的公钥"></a>• 在 GitHub 账户中添加你的公钥</h2><p>① 登陆 GitHub，进入 Settings：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY2MDZlNzU1OC5wbmc" alt="img"></p><p>② 点击 SSH and GPG Keys：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY2MjJiNDU4OC5wbmc" alt="img"></p><p>③ 选择 New SSH key：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY2M2ViMWFiMi5wbmc" alt="img"></p><p>④ 粘贴密钥：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY2YmMxZmM4Ny5wbmc" alt="img"></p><h2 id="•-测试"><a href="#•-测试" class="headerlink" title="• 测试"></a>• 测试</h2><p>输入以下命令：注意：<a href="mailto:git@github.com">git@github.com</a>不要做任何更改！</p><pre><code>$ ssh -T git@github.com</code></pre><p>之后会显示：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY2ZTNiNDgwMy5wbmc" alt="img"></p><p>输入 yes 后会显示：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY3MDJjNDZkNi5wbmc" alt="img"></p><p>此时表示设置正确</p><h2 id="•-配置-Git-个人信息"><a href="#•-配置-Git-个人信息" class="headerlink" title="• 配置 Git 个人信息"></a>• 配置 Git 个人信息</h2><p>Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致</p><pre><code>$ git config --global user.name "此处填你的用户名"  $ git config --global user.email  "此处填你的邮箱"</code></pre><p>到此为止 SSH Key 配置成功，本机已成功连接到 Github</p><h1 id="●-将本地的-Hexo-文件更新到-Github-的库中"><a href="#●-将本地的-Hexo-文件更新到-Github-的库中" class="headerlink" title="● 将本地的 Hexo 文件更新到 Github 的库中"></a>● 将本地的 Hexo 文件更新到 Github 的库中</h1><p>① 登录 Github 打开自己的项目 your name.github.io<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY3MjBjY2FlMC5wbmc" alt="img"></p><p>② 鼠标移到 Clone or download 按钮，选择 Use SSH<br><img src="E:\笔记\自己整理\typora-user-images\20190816220246218.png" alt="img"></p><p>③ 一键复制地址<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY3NmNiM2RhNC5wbmc" alt="img"></p><p>④ 打开你创建的 Hexo 文件夹（如：E:\TRHX_Blog\Hexo），右键用记事本（Notepad++或者VS code等都可以）打开该文件夹下的 _config.yml 文件<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY3OGI4YmEzZS5wbmc" alt="img"></p><p>⑤ 按下图修改 _config.yml 文件并保存<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY3ZTExZWVkNy5wbmc" alt="img"></p><p>⑥ 在 Hexo 文件夹下分别执行以下命令</p><pre><code>$ hexo g  $ hexo d</code></pre><p>或者直接执行</p><pre><code>$ hexo g -d</code></pre><p>执行完之后会让你输入你的 Github 的账号和密码，如果此时报以下错误，说明你的 deployer 没有安装成功</p><pre><code>ERROR Deployer not found: git</code></pre><p>需要执行以下命令再安装一次：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>再执行 <code>hexo g -d</code>，你的博客就会部署到 Github 上了</p><p>⑦ 访问博客</p><p>你的博客地址：https://你的用户名.github.io，比如我的是：<a href="https://trhx.github.io/" target="_blank" rel="noopener">https://trhx.github.io</a> ,现在每个人都可以通过此链接访问你的博客了</p><h1 id="●-在博客上发表文章"><a href="#●-在博客上发表文章" class="headerlink" title="● 在博客上发表文章"></a>● 在博客上发表文章</h1><p>博客已经成功搭建了，但是我们该怎么写博客呢？</p><p>① 新建一个空文章，输入以下命令，会在项目 \Hexo\source_posts 中生成 文章标题.md 文件，文章标题根据需要命名</p><pre><code>$ hexo n "文章标题"</code></pre><p>也可以直接在 \Hexo\source_posts 目录下右键鼠标新建文本文档，改后缀为 .md 即可，这种方法比较方便</p><p>② 用编辑器编写文章</p><p>md 全称 Markdown， Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会， .md 文件可以使用支持 Markdown 语法的编辑器编辑，然后保存文件到 \Hexo\source_posts 文件夹下即可</p><p>推荐 Windows 上使用 MarkdownPad2 或者小书匠 编辑器，macOS 上使用 Mou 编辑器，Linux 上使用 Remarkable编辑器，Web 端上使用CSDN ，其他编辑器推荐可以参考我的另一篇文章：<a href="https://blog.csdn.net/qq_36759224/article/details/82229243" target="_blank" rel="noopener">《最新主流 Markdown 编辑器推荐》</a></p><p>文章标题，标签，分类，封面图片，摘要等，可以在 Front-matter 里面配置（Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，官方文档：<a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/front-matter</a> ），举个例子：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>layout: 页面布局（配合主题文档使用）title: 文章名称date: 文章日期comments: 文章是否开启评论photos: 文章封面图（仅部分主题支持）tags:   <span class="token list punctuation">-</span> 文章标签一  <span class="token list punctuation">-</span> 文章标签二categories: 文章分类<span class="token title important">description: 文章描述，即要在首页显示的摘要（仅部分主题支持）<span class="token punctuation">---</span></span>这里是摘要<span class="token comment" spellcheck="true">&lt;!-- more --></span>这里是正文注意：description 和 <span class="token comment" spellcheck="true">&lt;!-- more --></span> 方式显示摘要二选一即可，部分主题不支持description，每个配置英文冒号后面要空一格，不同主题配置有所差异，具体要参考主题文档</code></pre><p>当我们用编辑器写好文章后，可以使用以下命令将其推送到服务器上</p><pre><code>$ hexo g  $ hexo d</code></pre><p>或者将两个命令合二为一输入以下命令：</p><pre><code>$ hexo d -g</code></pre><p>现在访问你的博客就可以看见写好的文章啦！</p><p>原文链接： <a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">https://blog.csdn.net/qq_36759224/article/details/82121420</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Github Pages </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/4a17b156.html"/>
      <url>posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
