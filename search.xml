<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>9.K8s日志监控</title>
      <link href="posts/88f39b4b.html"/>
      <url>posts/88f39b4b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-常见的部署方案"><a href="#1-常见的部署方案" class="headerlink" title="1 常见的部署方案"></a>1 常见的部署方案</h1><ul><li><p>滚动更新</p><pre><code>服务不会停止，但是整个pod会有新老版本并存的情况。</code></pre><p>  演示说明如下：</p></li><li><p>重新创建</p><pre><code>先停止旧的pod，然后再创建新的pod，这个过程服务是会间断的。</code></pre></li><li><p>蓝绿<br>  ```</p></li></ul><p><strong>无需停机，风险较小</strong></p><pre><code>01-部署v1的应用（一开始的状态）    所有外部请求的流量都打到这个版本上.02-部署版本v2的应用    版本v2的代码与版本v1不同(新功能、Bug修复等).03-将流量从版本v1切换到版本v2。04-如版本v2测试正常，就删除版本v1正在使用的资源（例如实例），从此正式用版本v2。```</code></pre><ul><li>金丝雀</li></ul><h2 id="1-1-滚动更新"><a href="#1-1-滚动更新" class="headerlink" title="1.1 滚动更新"></a>1.1 滚动更新</h2><blockquote><p><code>rollingupdate.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> rollingupdate<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">strategy</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 策略</span>    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 滚动更新</span>      <span class="token key atrule">maxSurge</span><span class="token punctuation">:</span> 25%      <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> 25%    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> rollingupdate  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">4</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> rollingupdate    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> rollingupdate        <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/itcrazy2016/test<span class="token punctuation">-</span>docker<span class="token punctuation">-</span>image<span class="token punctuation">:</span>v1.0  <span class="token comment" spellcheck="true"># 测试滚动更新时 v1.0 -> v2.0</span>        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080  </span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> rollingupdate<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> rollingupdate  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP</code></pre><ul><li>maxSurge ：滚动升级时先启动的pod数量</li><li>maxUnavailable ：滚动升级时允许的最大unavailable的pod数量</li></ul></blockquote><pre class=" language-shell"><code class="language-shell">kubectl apply -f rollingupdate.yamlkubectl get podskubectl get svccurl cluster-ip/dockerfile</code></pre><p><strong>修改rollingupdate.yaml文件，将镜像修改成v2.0</strong></p><pre class=" language-shell"><code class="language-shell"># 在w1上，不断地访问观察输出while sleep 0.2;do curl cluster-ip/dockerfile;echo "";done# 在w2上，监控podkubectl get pods -w# 使得更改生效kubectl apply -f rollingupdate.yamlkubectl get pods </code></pre><blockquote><p><code>conclusion</code> ：发现新旧pod是会共存的，并且可以访问测试看一下</p><pre class=" language-shell"><code class="language-shell">kubectl get pods -wkubectl get svc</code></pre><p>可以发现，新老版本的确会共存</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20210309211033.gif" alt="rollingupdate2"></p></blockquote><h2 id="1-2-重新创建"><a href="#1-2-重新创建" class="headerlink" title="1.2 重新创建"></a>1.2 重新创建</h2><blockquote><p><code>recreate.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> recreate<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">strategy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> Recreate  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> recreate  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">4</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> recreate    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> recreate        <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/itcrazy2016/test<span class="token punctuation">-</span>docker<span class="token punctuation">-</span>image<span class="token punctuation">:</span>v1.0        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span>            <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span></code></pre></blockquote><pre class=" language-shell"><code class="language-shell">kubectl apply -f recreate.yamlkubectl get pods</code></pre><p><strong>修改recreate.yaml文件</strong>  v1.0 -&gt; v2.0</p><pre class=" language-shell"><code class="language-shell">kubectl apply -f recreate.yamlkubectl get pods</code></pre><blockquote><p><code>conclusion</code> ：发现pod是先停止，然后再创建新的</p><pre class=" language-shell"><code class="language-shell">NAME &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  READY &nbsp; STATUS &nbsp; &nbsp; &nbsp;  RESTARTS &nbsp; AGErecreate-655d4868d8-5dqcz &nbsp; &nbsp; &nbsp; &nbsp; 0/1 &nbsp; &nbsp; Terminating &nbsp; 0 &nbsp; &nbsp; &nbsp; &nbsp;  2m31srecreate-655d4868d8-sb688 &nbsp; &nbsp; &nbsp; &nbsp; 0/1 &nbsp; &nbsp; Terminating &nbsp; 0 &nbsp; &nbsp; &nbsp; &nbsp;  2m31s</code></pre><pre class=" language-shell"><code class="language-shell">NAME &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  READY &nbsp; STATUS &nbsp;  RESTARTS &nbsp; AGErecreate-6f74f4686d-4xkgl &nbsp; &nbsp; &nbsp; &nbsp; 1/1 &nbsp; &nbsp; Running &nbsp; 0 &nbsp; &nbsp; &nbsp; &nbsp;  13srecreate-6f74f4686d-blrt7 &nbsp; &nbsp; &nbsp; &nbsp; 1/1 &nbsp; &nbsp; Running &nbsp; 0 &nbsp; &nbsp; &nbsp; &nbsp;  13s</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20210309211118.gif" alt="recreate"></p></blockquote><p><strong>Have a try</strong></p><pre class=" language-shell"><code class="language-shell">kubectl rollout pause deploy rollingupdatekubectl rollout resume deploy rollingupdatekubectl rollout undo deploy rollingupdate &nbsp; &nbsp;# 回到上一个版本</code></pre><h2 id="1-3-蓝绿"><a href="#1-3-蓝绿" class="headerlink" title="1.3 蓝绿"></a>1.3 蓝绿</h2><blockquote><p><code>bluegreen.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#deploy</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> blue<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">strategy</span><span class="token punctuation">:</span>    <span class="token key atrule">rollingUpdate</span><span class="token punctuation">:</span>      <span class="token key atrule">maxSurge</span><span class="token punctuation">:</span> 25%      <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> 25%    <span class="token key atrule">type</span><span class="token punctuation">:</span> RollingUpdate  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> bluegreen  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">4</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> bluegreen        <span class="token key atrule">version</span><span class="token punctuation">:</span> v1.0    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> bluegreen        <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/itcrazy2016/test<span class="token punctuation">-</span>docker<span class="token punctuation">-</span>image<span class="token punctuation">:</span>v1.0        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span></code></pre></blockquote><pre class=" language-shell"><code class="language-shell">kubectl apply -f bluegreen.yamlkubectl get pods</code></pre><blockquote><p><code>bluegreen-service.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> bluegreen<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#选择器，两个条件需要同时满足</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> bluegreen    <span class="token key atrule">version</span><span class="token punctuation">:</span> v1.0  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP</code></pre></blockquote><pre class=" language-shell"><code class="language-shell">kubectl apply -f bluegreen-service.yamlkubectl get svc# 在w1上不断访问观察while sleep 0.3;do curl cluster-ip/dockerfile;echo "";done</code></pre><p><strong>修改bluegreen.yaml</strong></p><pre class=" language-shell"><code class="language-shell">01-deployment-name: blue &nbsp; &nbsp;---> &nbsp;  green02-image: v1.0---> &nbsp; v2.003-version: v1.0 &nbsp; &nbsp;---> &nbsp;  v2.0</code></pre><pre class=" language-shell"><code class="language-shell">kubectl apply -f bluegreen.yamlkubectl get pods# 同时观察刚才访问的地址有没有变化可以发现，两个版本就共存了，并且之前访问的地址没有变化</code></pre><p><strong>修改bluegreen-service.yaml</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 也就是把流量切到2.0的版本中</span><span class="token key atrule">selector</span><span class="token punctuation">:</span> <span class="token important">&amp;nbsp</span>;  app<span class="token punctuation">:</span> bluegreen <span class="token important">&amp;nbsp</span>;  version<span class="token punctuation">:</span> v2.0</code></pre><pre class=" language-shell"><code class="language-shell">kubectl apply -f bluegreen-service.yamlkubectl get svc# 同时观察刚才访问的地址有没有变化# 发现流量已经完全切到了v2.0的版本上</code></pre><p><strong>完整演示</strong>：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20210309211219.gif" alt="bluegreen"></p><h2 id="1-4-金丝雀"><a href="#1-4-金丝雀" class="headerlink" title="1.4 金丝雀"></a>1.4 金丝雀</h2><blockquote><p>修改上述 bluegreen-service.yaml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">selector</span><span class="token punctuation">:</span><span class="token key atrule">app</span><span class="token punctuation">:</span> bluegreen<span class="token key atrule">version</span><span class="token punctuation">:</span> v2.0 <span class="token important">&amp;nbsp</span>; <span class="token important">&amp;nbsp</span>;<span class="token comment" spellcheck="true"># 把version删除掉，只是根据bluegreen进行选择</span></code></pre></blockquote><pre class=" language-shell"><code class="language-shell">kubectl apply -f bluegreen-service.yaml # 同时观察刚才访问的地址有没有变化，lstio中就更方便咯此时新旧版本能够同时被访问到，AB测试，新功能部署少一些的实例</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20210309211233.gif" alt="canary"></p><h1 id="2-Log-and-Monitor"><a href="#2-Log-and-Monitor" class="headerlink" title="2 Log and Monitor"></a>2 Log and Monitor</h1><h2 id="2-1-Log"><a href="#2-1-Log" class="headerlink" title="2.1 Log"></a>2.1 Log</h2><h3 id="2-1-1-容器级别"><a href="#2-1-1-容器级别" class="headerlink" title="2.1.1 容器级别"></a>2.1.1 容器级别</h3><ul><li><p>docker命令查看</p><pre class=" language-shell"><code class="language-shell">docker ps --->containeriddocker logs containerid --->查看容器的日志情况</code></pre></li><li><p>kubectl命令查看</p><pre class=" language-shell"><code class="language-shell">kubectl logs -f <pod-name> -c <container-name></code></pre></li></ul><h3 id="2-1-2-Pod级别"><a href="#2-1-2-Pod级别" class="headerlink" title="2.1.2 Pod级别"></a>2.1.2 Pod级别</h3><pre class=" language-shell"><code class="language-shell">kubectl describe pod springboot-demo-68b89b96b6-sl8bq</code></pre><blockquote><p>当然，kubectl describe除了能够查看pod的日志信息，还能查看比如Node、RC、Service、Namespace等信息。<code>注意</code>：要是想查看指定命名空间之下的，可以 -n=namespace</p></blockquote><h3 id="2-1-3-组件服务级别"><a href="#2-1-3-组件服务级别" class="headerlink" title="2.1.3 组件服务级别"></a>2.1.3 组件服务级别</h3><blockquote><p>比如kube-apiserver、kube-schedule、kubelet、kube-proxy、kube-controller-manager等<br>可以使用journalctl进行查看</p></blockquote><pre class=" language-shell"><code class="language-shell">journalctl -u kubelet</code></pre><h3 id="2-1-4-LogPilot-ES-Kibana"><a href="#2-1-4-LogPilot-ES-Kibana" class="headerlink" title="2.1.4 LogPilot+ES+Kibana"></a>2.1.4 LogPilot+ES+Kibana</h3><blockquote><p><a href="https://github.com/AliyunContainerService/log-pilot" target="_blank" rel="noopener">https://github.com/AliyunContainerService/log-pilot</a></p></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20210309211242.png" alt="image-20191207113056302"><br><strong>部署流程</strong>：</p><ul><li><p>部署logpilot</p><ol><li><p>根据log-pilot.yaml创建资源</p><p> <code>log-pilot.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> DaemonSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> log<span class="token punctuation">-</span>pilot  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> log<span class="token punctuation">-</span>pilot    <span class="token key atrule">kubernetes.io/cluster-service</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> log<span class="token punctuation">-</span>es        <span class="token key atrule">kubernetes.io/cluster-service</span><span class="token punctuation">:</span> <span class="token string">"true"</span>        <span class="token key atrule">version</span><span class="token punctuation">:</span> v1.22    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>role.kubernetes.io/master        <span class="token key atrule">effect</span><span class="token punctuation">:</span> NoSchedule      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> log<span class="token punctuation">-</span>pilot        <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/log<span class="token punctuation">-</span>monitor/log<span class="token punctuation">-</span>pilot<span class="token punctuation">:</span>0.9<span class="token punctuation">-</span>filebeat        <span class="token key atrule">resources</span><span class="token punctuation">:</span>          <span class="token key atrule">limits</span><span class="token punctuation">:</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> 200Mi          <span class="token key atrule">requests</span><span class="token punctuation">:</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 100m            <span class="token key atrule">memory</span><span class="token punctuation">:</span> 200Mi        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"FILEBEAT_OUTPUT"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"elasticsearch"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"ELASTICSEARCH_HOST"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"elasticsearch-api"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"ELASTICSEARCH_PORT"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"9200"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"ELASTICSEARCH_USER"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"elastic"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"ELASTICSEARCH_PASSWORD"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"changeme"</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> sock          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/run/docker.sock        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> root          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /host          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> varlib          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/lib/filebeat        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> varlog          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/log/filebeat        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">capabilities</span><span class="token punctuation">:</span>            <span class="token key atrule">add</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> SYS_ADMIN      <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">30</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> sock        <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> /var/run/docker.sock      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> root        <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> /      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> varlib        <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> /var/lib/filebeat          <span class="token key atrule">type</span><span class="token punctuation">:</span> DirectoryOrCreate      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> varlog        <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> /var/log/filebeat          <span class="token key atrule">type</span><span class="token punctuation">:</span> DirectoryOrCreate</code></pre><pre class=" language-shell"><code class="language-shell">kubectl apply -f log-pilot.yaml</code></pre></li><li><p>查看pod和daemonset的信息</p><pre class=" language-shell"><code class="language-shell">kubectl get pods -n kube-systemkubectl get pods -n kube-system -o wide | grep logkubectl get ds -n kube-system</code></pre></li></ol></li><li><p>部署elasticsearch</p><ol><li><p>根据 elasticsearch.yaml 创建资源</p><p> <code>elasticsearch.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>api  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> es  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> transport    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9200</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">-</span>discovery  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> es  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> transport    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9300</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StatefulSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">kubernetes.io/cluster-service</span><span class="token punctuation">:</span> <span class="token string">"true"</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> <span class="token string">"elasticsearch-service"</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> es  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> es    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">effect</span><span class="token punctuation">:</span> NoSchedule        <span class="token key atrule">key</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>role.kubernetes.io/master      <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> init<span class="token punctuation">-</span>sysctl        <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.27</span>        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> sysctl        <span class="token punctuation">-</span> <span class="token punctuation">-</span>w        <span class="token punctuation">-</span> vm.max_map_count=262144        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> elasticsearch        <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/log<span class="token punctuation">-</span>monitor/elasticsearch<span class="token punctuation">:</span>v5.5.1        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9200</span>          <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9300</span>          <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>          <span class="token key atrule">capabilities</span><span class="token punctuation">:</span>            <span class="token key atrule">add</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> IPC_LOCK              <span class="token punctuation">-</span> SYS_RESOURCE        <span class="token key atrule">resources</span><span class="token punctuation">:</span>          <span class="token key atrule">limits</span><span class="token punctuation">:</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> 4000Mi          <span class="token key atrule">requests</span><span class="token punctuation">:</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 100m            <span class="token key atrule">memory</span><span class="token punctuation">:</span> 2000Mi        <span class="token key atrule">env</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"http.host"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"0.0.0.0"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"network.host"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"_eth0_"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"cluster.name"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"docker-cluster"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"bootstrap.memory_lock"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"false"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"discovery.zen.ping.unicast.hosts"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"elasticsearch-discovery"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"discovery.zen.ping.unicast.hosts.resolve_timeout"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"10s"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"discovery.zen.ping_timeout"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"6s"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"discovery.zen.minimum_master_nodes"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"2"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"discovery.zen.fd.ping_interval"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"2s"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"discovery.zen.no_master_block"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"write"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"gateway.expected_nodes"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"2"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"gateway.expected_master_nodes"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"1"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"transport.tcp.connect_timeout"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"60s"</span>          <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"ES_JAVA_OPTS"</span>            <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"-Xms2g -Xmx2g"</span>        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span>            <span class="token key atrule">port</span><span class="token punctuation">:</span> transport          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">20</span>          <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> es<span class="token punctuation">-</span>data          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data      <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">30</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> es<span class="token punctuation">-</span>data        <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> /es<span class="token punctuation">-</span>data</code></pre><pre class=" language-shell"><code class="language-shell">kubectl apply -f elasticsearch.yamlkubectl get pods -n kube-systemkubectl get pods -n kube-system -o wide | grep ela</code></pre></li><li><p>查看kube-system下的svc</p><pre class=" language-shell"><code class="language-shell">kubectl get svc -n kube-system</code></pre><pre class=" language-shell"><code class="language-shell">elasticsearch-api         ClusterIP   10.106.65.2      <none>        9200/TCP   elasticsearch-discovery   ClusterIP   10.101.117.180   <none>        9300/TCP   kube-dns                  ClusterIP   10.96.0.10       <none>       </code></pre></li><li><p>查看kube-system下的statefulset</p><pre class=" language-shell"><code class="language-shell">kubectl get statefulset -n kube-system</code></pre><pre class=" language-shell"><code class="language-shell">NAME            READY   AGEelasticsearch   3/3     106s</code></pre></li></ol></li><li><p>部署kibana</p><ol><li><p>根据 kibana.yaml 创建资源</p><p> <code>kibana.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token comment" spellcheck="true"># Deployment</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">component</span><span class="token punctuation">:</span> kibana<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>     <span class="token key atrule">component</span><span class="token punctuation">:</span> kibana<span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">component</span><span class="token punctuation">:</span> kibana    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana        <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/log<span class="token punctuation">-</span>monitor/kibana<span class="token punctuation">:</span>v5.5.1        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> CLUSTER_NAME          <span class="token key atrule">value</span><span class="token punctuation">:</span> docker<span class="token punctuation">-</span>cluster        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ELASTICSEARCH_URL          <span class="token key atrule">value</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//elasticsearch<span class="token punctuation">-</span>api<span class="token punctuation">:</span>9200/        <span class="token key atrule">resources</span><span class="token punctuation">:</span>          <span class="token key atrule">limits</span><span class="token punctuation">:</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 1000m          <span class="token key atrule">requests</span><span class="token punctuation">:</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 100m        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">5601</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> http<span class="token punctuation">---</span><span class="token comment" spellcheck="true"># Service</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">component</span><span class="token punctuation">:</span> kibana<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">component</span><span class="token punctuation">:</span> kibana  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> http<span class="token punctuation">---</span><span class="token comment" spellcheck="true"># Ingress</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> kibana  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> log.k8s.itcrazy2016.com    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> kibana          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><blockquote><p>kibana主要是对外提供访问的，所以这边需要配置Service和Ingress<br><code>前提</code>：要有Ingress Controller的支持，比如Nginx Controller</p></blockquote><pre class=" language-shell"><code class="language-shell">kubectl apply -f kibana.yaml</code></pre></li><li><p>查看pod和deployment的信息</p><pre class=" language-shell"><code class="language-shell">kubectl get pods -n kube-system | grep kikubectl get deploy -n kube-system</code></pre></li><li><p>配置Ingress需要的域名<br> 打开windows上的hosts文件</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 注意这边是worker01的IP</span><span class="token attr-name">121.41.10.126</span> <span class="token attr-value">kibana.jack.com </span></code></pre></li><li><p>在 windows 访问 kibana.jack.com<br> <img src="https://gitee.com/soulballad/PicGo/raw/master/img/20210309211254.png" alt="image-20191207113602397"></p></li></ol></li></ul><h2 id="2-2-Monitor"><a href="#2-2-Monitor" class="headerlink" title="2.2 Monitor"></a>2.2 Monitor</h2><h3 id="2-2-1-Prometheus简介"><a href="#2-2-1-Prometheus简介" class="headerlink" title="2.2.1 Prometheus简介"></a>2.2.1 Prometheus简介</h3><blockquote><p><code>官网</code>：<a href="https://prometheus.io/" target="_blank" rel="noopener">https://prometheus.io/</a></p><p><code>github</code> ：<a href="https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/prometheus" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/prometheus</a></p></blockquote><h3 id="2-2-2-Prometheus架构"><a href="#2-2-2-Prometheus架构" class="headerlink" title="2.2.2 Prometheus架构"></a>2.2.2 Prometheus架构</h3><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20210309211300.png" alt="image-20191207113807133"></p><h3 id="2-2-3-Prometheus知识普及"><a href="#2-2-3-Prometheus知识普及" class="headerlink" title="2.2.3 Prometheus知识普及"></a>2.2.3 Prometheus知识普及</h3><ul><li>支持pull、push数据添加方式</li><li>支持k8s服务发现</li><li>提供查询语言PromQL</li><li>时序(time series)是由名字(Metric)以及一组key/value标签定义的</li><li>数据类型</li></ul><h3 id="2-2-4-数据采集"><a href="#2-2-4-数据采集" class="headerlink" title="2.2.4 数据采集"></a>2.2.4 数据采集</h3><h4 id="2-2-4-1-服务器数据"><a href="#2-2-4-1-服务器数据" class="headerlink" title="2.2.4.1 服务器数据"></a>2.2.4.1 服务器数据</h4><blockquote><p>通过 NodeExporter： <a href="https://github.com/prometheus/node_exporter" target="_blank" rel="noopener">https://github.com/prometheus/node_exporter</a></p></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20210309211309.png" alt="image-20191207113900264"></p><h4 id="2-2-4-2-组件数据"><a href="#2-2-4-2-组件数据" class="headerlink" title="2.2.4.2 组件数据"></a>2.2.4.2 组件数据</h4><p>ETCD： <a href="https://ip:2379/metrics" target="_blank" rel="noopener">https://ip:2379/metrics</a><br>APIServer： <a href="https://ip:6443/metrics" target="_blank" rel="noopener">https://ip:6443/metrics</a><br>ControllerManager： <a href="https://ip:10252/metrics" target="_blank" rel="noopener">https://ip:10252/metrics</a><br>Scheduler： <a href="https://ip:10251/metrics" target="_blank" rel="noopener">https://ip:10251/metrics</a></p><h4 id="2-2-4-3-容器数据"><a href="#2-2-4-3-容器数据" class="headerlink" title="2.2.4.3 容器数据"></a>2.2.4.3 容器数据</h4><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20210309211312.png" alt="image-20191207113937823"></p><h3 id="2-2-5-Prometheus-Grafana"><a href="#2-2-5-Prometheus-Grafana" class="headerlink" title="2.2.5 Prometheus+Grafana"></a>2.2.5 Prometheus+Grafana</h3><blockquote><p>在master上创建prometheus目录<br>网盘/课堂源码/*.yaml</p><p><code>namespace.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor</code></pre><p><code>node-exporter.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> DaemonSet<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1beta2<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>exporter  <span class="token key atrule">name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>exporter  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">revisionHistoryLimit</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>exporter  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>exporter    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>exporter          <span class="token key atrule">image</span><span class="token punctuation">:</span> prom/node<span class="token punctuation">-</span>exporter<span class="token punctuation">:</span>v0.16.0          <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9100</span>              <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP              <span class="token key atrule">name</span><span class="token punctuation">:</span>    http      <span class="token key atrule">hostNetwork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">hostPID</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">effect</span><span class="token punctuation">:</span> NoSchedule          <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>exporter  <span class="token key atrule">name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>exporter<span class="token punctuation">-</span>service  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span>    http      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9100</span>      <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">31672</span>      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>exporter</code></pre><p><code>prometheus.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># "" indicates the core API group</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> nodes      <span class="token punctuation">-</span> nodes/proxy      <span class="token punctuation">-</span> services      <span class="token punctuation">-</span> endpoints      <span class="token punctuation">-</span> pods    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get      <span class="token punctuation">-</span> watch      <span class="token punctuation">-</span> list  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> extensions    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ingresses    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get      <span class="token punctuation">-</span> watch      <span class="token punctuation">-</span> list  <span class="token punctuation">-</span> <span class="token key atrule">nonResourceURLs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/metrics"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>conf  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> prometheus<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">prometheus.yml</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token punctuation">-</span>    <span class="token comment" spellcheck="true"># my global config</span>    <span class="token key atrule">global</span><span class="token punctuation">:</span>      <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span>     15s <span class="token comment" spellcheck="true"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span>      <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 15s <span class="token comment" spellcheck="true"># Evaluate rules every 15 seconds. The default is every 1 minute.</span>      <span class="token comment" spellcheck="true"># scrape_timeout is set to the global default (10s).</span>    <span class="token comment" spellcheck="true"># Alertmanager configuration</span>    <span class="token key atrule">alerting</span><span class="token punctuation">:</span>      <span class="token key atrule">alertmanagers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># - alertmanager:9093</span>    <span class="token comment" spellcheck="true"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span>    <span class="token key atrule">rule_files</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># - "first_rules.yml"</span>      <span class="token comment" spellcheck="true"># - "second_rules.yml"</span>    <span class="token comment" spellcheck="true"># A scrape configuration containing exactly one endpoint to scrape:</span>    <span class="token comment" spellcheck="true"># Here it's Prometheus itself.</span>    <span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.</span>      <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'prometheus'</span>        <span class="token comment" spellcheck="true"># metrics_path defaults to '/metrics'</span>        <span class="token comment" spellcheck="true"># scheme defaults to 'http'.</span>        <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'localhost:9090'</span><span class="token punctuation">]</span>      <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'grafana'</span>        <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>              <span class="token punctuation">-</span> <span class="token string">'grafana-service.ns-monitor:3000'</span>      <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'kubernetes-apiservers'</span>        <span class="token key atrule">kubernetes_sd_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> endpoints        <span class="token comment" spellcheck="true"># Default to scraping over https. If required, just disable this or change to</span>        <span class="token comment" spellcheck="true"># `http`.</span>        <span class="token key atrule">scheme</span><span class="token punctuation">:</span> https        <span class="token comment" spellcheck="true"># This TLS &amp; bearer token file config is used to connect to the actual scrape</span>        <span class="token comment" spellcheck="true"># endpoints for cluster components. This is separate to discovery auth</span>        <span class="token comment" spellcheck="true"># configuration because discovery &amp; scraping are two separate concerns in</span>        <span class="token comment" spellcheck="true"># Prometheus. The discovery auth config is automatic if Prometheus runs inside</span>        <span class="token comment" spellcheck="true"># the cluster. Otherwise, more config options have to be provided within the</span>        <span class="token comment" spellcheck="true"># &lt;kubernetes_sd_config>.</span>        <span class="token key atrule">tls_config</span><span class="token punctuation">:</span>          <span class="token key atrule">ca_file</span><span class="token punctuation">:</span> /var/run/secrets/kubernetes.io/serviceaccount/ca.crt          <span class="token comment" spellcheck="true"># If your node certificates are self-signed or use a different CA to the</span>          <span class="token comment" spellcheck="true"># master CA, then disable certificate verification below. Note that</span>          <span class="token comment" spellcheck="true"># certificate verification is an integral part of a secure infrastructure</span>          <span class="token comment" spellcheck="true"># so this should only be disabled in a controlled environment. You can</span>          <span class="token comment" spellcheck="true"># disable certificate verification by uncommenting the line below.</span>          <span class="token comment" spellcheck="true">#</span>          <span class="token comment" spellcheck="true"># insecure_skip_verify: true</span>        <span class="token key atrule">bearer_token_file</span><span class="token punctuation">:</span> /var/run/secrets/kubernetes.io/serviceaccount/token        <span class="token comment" spellcheck="true"># Keep only the default/kubernetes service endpoints for the https port. This</span>        <span class="token comment" spellcheck="true"># will add targets for each API server which Kubernetes adds an endpoint to</span>        <span class="token comment" spellcheck="true"># the default/kubernetes service.</span>        <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_namespace<span class="token punctuation">,</span> __meta_kubernetes_service_name<span class="token punctuation">,</span> __meta_kubernetes_endpoint_port_name<span class="token punctuation">]</span>          <span class="token key atrule">action</span><span class="token punctuation">:</span> keep          <span class="token key atrule">regex</span><span class="token punctuation">:</span> default;kubernetes;https      <span class="token comment" spellcheck="true"># Scrape config for nodes (kubelet).</span>      <span class="token comment" spellcheck="true">#</span>      <span class="token comment" spellcheck="true"># Rather than connecting directly to the node, the scrape is proxied though the</span>      <span class="token comment" spellcheck="true"># Kubernetes apiserver.  This means it will work if Prometheus is running out of</span>      <span class="token comment" spellcheck="true"># cluster, or can't connect to nodes for some other reason (e.g. because of</span>      <span class="token comment" spellcheck="true"># firewalling).</span>      <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'kubernetes-nodes'</span>        <span class="token comment" spellcheck="true"># Default to scraping over https. If required, just disable this or change to</span>        <span class="token comment" spellcheck="true"># `http`.</span>        <span class="token key atrule">scheme</span><span class="token punctuation">:</span> https        <span class="token comment" spellcheck="true"># This TLS &amp; bearer token file config is used to connect to the actual scrape</span>        <span class="token comment" spellcheck="true"># endpoints for cluster components. This is separate to discovery auth</span>        <span class="token comment" spellcheck="true"># configuration because discovery &amp; scraping are two separate concerns in</span>        <span class="token comment" spellcheck="true"># Prometheus. The discovery auth config is automatic if Prometheus runs inside</span>        <span class="token comment" spellcheck="true"># the cluster. Otherwise, more config options have to be provided within the</span>        <span class="token comment" spellcheck="true"># &lt;kubernetes_sd_config>.</span>        <span class="token key atrule">tls_config</span><span class="token punctuation">:</span>          <span class="token key atrule">ca_file</span><span class="token punctuation">:</span> /var/run/secrets/kubernetes.io/serviceaccount/ca.crt        <span class="token key atrule">bearer_token_file</span><span class="token punctuation">:</span> /var/run/secrets/kubernetes.io/serviceaccount/token        <span class="token key atrule">kubernetes_sd_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> node        <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">action</span><span class="token punctuation">:</span> labelmap          <span class="token key atrule">regex</span><span class="token punctuation">:</span> __meta_kubernetes_node_label_(.+)        <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__          <span class="token key atrule">replacement</span><span class="token punctuation">:</span> kubernetes.default.svc<span class="token punctuation">:</span><span class="token number">443</span>        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_node_name<span class="token punctuation">]</span>          <span class="token key atrule">regex</span><span class="token punctuation">:</span> (.+)          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __metrics_path__          <span class="token key atrule">replacement</span><span class="token punctuation">:</span> /api/v1/nodes/$<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>/proxy/metrics      <span class="token comment" spellcheck="true"># Scrape config for Kubelet cAdvisor.</span>      <span class="token comment" spellcheck="true">#</span>      <span class="token comment" spellcheck="true"># This is required for Kubernetes 1.7.3 and later, where cAdvisor metrics</span>      <span class="token comment" spellcheck="true"># (those whose names begin with 'container_') have been removed from the</span>      <span class="token comment" spellcheck="true"># Kubelet metrics endpoint.  This job scrapes the cAdvisor endpoint to</span>      <span class="token comment" spellcheck="true"># retrieve those metrics.</span>      <span class="token comment" spellcheck="true">#</span>      <span class="token comment" spellcheck="true"># In Kubernetes 1.7.0-1.7.2, these metrics are only exposed on the cAdvisor</span>      <span class="token comment" spellcheck="true"># HTTP endpoint; use "replacement: /api/v1/nodes/${1}:4194/proxy/metrics"</span>      <span class="token comment" spellcheck="true"># in that case (and ensure cAdvisor's HTTP server hasn't been disabled with</span>      <span class="token comment" spellcheck="true"># the --cadvisor-port=0 Kubelet flag).</span>      <span class="token comment" spellcheck="true">#</span>      <span class="token comment" spellcheck="true"># This job is not necessary and should be removed in Kubernetes 1.6 and</span>      <span class="token comment" spellcheck="true"># earlier versions, or it will cause the metrics to be scraped twice.</span>      <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'kubernetes-cadvisor'</span>        <span class="token comment" spellcheck="true"># Default to scraping over https. If required, just disable this or change to</span>        <span class="token comment" spellcheck="true"># `http`.</span>        <span class="token key atrule">scheme</span><span class="token punctuation">:</span> https        <span class="token comment" spellcheck="true"># This TLS &amp; bearer token file config is used to connect to the actual scrape</span>        <span class="token comment" spellcheck="true"># endpoints for cluster components. This is separate to discovery auth</span>        <span class="token comment" spellcheck="true"># configuration because discovery &amp; scraping are two separate concerns in</span>        <span class="token comment" spellcheck="true"># Prometheus. The discovery auth config is automatic if Prometheus runs inside</span>        <span class="token comment" spellcheck="true"># the cluster. Otherwise, more config options have to be provided within the</span>        <span class="token comment" spellcheck="true"># &lt;kubernetes_sd_config>.</span>        <span class="token key atrule">tls_config</span><span class="token punctuation">:</span>          <span class="token key atrule">ca_file</span><span class="token punctuation">:</span> /var/run/secrets/kubernetes.io/serviceaccount/ca.crt        <span class="token key atrule">bearer_token_file</span><span class="token punctuation">:</span> /var/run/secrets/kubernetes.io/serviceaccount/token        <span class="token key atrule">kubernetes_sd_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> node        <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">action</span><span class="token punctuation">:</span> labelmap          <span class="token key atrule">regex</span><span class="token punctuation">:</span> __meta_kubernetes_node_label_(.+)        <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__          <span class="token key atrule">replacement</span><span class="token punctuation">:</span> kubernetes.default.svc<span class="token punctuation">:</span><span class="token number">443</span>        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_node_name<span class="token punctuation">]</span>          <span class="token key atrule">regex</span><span class="token punctuation">:</span> (.+)          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __metrics_path__          <span class="token key atrule">replacement</span><span class="token punctuation">:</span> /api/v1/nodes/$<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>/proxy/metrics/cadvisor      <span class="token comment" spellcheck="true"># Scrape config for service endpoints.</span>      <span class="token comment" spellcheck="true">#</span>      <span class="token comment" spellcheck="true"># The relabeling allows the actual service scrape endpoint to be configured</span>      <span class="token comment" spellcheck="true"># via the following annotations:</span>      <span class="token comment" spellcheck="true">#</span>      <span class="token comment" spellcheck="true"># * `prometheus.io/scrape`: Only scrape services that have a value of `true`</span>      <span class="token comment" spellcheck="true"># * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need</span>      <span class="token comment" spellcheck="true"># to set this to `https` &amp; most likely set the `tls_config` of the scrape config.</span>      <span class="token comment" spellcheck="true"># * `prometheus.io/path`: If the metrics path is not `/metrics` override this.</span>      <span class="token comment" spellcheck="true"># * `prometheus.io/port`: If the metrics are exposed on a different port to the</span>      <span class="token comment" spellcheck="true"># service then set this appropriately.</span>      <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'kubernetes-service-endpoints'</span>        <span class="token key atrule">kubernetes_sd_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> endpoints        <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_service_annotation_prometheus_io_scrape<span class="token punctuation">]</span>          <span class="token key atrule">action</span><span class="token punctuation">:</span> keep          <span class="token key atrule">regex</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_service_annotation_prometheus_io_scheme<span class="token punctuation">]</span>          <span class="token key atrule">action</span><span class="token punctuation">:</span> replace          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __scheme__          <span class="token key atrule">regex</span><span class="token punctuation">:</span> (https<span class="token punctuation">?</span>)        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_service_annotation_prometheus_io_path<span class="token punctuation">]</span>          <span class="token key atrule">action</span><span class="token punctuation">:</span> replace          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __metrics_path__          <span class="token key atrule">regex</span><span class="token punctuation">:</span> (.+)        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">,</span> __meta_kubernetes_service_annotation_prometheus_io_port<span class="token punctuation">]</span>          <span class="token key atrule">action</span><span class="token punctuation">:</span> replace          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__          <span class="token key atrule">regex</span><span class="token punctuation">:</span> (<span class="token punctuation">[</span>^<span class="token punctuation">:</span><span class="token punctuation">]</span>+)(<span class="token punctuation">?</span><span class="token punctuation">:</span><span class="token punctuation">:</span>\d+)<span class="token punctuation">?</span>;(\d+)          <span class="token key atrule">replacement</span><span class="token punctuation">:</span> $1<span class="token punctuation">:</span>$2        <span class="token punctuation">-</span> <span class="token key atrule">action</span><span class="token punctuation">:</span> labelmap          <span class="token key atrule">regex</span><span class="token punctuation">:</span> __meta_kubernetes_service_label_(.+)        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_namespace<span class="token punctuation">]</span>          <span class="token key atrule">action</span><span class="token punctuation">:</span> replace          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> kubernetes_namespace        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_service_name<span class="token punctuation">]</span>          <span class="token key atrule">action</span><span class="token punctuation">:</span> replace          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> kubernetes_name      <span class="token comment" spellcheck="true"># Example scrape config for probing services via the Blackbox Exporter.</span>      <span class="token comment" spellcheck="true">#</span>      <span class="token comment" spellcheck="true"># The relabeling allows the actual service scrape endpoint to be configured</span>      <span class="token comment" spellcheck="true"># via the following annotations:</span>      <span class="token comment" spellcheck="true">#</span>      <span class="token comment" spellcheck="true"># * `prometheus.io/probe`: Only probe services that have a value of `true`</span>      <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'kubernetes-services'</span>        <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe        <span class="token key atrule">params</span><span class="token punctuation">:</span>          <span class="token key atrule">module</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>http_2xx<span class="token punctuation">]</span>        <span class="token key atrule">kubernetes_sd_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> service        <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_service_annotation_prometheus_io_probe<span class="token punctuation">]</span>          <span class="token key atrule">action</span><span class="token punctuation">:</span> keep          <span class="token key atrule">regex</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __param_target        <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__          <span class="token key atrule">replacement</span><span class="token punctuation">:</span> blackbox<span class="token punctuation">-</span>exporter.example.com<span class="token punctuation">:</span><span class="token number">9115</span>        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__param_target<span class="token punctuation">]</span>          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> instance        <span class="token punctuation">-</span> <span class="token key atrule">action</span><span class="token punctuation">:</span> labelmap          <span class="token key atrule">regex</span><span class="token punctuation">:</span> __meta_kubernetes_service_label_(.+)        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_namespace<span class="token punctuation">]</span>          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> kubernetes_namespace        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_service_name<span class="token punctuation">]</span>          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> kubernetes_name      <span class="token comment" spellcheck="true"># Example scrape config for probing ingresses via the Blackbox Exporter.</span>      <span class="token comment" spellcheck="true">#</span>      <span class="token comment" spellcheck="true"># The relabeling allows the actual ingress scrape endpoint to be configured</span>      <span class="token comment" spellcheck="true"># via the following annotations:</span>      <span class="token comment" spellcheck="true">#</span>      <span class="token comment" spellcheck="true"># * `prometheus.io/probe`: Only probe services that have a value of `true`</span>      <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'kubernetes-ingresses'</span>        <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /probe        <span class="token key atrule">params</span><span class="token punctuation">:</span>          <span class="token key atrule">module</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>http_2xx<span class="token punctuation">]</span>        <span class="token key atrule">kubernetes_sd_configs</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> ingress        <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_ingress_annotation_prometheus_io_probe<span class="token punctuation">]</span>            <span class="token key atrule">action</span><span class="token punctuation">:</span> keep            <span class="token key atrule">regex</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_ingress_scheme<span class="token punctuation">,</span>__address__<span class="token punctuation">,</span>__meta_kubernetes_ingress_path<span class="token punctuation">]</span>            <span class="token key atrule">regex</span><span class="token punctuation">:</span> (.+);(.+);(.+)            <span class="token key atrule">replacement</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">:</span>//$<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>$<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span>            <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __param_target          <span class="token punctuation">-</span> <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__            <span class="token key atrule">replacement</span><span class="token punctuation">:</span> blackbox<span class="token punctuation">-</span>exporter.example.com<span class="token punctuation">:</span><span class="token number">9115</span>          <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__param_target<span class="token punctuation">]</span>            <span class="token key atrule">target_label</span><span class="token punctuation">:</span> instance          <span class="token punctuation">-</span> <span class="token key atrule">action</span><span class="token punctuation">:</span> labelmap            <span class="token key atrule">regex</span><span class="token punctuation">:</span> __meta_kubernetes_ingress_label_(.+)          <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_namespace<span class="token punctuation">]</span>            <span class="token key atrule">target_label</span><span class="token punctuation">:</span> kubernetes_namespace          <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_ingress_name<span class="token punctuation">]</span>            <span class="token key atrule">target_label</span><span class="token punctuation">:</span> kubernetes_name      <span class="token comment" spellcheck="true"># Example scrape config for pods</span>      <span class="token comment" spellcheck="true">#</span>      <span class="token comment" spellcheck="true"># The relabeling allows the actual pod scrape endpoint to be configured via the</span>      <span class="token comment" spellcheck="true"># following annotations:</span>      <span class="token comment" spellcheck="true">#</span>      <span class="token comment" spellcheck="true"># * `prometheus.io/scrape`: Only scrape pods that have a value of `true`</span>      <span class="token comment" spellcheck="true"># * `prometheus.io/path`: If the metrics path is not `/metrics` override this.</span>      <span class="token comment" spellcheck="true"># * `prometheus.io/port`: Scrape the pod on the indicated port instead of the</span>      <span class="token comment" spellcheck="true"># pod's declared ports (default is a port-free target if none are declared).</span>      <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'kubernetes-pods'</span>        <span class="token key atrule">kubernetes_sd_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> pod        <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_pod_annotation_prometheus_io_scrape<span class="token punctuation">]</span>          <span class="token key atrule">action</span><span class="token punctuation">:</span> keep          <span class="token key atrule">regex</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_pod_annotation_prometheus_io_path<span class="token punctuation">]</span>          <span class="token key atrule">action</span><span class="token punctuation">:</span> replace          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __metrics_path__          <span class="token key atrule">regex</span><span class="token punctuation">:</span> (.+)        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">,</span> __meta_kubernetes_pod_annotation_prometheus_io_port<span class="token punctuation">]</span>          <span class="token key atrule">action</span><span class="token punctuation">:</span> replace          <span class="token key atrule">regex</span><span class="token punctuation">:</span> (<span class="token punctuation">[</span>^<span class="token punctuation">:</span><span class="token punctuation">]</span>+)(<span class="token punctuation">?</span><span class="token punctuation">:</span><span class="token punctuation">:</span>\d+)<span class="token punctuation">?</span>;(\d+)          <span class="token key atrule">replacement</span><span class="token punctuation">:</span> $1<span class="token punctuation">:</span>$2          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> __address__        <span class="token punctuation">-</span> <span class="token key atrule">action</span><span class="token punctuation">:</span> labelmap          <span class="token key atrule">regex</span><span class="token punctuation">:</span> __meta_kubernetes_pod_label_(.+)        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_namespace<span class="token punctuation">]</span>          <span class="token key atrule">action</span><span class="token punctuation">:</span> replace          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> kubernetes_namespace        <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_pod_name<span class="token punctuation">]</span>          <span class="token key atrule">action</span><span class="token punctuation">:</span> replace          <span class="token key atrule">target_label</span><span class="token punctuation">:</span> kubernetes_pod_name<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>rules  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> prometheus<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">cpu-usage.rule</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    groups:      - name: NodeCPUUsage        rules:          - alert: NodeCPUUsage            expr: (100 - (avg by (instance) (irate(node_cpu{name="node-exporter",mode="idle"}[5m])) * 100)) > 75            for: 2m            labels:              severity: "page"            annotations:              summary: "{{$labels.instance}}: High CPU usage detected"              description: "{{$labels.instance}}: CPU usage is above 75% (current value is: {{ $value }})"</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"prometheus-data-pv"</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>data<span class="token punctuation">-</span>pv    <span class="token key atrule">release</span><span class="token punctuation">:</span> stable<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 5Gi  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Recycle  <span class="token key atrule">nfs</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /nfs/data/prometheus    <span class="token key atrule">server</span><span class="token punctuation">:</span> 121.41.10.13<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>data<span class="token punctuation">-</span>pvc  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 5Gi  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>data<span class="token punctuation">-</span>pv      <span class="token key atrule">release</span><span class="token punctuation">:</span> stable<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1beta2<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> prometheus  <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">revisionHistoryLimit</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> prometheus  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> prometheus    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> prometheus      <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>        <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus          <span class="token key atrule">image</span><span class="token punctuation">:</span> prom/prometheus<span class="token punctuation">:</span>latest          <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent          <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /prometheus              <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>data<span class="token punctuation">-</span>volume            <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/prometheus/prometheus.yml              <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>conf<span class="token punctuation">-</span>volume              <span class="token key atrule">subPath</span><span class="token punctuation">:</span> prometheus.yml            <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/prometheus/rules              <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>rules<span class="token punctuation">-</span>volume          <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9090</span>              <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>data<span class="token punctuation">-</span>volume          <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>            <span class="token key atrule">claimName</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>data<span class="token punctuation">-</span>pvc        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>conf<span class="token punctuation">-</span>volume          <span class="token key atrule">configMap</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>conf        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>rules<span class="token punctuation">-</span>volume          <span class="token key atrule">configMap</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>rules      <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span>role.kubernetes.io/master          <span class="token key atrule">effect</span><span class="token punctuation">:</span> NoSchedule<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">prometheus.io/scrape</span><span class="token punctuation">:</span> <span class="token string">'true'</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> prometheus  <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>service  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9090</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">9090</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> prometheus  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort</code></pre><p><code>grafana.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token string">"grafana-data-pv"</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> grafana<span class="token punctuation">-</span>data<span class="token punctuation">-</span>pv    <span class="token key atrule">release</span><span class="token punctuation">:</span> stable<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 5Gi  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Recycle  <span class="token key atrule">nfs</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /nfs/data/grafana    <span class="token key atrule">server</span><span class="token punctuation">:</span> 121.41.10.13<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> grafana<span class="token punctuation">-</span>data<span class="token punctuation">-</span>pvc  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 5Gi  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> grafana<span class="token punctuation">-</span>data<span class="token punctuation">-</span>pv      <span class="token key atrule">release</span><span class="token punctuation">:</span> stable<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1beta2<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> grafana  <span class="token key atrule">name</span><span class="token punctuation">:</span> grafana  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">revisionHistoryLimit</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> grafana  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> grafana    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>        <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> grafana          <span class="token key atrule">image</span><span class="token punctuation">:</span> grafana/grafana<span class="token punctuation">:</span>latest          <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent          <span class="token key atrule">env</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> GF_AUTH_BASIC_ENABLED              <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"true"</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> GF_AUTH_ANONYMOUS_ENABLED              <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"false"</span>          <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>            <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>              <span class="token key atrule">path</span><span class="token punctuation">:</span> /login              <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3000</span>          <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/lib/grafana              <span class="token key atrule">name</span><span class="token punctuation">:</span> grafana<span class="token punctuation">-</span>data<span class="token punctuation">-</span>volume          <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">3000</span>              <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> grafana<span class="token punctuation">-</span>data<span class="token punctuation">-</span>volume          <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>            <span class="token key atrule">claimName</span><span class="token punctuation">:</span> grafana<span class="token punctuation">-</span>data<span class="token punctuation">-</span>pvc<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> grafana  <span class="token key atrule">name</span><span class="token punctuation">:</span> grafana<span class="token punctuation">-</span>service  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3000</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">3000</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> grafana  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort</code></pre><p><code>ingress.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#ingress</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ingress  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ns<span class="token punctuation">-</span>monitor<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> monitor.k8s.itcrazy2016.com    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /        <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> grafana<span class="token punctuation">-</span>service          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">3000</span></code></pre></blockquote><ol><li>创建命名空间 ns-monitor<pre class=" language-shell"><code class="language-shell">kubectl apply -f namespace.yamlkubectl get namespace</code></pre></li><li>创建node-exporter<pre class=" language-shell"><code class="language-shell">kubectl apply -f node-exporter.yamlkubectl get pod -n ns-monitorkubectl get svc -n ns-monitorkubectl get ds -n ns-monitorwin浏览器访问集群任意一个ip，比如http://121.41.10.126:31672  查看结果   # 这边是http协议，不能用 https</code></pre></li><li>部署prometheus pod<br> 包含rbac认证、ConﬁgMap等<br> 注意：记得修改prometheus.yaml文件中的ip为master的ip和path[PV需要使用到]<pre class=" language-shell"><code class="language-shell">kubectl apply -f prometheus.yamlkubectl get pod -n ns-monitor kubectl get svc -n ns-monitorwin浏览器访问集群任意一个ip:30222/graph  查看结果，比如http://121.41.10.126:30137</code></pre></li><li>部署grafana<pre class=" language-shell"><code class="language-shell">kubectl apply -f grafana.yamlkubectl get pod -n ns-monitorkubectl get svc -n ns-monitorwin浏览器访问集群任意一个ip:32405/graph/login   比如http://121.41.10.126:32727用户名密码:admin</code></pre></li><li>增加域名访问[没有域名好像没有灵魂]<br> 前提：配置好ingress controller和域名解析<pre class=" language-shell"><code class="language-shell">kubectl apply - ingress.yamlkubectl get ingress -n ns-monitorkubectl describe ingress -n ns-monitor</code></pre></li><li>直接通过域名访问即可</li></ol><h1 id="3-Trouble-Shooting"><a href="#3-Trouble-Shooting" class="headerlink" title="3 Trouble Shooting"></a>3 Trouble Shooting</h1><h2 id="3-1-Master"><a href="#3-1-Master" class="headerlink" title="3.1 Master"></a>3.1 Master</h2><pre><code>01 若apiserver出问题了    会导致整个K8s集群不可以使用，因为apiserver是K8s集群的大脑02 若etcd出问题了    apiserver和etcd则无法通信，kubelet也无法更新所在node上的状态03 当scheduler或者controller manager出现问题时    会导致deploy，pod，service等无法正常运行</code></pre><blockquote><p><code>解决方案</code>：出现问题时，监听到自动重启或者搭建高可用的master集群</p></blockquote><h2 id="3-2-Worker"><a href="#3-2-Worker" class="headerlink" title="3.2 Worker"></a>3.2 Worker</h2><p>worker节点挂掉或者上面的kubelet服务出现问题时，w上的pod则无法正常运行。</p><h2 id="3-3-Addons"><a href="#3-3-Addons" class="headerlink" title="3.3 Addons"></a>3.3 Addons</h2><p>dns和网络插件比如calico发生问题时，集群内的网络无法正常通信，并且无法根据服务名称进行解析。</p><h2 id="3-4-系统问题排查"><a href="#3-4-系统问题排查" class="headerlink" title="3.4 系统问题排查"></a>3.4 系统问题排查</h2><ul><li><p>查看Node的状态</p><pre class=" language-shell"><code class="language-shell">kubectl get nodeskubectl describe node-name</code></pre></li><li><p>查看集群master和worker组件的日志</p><pre class=" language-shell"><code class="language-shell">journalctl -u apiserverjournalctl -u schedulerjournalctl -u kubeletjournalctl -u kube-proxy...</code></pre></li></ul><h2 id="3-5-Pod的问题排查"><a href="#3-5-Pod的问题排查" class="headerlink" title="3.5 Pod的问题排查"></a>3.5 Pod的问题排查</h2><blockquote><p>K8s中最小的操作单元是Pod，最重要的操作也是Pod，其他资源的排查可以参照Pod问题的排查</p></blockquote><ol><li>查看Pod运行情况<pre class=" language-shell"><code class="language-shell">kubectl get pods -n namespace</code></pre></li><li>查看Pod的具体描述，定位问题<pre class=" language-shell"><code class="language-shell">kubectl describe pod pod-name -n namespace</code></pre></li><li>检查Pod对应的yaml是否有误<pre class=" language-shell"><code class="language-shell">kubectl get pod pod-name -o yaml</code></pre></li><li>查看Pod日志<pre class=" language-shell"><code class="language-shell">kubectl logs ...</code></pre></li></ol><p><strong>Pod可能会出现哪些问题及解决方案</strong></p><pre class=" language-shell"><code class="language-shell">`1. 处于Pending状态`    说明Pod还没有被调度到某个node上，可以describe一下详情。可能因为资源不足，端口被占用等。    `2. 处于Waiting/ContainerCreating状态`    可能因为镜像拉取失败，或者是网络插件的问题，比如calico，或者是容器本身的问题，可以检查一下容器的yaml文件内容和Dockerfile的书写。    `3. 处于ImagePullBackOff状态`    镜像拉取失败，可能是镜像不存在，或者没有权限拉取。    `4. 处于CrashLoopBackOff状态`    Pod之前启动成功过，但是又失败了，不断在重启。    `5. 处于Error状态`    有些内容不存在，比如ConfigMap，PV，没有权限等，需要创建一下。    `6. 处于Terminating状态`    说明Pod正在停止    `7. 处于Unknown状态`    说明K8s已经失去对Pod的管理监听。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.K8s核心组件</title>
      <link href="posts/22c60291.html"/>
      <url>posts/22c60291.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-K8s系统核心组件"><a href="#1-K8s系统核心组件" class="headerlink" title="1 K8s系统核心组件"></a>1 K8s系统核心组件</h1><h2 id="1-1-Master和Node"><a href="#1-1-Master和Node" class="headerlink" title="1.1 Master和Node"></a>1.1 Master和Node</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/zh/docs/concepts/architecture/master-node-communication/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/concepts/architecture/master-node-communication/</a></p></blockquote><pre><code>K8S集群中的控制节点，负责整个集群的管理和控制，可以做成高可用，防止一台Master打竞技或者不可用。其中有一些关键的组件：比如API Server，Controller Manager，Scheduler等</code></pre><blockquote><p>Node</p></blockquote><pre><code>Node会被Master分配一些工作负载，当某个Node不可用时，会将工作负载转移到其他Node节点上。Node上有一些关键的进程：kubelet，kube-proxy，docker等</code></pre><blockquote><p>查看集群中的Node</p></blockquote><pre class=" language-shell"><code class="language-shell">kubectl get nodeskubectl describe node node-name</code></pre><h2 id="1-2-kubeadm"><a href="#1-2-kubeadm" class="headerlink" title="1.2 kubeadm"></a>1.2 kubeadm</h2><h3 id="1-2-1-kubeadm-init"><a href="#1-2-1-kubeadm-init" class="headerlink" title="1.2.1 kubeadm init"></a>1.2.1 kubeadm init</h3><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210752.png"></p><blockquote><ol><li><p>进行一系列检查[init之前的检查]，以确定这台机器可以部署kubernetes</p><pre class=" language-shell"><code class="language-shell">kubeadm init pre-flight check</code></pre><ol><li><p>kubeadm版本与要安装的kubernetes版本的检查</p></li><li><p>kubernetes安装的系统需求检查[centos版本、cgroup、docker等]</p></li><li><p>用户、主机、端口、swap等</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210810.png" alt="image-20191207162457152"></p></li></ol></li><li><p>生成kubernetes对外提供服务所需要的各种证书可对应目录，也就是生成私钥和数字证书<br> <code>/etc/kubernetes/pki/*</code></p><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210813.png" alt="image-20191207162327165"></p><ol><li>自建ca，生成ca.key和ca.crt </li><li>apiserver的私钥与公钥证书  </li><li>apiserver访问kubelet使用的客户端私钥与证书</li><li>sa.key和sa.pub</li><li>etcd相关私钥和数字证书</li></ol></li><li><p>为其他组件生成访问kube-ApiServer所需的配置文件xxx.conf</p><pre class=" language-shell"><code class="language-shell">ls /etc/kubernetes/admin.conf  controller-manager.conf  kubelet.conf  scheduler.conf</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210816.png" alt="image-20191207162701199"></p></li><li><p>有了 $HOME/.kube/config 就可以使用kubectl和K8s集群打交道了，这个文件是来自于admin.config</p></li></ol><pre class=" language-shell"><code class="language-shell">mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210930.png" alt="image-20191207162757134"></p><pre><code>1. kubeconfig中包含了cluster、user和context信息：kubectl config view2. 允许kubectl快速切换context，管理多集群</code></pre><ol start="3"><li><p>为master生成Pod配置文件，这些组件会被master节点上的kubelet读取到，并且创建对应资源</p><pre class=" language-shell"><code class="language-shell">ls /etc/kubernetes/manifests/*.yamlkube-apiserver.yaml kube-controller-manager.yamlkube-scheduler.yaml</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210819.png" alt="image-20191207163316255"></p><p>这些pod由kubelet直接管理，是静态pod，直接使用主机网络<br>kubelet读取manifests目录并管理各控制平台组件pod的启动与停止<br>要想修改这些pod，直接修改manifests下的yaml文件即可</p></li><li><p>下载镜像[这里的镜像我们已经提前准备好了]，等待控制平面启动<br> k8s.gcr.io下载不了，所以我们先提前下载并且tag好了</p></li><li><p>一旦这些 YAML 文件出现在被 kubelet 监视的/etc/kubernetes/manifests/目录下，kubelet就会自动创建这些yaml文件定义的pod，即master组件的容器。master容器启动后，kubeadm会通过检查<code>localhost:6443/healthz</code> 这个master组件的健康状态检查URL，等待master组件完全运行起来</p><pre class=" language-shell"><code class="language-shell">cat kube-apiserver.yaml # 里面有健康检查的配置</code></pre></li><li><p>为集群生成一个bootstrap token，设定当前node为master，master节点将不承担工作负载</p></li><li><p>将ca.crt等 Master节点的重要信息，通过ConfigMap的方式保存在etcd中，供后续部署node节点使用</p></li><li><p>安装默认插件，kubernetes默认kube-proxy和DNS两个插件是必须安装的，dns插件安装了会处于pending状态，要等网络插件安装完成，比如calico</p><pre class=" language-shell"><code class="language-shell">kubectl get daemonset -n kube-system# 可以看到kube-proxy和calico[或者其他网络插件]</code></pre></li></ol></blockquote><h3 id="1-2-2-kubeadm-join"><a href="#1-2-2-kubeadm-join" class="headerlink" title="1.2.2 kubeadm join"></a>1.2.2 kubeadm join</h3><blockquote><p>kubeadm join 192.168.0.51:6443 –token yu1ak0.2dcecvmpozsy8loh \ –discovery-token-ca-cert-hash<br>sha256:5c4a69b3bb05b81b675db5559b0e4d7972f1d0a61195f217161522f464c307b0</p></blockquote><blockquote><ol><li><p>join前检查</p></li><li><p>discovery-token-ca-cert-hash用于验证master身份</p><pre class=" language-shell"><code class="language-shell"># 可以计算出来，在w节点上执行openssl x509 -in /etc/kubernetes/pki/ca.crt -noout -pubkey | openssl rsa -pubin -outform DER 2>/dev/null | sha256sum | cut -d' ' -f1# 最终hash的值909adc03d6e4bd676cfc4e04b864530dd19927d8ed9d84e224101ef38ed0bb96</code></pre></li><li><p>token用于master验证node</p><pre class=" language-shell"><code class="language-shell"># 在master上节点上，可以查看对应的tokenkubectl get secret -n kube-system | grep bootstrap-token# 得到token的值kubectl get secret/bootstrap-token-kggzhc -n kube-system -o yaml# 对token的值进行解码echo NHRzZHp0Y2RidDRmd2U5dw==|base64 -d    --->4tsdztcdbt4fwe9w# 最终token的值kggzhc.4tsdztcdbt4fwe9w</code></pre></li><li><p>实在忘了怎么办？<br> 如果没有及时保存最后的join信息，或者24小时之后过期了，这时候可以重新生成</p><ol><li>重新生成token<pre class=" language-shell"><code class="language-shell">kubeadm token create</code></pre></li><li>获取ca证书sha256编码hash值<pre class=" language-shell"><code class="language-shell">openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'</code></pre></li><li>重新生成join信息<pre class=" language-shell"><code class="language-shell">kubeadm join 主节点ip地址:6443 --token token填这里  --discovery-token-ca-cert-hash sha256:哈希值填这里</code></pre></li></ol></li></ol></blockquote><h2 id="1-3-先把核心组件总体过一遍"><a href="#1-3-先把核心组件总体过一遍" class="headerlink" title="1.3 先把核心组件总体过一遍"></a>1.3 先把核心组件总体过一遍</h2><p>不妨查看一下之前的K8s架构图，勾起回忆</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210824.png" alt="image-20191206211423255"></p><blockquote><p><strong>对之前理解的优化，先是整体</strong></p><ol><li><p><strong>kubectl</strong><br> 总得要有一个操作集群的客户端，也就是和集群打交道</p></li><li><p><strong>kube-apiserver</strong><br> 整个集群的中枢纽带，负责的事情很多</p><pre class=" language-shell"><code class="language-shell">1. /etc/kubernetes/manifests/kube-apiserver.yaml   # kubelet管理的静态pod2. --insecure-port=0   # 默认使用http非安全协议访问3. `安全验证的一些文件`4. `准入策略的拦截器`5. --authorization-mode=Node,RBAC6. --etcd    # 配置apiserver与etcd通信</code></pre></li><li><p><strong>kube-scheduler</strong><br> 单纯地调度pod，按照特定的调度算法和策略，将待调度Pod绑定到集群中某个适合的Node，并写入绑定信息，由对应节点的kubelet服务创建pod。</p><pre class=" language-shell"><code class="language-shell">1. /etc/kubernetes/manifests/kube-scheduler.yaml   # kubelet管理的静态pod2. --address 表示只在master节点上提供服务，不对外3. kubeconfig 表示</code></pre></li><li><p><strong>kube-controller-manager</strong><br> 负责集群中Node、Pod副本、服务的endpoint、命名空间、Service Account、资源配合等管理<br> 会划分成不同类型的controller，每个controller都是一个死循环，在循环中controller通过apiserver监视自己控制资源的状态，一旦状态发生变化就会努力改变状态，直到变成期望状态</p><pre class=" language-shell"><code class="language-shell">1. /etc/kubernetes/manifests/kube-controller-manager.yaml # kubelet管理的静态pod2. 参数设置ca-file3. 多个manager，是否需要进行leader选举</code></pre></li><li><p><strong>kubelet</strong> </p><p> 集群中的所有节点都有运行，用于管理pod和container，每个kubelet会向apiserver注册本节<br> 点的信息，并向master节点上报本节点资源使用的情况</p><pre class=" language-shell"><code class="language-shell">1. `kubelet由操作系统init[systemd]进行启动`2. ls /lib/systemd/system/kubelet.service3. systemctl daemon-reload & systemctl restart kubelet</code></pre></li><li><p><strong>kube-proxy</strong><br> 集群中的所有节点都有运行，像service的操作都是由kube-proxy代理的，对于客户端是透明的</p><p>```shell</p></li><li><p>kube-proxy由daemonset控制器在各个节点上启动唯一实例</p></li><li><p><code>配置参数：/var/lib/kube-proxy/config.confpod内.</code>   # 不是静态pod</p></li><li><p>kubectl get pods -n kube-system</p></li><li><p>kubectl exec kube-proxy-jt9n4 -n kube-system – cat /var/lib/kube-proxy/config.conf</p></li><li><p>mode:””   —&gt;# iptables</p><pre><code></code></pre></li><li><p><strong>DNS</strong><br> 域名解析的问题</p></li><li><p><strong>dashboard</strong><br> 需要有监控面板能够监测整个集群的状态</p></li><li><p><strong>etcd</strong><br> 整个集群的配置中心，所有集群的状态数据，对象数据都存储在etcd中<br> kubeadm引导启动的K8s集群，默认只启动一个etcd节点</p><p>```shell</p></li><li><p>/etc/kubernetes/manifests/etcd.yaml   # kubelet管理的静态pod</p></li><li><p>etcd所使用的相关秘钥在/etc/kubernetes/pki/etcd里面</p></li><li><p>etcd挂载master节点本地路径/var/lib/etcd用于运行时数据存储，tree</p><pre><code></code></pre></li></ol></blockquote><h2 id="1-4-Kubernetes源码查看方式"><a href="#1-4-Kubernetes源码查看方式" class="headerlink" title="1.4 Kubernetes源码查看方式"></a>1.4 Kubernetes源码查看方式</h2><blockquote><p>源码地址：<a href="https://github.com/kubernetes/kubernetes" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes</a></p><p><a href="https://github.com/kubernetes/kubernetes/tree/release-1.14" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/tree/release-1.14</a></p></blockquote><h2 id="1-5-kubectl"><a href="#1-5-kubectl" class="headerlink" title="1.5 kubectl"></a>1.5 kubectl</h2><blockquote><p><code>语法</code>：kubectl [command] [TYPE] [NAME] [ﬂag]<br><code>官网</code>：<a href="https://kubernetes.io/docs/reference/kubectl/overview/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/kubectl/overview/</a></p><ul><li>command：用于操作k8s集资源对象的命令，比如apply、delete、describe、get等</li><li>TYPE：要操作资源对象的类型，区分大小写，比如pod[pods/po]、deployment</li><li>NAME：要操作对象的具体名称，若不指定，则返回该资源类型的全部对象[是默认命名空间下的]</li><li>flags：可选</li></ul></blockquote><p><strong>demo</strong></p><ul><li><p>查看集群信息</p><pre class=" language-shell"><code class="language-shell"># 查看集群的信息kubectl config view# 查看cluster的信息kubectl config get-clusters</code></pre><p>  <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210831.png" alt="image-20191207165758158"></p></li><li><p>创建资源</p><pre class=" language-shell"><code class="language-shell">kubectl apply -f xxx.yamlkubectl apply -f <directory></code></pre></li><li><p>查看资源对象</p><pre class=" language-shell"><code class="language-shell"># 查看Podkubectl get pods# 查看Servicekubectl get svc</code></pre></li><li><p>问题查看调试</p><pre class=" language-shell"><code class="language-shell">kubectl describe pod pod-namekubectl exec -it pod-namekubectl logs -f pod-namekubectl attach</code></pre></li></ul><h2 id="1-6-API-Server"><a href="#1-6-API-Server" class="headerlink" title="1.6 API Server"></a>1.6 API Server</h2><p>官网：<a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kube-apiserver/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kube-apiserver/</a></p><blockquote><p>APIServer提供了K8S各类资源对象的操作，是集群内各个功能模块之间数据交互和通信的中心枢纽，是整个系统的数据总线和数据中心。通常我们通过kubectl与APIServer进行交互。</p><p>APIServer通过kube-apiserver的进程提供服务，运行在master节点上<br>kubectl与APIServer之间是REST调用</p><pre><code>The Kubernetes API server validates and configures data for the api objects which include pods, services, replicationcontrollers, and others. The API Server services REST operations and provides the frontend to the cluster’s shared state through which all other components interact.          </code></pre></blockquote><ol><li><p>查看yaml文件中的apiVersion</p><pre class=" language-shell"><code class="language-shell">grep -r "apiVersion" .</code></pre><pre><code>./pod_nginx.yaml:apiVersion: apps/v1./my-tomcat.yaml:apiVersion: apps/v1./my-tomcat.yaml:apiVersion: v1./mandatory.yaml:apiVersion: v1./mandatory.yaml:apiVersion: v1./mandatory.yaml:apiVersion: v1./mandatory.yaml:apiVersion: v1./mandatory.yaml:apiVersion: v1./mandatory.yaml:apiVersion: rbac.authorization.k8s.io/v1beta1./mandatory.yaml:apiVersion: rbac.authorization.k8s.io/v1beta1./mandatory.yaml:apiVersion: rbac.authorization.k8s.io/v1beta1...</code></pre></li><li><p>REST API设计</p><blockquote><p>api官网：<a href="https://kubernetes.io/docs/concepts/overview/kubernetes-api/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/overview/kubernetes-api/</a></p><p>v1.14 ：<a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.14/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.14/</a></p></blockquote><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210836.png" alt="image-20191206212836564"></p></li><li><p>想要写Pod的yaml文件</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//kubernetes.io/docs/reference/generated/kubernetes-api/v1.14/#pod-v1-core</code></pre></li><li><p>kube-apiserver</p><pre class=" language-shell"><code class="language-shell">lsof -i tcp:8080vi /etc/kubernetes/manifests/kube-apiserver.yaml    [kubeadm安装方式]# 查询insecure-port，并将修改端口为8080，开放通过8080端口进行rest访问insecure-port=8080# kubect apply生效，需要等待一会kubectl apply -f kube-apiserver.yaml</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210839.png" alt="image-20191207171654245"></p></li><li><p>查看端口以及访问测试<br> 可以发现结果和kubectl使用一样</p><pre class=" language-shell"><code class="language-shell">lsof -i tcp:8080curl localhost:8080curl localhost:8080/apicurl localhost:8080/api/v1curl localhost:8080/api/v1/podscurl localhost:8080/api/v1/services</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210842.png" alt="image-20191207172354870"></p></li><li><p>设计一个Pod的url请求</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//kubernetes.io/docs/reference/generated/kubernetes-api/v1.14/#-strong-write-operations-pod-v1-core-strong-</code></pre></li><li><p>这种操作还是相对比较麻烦的，哪怕使用kubectl，怎么办？好事之者</p><blockquote><p><a href="https://github.com/kubernetes-client" target="_blank" rel="noopener">https://github.com/kubernetes-client</a></p><p><code>Java</code> ：<a href="https://github.com/kubernetes-client/java" target="_blank" rel="noopener">https://github.com/kubernetes-client/java</a><br><code>Go</code> ：<a href="https://github.com/kubernetes/client-go" target="_blank" rel="noopener">https://github.com/kubernetes/client-go</a></p></blockquote></li></ol><h2 id="1-7-集群安全机制之API-Server"><a href="#1-7-集群安全机制之API-Server" class="headerlink" title="1.7 集群安全机制之API Server"></a>1.7 集群安全机制之API Server</h2><blockquote><p><code>官网</code>：<a href="https://v1-12.docs.kubernetes.io/docs/reference/access-authn-authz/controlling-access/" target="_blank" rel="noopener">https://v1-12.docs.kubernetes.io/docs/reference/access-authn-authz/controlling-access/</a></p><p>对于k8s集群的访问操作，都是通过api server的rest api来实现的，难道所有的操作都允许吗？当然不行，这<br>里就涉及到认证、授权和准入等操作。</p></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210845.png" alt="image-20191206213054826"></p><h3 id="1-7-1-API-Server认证"><a href="#1-7-1-API-Server认证" class="headerlink" title="1.7.1 API Server认证"></a>1.7.1 API Server认证</h3><blockquote><p>API Server认证(Authentication) </p></blockquote><blockquote><p><code>官网</code>：<a href="https://v1-12.docs.kubernetes.io/docs/reference/access-authn-authz/controlling-access/#authentication" target="_blank" rel="noopener">https://v1-12.docs.kubernetes.io/docs/reference/access-authn-authz/controlling-access/#authentication</a><br>说白了，就是如何来识别客户端的身份，K8s集群提供了3种识别客户端身份的方式</p></blockquote><ul><li><p>客户端访问 k8s 集群认证：</p><ul><li>HTTPS证书认证<br>基于CA根证书签名的双向数字证书认证方式</li><li>HTTP Token认证<br>通过一个Token来识别合法用户</li><li>HTTP Base认证<br>通过用户名+密码的方式认证</li></ul></li><li><p>集群内部组件调用认证：</p><ul><li><p>系统组件之间通过 Service Account 进行认证，k8s 集群在创建的时候回默认创建一个 Service Account，Service Account 会创建一个 secret</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210848.png" alt="image-20191207173942130"></p></li><li><p>每当创建 Pod 的时候，Service Account 创建的secret会被自动放到pod中，路径 <code>/run/secrets/kubernetes.io/serviceaccount</code></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210850.png" alt="image-20191207174214880"></p></li></ul></li></ul><h3 id="1-7-2-API-Server授权"><a href="#1-7-2-API-Server授权" class="headerlink" title="1.7.2 API Server授权"></a>1.7.2 API Server授权</h3><blockquote><p>API Server授权(Authorization) </p></blockquote><blockquote><p><code>官网</code>：<a href="https://v1-12.docs.kubernetes.io/docs/reference/access-authn-authz/controlling-access/#authorization" target="_blank" rel="noopener">https://v1-12.docs.kubernetes.io/docs/reference/access-authn-authz/controlling-access/#authorization</a></p></blockquote><ul><li>ABAC 授权模式：基于属性的访问控制</li><li>Webhook 授权模式</li><li>RBAC 授权模式：Role Based Access Control</li></ul><p>Role、ClusterRole、RoleBinding和ClusterRoleBinding<br>用户可以使用kubectl或者API调用等方式操作这些资源对象。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210854.png" alt="image-20191207174757711"></p><p><code>rbac.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>provisioner<span class="token punctuation">-</span>runner<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"persistentvolumes"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"delete"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"persistentvolumeclaims"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"storage.k8s.io"</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"storageclasses"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"events"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">,</span> <span class="token string">"patch"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"services"</span><span class="token punctuation">,</span> <span class="token string">"endpoints"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"extensions"</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"podsecuritypolicies"</span><span class="token punctuation">]</span>    <span class="token key atrule">resourceNames</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"nfs-provisioner"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"use"</span><span class="token punctuation">]</span><span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> run<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>provisioner<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>provisioner     <span class="token comment" spellcheck="true"># replace with namespace where provisioner is deployed</span>    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>provisioner<span class="token punctuation">-</span>runner  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Role<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>locking<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>provisioner<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"endpoints"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">,</span> <span class="token string">"patch"</span><span class="token punctuation">]</span><span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>locking<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>provisioner<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>provisioner    <span class="token comment" spellcheck="true"># replace with namespace where provisioner is deployed</span>    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role  <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>locking<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>provisioner  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io</code></pre><h3 id="1-7-3-Admission-Control"><a href="#1-7-3-Admission-Control" class="headerlink" title="1.7.3 Admission Control"></a>1.7.3 Admission Control</h3><blockquote><p> Admission Control(准入控制) </p></blockquote><blockquote><p><code>官网</code>：<a href="https://v1-12.docs.kubernetes.io/docs/reference/access-authn-authz/controlling-access/#admission-control" target="_blank" rel="noopener">https://v1-12.docs.kubernetes.io/docs/reference/access-authn-authz/controlling-access/#admission-control</a></p></blockquote><ul><li>Always<br>允许所有请求</li><li>AlwaysPullImages<br>在启动容器之前总是尝试重新下载镜像</li><li>AlwaysDeny<br>禁止所有请求</li><li>……</li></ul><h2 id="1-8-Scheduler"><a href="#1-8-Scheduler" class="headerlink" title="1.8 Scheduler"></a>1.8 Scheduler</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/</a></p><pre><code>In Kubernetes, scheduling refers to making sure that Pods are matched to Nodes so that Kubelet can run them.</code></pre><p>通过调度算法，为待调度Pod列表的每个Pod，从Node列表中选择一个最合适的Node。<br>然后，目标节点上的kubelet通过API Server监听到Kubernetes Scheduler产生的Pod绑定事件，获取对应的<br>Pod清单，下载Image镜像，并启动容器。</p></blockquote><h3 id="1-8-1-架构图"><a href="#1-8-1-架构图" class="headerlink" title="1.8.1 架构图"></a>1.8.1 架构图</h3><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210859.png" alt="image-20191206213612259"></p><h3 id="1-8-2-流程描述"><a href="#1-8-2-流程描述" class="headerlink" title="1.8.2 流程描述"></a>1.8.2 流程描述</h3><blockquote><p><a href="https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/#kube-scheduler-implementation" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/#kube-scheduler-implementation</a></p><pre><code>01-Filtering02-Scoring</code></pre></blockquote><p>（1）预选调度策略：遍历所有目标Node，刷选出符合Pod要求的候选节点<br>（2）优选调度策略：在(1)的基础上，采用优选策略算法计算出每个候选节点的积分，积分最高者胜出</p><h3 id="1-8-3-预选策略和优选策略"><a href="#1-8-3-预选策略和优选策略" class="headerlink" title="1.8.3 预选策略和优选策略"></a>1.8.3 预选策略和优选策略</h3><h4 id="1-8-3-1-预选策略"><a href="#1-8-3-1-预选策略" class="headerlink" title="1.8.3.1 预选策略"></a>1.8.3.1 预选策略</h4><blockquote><p><a href="https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/#filtering" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/#filtering</a></p></blockquote><ul><li><p>PodFitsHostPorts</p><pre><code>Checks if a Node has free ports (the network protocol kind) for the Pod ports the Pod is requesting.</code></pre></li><li><p>PodFitsHost</p><pre><code>Checks if a Pod specifies a specific Node by it hostname.</code></pre></li><li><p>PodFitsResources</p><pre><code>Checks if the Node has free resources (eg, CPU and Memory) to meet the requirement of the Pod.</code></pre></li></ul><h4 id="1-8-3-2-优选策略"><a href="#1-8-3-2-优选策略" class="headerlink" title="1.8.3.2 优选策略"></a>1.8.3.2 优选策略</h4><blockquote><p><a href="https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/#scoring" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/#scoring</a></p></blockquote><ul><li>SelectorSpreadPriority<pre><code>Spreads Pods across hosts, considering Pods that belonging to the same Service, StatefulSet or ReplicaSet</code></pre></li><li>InterPodAﬃnityPriority<pre><code>Computes a sum by iterating through the elements of weightedPodAffinityTerm and adding “weight” to the sum if the corresponding PodAffinityTerm is satisfied for that node; the node(s) with the highest sum are the most preferred.</code></pre></li></ul><h3 id="1-8-4-实战"><a href="#1-8-4-实战" class="headerlink" title="1.8.4 实战"></a>1.8.4 实战</h3><h4 id="1-8-4-1-Node"><a href="#1-8-4-1-Node" class="headerlink" title="1.8.4.1 Node"></a>1.8.4.1 Node</h4><ol><li><p>正常创建pod</p><p> <code>scheduler-node-origin.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> scheduler<span class="token punctuation">-</span>node<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> scheduler<span class="token punctuation">-</span>node  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> scheduler<span class="token punctuation">-</span>node    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> scheduler<span class="token punctuation">-</span>node        <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/itcrazy2016/test<span class="token punctuation">-</span>docker<span class="token punctuation">-</span>image<span class="token punctuation">:</span>v1.0        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span></code></pre><pre class=" language-shell"><code class="language-shell">kubectl apply -f scheduler-node-origin.yamlkubectl get pods kubectl describe pod pod-name</code></pre></li><li><p>无法创建pod，主要是体现node的调度</p><p><code>scheduler-node.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> scheduler<span class="token punctuation">-</span>node<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token key atrule">selector</span><span class="token punctuation">:</span>   <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>     <span class="token key atrule">app</span><span class="token punctuation">:</span> scheduler<span class="token punctuation">-</span>node <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token key atrule">template</span><span class="token punctuation">:</span>   <span class="token key atrule">metadata</span><span class="token punctuation">:</span>     <span class="token key atrule">labels</span><span class="token punctuation">:</span>       <span class="token key atrule">app</span><span class="token punctuation">:</span> scheduler<span class="token punctuation">-</span>node   <span class="token key atrule">spec</span><span class="token punctuation">:</span>     <span class="token key atrule">containers</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> scheduler<span class="token punctuation">-</span>node       <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/itcrazy2016/test<span class="token punctuation">-</span>docker<span class="token punctuation">-</span>image<span class="token punctuation">:</span>v1.0       <span class="token key atrule">ports</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>     <span class="token key atrule">affinity</span><span class="token punctuation">:</span>       <span class="token key atrule">nodeAffinity</span><span class="token punctuation">:</span>         <span class="token key atrule">requiredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>           <span class="token key atrule">nodeSelectorTerms</span><span class="token punctuation">:</span>           <span class="token punctuation">-</span> <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> beta.kubernetes.io/arch               <span class="token key atrule">operator</span><span class="token punctuation">:</span> In               <span class="token key atrule">values</span><span class="token punctuation">:</span>               <span class="token punctuation">-</span> amd641 <span class="token comment" spellcheck="true"># 匹配 beta.kubernetes.io/arch=amd64 的node</span>         <span class="token key atrule">preferredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">1</span>           <span class="token key atrule">preference</span><span class="token punctuation">:</span>             <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>             <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> disktype               <span class="token key atrule">operator</span><span class="token punctuation">:</span> NotIn               <span class="token key atrule">values</span><span class="token punctuation">:</span>               <span class="token punctuation">-</span> ssd</code></pre><pre class=" language-shell"><code class="language-shell">kubectl get nodes w1 -o yaml找到labels</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210905.png" alt="image-20191207182546525"></p><pre class=" language-shell"><code class="language-shell">[root@master-kubeadm-k8s ~]# kubectl apply -f schdeuler-node.yaml[root@master-kubeadm-k8s ~]# kubectl get podsNAME                              READY   STATUS    RESTARTS   AGEscheduler-node-84845c99d4-fvw9d   0/1     Pending   0          7s</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210908.png" alt="image-20191207182710009"></p><p>```shell<br>kubectl describe pod scheduler-node-84845c99d4-fvw9d<br>Events:<br>Type     Reason            Age                From               Message</p></li></ol><hr><p>  Warning  FailedScheduling  37s (x2 over 37s)  default-scheduler  0/3 nodes are available: 3 node(s) didn’t match node selector.</p><pre><code>![image-20191207182832997](https://gitee.com/soulballad/PicGo/raw/master/img//20210309210911.png)#### 1.8.4.2 Pod ```yamlaffinity: &nbsp; &nbsp;  podAffinity: &nbsp; &nbsp; &nbsp;  requiredDuringSchedulingIgnoredDuringExecution: &nbsp; &nbsp; &nbsp;  - labelSelector: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  matchExpressions: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  - key: app &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  operator: In &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  values: &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  - k8s &nbsp; &nbsp; &nbsp; &nbsp;  topologyKey: kubernetes.io/hostname</code></pre><h2 id="1-9-kubelet"><a href="#1-9-kubelet" class="headerlink" title="1.9 kubelet"></a>1.9 kubelet</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/</a></p></blockquote><p>在k8s集群中，每个Node上都会启动一个kubelet服务进程，用于处理master节点下发到本节点的任务。</p><p>管理Pod及Pod中的容器，每个kubelet进程会在API Server上注册节点自身信息，定期向Master节点汇报节点资源的使用情况，并通过cAdvisor监控容器和节点资源。</p><h2 id="1-10-kube-proxy"><a href="#1-10-kube-proxy" class="headerlink" title="1.10 kube-proxy"></a>1.10 kube-proxy</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/command-line-tools-reference/kube-proxy/</a></p></blockquote><p>在k8s集群中，每个Node上都会运行一个kube-proxy进行，它是Service的透明代理兼负载均衡器，核心功能是将某个Service的访问请求转发到后端的多个Pod实例上。</p>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.K8s进阶学习</title>
      <link href="posts/157c0b65.html"/>
      <url>posts/157c0b65.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Pod进阶学习之路"><a href="#1-Pod进阶学习之路" class="headerlink" title="1 Pod进阶学习之路"></a>1 Pod进阶学习之路</h1><h2 id="1-1-Lifecycle"><a href="#1-1-Lifecycle" class="headerlink" title="1.1 Lifecycle"></a>1.1 Lifecycle</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/</a></p></blockquote><ul><li>挂起（Pending）：Pod 已被 Kubernetes 系统接受，但有一个或者多个容器镜像尚未创建。等待时间包括调度 Pod 的时间和通过网络下载镜像的时间，这可能需要花点时间。</li><li>运行中（Running）：该 Pod 已经绑定到了一个节点上，Pod 中所有的容器都已被创建。至少有一个容器正在运行，或者正处于启动或重启状态。</li><li>成功（Succeeded）：Pod 中的所有容器都被成功终止，并且不会再重启。</li><li>失败（Failed）：Pod 中的所有容器都已终止了，并且至少有一个容器是因为失败终止。也就是说，容器以非0状态退出或者被系统终止。</li><li>未知（Unknown）：因为某些原因无法取得 Pod 的状态，通常是因为与 Pod 所在主机通信失败。</li></ul><h2 id="1-2-重启策略"><a href="#1-2-重启策略" class="headerlink" title="1.2 重启策略"></a>1.2 重启策略</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy</a></p><pre><code>A PodSpec has a restartPolicy field with possible values Always, OnFailure, and Never. The default value is Always. restartPolicy applies to all Containers in the Pod. restartPolicy only refers to restarts of the Containers by the kubelet on the same node. Exited Containers that are restarted by the kubelet are restarted with an exponential back-off delay (10s, 20s, 40s …) capped at five minutes, and is reset after ten minutes of successful execution. As discussed in the Pods document, once bound to a node, a Pod will never be rebound to another node.</code></pre></blockquote><ul><li>Always：容器失效时，即重启</li><li>OnFailure：容器终止运行且退出码不为0时重启</li><li>Never:永远不重启</li></ul><h2 id="1-3-静态Pod"><a href="#1-3-静态Pod" class="headerlink" title="1.3 静态Pod"></a>1.3 静态Pod</h2><p>静态Pod是由kubelet进行管理的，并且存在于特定的Node上。<br>不能通过API Server进行管理，无法与ReplicationController,Ddeployment或者DaemonSet进行关联，也无法进行健康检查。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210110.png" alt="image-20191207131808475"></p><p>这些 pod 的配置 yaml 文件目录 <code>/etc/kubernetes/manifests/</code></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210115.png" alt="image-20191207131917206"></p><h2 id="1-4-健康检查"><a href="#1-4-健康检查" class="headerlink" title="1.4 健康检查"></a>1.4 健康检查</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes</a></p><p>The kubelet can optionally perform and react to three kinds of probes on running Containers:</p><ul><li><code>livenessProbe</code>: Indicates whether the Container is running. If the liveness probe fails, the kubelet kills the Container, and the Container is subjected to its <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy" target="_blank" rel="noopener">restart policy</a>. If a Container does not provide a liveness probe, the default state is <code>Success</code>.</li><li><code>readinessProbe</code>: Indicates whether the Container is ready to service requests. If the readiness probe fails, the endpoints controller removes the Pod’s IP address from the endpoints of all Services that match the Pod. The default state of readiness before the initial delay is <code>Failure</code>. If a Container does not provide a readiness probe, the default state is <code>Success</code>.</li><li><code>startupProbe</code>: Indicates whether the application within the Container is started. All other probes are disabled if a startup probe is provided, until it succeeds. If the startup probe fails, the kubelet kills the Container, and the Container is subjected to its <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy" target="_blank" rel="noopener">restart policy</a>. If a Container does not provide a startup probe, the default state is <code>Success</code>.</li></ul></blockquote><p>LivenessProbe探针：判断容器是否存活</p><p>ReadinessProbe探针：判断容器是否启动完成</p><h2 id="1-5-ConfigMap"><a href="#1-5-ConfigMap" class="headerlink" title="1.5 ConfigMap"></a>1.5 ConfigMap</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/</a></p><pre><code>ConfigMaps allow you to decouple configuration artifacts from image content to keep containerized applications portable. </code></pre><p>说白了就是用来保存配置数据的键值对，也可以保存单个属性，也可以保存配置文件。</p><p>所有的配置内容都存储在etcd中，创建的数据可以供Pod使用。</p></blockquote><h3 id="1-5-1-命令行创建"><a href="#1-5-1-命令行创建" class="headerlink" title="1.5.1 命令行创建"></a>1.5.1 命令行创建</h3><pre class=" language-shell"><code class="language-shell"># 创建一个名称为my-config的ConfigMap，key值时db.port，value值是'3306'kubectl create configmap my-config --from-literal=db.port='3306'kubectl get configmap</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210314.png" alt="image-20191207132747972"></p><p>查看 configmap 对应的 yaml 文件内容</p><pre class=" language-shell"><code class="language-shell">kubectl get configmap myconfig -o yaml</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210122.png" alt="image-20191207132856728"></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">db.port</span><span class="token punctuation">:</span> <span class="token string">"3306"</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token string">"2019-12-07T05:26:47Z"</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>config  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default  <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">"192663"</span>  <span class="token key atrule">selfLink</span><span class="token punctuation">:</span> /api/v1/namespaces/default/configmaps/my<span class="token punctuation">-</span>config  <span class="token key atrule">uid</span><span class="token punctuation">:</span> 29a7c4f9<span class="token punctuation">-</span>18b2<span class="token punctuation">-</span>11ea<span class="token punctuation">-</span>a09d<span class="token punctuation">-</span>000c2941374e</code></pre><h3 id="1-5-2-从配置文件中创建"><a href="#1-5-2-从配置文件中创建" class="headerlink" title="1.5.2 从配置文件中创建"></a>1.5.2 从配置文件中创建</h3><p>创建一个文件，名称为app.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">jack</span><span class="token attr-name">age</span><span class="token punctuation">=</span><span class="token attr-value">17</span></code></pre><pre class=" language-shell"><code class="language-shell">kubectl create configmap app --from-file=./app.propertieskubectl get configmapkubectl get configmap app -o yaml</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210126.png" alt="image-20191207133132149"></p><h3 id="1-5-3-从目录中创建"><a href="#1-5-3-从目录中创建" class="headerlink" title="1.5.3 从目录中创建"></a>1.5.3 从目录中创建</h3><pre class=" language-shell"><code class="language-shell">mkdir configcd configmkdir amkdir bcd ..</code></pre><pre class=" language-shell"><code class="language-shell">kubectl create configmap config --from-file=config/kubectl get configmap</code></pre><h3 id="1-5-4-通过yaml文件创建"><a href="#1-5-4-通过yaml文件创建" class="headerlink" title="1.5.4 通过yaml文件创建"></a>1.5.4 通过yaml文件创建</h3><p>configmaps.yaml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> special<span class="token punctuation">-</span>config  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">special.how</span><span class="token punctuation">:</span> very<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> env<span class="token punctuation">-</span>config  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">log_level</span><span class="token punctuation">:</span> INFO</code></pre><pre class=" language-shell"><code class="language-shell">kubectl apply -f configmaps.yamlkubectl get configmap</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210130.png" alt="image-20191207133337699"></p><h3 id="1-5-5-ConfigMap的使用"><a href="#1-5-5-ConfigMap的使用" class="headerlink" title="1.5.5 ConfigMap的使用"></a>1.5.5 ConfigMap的使用</h3><ul><li><p>使用方式</p><pre><code>(1)通过环境变量的方式，直接传递给pod    使用configmap中指定的key    使用configmap中所有的key(2)通过在pod的命令行下运行的方式(启动命令中)(3)作为volume的方式挂载到pod内</code></pre></li><li><p>注意</p><pre><code>(1)ConfigMap必须在Pod使用它之前创建(2)使用envFrom时，将会自动忽略无效的键(3)Pod只能使用同一个命名空间的ConfigMap</code></pre></li></ul><h4 id="1-5-5-1-通过环境变量"><a href="#1-5-5-1-通过环境变量" class="headerlink" title="1.5.5.1 通过环境变量"></a>1.5.5.1 通过环境变量</h4><blockquote><p>使用valueFrom、configMapKeyRef、name</p><p>key的话指定要用到的key</p><p>test-pod.yaml </p><p>kubectl logs pod-name</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> dapi<span class="token punctuation">-</span>test<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>container      <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox      <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"env"</span> <span class="token punctuation">]</span>      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Define the environment variable</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> SPECIAL_LEVEL_KEY          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">configMapKeyRef</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true"># The ConfigMap containing the value you want to assign to SPECIAL_LEVEL_KEY</span>              <span class="token key atrule">name</span><span class="token punctuation">:</span> special<span class="token punctuation">-</span>config              <span class="token comment" spellcheck="true"># Specify the key associated with the value</span>              <span class="token key atrule">key</span><span class="token punctuation">:</span> special.how  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never</code></pre><h4 id="1-5-5-2-通过命令行"><a href="#1-5-5-2-通过命令行" class="headerlink" title="1.5.5.2 通过命令行"></a>1.5.5.2 通过命令行</h4><blockquote><p>在命令行下引用时，需要先设置为环境变量，之后可以用过$(VAR_NAME)设置容器启动命令的启动参数</p><p>test-pod2.yaml</p><p>kubectl logs pod-name</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> dapi<span class="token punctuation">-</span>test<span class="token punctuation">-</span>pod2<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>container      <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox      <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"echo $(SPECIAL_LEVEL_KEY)"</span> <span class="token punctuation">]</span>      <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> SPECIAL_LEVEL_KEY          <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>            <span class="token key atrule">configMapKeyRef</span><span class="token punctuation">:</span>              <span class="token key atrule">name</span><span class="token punctuation">:</span> special<span class="token punctuation">-</span>config              <span class="token key atrule">key</span><span class="token punctuation">:</span> special.how  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never</code></pre><h4 id="1-5-5-3-通过volume挂载"><a href="#1-5-5-3-通过volume挂载" class="headerlink" title="1.5.5.3 通过volume挂载"></a>1.5.5.3 通过volume挂载</h4><blockquote><p>将创建的ConfigMap直接挂载至Pod的/etc/config目录下，其中每一个key-value键值对都会生成一个文件，key为文件名，value为内容。</p><p>kubectl apply -f pod-myconfigmap-v2.yml</p><p>kubectl exec -it pod-name bash</p><p>kubectl logs pod-name</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> pod<span class="token punctuation">-</span>configmap2<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>container      <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox      <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"ls /etc/config/"</span> <span class="token punctuation">]</span>      <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>volume        <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/config  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>volume      <span class="token key atrule">configMap</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> special<span class="token punctuation">-</span>config  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never</code></pre><h3 id="1-5-6-ConfigMap在Ingress-Controller中实战"><a href="#1-5-6-ConfigMap在Ingress-Controller中实战" class="headerlink" title="1.5.6 ConfigMap在Ingress Controller中实战"></a>1.5.6 ConfigMap在Ingress Controller中实战</h3><blockquote><p>在之前ingress网络中的mandatory.yaml文件中使用了ConfigMap，于是我们可以打开</p><p>可以发现有nginx-configuration、tcp-services等名称的cm</p><p>而且也可以发现最后在容器的参数中使用了这些cm</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller <span class="token key atrule">image</span><span class="token punctuation">:</span> quay.io/kubernetes<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller/nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller<span class="token punctuation">:</span>0.26.1 <span class="token key atrule">args</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> /nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>configmap=$(POD_NAMESPACE)/nginx<span class="token punctuation">-</span>configuration            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>tcp<span class="token punctuation">-</span>services<span class="token punctuation">-</span>configmap=$(POD_NAMESPACE)/tcp<span class="token punctuation">-</span>services            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>udp<span class="token punctuation">-</span>services<span class="token punctuation">-</span>configmap=$(POD_NAMESPACE)/udp<span class="token punctuation">-</span>services            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>publish<span class="token punctuation">-</span>service=$(POD_NAMESPACE)/ingress<span class="token punctuation">-</span>nginx            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>annotations<span class="token punctuation">-</span>prefix=nginx.ingress.kubernetes.io</code></pre></blockquote><p><strong>开启证明之旅和cm的使用方式</strong></p><ol><li><p>查看nginx ingress controller的pod部署</p><pre class=" language-shell"><code class="language-shell">kubectl get pods -n ingress-nginx -o wide</code></pre><pre><code>NAME                                        READY   STATUS    RESTARTS   AGE     IP              NODE            NOMINATED NODE   READINESS GATESnginx-ingress-controller-7c66dcdd6c-zs4dx   1/1     Running   1          4d16h   172.16.11.129   chris-king-03   &lt;none&gt;           &lt;none&gt;</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210147.png" alt="image-20191207135236238"></p></li><li><p>发现运行在w1节点上，说明w1上一定有对应的container，来到w1节点</p><pre class=" language-shell"><code class="language-shell">docker ps | grep ingress</code></pre><pre><code>cf188a1a5ef1        29024c9c6e70                           "/usr/bin/dumb-init …"   17 hours ago        Up 17 hours                             k8s_nginx-ingress-controller_nginx-ingress-controller-7c66dcdd6c-zs4dx_ingress-nginx_a5db8124-1502-11ea-a09d-000c2941374e_1de168fbee943        k8s.gcr.io/pause:3.1                   "/pause"                 4 days ago          Up 4 days                               k8s_POD_nginx-ingress-controller-7c66dcdd6c-zs4dx_ingress-nginx_a5db8124-1502-11ea-a09d-000c2941374e_0</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210151.png" alt="image-20191207135530750"></p></li><li><p>不妨进入容器看看？</p><pre class=" language-shell"><code class="language-shell">docker exec -it cf188a1a5ef1 bash</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210155.png" alt="image-20191207135630077"></p></li><li><p>可以发现，就是一个nginx嘛，而且里面还有 nginx.conf 文件，美滋滋</p><pre class=" language-shell"><code class="language-shell">ls /etc/nginx</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210158.png" alt="image-20191207135714838"></p></li><li><p>不妨打开nginx.conf文件看看</p><blockquote><p>假如已经配置过ingress，不妨尝试搜索一下 “springboot.jack.com”</p></blockquote><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">server</span> <span class="token attr-value">{</span><span class="token attr-name">    server_name</span> <span class="token attr-value">springboot.jack.com ;</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210200.png" alt="image-20191207140051707"></p></li><li><p>到这里，大家应该有点感觉了，原来nginx ingress controller就是一个nginx，而所谓的ingress.yaml文件中配置的内容像 springboot.jack.com 就会对应到nginx.conf中。</p></li><li><p>但是，不可能每次都进入到容器里面来修改，而且还需要手动重启nginx，很麻烦</p><blockquote><p>一定会有好事之者来做这件事情，比如在K8s中有对应的方式，修改了什么就能修改nginx.conf文件</p></blockquote></li><li><p>先查看一下nginx.conf文件中的内容，比如找个属性：proxy_read_timeout 60s</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210203.png" alt="image-20191207140908182"></p><p>我们想要将这个属性在K8s中修改成 208s，可以吗？</p><p><code>nginx-config.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>configuration  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">proxy-read-timeout</span><span class="token punctuation">:</span> <span class="token string">"208"</span></code></pre><p>使用 kubelet 执行 yaml 文件</p><pre class=" language-shell"><code class="language-shell">kubectl apply -f nginx-config.yamlkubectl get cm -n ingress-nginx</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210206.png" alt="image-20191207141402129"></p></li><li><p>再次查看nginx.conf文件</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210208.png" alt="image-20191207141531931"></p></li><li><p>其实定义规则都在nginx ingress controller的官网中</p><blockquote><p><a href="https://kubernetes.github.io/ingress-nginx/" target="_blank" rel="noopener">https://kubernetes.github.io/ingress-nginx/</a></p><p><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/" target="_blank" rel="noopener">https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/</a></p></blockquote></li></ol><h2 id="1-6-Secret"><a href="#1-6-Secret" class="headerlink" title="1.6 Secret"></a>1.6 Secret</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/configuration/secret/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/configuration/secret/</a></p><pre><code>Kubernetes secret objects let you store and manage sensitive information, such as passwords, OAuth tokens, and ssh keys.</code></pre></blockquote><h3 id="1-6-1-Secret类型"><a href="#1-6-1-Secret类型" class="headerlink" title="1.6.1 Secret类型"></a>1.6.1 Secret类型</h3><ul><li>Opaque：使用base64编码存储信息，可以通过<code>base64 --decode</code>解码获得原始数据，因此安全性弱。</li><li>kubernetes.io/dockerconfigjson：用于存储docker registry的认证信息。</li><li>kubernetes.io/service-account-token：用于被 serviceaccount 引用。serviceaccout 创建时 Kubernetes 会默认创建对应的 secret。Pod 如果使用了 serviceaccount，对应的 secret 会自动挂载到 Pod 的 /run/secrets/kubernetes.io/serviceaccount 目录中。</li></ul><h3 id="1-6-2-Opaque-Secret"><a href="#1-6-2-Opaque-Secret" class="headerlink" title="1.6.2 Opaque Secret"></a>1.6.2 Opaque Secret</h3><blockquote><p>Opaque类型的Secret的value为base64位编码后的值</p></blockquote><h4 id="1-6-2-1-从文件中创建"><a href="#1-6-2-1-从文件中创建" class="headerlink" title="1.6.2.1 从文件中创建"></a>1.6.2.1 从文件中创建</h4><pre><code>echo -n "admin" &gt; ./username.txtecho -n "1f2d1e2e67df" &gt; ./password.txt</code></pre><pre class=" language-shell"><code class="language-shell">kubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt</code></pre><pre class=" language-shell"><code class="language-shell">kubectl get secret</code></pre><h4 id="1-6-2-2-使用yaml文件创建"><a href="#1-6-2-2-使用yaml文件创建" class="headerlink" title="1.6.2.2 使用yaml文件创建"></a>1.6.2.2 使用yaml文件创建</h4><ol><li><p>对数据进行64位编码</p><pre class=" language-shell"><code class="language-shell">echo -n 'admin' | base64echo -n '1f2d1e2e67df' | base64</code></pre></li><li><p>定义mysecret.yaml文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysecret<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">username</span><span class="token punctuation">:</span> YWRtaW4=  <span class="token key atrule">password</span><span class="token punctuation">:</span> MWYyZDFlMmU2N2Rm</code></pre></li><li><p>根据yaml文件创建资源并查看</p><pre class=" language-shell"><code class="language-shell">kubectl create -f ./secret.yamlkubectl get secretkubectl get secret mysecret -o yaml</code></pre></li></ol><h3 id="1-6-3-Secret使用"><a href="#1-6-3-Secret使用" class="headerlink" title="1.6.3 Secret使用"></a>1.6.3 Secret使用</h3><ul><li>以Volume方式</li><li>以环境变量方式</li></ul><h4 id="1-6-3-1-将Secret挂载到Volume中"><a href="#1-6-3-1-将Secret挂载到Volume中" class="headerlink" title="1.6.3.1 将Secret挂载到Volume中"></a>1.6.3.1 将Secret挂载到Volume中</h4><blockquote><p>kubectl apply -f mypod.yaml</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mypod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mypod    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> foo      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"/etc/foo"</span>      <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> foo    <span class="token key atrule">secret</span><span class="token punctuation">:</span>      <span class="token key atrule">secretName</span><span class="token punctuation">:</span> mysecret</code></pre><pre class=" language-shell"><code class="language-shell">kubectl exec -it pod-name bashls /etc/foocat /etc/foo/usernamecat /etc/foo/password</code></pre><h4 id="1-6-3-2-将Secret设置为环境变量"><a href="#1-6-3-2-将Secret设置为环境变量" class="headerlink" title="1.6.3.2 将Secret设置为环境变量"></a>1.6.3.2 将Secret设置为环境变量</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> secret<span class="token punctuation">-</span>env<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mycontainer    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> SECRET_USERNAME        <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>          <span class="token key atrule">secretKeyRef</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> mysecret            <span class="token key atrule">key</span><span class="token punctuation">:</span> username      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> SECRET_PASSWORD        <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>          <span class="token key atrule">secretKeyRef</span><span class="token punctuation">:</span>            <span class="token key atrule">name</span><span class="token punctuation">:</span> mysecret            <span class="token key atrule">key</span><span class="token punctuation">:</span> password  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never</code></pre><h3 id="1-6-4-kubernetes-io-dockerconfigjson"><a href="#1-6-4-kubernetes-io-dockerconfigjson" class="headerlink" title="1.6.4 kubernetes.io/dockerconfigjson"></a>1.6.4 kubernetes.io/dockerconfigjson</h3><blockquote><p>kubernetes.io/dockerconfigjson用于存储docker registry的认证信息，可以直接使用<code>kubectl create secret</code>命令创建</p></blockquote><h3 id="1-6-5-kubernetes-io-service-account-token"><a href="#1-6-5-kubernetes-io-service-account-token" class="headerlink" title="1.6.5 kubernetes.io/service-account-token"></a>1.6.5 kubernetes.io/service-account-token</h3><blockquote><p>用于被 serviceaccount 引用。</p><p>serviceaccout 创建时 Kubernetes 会默认创建对应的 secret。Pod 如果使用了 serviceaccount，对应的 secret 会自动挂载到 Pod 的 /run/secrets/kubernetes.io/serviceaccount 目录中。</p></blockquote><pre class=" language-shell"><code class="language-shell">kubectl get secret   # 可以看到service-account-tokenkubectl run nginx --image nginxkubectl get podskubectl exec -it nginx-pod-name bashls /run/secrets/kubernetes.io/serviceaccount</code></pre><pre class=" language-shell"><code class="language-shell">kubectl get secretkubectl get pods pod-name -o yaml   #  找到volumes选项，定位到-name，secretName#  找到volumeMounts选项，定位到mountPath: /var/run/secrets/kubernetes.io/serviceaccount</code></pre><p><strong>小结</strong>：无论是ConfigMap，Secret，还是DownwardAPI，都是通过ProjectedVolume实现的，可以通过APIServer将信息放到Pod中进行使用。</p><h2 id="1-7-指定Pod所运行的Node"><a href="#1-7-指定Pod所运行的Node" class="headerlink" title="1.7 指定Pod所运行的Node"></a>1.7 指定Pod所运行的Node</h2><ol><li><p>给node打上label</p><pre class=" language-shell"><code class="language-shell">kubectl get nodeskubectl label nodes worker02-kubeadm-k8s name=jack</code></pre></li><li><p>查看node是否有上述label</p><pre class=" language-shell"><code class="language-shell">kubectl describe node worker02-kubeadm-k8s</code></pre></li><li><p>部署一个mysql的pod</p><blockquote><p>vi mysql-pod.yaml</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ReplicationController<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>rc  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>rc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>pod  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>pod    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>         <span class="token key atrule">name</span><span class="token punctuation">:</span> jack      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql        <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">3306</span>        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_ROOT_PASSWORD          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"mysql"</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>svc  <span class="token key atrule">labels</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>svc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">3306</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> http    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">32306</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>pod</code></pre></li><li><p>查看pod运行详情</p><pre class=" language-shell"><code class="language-shell">kubectl apply -f mysql-pod.yamlkubectl get pods -o wide</code></pre></li></ol><h1 id="2-Controller进阶学习之路"><a href="#2-Controller进阶学习之路" class="headerlink" title="2 Controller进阶学习之路"></a>2 Controller进阶学习之路</h1><blockquote><p>既然学习了Pod进阶，对于管理Pod的Controller肯定也要进阶一下，之前我们已经学习过的Controller有RC、RS和Deployment，除此之外还有吗？</p><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/architecture/controller/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/architecture/controller/</a></p></blockquote><h2 id="2-1-Job-amp-CronJob"><a href="#2-1-Job-amp-CronJob" class="headerlink" title="2.1 Job &amp; CronJob"></a>2.1 Job &amp; CronJob</h2><h3 id="2-1-1-Job"><a href="#2-1-1-Job" class="headerlink" title="2.1.1 Job"></a>2.1.1 Job</h3><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/</a></p><pre><code>A Job creates one or more Pods and ensures that a specified number of them successfully terminate. As pods successfully complete, the Job tracks the successful completions. When a specified number of successful completions is reached, the task (ie, Job) is complete. Deleting a Job will clean up the Pods it created.</code></pre><p>对于RS，RC之类的控制器，能够保持Pod按照预期数目持久地运行下去，它们针对的是持久性的任务，比如web服务。</p><p>而有些操作其实不需要持久，比如压缩文件，我们希望任务完成之后，Pod就结束运行，不需要保持在系统中，此时就需要用到Job。</p><p>所以可以这样理解，Job是对RS、RC等持久性控制器的补充。</p><p>负责批量处理短暂的一次性任务，仅执行一次，并保证处理的一个或者多个Pod成功结束。</p></blockquote><p><strong>Have a try</strong></p><p>Here is an example Job config. It computes π to 2000 places and prints it out. It takes around 10s to complete.</p><p><code>pod.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> batch/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Job<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> job<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> job<span class="token punctuation">-</span>demo    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> counter        <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox        <span class="token key atrule">command</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">"bin/sh"</span>        <span class="token punctuation">-</span> <span class="token string">"-c"</span>        <span class="token punctuation">-</span> <span class="token string">"for i in 9 8 7 6 5 4 3 2 1; do echo $i; done"</span></code></pre><blockquote><pre class=" language-shell"><code class="language-shell">kubectl apply -f job.yamlkubectl describe jobs/pikubectl logs pod-name</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210217.png" alt="image-20191207143736720"></p></blockquote><ul><li>非并行Job:<ul><li>通常只运行一个Pod，Pod成功结束Job就退出。</li></ul></li><li>固定完成次数的并行Job:<ul><li>并发运行指定数量的Pod，直到指定数量的Pod成功，Job结束。</li></ul></li><li>带有工作队列的并行Job:<ul><li>用户可以指定并行的Pod数量，当任何Pod成功结束后，不会再创建新的Pod</li><li>一旦有一个Pod成功结束，并且所有的Pods都结束了，该Job就成功结束。</li><li>一旦有一个Pod成功结束，其他Pods都会准备退出。</li></ul></li></ul><h3 id="2-1-2-CronJob"><a href="#2-1-2-CronJob" class="headerlink" title="2.1.2 CronJob"></a>2.1.2 CronJob</h3><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/</a></p><pre><code>A Cron Job creates Jobs on a time-based schedule.One CronJob object is like one line of a crontab (cron table) file. It runs a job periodically on a given schedule, written in Cron format.</code></pre><p>cronJob是基于时间进行任务的定时管理。</p></blockquote><ul><li>在特定的时间点运行任务</li><li>反复在指定的时间点运行任务：比如定时进行数据库备份，定时发送电子邮件等等。</li></ul><h2 id="2-2-StatefulSet"><a href="#2-2-StatefulSet" class="headerlink" title="2.2 StatefulSet"></a>2.2 StatefulSet</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/</a></p><pre><code>StatefulSet is the workload API object used to manage stateful applications.Manages the deployment and scaling of a set of Pods, and provides guarantees about the ordering and uniqueness of these Pods.</code></pre><ul><li>Stable, unique network identifiers.</li><li>Stable, persistent storage.</li><li>Ordered, graceful deployment and scaling.</li><li>Ordered, automated rolling updates.</li></ul><hr><p>之前接触的Pod的管理对象比如RC、Deployment、DaemonSet和Job都是面向无状态的服务，但是现实中有很多服务是有状态的，比如MySQL集群、MongoDB集群、ZK集群等，它们都有以下共同的特点：</p><ul><li>每个节点都有固定的ID，通过该ID，集群中的成员可以互相发现并且通信</li><li>集群的规模是比较固定的，集群规模不能随意变动</li><li>集群里的每个节点都是有状态的，通常会持久化数据到永久存储中</li><li>如果磁盘损坏，则集群里的某个节点无法正常运行，集群功能受损</li></ul><p>而之前的RC/Deployment没办法满足要求，所以从Kubernetes v1.4版本就引入了PetSet资源对象，在v1.5版本时更名为StatefulSet。从本质上说，StatefulSet可以看作是Deployment/RC对象的特殊变种</p><ul><li>StatefulSet里的每个Pod都有稳定、唯一的网络标识，可以用来发现集群内其他的成员</li><li>Pod的启动顺序是受控的，操作第n个Pod时，前n-1个Pod已经是运行且准备好的状态</li><li>StatefulSet里的Pod采用稳定的持久化存储卷，通过PV/PVC来实现，删除Pod时默认不会删除与StatefulSet相关的存储卷</li><li>StatefulSet需要与Headless Service配合使用</li></ul></blockquote><p><strong>Have a try</strong></p><p><code>nginx-st.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 定义Service</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> web  <span class="token key atrule">clusterIP</span><span class="token punctuation">:</span> None  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token punctuation">---</span><span class="token comment" spellcheck="true"># 定义StatefulSet</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StatefulSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> web<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx   <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> <span class="token string">"nginx"</span>    <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3 </span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx     <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> web</code></pre><pre class=" language-shell"><code class="language-shell">kubectl get statefulset  # 查看statefulsetkubectl apply nginx-st.yamlkubectl get statefulset</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210227.png" alt="image-20191207144451766"></p><pre class=" language-shell"><code class="language-shell">watch kubectl get pods    # 观察pod的创建顺序，以及pod的名字kubectl get pods -w | grep web</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210317.png" alt="image-20191207144729480"></p><h2 id="2-3-DaemonSet"><a href="#2-3-DaemonSet" class="headerlink" title="2.3 DaemonSet"></a>2.3 DaemonSet</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/</a></p><pre><code>A DaemonSet ensures that all (or some) Nodes run a copy of a Pod. As nodes are added to the cluster, Pods are added to them. As nodes are removed from the cluster, those Pods are garbage collected. Deleting a DaemonSet will clean up the Pods it created.</code></pre><p><strong>DaemonSet应用场景</strong></p><ul><li>运行集群存储 daemon，例如在每个节点上运行 <code>glusterd</code>、<code>ceph</code>。</li><li>在每个节点上运行日志收集 daemon，例如<code>fluentd</code>、<code>logstash</code>。</li><li>在每个节点上运行监控 daemon，例如 <a href="https://github.com/prometheus/node_exporter" target="_blank" rel="noopener">Prometheus Node Exporter</a>、<code>collectd</code>、Datadog 代理、New Relic 代理，或 Ganglia <code>gmond</code>。</li></ul></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210231.png" alt="image-20191207145459574"></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210233.png" alt="image-20191207145910621"></p><h2 id="2-4-Horizontal-Pod-Autoscaler"><a href="#2-4-Horizontal-Pod-Autoscaler" class="headerlink" title="2.4 Horizontal Pod Autoscaler"></a>2.4 Horizontal Pod Autoscaler</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/</a></p><pre><code>The Horizontal Pod Autoscaler automatically scales the number of pods in a replication controller, deployment or replica set based on observed CPU utilization (or, with custom metrics support, on some other application-provided metrics). Note that Horizontal Pod Autoscaling does not apply to objects that can’t be scaled, for example, DaemonSets.</code></pre><p>使用Horizontal Pod Autoscaling，Kubernetes会自动地根据观察到的CPU利用率(或者通过一些其他应用程序提供的自定义的指标)自动地缩放在replication controller、deployment或replica set上pod的数量。</p></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210236.png" alt="image-20191207150137589"></p><ol start="0"><li>前期准备</li></ol><p><code>nginx-deployment.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><pre class=" language-shell"><code class="language-shell">kubectl apply -f nginx-deployment.yamlkubectl get hpakubectl get pods | grep nginx</code></pre><p>   <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210240.png" alt="image-20191207151557530"></p><p>   通过动态修改 yaml 进行扩容</p><pre class=" language-shell"><code class="language-shell">kubectl edit deployment nginx-deployment # 修改 replicas: 3 -> replicas: 5</code></pre><p>   <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210242.png" alt="image-20191207152004128"></p><p>   使用  <code>kubectl get pods | grep nginx</code> 查看，发现已经扩容为5个pod</p><p>   <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210246.png" alt="image-20191207152105160"></p><ol><li><p>创建hpa</p><pre class=" language-shell"><code class="language-shell"># 使nginx pod的数量介于2和10之间，CPU使用率维持在50％kubectl autoscale deployment nginx-deployment --min=2 --max=10 --cpu-percent=50</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210250.png" alt="image-20191207152204604"></p></li><li><p>查看所有创建的资源</p><pre class=" language-shell"><code class="language-shell">kubectl get podskubectl get deploykubectl get hpa</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210252.png" alt="image-20191207152312826"></p></li><li><p>修改replicas值为1或者11</p><blockquote><p>可以发现最终最小还是2，最大还是10。</p></blockquote><pre class=" language-shell"><code class="language-shell">kubectl edit deployment nginx-deployment</code></pre></li><li><p>再次理解什么是hpa</p><blockquote><pre><code>Horizontal Pod Autoscaling可以根据CPU使用率或应用自定义metrics自动扩展Pod数量（支持replication controller、deployment和replica set）</code></pre><pre><code>01-控制管理器每隔30s查询metrics的资源使用情况02-通过kubectl创建一个horizontalPodAutoscaler对象，并存储到etcd中03-APIServer:负责接受创建hpa对象，然后存入etcd</code></pre></blockquote></li></ol><h1 id="3-Resource和Dashboard"><a href="#3-Resource和Dashboard" class="headerlink" title="3 Resource和Dashboard"></a>3 Resource和Dashboard</h1><h2 id="3-1-Resource"><a href="#3-1-Resource" class="headerlink" title="3.1 Resource"></a>3.1 Resource</h2><blockquote><p>因为K8S的最小操作单元是Pod，所以这里主要讨论的是Pod的资源</p><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/</a></p><p>在K8S的集群中，Node节点的资源信息会上报给APIServer</p><p><strong>requests&amp;limits</strong></p><p>可以通过这两个属性设置cpu和内存</p><pre><code>When Containers have resource requests specified, the scheduler can make better decisions about which nodes to place Pods on. And when Containers have their limits specified, contention for resources on a node can be handled in a specified manner.</code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> frontend<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> db    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_ROOT_PASSWORD        <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">"password"</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">requests</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 下限，最低要求</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 64Mi <span class="token important">&amp;nbsp</span>; <span class="token important">&amp;nbsp</span>; <span class="token comment" spellcheck="true"># 表示64M需要内存</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 250m <span class="token important">&amp;nbsp</span>; <span class="token important">&amp;nbsp</span>; <span class="token important">&amp;nbsp</span>; <span class="token important">&amp;nbsp</span>;<span class="token comment" spellcheck="true"># 表示需要0.25核的CPU</span>      <span class="token key atrule">limits</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 上限</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 128Mi <span class="token important">&amp;nbsp</span>; <span class="token important">&amp;nbsp</span>;        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> wp    <span class="token key atrule">image</span><span class="token punctuation">:</span> wordpress    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">requests</span><span class="token punctuation">:</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 64Mi        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 250m      <span class="token key atrule">limits</span><span class="token punctuation">:</span>        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 128Mi        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m</code></pre></blockquote><h2 id="3-2-Dashboard"><a href="#3-2-Dashboard" class="headerlink" title="3.2 Dashboard"></a>3.2 Dashboard</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/</a></p><pre><code>Dashboard is a web-based Kubernetes user interface. You can use Dashboard to deploy containerized applications to a Kubernetes cluster, troubleshoot your containerized application, and manage the cluster resources. You can use Dashboard to get an overview of applications running on your cluster, as well as for creating or modifying individual Kubernetes resources (such as Deployments, Jobs, DaemonSets, etc). For example, you can scale a Deployment, initiate a rolling update, restart a pod or deploy new applications using a deploy wizard.</code></pre></blockquote><ol><li><p>根据yaml文件创建资源</p><p><code>dashboard.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard    <span class="token comment" spellcheck="true"># Allows editing resource and makes sure it is created first.</span>    <span class="token key atrule">addonmanager.kubernetes.io/mode</span><span class="token punctuation">:</span> EnsureExists  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">-</span>settings  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard    <span class="token key atrule">addonmanager.kubernetes.io/mode</span><span class="token punctuation">:</span> Reconcile  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard    <span class="token key atrule">kubernetes.io/cluster-service</span><span class="token punctuation">:</span> <span class="token string">"true"</span>    <span class="token key atrule">addonmanager.kubernetes.io/mode</span><span class="token punctuation">:</span> Reconcile<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard      <span class="token key atrule">annotations</span><span class="token punctuation">:</span>        <span class="token key atrule">scheduler.alpha.kubernetes.io/critical-pod</span><span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token key atrule">seccomp.security.alpha.kubernetes.io/pod</span><span class="token punctuation">:</span> <span class="token string">'docker/default'</span>    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">priorityClassName</span><span class="token punctuation">:</span> system<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>critical      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard        <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/itcrazy2016/kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">-</span>amd64<span class="token punctuation">:</span>v1.8.3        <span class="token key atrule">resources</span><span class="token punctuation">:</span>          <span class="token key atrule">limits</span><span class="token punctuation">:</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 100m            <span class="token key atrule">memory</span><span class="token punctuation">:</span> 300Mi          <span class="token key atrule">requests</span><span class="token punctuation">:</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 50m            <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8443</span>          <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP        <span class="token key atrule">args</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># PLATFORM-SPECIFIC ARGS HERE</span>          <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>auto<span class="token punctuation">-</span>generate<span class="token punctuation">-</span>certificates        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">-</span>certs          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /certs        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tmp<span class="token punctuation">-</span>volume          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /tmp        <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>          <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>            <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTPS            <span class="token key atrule">path</span><span class="token punctuation">:</span> /            <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8443</span>          <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">30</span>          <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">30</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">-</span>certs        <span class="token key atrule">secret</span><span class="token punctuation">:</span>          <span class="token key atrule">secretName</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">-</span>certs      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tmp<span class="token punctuation">-</span>volume        <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard      <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">"CriticalAddonsOnly"</span>        <span class="token key atrule">operator</span><span class="token punctuation">:</span> <span class="token string">"Exists"</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Role<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard    <span class="token key atrule">addonmanager.kubernetes.io/mode</span><span class="token punctuation">:</span> Reconcile  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">-</span>minimal  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Allow Dashboard to get, update and delete Dashboard exclusive secrets.</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"secrets"</span><span class="token punctuation">]</span>  <span class="token key atrule">resourceNames</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"kubernetes-dashboard-key-holder"</span><span class="token punctuation">,</span> <span class="token string">"kubernetes-dashboard-certs"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">,</span> <span class="token string">"delete"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"configmaps"</span><span class="token punctuation">]</span>  <span class="token key atrule">resourceNames</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"kubernetes-dashboard-settings"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># Allow Dashboard to get metrics from heapster.</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"services"</span><span class="token punctuation">]</span>  <span class="token key atrule">resourceNames</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"heapster"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"proxy"</span><span class="token punctuation">]</span><span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"services/proxy"</span><span class="token punctuation">]</span>  <span class="token key atrule">resourceNames</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"heapster"</span><span class="token punctuation">,</span> <span class="token string">"http:heapster:"</span><span class="token punctuation">,</span> <span class="token string">"https:heapster:"</span><span class="token punctuation">]</span>  <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">]</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">-</span>minimal  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard    <span class="token key atrule">addonmanager.kubernetes.io/mode</span><span class="token punctuation">:</span> Reconcile<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">-</span>minimal<span class="token key atrule">subjects</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard    <span class="token comment" spellcheck="true"># Allows editing resource and makes sure it is created first.</span>    <span class="token key atrule">addonmanager.kubernetes.io/mode</span><span class="token punctuation">:</span> EnsureExists  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">-</span>certs  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Secret<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard    <span class="token comment" spellcheck="true"># Allows editing resource and makes sure it is created first.</span>    <span class="token key atrule">addonmanager.kubernetes.io/mode</span><span class="token punctuation">:</span> EnsureExists  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard<span class="token punctuation">-</span>key<span class="token punctuation">-</span>holder  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system<span class="token key atrule">type</span><span class="token punctuation">:</span> Opaque<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard    <span class="token key atrule">kubernetes.io/cluster-service</span><span class="token punctuation">:</span> <span class="token string">"true"</span>    <span class="token key atrule">addonmanager.kubernetes.io/mode</span><span class="token punctuation">:</span> Reconcile<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">k8s-app</span><span class="token punctuation">:</span> kubernetes<span class="token punctuation">-</span>dashboard  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">443</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8443</span>    <span class="token key atrule">nodePort</span><span class="token punctuation">:</span> <span class="token number">30018</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort</code></pre><pre class=" language-shell"><code class="language-shell">kubectl apply -f dashboard.yaml</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210300.png" alt="image-20191207154111617"></p></li><li><p>查看资源</p><p>生成的资源在 <code>kube-system</code> 命名空间下</p><pre class=" language-shell"><code class="language-shell">kubectl get pods -n kube-systemkubectl get pods -n kube-system -o widekubectl get svc -n kube-systemkubectl get deploy kubernetes-dashboard -n kube-system</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210303.png" alt="image-20191207154510704"></p></li><li><p>使用火狐浏览器访问</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//172.16.11.130:30018/</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210307.png" alt="image-20191207160743219"></p></li><li><p>生成登录需要的token</p><pre class=" language-shell"><code class="language-shell"># 创建service accountkubectl create sa dashboard-admin -n kube-system# 创建角色绑定关系kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin# 查看dashboard-admin的secret名字ADMIN_SECRET=$(kubectl get secrets -n kube-system | grep dashboard-admin | awk '{print $1}')echo ADMIN_SECRET# 打印secret的tokenkubectl describe secret -n kube-system ${ADMIN_SECRET} | grep -E '^token' | awk '{print $2}'</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.K8s的存储</title>
      <link href="posts/5104e743.html"/>
      <url>posts/5104e743.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Storage"><a href="#1-Storage" class="headerlink" title="1 Storage"></a>1 Storage</h2><h3 id="1-1-Volume"><a href="#1-1-Volume" class="headerlink" title="1.1 Volume"></a>1.1 Volume</h3><blockquote><p><code>Volume</code>：<a href="https://kubernetes.io/docs/concepts/storage/volumes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/volumes/</a></p><pre><code>On-disk files in a Container are ephemeral, which presents some problems for non-trivial applications when running in Containers. First, when a Container crashes, kubelet will restart it, but the files will be lost - the Container starts with a clean state. Second, when running Containers together in a Pod it is often necessary to share files between those Containers. The Kubernetes Volume abstraction solves both of these problems.</code></pre></blockquote><h3 id="1-2-Host类型volume实战"><a href="#1-2-Host类型volume实战" class="headerlink" title="1.2 Host类型volume实战"></a>1.2 Host类型volume实战</h3><p>把 pod 中 volume 挂载到宿主机上</p><blockquote><p><code>背景</code>：定义一个Pod，其中包含两个Container，都使用Pod的Volume</p><p>网盘中：课堂源码/volume-pod.yaml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> volume<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> volume<span class="token punctuation">-</span>pod      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /nginx<span class="token punctuation">-</span>volume    <span class="token comment" spellcheck="true"># container 挂载路径</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'echo The app is running! &amp;&amp; sleep 3600'</span><span class="token punctuation">]</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> volume<span class="token punctuation">-</span>pod      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /busybox<span class="token punctuation">-</span>volume    <span class="token comment" spellcheck="true"># container 挂载路径</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> volume<span class="token punctuation">-</span>pod    <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp/volume<span class="token punctuation">-</span>pod        <span class="token comment" spellcheck="true"># 宿主机路径</span></code></pre></blockquote><ol><li>创建资源<pre class=" language-shell"><code class="language-shell">kubectl apply -f volume-pod.yaml</code></pre></li><li>查看pod的运行情况<pre class=" language-shell"><code class="language-shell">kubectl get pods -o wide</code></pre></li><li>来到运行的worker节点<pre class=" language-shell"><code class="language-shell">docker ps | grep volumels /tmp/volume-poddocker exec -it containerid shls /nginx-volumels /busybox-volume# 折腾一下是否同步</code></pre></li><li>查看pod中的容器里面的hosts文件，是否一样。<blockquote><p>发现是一样的，并且都是由pod管理的</p></blockquote><pre class=" language-shell"><code class="language-shell">docker exec -it containerid cat /etc/hosts</code></pre></li><li>所以一般container中的存储或者网络的内容，不要在container层面修改，而是在pod中修改<blockquote><p>比如下面修改一下网络</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token key atrule">hostNetwork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">hostPID</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">hostAliases</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token key atrule">ip</span><span class="token punctuation">:</span> <span class="token string">"192.168.8.61"</span> <span class="token key atrule">hostnames</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token string">"test.jack.com"</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>container <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx</code></pre></blockquote></li></ol><h3 id="1-3-PersistentVolume"><a href="#1-3-PersistentVolume" class="headerlink" title="1.3 PersistentVolume"></a>1.3 PersistentVolume</h3><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/persistent-volumes/</a></p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>pv<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 5Gi    <span class="token comment" spellcheck="true"># 存储空间大小</span>  <span class="token key atrule">volumeMode</span><span class="token punctuation">:</span> Filesystem  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce     <span class="token comment" spellcheck="true"># 只允许一个Pod进行独占式读写操作</span>  <span class="token key atrule">persistentVolumeReclaimPolicy</span><span class="token punctuation">:</span> Recycle  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> slow  <span class="token key atrule">mountOptions</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> hard    <span class="token punctuation">-</span> nfsvers=4.1  <span class="token key atrule">nfs</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /tmp            <span class="token comment" spellcheck="true"># 远端服务器的目录</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span> 172.17.0.2    <span class="token comment" spellcheck="true"># 远端的服务器</span></code></pre><blockquote><p>说白了，PV是K8s中的资源，volume的plugin实现，生命周期独立于Pod，封装了底层存储卷实现的细节。</p><p><code>注意</code>：PV的维护通常是由运维人员、集群管理员进行维护的。PV 的声明周期独立于 Pod，封装了和 NFS 交互的细节。</p></blockquote><h3 id="1-4-PersistentVolumeClaim"><a href="#1-4-PersistentVolumeClaim" class="headerlink" title="1.4 PersistentVolumeClaim"></a>1.4 PersistentVolumeClaim</h3><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims</a></p><p>有了PV，那Pod如何使用呢？为了方便使用，我们可以设计出一个PVC来绑定PV，然后把PVC交给Pod来使用即可，且听下面的分析。</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> myclaim<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteOnce  <span class="token key atrule">volumeMode</span><span class="token punctuation">:</span> Filesystem  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 8Gi  <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> slow  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">release</span><span class="token punctuation">:</span> <span class="token string">"stable"</span>    <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">key</span><span class="token punctuation">:</span> environment<span class="token punctuation">,</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> In<span class="token punctuation">,</span> <span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><blockquote><p>说白了，PVC会匹配满足要求的PV[<strong>是根据size和访问模式进行匹配的</strong>]，进行一一绑定，然后它们的状态都会变成Bound。</p><p>也就是PVC负责请求PV的大小和访问方式，然后Pod中就可以直接使用PVC咯。</p><p><code>注意</code>：PVC通常由开发小伙伴维护，开发小伙伴无需关注与存储细节。</p></blockquote><h3 id="1-5-Pod中如何使用PVC"><a href="#1-5-Pod中如何使用PVC" class="headerlink" title="1.5 Pod中如何使用PVC"></a>1.5 Pod中如何使用PVC</h3><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#claims-as-volumes" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/persistent-volumes/#claims-as-volumes</a></p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mypod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myfrontend      <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"/var/www/html"</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> mypd  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mypd      <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>        <span class="token key atrule">claimName</span><span class="token punctuation">:</span> myclaim</code></pre><h3 id="1-6-Pod中使用PVC实战"><a href="#1-6-Pod中使用PVC实战" class="headerlink" title="1.6 Pod中使用PVC实战"></a>1.6 Pod中使用PVC实战</h3><blockquote><p><code>背景</code>：使用nginx持久化存储演示</p><pre><code>(1)共享存储使用nfs，比如选择在m节点(2)创建pv和pvc(3)nginx pod中使用pvc</code></pre></blockquote><h4 id="1-6-1-master节点搭建nfs"><a href="#1-6-1-master节点搭建nfs" class="headerlink" title="1.6.1 master节点搭建nfs"></a>1.6.1 master节点搭建nfs</h4><blockquote><p>在master节点上搭建一个NFS服务器，目录为 /nfs/data</p><pre class=" language-shell"><code class="language-shell">nfs(network file system)网络文件系统，是FreeBSD支持的文件系统中的一种，允许网络中的计算机之间通过TCP/IP网络共享资源01 `选择master节点作为nfs的server，所以在master节点上`      # 安装nfs    yum install -y nfs-utils    # 创建nfs目录    mkdir -p /nfs/data/    mkdir -p /nfs/data/mysql    # 授予权限    chmod -R 777 /nfs/data    # 编辑export文件    vi /etc/exports      /nfs/data *(rw,no_root_squash,sync) #（文件内容）    # 使得配置生效    exportfs -r    # 查看生效    exportfs    # 启动rpcbind、nfs服务    systemctl restart rpcbind && systemctl enable rpcbind    systemctl restart nfs && systemctl enable nfs    # 查看rpc服务的注册情况    rpcinfo -p localhost    # showmount测试    showmount -e master-ip02 `所有node上安装客户端`    yum -y install nfs-utils    systemctl start nfs && systemctl enable nfs</code></pre></blockquote><h4 id="1-6-2-创建PV-amp-PVC-amp-Nginx"><a href="#1-6-2-创建PV-amp-PVC-amp-Nginx" class="headerlink" title="1.6.2 创建PV&amp;PVC&amp;Nginx"></a>1.6.2 创建PV&amp;PVC&amp;Nginx</h4><ol><li><p>在nfs服务器创建所需要的目录</p><blockquote><p>mkdir -p /nfs/data/nginx</p></blockquote></li><li><p>定义PV，PVC 和 Nginx 的 yaml 文件</p><blockquote><p>nginx-pv-demo.yaml</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 定义PV</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolume <span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pv<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># PV和PVC中accessModes要一致</span>    <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">capacity</span><span class="token punctuation">:</span>    <span class="token key atrule">storage</span><span class="token punctuation">:</span> 2Gi  <span class="token key atrule">nfs</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /nfs/data/nginx    <span class="token key atrule">server</span><span class="token punctuation">:</span> 172.16.11.128<span class="token punctuation">---</span><span class="token comment" spellcheck="true"># 定义PVC，用于消费PV</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pvc<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteMany  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">requests</span><span class="token punctuation">:</span>      <span class="token key atrule">storage</span><span class="token punctuation">:</span> 2Gi<span class="token punctuation">---</span><span class="token comment" spellcheck="true"># 定义Pod，指定需要使用的PVC</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>       <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>persistent<span class="token punctuation">-</span>storage          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /usr/share/nginx/html      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>persistent<span class="token punctuation">-</span>storage        <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>          <span class="token key atrule">claimName</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pvc</code></pre></li><li><p>根据yaml文件创建资源并查看资源</p><pre class=" language-shell"><code class="language-shell">kubectl apply -f nginx-pv-demo.yamlkubectl get pv,pvckubectl get pods -o wide</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210033.png" alt="1575545066963"></p></li><li><p>测试持久化存储</p><ol><li>在/nfs/data/nginx新建文件1.html，写上内容</li><li>kubectl get pods -o wide   得到nginx-pod的ip地址</li><li>curl nginx-pod-ip/1.html</li><li>kubectl exec -it nginx-pod bash    进入/usr/share/nginx/html目录查看</li><li>kubectl delete pod nginx-pod 删除当前nginx对应pod</li><li>查看新nginx-pod的ip并且访问nginx-pod-ip/1.html</li></ol></li></ol><h3 id="1-6-3-图解理解一下"><a href="#1-6-3-图解理解一下" class="headerlink" title="1.6.3 图解理解一下"></a>1.6.3 图解理解一下</h3><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210039.png" alt="1574861582293"></p><h3 id="1-7-StorageClass"><a href="#1-7-StorageClass" class="headerlink" title="1.7 StorageClass"></a>1.7 StorageClass</h3><blockquote><p>上面手动管理PV的方式还是有点low，能不能更加灵活一点呢？</p><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/storage/storage-classes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/storage/storage-classes/</a></p><p><code>nfs github</code>：<code>github</code>：<a href="https://github.com/kubernetes-incubator/external-storage/tree/master/nfs" target="_blank" rel="noopener">https://github.com/kubernetes-incubator/external-storage/tree/master/nfs</a></p><pre><code>A StorageClass provides a way for administrators to describe the “classes” of storage they offer. Different classes might map to quality-of-service levels, or to backup policies, or to arbitrary policies determined by the cluster administrators. Kubernetes itself is unopinionated about what classes represent. This concept is sometimes called “profiles” in other storage systems.</code></pre><pre><code>Each StorageClass contains the fields provisioner, parameters, and reclaimPolicy, which are used when a PersistentVolume belonging to the class needs to be dynamically provisioned.The name of a StorageClass object is significant, and is how users can request a particular class. Administrators set the name and other parameters of a class when first creating StorageClass objects, and the objects cannot be updated once they are created.</code></pre><p>StorageClass声明存储插件，用于自动创建PV。</p><p>说白了就是创建PV的模板，其中有两个重要部分：PV属性和创建此PV所需要的插件。</p><p>这样PVC就可以按“Class”来匹配PV。</p><p>可以为PV指定storageClassName属性，标识PV归属于哪一个Class。</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> storage.k8s.io/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> StorageClass<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> standard<span class="token key atrule">provisioner</span><span class="token punctuation">:</span> kubernetes.io/aws<span class="token punctuation">-</span>ebs<span class="token key atrule">parameters</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> gp2<span class="token key atrule">reclaimPolicy</span><span class="token punctuation">:</span> Retain<span class="token key atrule">allowVolumeExpansion</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">mountOptions</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> debug<span class="token key atrule">volumeBindingMode</span><span class="token punctuation">:</span> Immediate</code></pre><pre><code>01 对于PV或者StorageClass只能对应一种后端存储02 对于手动的情况，一般我们会创建很多的PV，等有PVC需要使用的时候就可以直接使用了03 对于自动的情况，那么就由StorageClass来自动管理创建04 如果Pod想要使用共享存储，一般会在创建PVC，PVC中描述了想要什么类型的后端存储、空间等，K8s从而会匹配对应的PV，如果没有匹配成功，Pod就会处于Pending状态。Pod中使用只需要像使用volumes一样，指定名字就可以使用了05 一个Pod可以使用多个PVC，一个PVC也可以给多个Pod使用06 一个PVC只能绑定一个PV，一个PV只能对应一种后端存储</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210045.png" alt="1574861709644"></p><blockquote><p>有了StorageClass之后的PVC可以变成这样</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span><span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>claim1<span class="token key atrule">spec</span><span class="token punctuation">:</span><span class="token key atrule">accessModes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> ReadWriteMany<span class="token key atrule">resources</span><span class="token punctuation">:</span><span class="token key atrule">requests</span><span class="token punctuation">:</span> <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Mi<span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> nfs</code></pre></blockquote><blockquote><p>StorageClass之所以能够动态供给PV，是因为Provisioner，也就是Dynamic Provisioning</p><p>但是NFS这种类型，K8s中默认是没有Provisioner插件的，需要自己创建</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309210049.png" alt="1574861720935"></p></blockquote><h3 id="1-8-StorageClass实战"><a href="#1-8-StorageClass实战" class="headerlink" title="1.8 StorageClass实战"></a>1.8 StorageClass实战</h3><blockquote><p><code>github</code>：<a href="https://github.com/kubernetes-incubator/external-storage/tree/master/nfs" target="_blank" rel="noopener">https://github.com/kubernetes-incubator/external-storage/tree/master/nfs</a></p><p>网盘中:课堂源码/storage/有好几个yaml文件</p></blockquote><ol><li><p>准备好NFS服务器[并且确保nfs可以正常工作]，创建持久化需要的目录</p><blockquote><p>path: /nfs/data/jack</p><p>server: 121.41.10.13  </p><p>比如mkdir -p /nfs/data/jack</p></blockquote></li><li><p>根据rbac.yaml文件创建资源</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>provisioner<span class="token punctuation">-</span>runner<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"persistentvolumes"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"delete"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"persistentvolumeclaims"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"storage.k8s.io"</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"storageclasses"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"events"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">,</span> <span class="token string">"patch"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"services"</span><span class="token punctuation">,</span> <span class="token string">"endpoints"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"extensions"</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"podsecuritypolicies"</span><span class="token punctuation">]</span>    <span class="token key atrule">resourceNames</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"nfs-provisioner"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"use"</span><span class="token punctuation">]</span><span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> run<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>provisioner<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>provisioner     <span class="token comment" spellcheck="true"># replace with namespace where provisioner is deployed</span>    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>provisioner<span class="token punctuation">-</span>runner  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Role<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>locking<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>provisioner<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"endpoints"</span><span class="token punctuation">]</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"list"</span><span class="token punctuation">,</span> <span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"create"</span><span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">,</span> <span class="token string">"patch"</span><span class="token punctuation">]</span><span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>locking<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>provisioner<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> nfs<span class="token punctuation">-</span>provisioner    <span class="token comment" spellcheck="true"># replace with namespace where provisioner is deployed</span>    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role  <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>locking<span class="token punctuation">-</span>nfs<span class="token punctuation">-</span>provisioner  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io</code></pre><pre class=" language-shell"><code class="language-shell">kubectl apply -f rbac.yaml</code></pre></li><li><p>根据deployment.yaml文件创建资源</p><p>```yaml<br>apiVersion: v1<br>kind: ServiceAccount<br>metadata:<br> name: nfs-provisioner</p></li></ol><hr><p>  kind: Deployment<br>  apiVersion: extensions/v1beta1<br>  metadata:<br>    name: nfs-provisioner<br>  spec:<br>    replicas: 1<br>    strategy:<br>      type: Recreate<br>    template:<br>      metadata:<br>        labels:<br>          app: nfs-provisioner<br>      spec:<br>        serviceAccount: nfs-provisioner<br>        containers:<br>          - name: nfs-provisioner<br>            image: registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner<br>            volumeMounts:<br>              - name: nfs-client-root<br>                mountPath: /persistentvolumes<br>            env:<br>              - name: PROVISIONER_NAME<br>                value: example.com/nfs<br>              - name: NFS_SERVER<br>                value: 172.16.11.128<br>              - name: NFS_PATH<br>                value: /nfs/data/jack<br>        volumes:<br>          - name: nfs-client-root<br>            nfs:<br>              server: 172.16.11.128<br>              path: /nfs/data/jack</p><pre><code>```shellkubectl apply -f deployment.yaml</code></pre><ol start="4"><li><p>根据class.yaml创建资源</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> StorageClass<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> storage.k8s.io/v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>nfs<span class="token key atrule">provisioner</span><span class="token punctuation">:</span> example.com/nfs</code></pre><pre class=" language-shell"><code class="language-shell">kubectl apply -f class.yaml</code></pre></li><li><p>根据my-pvc.yaml创建资源</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> PersistentVolumeClaim<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>pvc<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token key atrule">accessModes</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> ReadWriteMany <span class="token key atrule">resources</span><span class="token punctuation">:</span>   <span class="token key atrule">requests</span><span class="token punctuation">:</span>     <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Mi <span class="token comment" spellcheck="true"># 这个名字要和上面创建的storageclass名称一致</span> <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>nfs</code></pre><pre class=" language-shell"><code class="language-shell">kubectl apply -f my-pvc.yamlkubectl get pvc</code></pre></li><li><p>根据nginx-pod创建资源</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token key atrule">containers</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx   <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx   <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>pvc       <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> <span class="token string">"/usr/jack"</span> <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> <span class="token string">"Never"</span> <span class="token key atrule">volumes</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>pvc     <span class="token key atrule">persistentVolumeClaim</span><span class="token punctuation">:</span>       <span class="token key atrule">claimName</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>pvc</code></pre><pre class=" language-shell"><code class="language-shell">kubectl apply -f nginx-pod.yamlkubectl exec -it nginx bashcd /usr/jack# 进行同步数据测试</code></pre></li></ol><h3 id="1-9-PV的状态和回收策略"><a href="#1-9-PV的状态和回收策略" class="headerlink" title="1.9 PV的状态和回收策略"></a>1.9 PV的状态和回收策略</h3><ul><li>PV的状态<ul><li>Available：表示当前的pv没有被绑定</li><li>Bound：表示已经被pvc挂载</li><li>Released：pvc没有在使用pv, 需要管理员手工释放pv</li><li>Failed：资源回收失败</li></ul></li><li>PV回收策略<ul><li>Retain：表示删除PVC的时候，PV不会一起删除，而是变成Released状态等待管理员手动清理</li><li>Recycle：在Kubernetes新版本就不用了，采用动态PV供给来替代</li><li>Delete：表示删除PVC的时候，PV也会一起删除，同时也删除PV所指向的实际存储空间</li></ul></li></ul><p><code>注意</code>：目前只有NFS和HostPath支持Recycle策略。AWS EBS、GCE PD、Azure Disk和Cinder支持Delete策略</p>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-1.gitlab安装</title>
      <link href="posts/f878b1de.html"/>
      <url>posts/f878b1de.html</url>
      
        <content type="html"><![CDATA[<p>【官网】<a href="https://about.gitlab.com/install/#centos-7" target="_blank" rel="noopener">https://about.gitlab.com/install/#centos-7</a><br>【这块需要自己搭建gitlab的小伙伴可以操作一下，上面也放了官网中的链接步骤】</p><h2 id="01-说明"><a href="#01-说明" class="headerlink" title="01 说明"></a>01 说明</h2><p>安装gitlab的机器至少要有4G的内存，因为gitlab比较消耗内存</p><h2 id="02-安装必要的依赖"><a href="#02-安装必要的依赖" class="headerlink" title="02 安装必要的依赖"></a>02 安装必要的依赖</h2><pre class=" language-shell"><code class="language-shell">sudo yum install -y curl policycoreutils-python openssh-serversudo systemctl enable sshdsudo systemctl start sshdsudo firewall-cmd --permanent --add-service=httpsudo systemctl reload firewalld</code></pre><h2 id="03-发送邮件设置"><a href="#03-发送邮件设置" class="headerlink" title="03 发送邮件设置"></a>03 发送邮件设置</h2><p>如果想要发送邮件，就跑一下下面的内容</p><pre class=" language-shell"><code class="language-shell">sudo yum install postfixsudo systemctl enable postfixsudo systemctl start postfix</code></pre><h2 id="04-添加gitlab的仓库地址"><a href="#04-添加gitlab的仓库地址" class="headerlink" title="04 添加gitlab的仓库地址"></a>04 添加gitlab的仓库地址</h2><pre class=" language-shell"><code class="language-shell">curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash</code></pre><p>注意：这个下载仓库可能速度会很慢，此时可以用国内的仓库地址</p><blockquote><p>新建文件   <code>/etc/yum.repos.d/gitlab-ce.repo</code><br>内容为</p><pre class=" language-properties"><code class="language-properties">[gitlab-ce]<span class="token attr-name">name</span><span class="token punctuation">=</span><span class="token attr-value">Gitlab CE Repository</span><span class="token attr-name">baseurl</span><span class="token punctuation">=</span><span class="token attr-value">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</span><span class="token attr-name">gpgcheck</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">enabled</span><span class="token punctuation">=</span><span class="token attr-value">1</span></code></pre></blockquote><p>更新本地的yum缓存：sudo yum makecache</p><h2 id="05-设置域名和安装"><a href="#05-设置域名和安装" class="headerlink" title="05 设置域名和安装"></a>05 设置域名和安装</h2><blockquote><p>设置gitlab的域名和安装gitlab</p></blockquote><blockquote><pre class=" language-shell"><code class="language-shell">sudo EXTERNAL_URL="http://gitlab.itcrazy2016.com" yum install -y gitlab-ee</code></pre><p><font color="red">如果用的是国内仓库地址，则执行以下命令，其实区别就是ee和ce版，企业版和社区版</font></p><pre class=" language-shell"><code class="language-shell"># sudo EXTERNAL_URL="http://gitlab.itcrazy2016.com" yum install -y gitlab-cesudo EXTERNAL_URL="http://gitlab.chris-king.com" yum install -y gitlab-ce</code></pre></blockquote><p>此时要么买一个域名，要么在本地的hosts文件中设置一下<br>安装gitlab服务器的ip地址  gitlab.itcrazy2016.com</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># gitlab host</span><span class="token attr-name">172.16.11.125</span> <span class="token attr-value">  gitlab.chris-king.com</span></code></pre><p>假如不想设置域名，可以直接安装  yum install -y gitlab-ee</p><h2 id="06-重新configure"><a href="#06-重新configure" class="headerlink" title="06 重新configure"></a>06 重新configure</h2><p>如果没有成功，可以运行gitlab-ctl reconfigure</p><h2 id="07-查看gitlab运行的情况"><a href="#07-查看gitlab运行的情况" class="headerlink" title="07 查看gitlab运行的情况"></a>07 查看gitlab运行的情况</h2><p>gitlab-ctl status 可以看到运行gitlab服务所需要的进程</p><h2 id="08-访问"><a href="#08-访问" class="headerlink" title="08 访问"></a>08 访问</h2><p>浏览器输入gitlab.itcrazy2016.com，此时需要修改root账号的密码</p><pre><code>第一次登录使用的用户名和密码为 root 和 5iveL!fe，登录后默认叫你修改密码。</code></pre><h2 id="09-配置已经安装好的gitlab"><a href="#09-配置已经安装好的gitlab" class="headerlink" title="09 配置已经安装好的gitlab"></a>09 配置已经安装好的gitlab</h2><p>vim /etc/gitlab/gitlab.rb<br>修改完成之后一定要 gitlab-ctl reconfigure</p><h2 id="10-常用命令"><a href="#10-常用命令" class="headerlink" title="10 常用命令"></a>10 常用命令</h2><pre class=" language-shell"><code class="language-shell">sudo gitlab-ctl start    # 启动所有 gitlab 组件；sudo gitlab-ctl stop        # 停止所有 gitlab 组件；sudo gitlab-ctl restart        # 重启所有 gitlab 组件；sudo gitlab-ctl status        # 查看服务状态；sudo gitlab-ctl reconfigure        # 启动服务；sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；gitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；sudo gitlab-ctl tail        # 查看日志；</code></pre><h2 id="11-修改端口"><a href="#11-修改端口" class="headerlink" title="11 修改端口"></a>11 修改端口</h2><p>若linux服务器的80和8080端口都已经被使用，则需修改gitlab监听的端口</p><p>修改路径文件：vim /etc/gitlab/gitlab.rb</p><ol><li><p>修改external_url ‘<a href="http://ip:端口号'">http://ip:端口号'</a>   （将前面的#注释符号去掉）,我改成了8099<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205838.png" alt="img"></p></li><li><p>找到Advanced settings 下的8080端口 将端口改成自己备用端口号（不能和上面url端口号相同，会冲突占用！），我改的28080<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205850.png" alt="img"></p></li><li><p>运行下面命令</p><pre class=" language-shell"><code class="language-shell">1. sudo gitlab-ctl stop # --停止服务2. sudo gitlab-ctl reconfigure # --启动服务3. sudo gitlab-ctl start # --启动所有gitlab组件</code></pre><p>启动需要一段时间，上边启动完基本就可以了。<br>期间可以查看端口进程：<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205855.png" alt="img"><br><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205901.png" alt="img"></p></li><li><p>若访问不了gitlab，尝试关闭或开放防火墙</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.K8s的CICD</title>
      <link href="posts/904a4879.html"/>
      <url>posts/904a4879.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-CICD"><a href="#1-CICD" class="headerlink" title="1 CICD"></a>1 CICD</h1><blockquote><p><code>思考</code>：如果springboot-demo需要修改某些代码，按照上述流程，是不是又要重新打包？然后写Dockerfile，push镜像，然后写k8s配置文件等等之类的操作</p></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205608.png" alt="1574861807916"></p><blockquote><p><code>思路</code>：如果能够按照上述图解一样，在本地进行开发，然后git push到github，就能访问最终的应用该多好</p></blockquote><h2 id="1-1-环境准备"><a href="#1-1-环境准备" class="headerlink" title="1.1 环境准备"></a>1.1 环境准备</h2><h3 id="1-1-1-基础环境"><a href="#1-1-1-基础环境" class="headerlink" title="1.1.1 基础环境"></a>1.1.1 基础环境</h3><blockquote><p><strong>基础环境准备[在jenkins那台机器上安装]</strong></p></blockquote><ul><li><p>安装java</p><ol><li><p>找到jdk资源上传到指定机器</p><pre class=" language-shell"><code class="language-shell">resources/cicd/jdk-8u181-linux-x64.tar.gz</code></pre></li><li><p>配置环境变量</p><pre class=" language-shell"><code class="language-shell">vim /etc/profileexport JAVA_HOME=/usr/local/java/jdk1.8.0_181export CLASSPATH=.:${JAVA_HOME}/jre/lib/rt.jar:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jarexport PATH=$PATH:${JAVA_HOME}/binsource /etc/profile java -version</code></pre></li></ol></li><li><p>安装maven</p><ol><li><p>找到maven资源上传到指定机器</p><pre class=" language-shell"><code class="language-shell">resources/cicd/apache-maven-3.6.2-bin.tar.gz</code></pre></li><li><p>配置环境变量</p><pre class=" language-shell"><code class="language-shell">vim /etc/profileexport MAVEN_HOME=/usr/local/maven/apache-maven-3.6.2export PATH=$PATH:$JAVA_HOME/bin:$MAVEN_HOME/binsource /etc/profile mvn -version</code></pre></li><li><p>配置maven的阿里云镜像</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre></li></ol></li><li><p>安装配置git</p><ol><li><p>下载安装</p><pre class=" language-shell"><code class="language-shell">yum install git </code></pre></li><li><p>配置git</p><pre class=" language-shell"><code class="language-shell">git config --global user.name "itcrazy2016"git config --global user.email "itcrazy2016@163.com"ssh-keygen -t rsa -C "itcrazy2016@163.com"  --->将公钥上传到github:/root/.ssh/id_rsa.pub</code></pre></li></ol></li></ul><h3 id="1-1-1-IDEA-SpringBoot项目"><a href="#1-1-1-IDEA-SpringBoot项目" class="headerlink" title="1.1.1 IDEA+SpringBoot项目"></a>1.1.1 IDEA+SpringBoot项目</h3><pre class=" language-shell"><code class="language-shell">01 `下载项目`    git clone git@github.com:itcrazy2016/springboot-demo.git02 `使用idea打开`    此时项目已经和github关联</code></pre><h3 id="1-1-2-Gitlab"><a href="#1-1-2-Gitlab" class="headerlink" title="1.1.2 Gitlab"></a>1.1.2 Gitlab</h3><blockquote><p>直接采用github</p></blockquote><p><a href="mailto:git@github.com">git@github.com</a>:itcrazy2016/springboot-demo.git</p><h3 id="1-1-3-Jenkins"><a href="#1-1-3-Jenkins" class="headerlink" title="1.1.3 Jenkins"></a>1.1.3 Jenkins</h3><blockquote><p>必须在k8s集群中，因为后面需要在jenkins的目录下创建文件执行，比如这里选用<strong>w2</strong></p></blockquote><ol><li><p>操作前须知</p><blockquote><p><code>jenkins官网</code>:<a href="https://jenkins.io/" target="_blank" rel="noopener">https://jenkins.io/</a></p><p><code>入门指南</code>:&lt;<a href="https://jenkins.io/zh/doc/pipeline/tour/getting-started/" target="_blank" rel="noopener">https://jenkins.io/zh/doc/pipeline/tour/getting-started/</a></p></blockquote></li><li><p>找到对应资源：resources/cicd/jenkins.war</p><pre class=" language-shell"><code class="language-shell">wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war</code></pre></li><li><p>启动jenkins[<strong>记得当前机器安装了jdk/jre，不然运行不了</strong>]</p><pre class=" language-shell"><code class="language-shell">nohup java -jar jenkins.war --httpPort=8080 & tail -f nohup.out </code></pre></li><li><p>win浏览器访问w2的ip   121.40.56.193:8080，记录下密码，比如</p><pre class=" language-shell"><code class="language-shell">cat /root/.jenkins/secrets/initialAdminPassword</code></pre></li><li><p>安装推荐的插件</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205711.png" alt="1574861832702"></p></li><li><p>创建一个用户，比如</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">username</span><span class="token punctuation">:</span><span class="token attr-value">jack</span><span class="token attr-name">password</span><span class="token punctuation">:</span><span class="token attr-value">123456</span></code></pre></li><li><p>安装配置git，maven</p></li><li><p>在jenkins上使用centos的java，git，maven等</p><blockquote><p>[系统管理]-&gt;[全局工具配置]-&gt;[Maven、JDK、Git等]</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205714.png" alt="1574861881229"></p></blockquote></li></ol><h3 id="1-1-4-Docker-hub"><a href="#1-1-4-Docker-hub" class="headerlink" title="1.1.4 Docker hub"></a>1.1.4 Docker hub</h3><blockquote><p>使用阿里云docker镜像仓库，或者自己搭建一个</p></blockquote><p>比如使用阿里云的</p><pre><code>docker login --username=itcrazy2016@163.com registry.cn-hangzhou.aliyuncs.com</code></pre><h3 id="1-1-5-Kubernetes集群"><a href="#1-1-5-Kubernetes集群" class="headerlink" title="1.1.5 Kubernetes集群"></a>1.1.5 Kubernetes集群</h3><blockquote><p>直接使用之前大家自己搭建的K8s集群</p></blockquote><h2 id="1-2-必要测试"><a href="#1-2-必要测试" class="headerlink" title="1.2 必要测试"></a>1.2 必要测试</h2><h3 id="1-2-1-github-触发构建"><a href="#1-2-1-github-触发构建" class="headerlink" title="1.2.1 github 触发构建"></a>1.2.1 github 触发构建</h3><h4 id="1-2-1-1-pipeline任务"><a href="#1-2-1-1-pipeline任务" class="headerlink" title="1.2.1.1  pipeline任务"></a>1.2.1.1  pipeline任务</h4><blockquote><p><code>关注</code>: /root/.jenkins/workspace目录</p></blockquote><ol><li><p>创建jenkins的task<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205719.png" alt="1574861902253"></p></li><li><p>拉取github代码，在最下面编写pipeline，然后“保存和立即构建“，同时可以查看“Console Output”</p><pre class=" language-shell"><code class="language-shell">  node {     def mvnHome     stage('Preparation') { // for display purposes      git 'https://github.com/itcrazy2016/springboot-demo.git'     }  }</code></pre></li><li><p>来到w2节点：ls /root/.jenkins/workspace/springboot-demo<br> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205724.png" alt="1574861917878"></p></li><li><p>配置springboot-demo的task，修改pipeline内容 ，增加maven构建，然后“保存和立即构建“，同时可以查看“Console Output”</p><pre class=" language-shell"><code class="language-shell">  node {     def mvnHome     stage('Preparation') {      git 'https://github.com/itcrazy2016/springboot-demo.git'     }     stage('Maven Build') {       sh "mvn clean package"     }  }</code></pre></li><li><p>来到w2节点：ls /root/.jenkins/workspace/springboot-demo<br> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205728.png" alt="1574861930419"><br> <code>小结</code>：至此，我们已经可以通过在jenkins上手动构建的方式，拿到github上的代码，并且用maven进行构建。</p></li></ol><h4 id="1-2-1-2-jenkins自动构建"><a href="#1-2-1-2-jenkins自动构建" class="headerlink" title="1.2.1.2 jenkins自动构建"></a>1.2.1.2 jenkins自动构建</h4><blockquote><p><code>最好的话</code>:当用户进行git commit/push提交代码到github时，能够通知<strong>jenkins自动构建</strong></p><p><code>注意</code>:jenkins的ip一定要是github能够访问到的地址</p></blockquote><ol><li><p>在github上配置jenkins的webhook地址</p><blockquote><p><a href="http://121.40.56.193:8080/springboot-demo" target="_blank" rel="noopener">http://121.40.56.193:8080/springboot-demo</a></p></blockquote><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205731.png" alt="1574861941739"></p><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205924.png" alt="1574861957602"></p></li><li><p>生成Personal access tokens</p><blockquote><p>Jenkins访问github需要授权，所以在github上生成token交给jenkins使用，即<code>Personal access tokens</code></p><p>github的Settings[个人信息右上角]–&gt;Developer settings–&gt;Personal access tokens–&gt;Generate new token</p><p>最后保存好该token，比如：**72f048b514e95d6fe36f86d84374f2dcce402b43</p></blockquote><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205735.png" alt="1574861967528"></p></li><li><p>jenkins安装插件</p><ol><li>安装github plugin插件:[系统管理]-&gt;[插件管理]-&gt;[可选插件]</li><li>安装gitlab插件和gitlab hook插件:[系统管理]-&gt;[插件管理]-&gt;[可选插件]</li></ol></li><li><p>配置GitHub Server</p><blockquote><p>[系统管理]-&gt;[系统配置]-&gt;[找到github服务器]-&gt;[添加github服务器]</p><p><code>然后按照下面图片步骤进行操作</code></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205740.png" alt="1574861996924"></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205933.png" alt="1574862004981"></p><p><strong>然后进行测试，最后点击最下面的保存</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205744.png" alt="1574862019742"></p></blockquote></li></ol><h3 id="1-2-2-gitlab-触发构建"><a href="#1-2-2-gitlab-触发构建" class="headerlink" title="1.2.2 gitlab 触发构建"></a>1.2.2 gitlab 触发构建</h3><blockquote><p>流水线配置和上面相同</p></blockquote><h4 id="1-2-2-1-jenkins配置"><a href="#1-2-2-1-jenkins配置" class="headerlink" title="1.2.2.1 jenkins配置"></a>1.2.2.1 jenkins配置</h4><ol><li><p>安装插件</p><p>需要安装两个插件  <strong>Gitlab Hook Plugin和Build Authorization Token Root</strong>。果没有安装Build Authorization Token，后面gitlab在Test hook时会报403错误</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205748.png" alt="image-20191206190950144"></p></li><li><p>流水线配置</p><ol><li><p>新建一条流水线 springboot-demo</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205937.png" alt="image-20191206191207972"></p></li><li><p>构建触发器，勾选gitlab-ci，记住后面的GitLab CI Service URL后面要填在gitlab的webhooks中</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205750.png" alt="image-20191206191448354"></p><p>点开高级，填写根据正则过滤branch，写法如下，并generate一个token，不然后面webhooks会报403。记下生成的 token</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205753.png" alt="image-20191206191616189"></p></li></ol></li><li><p>配置执行脚本 </p><pre class=" language-shell"><code class="language-shell">node {   def mvnHome   stage('Preparation') { // for display purposes      git 'git@gitlab.chris-king.com:admins/springboot-demo.git'   }   stage('Maven Build'){       sh "mvn clean package"   }}</code></pre></li></ol><h4 id="1-2-2-2-gitlab配置"><a href="#1-2-2-2-gitlab配置" class="headerlink" title="1.2.2.2 gitlab配置"></a>1.2.2.2 gitlab配置</h4><ol><li><p>配置 webhook</p><p>在 springboot-demo 下面 【设置】-【集成】，URL 和 Secret Token 分别配置上一步 jenkins 中获取的</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205757.png" alt="image-20191206192041018"></p><p>点击下方 Add webhook，出现如下错误</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205942.png" alt="image-20191206192159940"></p></li><li><p>配置允许本地网络</p><p> Admin area =&gt; Settings =&gt; Network，然后点击 Outbound requests 右边 的“expand”按钮，如下：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205800.png" alt="image-20191206192409933"></p><p>然后点击 “Save changes”，并重新添加即可添加成功</p></li><li><p>添加成功测试</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205803.png" alt="image-20191206192533376"></p><p>点击右边测试，选择 “Push events”，返回 200 状态码</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205946.png" alt="image-20191206191922254"></p></li><li><p>jenkins 流水线触发构建</p><p>可以在 jenkins 上看到一条构建记录，被 GitLab 所触发。说明配置成功</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205806.png" alt="image-20191206192814735"></p></li></ol><h2 id="1-3-核心实战走起"><a href="#1-3-核心实战走起" class="headerlink" title="1.3 核心实战走起"></a>1.3 核心实战走起</h2><h3 id="1-3-1-build-amp-push镜像"><a href="#1-3-1-build-amp-push镜像" class="headerlink" title="1.3.1 build&amp;push镜像"></a>1.3.1 build&amp;push镜像</h3><blockquote><p><strong>经过前面的折腾，肯定可以获取到代码，并且用maven进行构建了，最终拿到一个target/xxx.jar</strong></p><p>来到w2上的workspace目录：cd /root/.jenkins/workspace</p></blockquote><ol><li><p>准备一个文件，名称为 springboot-demo-build-image.sh</p><pre><code>mkdir /root/.jenkins/workspace/scripts/vi /root/.jenkins/workspace/scripts/springboot-demo-build-image.sh</code></pre></li><li><p>编写 springboot-demo-build-image.sh 文件</p><pre class=" language-shell"><code class="language-shell"># 进入到springboot-demo目录cd ../springboot-demo# 编写Dockerfile文件cat <<EOF > DockerfileFROM openjdk:8-jre-alpineCOPY target/springboot-demo-0.0.1-SNAPSHOT.jar /springboot-demo.jarENTRYPOINT ["java","-jar","/springboot-demo.jar"]EOFecho "Dockerfile created successfully!"# 基于指定目录下的Dockerfile构建镜像docker build -t registry.cn-hangzhou.aliyuncs.com/itcrazy2016/springboot-demo:v1.0 .# push镜像，这边需要阿里云镜像仓库登录，在w2上登录docker push registry.cn-hangzhou.aliyuncs.com/itcrazy2016/springboot-demo:v1.0:wq</code></pre></li><li><p>增加pipeline</p><pre class=" language-shell"><code class="language-shell">node {   def mvnHome   stage('Preparation') {      git 'https://github.com/itcrazy2016/springboot-demo.git'   }   stage('Maven Build') {       sh "mvn clean package"   }   stage('Build Image') {       sh "/root/.jenkins/workspace/scripts/springboot-demo-build-image.sh"   }}</code></pre></li><li><p>采坑</p><pre class=" language-shell"><code class="language-shell"># 01 文件权限/root/.jenkins/workspace/springboot-demo@tmp/durable-7dbf7e73/script.sh: line 1: /root/.jenkins/workspace/scripts/springboot-demo-build-image.sh: Permission denied# 解决chmod +x /root/.jenkins/workspace/scripts/springboot-demo-build-image.sh# 02 docker没有运行Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?# 解决systemctl start dockersystemctl enable docker# 03 push权限docker login --username=itcrazy2016@163.com registry.cn-hangzhou.aliyuncs.com</code></pre></li></ol><h3 id="1-3-2-Kubernetes拉取镜像运行"><a href="#1-3-2-Kubernetes拉取镜像运行" class="headerlink" title="1.3.2 Kubernetes拉取镜像运行"></a>1.3.2 Kubernetes拉取镜像运行</h3><blockquote><p><strong>经过前面的折腾，现在已经能够把镜像push到镜像仓库了，接下来就是k8s拉取镜像并且运行在集群中咯</strong></p><p>根据前面的经验，肯定再创建一个stage，然后运行sh脚本，脚本中执行内容，包括yaml文件</p></blockquote><ol><li><p>编写springboot-demo.yaml文件</p><blockquote><p>在/root/.jenkins/workspace/scripts/目录下创建springboot-demo.yaml</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 以Deployment部署Pod</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">selector</span><span class="token punctuation">:</span>     <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>       <span class="token key atrule">app</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>     <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>         <span class="token key atrule">app</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo    <span class="token key atrule">spec</span><span class="token punctuation">:</span>       <span class="token key atrule">containers</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo        <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/itcrazy2016/springboot<span class="token punctuation">-</span>demo<span class="token punctuation">:</span>v1.0        <span class="token key atrule">ports</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">---</span><span class="token comment" spellcheck="true"># 创建Pod的Service</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">ports</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>     <span class="token key atrule">app</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo<span class="token punctuation">---</span><span class="token comment" spellcheck="true"># 创建Ingress，定义访问规则</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">rules</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> springboot.jack.com    <span class="token key atrule">http</span><span class="token punctuation">:</span>       <span class="token key atrule">paths</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /        <span class="token key atrule">backend</span><span class="token punctuation">:</span>           <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre></li><li><p>编写k8s-deploy-springboot-demo.sh文件</p><blockquote><p>vi /root/.jenkins/workspace/scripts/k8s-deploy-springboot-demo.sh</p></blockquote><pre class=" language-shell"><code class="language-shell">kubectl delete -f springboot-demo.yamlkubectl apply -f /root/.jenkins/workspace/scripts/springboot-demo.yamlecho "k8s deploy success!"</code></pre></li><li><p>编写pipeline</p><pre class=" language-shell"><code class="language-shell">node {   def mvnHome   stage('Preparation') {      git 'https://github.com/itcrazy2016/springboot-demo.git'   }   stage('Maven Build') {       sh "mvn clean package"   }   stage('Build Image') {       sh "/root/.jenkins/workspace/scripts/springboot-demo-build-image.sh"   }   stage('K8S Deploy') {       sh "/root/.jenkins/workspace/scripts/k8s-deploy-springboot-demo.sh"   }}</code></pre></li><li><p>采坑</p><pre class=" language-shell"><code class="language-shell"># 01 权限/root/.jenkins/workspace/springboot-demo@tmp/durable-8404142a/script.sh: line 1: /root/.jenkins/workspace/scripts/k8s-deploy-springboot-demo.sh: Permission denied# 解决chmod +x /root/.jenkins/workspace/scripts/k8s-deploy-springboot-demo.sh# 02 worker02执行不了kubectl`切换到master上，cd ~  --->  cat .kube/config  --->复制内容``切换到worker02上   cd ~  --->  vi .kube/config   --->粘贴内容`</code></pre></li><li><p>win的hosts文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">192.168.0.61</span> <span class="token attr-value">springboot.jack.com</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.K8s项目实战</title>
      <link href="posts/e7f3efaa.html"/>
      <url>posts/e7f3efaa.html</url>
      
        <content type="html"><![CDATA[<h1 id="服务部署到Kubernetes"><a href="#服务部署到Kubernetes" class="headerlink" title="服务部署到Kubernetes"></a>服务部署到Kubernetes</h1><h2 id="部署wordpress-mysql"><a href="#部署wordpress-mysql" class="headerlink" title="部署wordpress+mysql"></a>部署wordpress+mysql</h2><ol><li><p>创建wordpress命名空间</p><pre class=" language-shell"><code class="language-shell">kubectl create namespace wordpress</code></pre></li><li><p>创建 wordpress-db.yaml 文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>deploy  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> wordpress  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql        <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.6  </span>        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">3306</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> dbport        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_ROOT_PASSWORD          <span class="token key atrule">value</span><span class="token punctuation">:</span> rootPassW0rd        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_DATABASE          <span class="token key atrule">value</span><span class="token punctuation">:</span> wordpress        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_USER          <span class="token key atrule">value</span><span class="token punctuation">:</span> wordpress        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_PASSWORD          <span class="token key atrule">value</span><span class="token punctuation">:</span> wordpress        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> db          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/lib/mysql      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> db        <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> /var/lib/mysql<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> wordpress<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysqlport    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> dbport</code></pre></li><li><p>根据wordpress-db.yaml创建资源[mysql数据库]</p><pre class=" language-shell"><code class="language-shell">kubectl apply -f wordpress-db.yamlkubectl get pods -n wordpress      # 记得获取ip，因为wordpress.yaml文件中要修改kubectl get svc mysql -n wordpresskubectl describe svc mysql -n wordpress</code></pre><p>   <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205252.png" alt="1575194362553"></p><pre class=" language-shell"><code class="language-shell">kubectl describe pod mysql-deploy-78cd6964bd-pnstt -n wordpress</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205319.png" alt="1575194447767"></p></li><li><p>创建 wordpress.yaml 文件：<br>需要修改yaml中mysql的host，可以修改为pod的host或者service的host，这里使用pos的host<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205323.png" alt="1575194666937"></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> wordpress<span class="token punctuation">-</span>deploy  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> wordpress  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> wordpress<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> wordpress    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> wordpress        <span class="token key atrule">image</span><span class="token punctuation">:</span> wordpress        <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>          <span class="token key atrule">name</span><span class="token punctuation">:</span> wdport        <span class="token key atrule">env</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> WORDPRESS_DB_HOST          <span class="token key atrule">value</span><span class="token punctuation">:</span> 192.168.157.142<span class="token punctuation">:</span><span class="token number">3306</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> WORDPRESS_DB_USER          <span class="token key atrule">value</span><span class="token punctuation">:</span> wordpress        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> WORDPRESS_DB_PASSWORD          <span class="token key atrule">value</span><span class="token punctuation">:</span> wordpress<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> wordpress  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> wordpress<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> wordpress  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> wordpressport    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> wdport</code></pre></li><li><p>根据wordpress.yaml创建资源[wordpress]</p><pre class=" language-shell"><code class="language-shell">kubectl apply -f wordpress.yaml    #修改其中mysql的ip地址,其实也可以使用service的name:mysqlkubectl get pods -n wordpress kubectl get svc -n wordpress   # 获取到转发后的端口，如30063</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205328.png" alt="1575194961401"></p></li><li><p>访问测试</p><pre class=" language-shell"><code class="language-shell">kubectl get pods -n wordpress -o wide # 查看podkubectl get svc -n wordpress -o wide # 查看service</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205331.png" alt="1575195316844"></p><pre class=" language-shell"><code class="language-shell">lsof -i tcp:31866netstat -nltp|grep 31866</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205540.png" alt="1575195715942"></p></li><li><p>浏览器访问 172.16.11.129:31866<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205333.png" alt="1575195784611"><br>填写完成之后页面<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205336.png" alt="1575196558600"><br> win上访问集群中任意宿主机节点的IP:30063</p></li><li><p>在集群中，mysql的地址不仅可以通过ip来配置，也可以通过serviceName来访问</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205339.png" alt="1575292737611"></p></li></ol><h2 id="部署Spring-Boot项目"><a href="#部署Spring-Boot项目" class="headerlink" title="部署Spring Boot项目"></a>部署Spring Boot项目</h2><blockquote><p><code>流程</code>：确定服务–&gt;编写Dockerfile制作镜像–&gt;上传镜像到仓库–&gt;编写K8S文件–&gt;创建</p><p><code>网盘/Kubernetes实战走起/课堂源码/springboot-demo</code></p></blockquote><ol><li><p>准备Spring Boot项目springboot-demo</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">K8SController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/k8s"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">k8s</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String result<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//用 getLocalHost() 方法创建的InetAddress的对象</span>            InetAddress address <span class="token operator">=</span> InetAddress<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token operator">=</span><span class="token string">"hostname: "</span><span class="token operator">+</span>address<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"hostaddress: "</span><span class="token operator">+</span>address<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主机名</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//主机别名</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"hello K8s &lt;br/> "</span><span class="token operator">+</span>result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>生成xxx.jar，并且上传到springboot-demo目录</p><pre><code>mvn clean pakcage</code></pre></li><li><p>编写Dockerfile文件</p><blockquote><pre class=" language-shell"><code class="language-shell">mkdir springboot-democd springboot-demovi Dockerfile</code></pre></blockquote><pre class=" language-dockerfile"><code class="language-dockerfile">FROM openjdk:8-jre-alpineCOPY springboot-demo-0.0.1-SNAPSHOT.jar /springboot-demo.jarENTRYPOINT ["java","-jar","/springboot-demo.jar"]</code></pre></li><li><p>根据Dockerfile创建image</p><pre class=" language-shell"><code class="language-shell">docker build -t springboot-demo-image:v1.0 .</code></pre></li><li><p>使用docker run创建container</p><pre class=" language-shell"><code class="language-shell">docker run -d --name s1 -p 8090:8080 springboot-demo-image:v1.0</code></pre></li><li><p>访问测试</p><pre class=" language-shell"><code class="language-shell">docker inspect s1curl ip:8080/k8s</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205344.png" alt="1575293090282"></p></li><li><p>将镜像推送到镜像仓库</p><pre class=" language-shell"><code class="language-shell"># 登录阿里云镜像仓库docker login --username=itcrazy2016@163.com registry.cn-hangzhou.aliyuncs.comdocker tag springboot-demo-image registry.cn-hangzhou.aliyuncs.com/itcrazy2016/springboot-demo-image:v1.0docker push registry.cn-hangzhou.aliyuncs.com/itcrazy2016/springboot-demo-image:v1.0</code></pre><p> 这里是推送到 harbor 私服</p><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205350.png" alt="1575293151229"></p></li><li><p>编写Kubernetes配置文件</p><blockquote><pre class=" language-shell"><code class="language-shell">vi springboot-demo.yamlkubectl apply -f springboot-demo.yaml</code></pre></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 以Deployment部署Pod</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">selector</span><span class="token punctuation">:</span>     <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>       <span class="token key atrule">app</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>     <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>         <span class="token key atrule">app</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo    <span class="token key atrule">spec</span><span class="token punctuation">:</span>       <span class="token key atrule">containers</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo        <span class="token key atrule">image</span><span class="token punctuation">:</span> 172.16.11.125/images/springboot<span class="token punctuation">-</span>demo<span class="token punctuation">-</span>image<span class="token punctuation">:</span>v1.0        <span class="token key atrule">ports</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">---</span><span class="token comment" spellcheck="true"># 创建Pod的Service</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">ports</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>     <span class="token key atrule">app</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo<span class="token punctuation">---</span><span class="token comment" spellcheck="true"># 创建Ingress，定义访问规则，一定要记得提前创建好nginx ingress controller</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">rules</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> k8s.demo.gper.club    <span class="token key atrule">http</span><span class="token punctuation">:</span>       <span class="token key atrule">paths</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /        <span class="token key atrule">backend</span><span class="token punctuation">:</span>           <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> springboot<span class="token punctuation">-</span>demo          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre></li><li><p>查看资源</p><pre class=" language-shell"><code class="language-shell">kubectl get podskubectl get pods -o widecurl pod_id:8080/k8skubectl get svckubectl scale deploy springboot-demo --replicas=5</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205354.png" alt="1575293751464"></p></li><li><p>win配置hosts文件[一定要记得提前创建好nginx ingress controller]</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 192.168.0.61 springboot.jack.com</span><span class="token attr-name">172.16.11.129</span> <span class="token attr-value">  k8s.demo.gper.club</span></code></pre></li><li><p>win浏览器访问</p><pre class=" language-shell"><code class="language-shell"># http://springboot.jack.com/k8shttp://k8s.demo.gper.club/k8s</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205357.png" alt="1575293795784"></p></li></ol><h2 id="部署Nacos项目"><a href="#部署Nacos项目" class="headerlink" title="部署Nacos项目"></a>部署Nacos项目</h2><h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h3><ol><li><p>准备两个Spring Boot项目，名称为user和order，表示两个服务</p><blockquote><p><code>网盘/Kubernetes实战走起/课堂源码/user</code></p><p><code>网盘/Kubernetes实战走起/课堂源码/order</code></p></blockquote><ol><li><p>pom.xml 文件，两个项目类似</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.gupao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--引入nacos client依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--加入Spring Cloud依赖--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Greenwich.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--加入Spring Cloud Alibaba依赖--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>application.yml 配置文件，user 服务使用8080端口，order 使用9090端口</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 172.16.11.125<span class="token punctuation">:</span><span class="token number">8848</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> user<span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span></code></pre></li><li><p>UserApplication 和 OrderApplication，都是最基本的内容</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OrderApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>TestController，User 服务通过 nacos 调用 order 的测试</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DiscoveryClient discoveryClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">></span> <span class="token function">findServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查询指定服务名称下的所有实例的信息</span>        List<span class="token operator">&lt;</span>ServiceInstance<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>discoveryClient<span class="token punctuation">.</span><span class="token function">getInstances</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ServiceInstance serviceInstance<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URI uri <span class="token operator">=</span> serviceInstance<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">testUrl</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUrl</span><span class="token punctuation">(</span>String urlString<span class="token punctuation">)</span><span class="token punctuation">{</span>        URL url<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>urlString<span class="token punctuation">)</span><span class="token punctuation">;</span>            URLConnection co <span class="token operator">=</span>  url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            co<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接打不开!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            url <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol></li><li><p>下载部署nacos server1.0.0</p><blockquote><p><code>github</code>：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></p><p>网盘/Kubernetes实战走起/课堂源码/nacos-server-1.0.0.tar.gz·</p></blockquote></li><li><p>上传nacos-server-1.0.0.tar.gz到阿里云服务器 39:/usr/local/nacos</p></li><li><p>解压：tar -zxvf nacos-server-1.0.0.tar.gz·</p></li><li><p>进入到bin目录执行：sh startup.sh -m standalone  [需要有java环境的支持]</p></li><li><p>浏览器访问：39.100.39.63:8848/nacos</p></li><li><p>用户名和密码：nacos</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205414.png" alt="1575295176246"></p></li><li><p>将应用注册到nacos，记得修改Spring Boot项目中application.yml文件</p></li><li><p>将user/order服务注册到nacos</p></li><li><p>user服务能够找到order服务</p></li><li><p>启动两个Spring Boot项目，然后查看nacos server的服务列表</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205418.png" alt="1575295298232"></p></li><li><p>为了验证user能够发现order的地址</p><p>访问localhost:8080/user/test，查看日志输出，从而测试是否可以ping通order地址</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205420.png" alt="1575295366695"></p></li></ol><h3 id="K8s方式"><a href="#K8s方式" class="headerlink" title="K8s方式"></a>K8s方式</h3><h4 id="user和order是K8s中的Pod"><a href="#user和order是K8s中的Pod" class="headerlink" title="user和order是K8s中的Pod"></a>user和order是K8s中的Pod</h4><blockquote><p><code>思考</code>：如果将user和order都迁移到K8s中，那服务注册与发现会有问题吗？</p></blockquote><ol><li><p>生成xxx.jar，并且分别上传到master节点的user和order目录</p><blockquote><p>resources/nacos/jar/xxx.jar</p></blockquote><pre class=" language-shell"><code class="language-shell">mvn clean pakcage</code></pre></li><li><p>来到对应的目录，编写Dockerfile文件</p><blockquote><p>vi Dockerfile</p></blockquote><pre class=" language-dockerfile"><code class="language-dockerfile">FROM openjdk:8-jre-alpineCOPY user-0.0.1-SNAPSHOT.jar /user.jarENTRYPOINT ["java","-jar","/user.jar"]</code></pre><pre class=" language-dockerfile"><code class="language-dockerfile">FROM openjdk:8-jre-alpineCOPY order-0.0.1-SNAPSHOT.jar /order.jarENTRYPOINT ["java","-jar","/order.jar"]</code></pre></li><li><p>根据Dockerfile创建image</p><pre class=" language-shell"><code class="language-shell">docker build -t user-image:v1.0 .docker build -t order-image:v1.0 .</code></pre></li><li><p>将镜像推送到镜像仓库</p><pre class=" language-shell"><code class="language-shell"># 登录阿里云镜像仓库docker login --username=itcrazy2016@163.com registry.cn-hangzhou.aliyuncs.comdocker tag user-image:v1.0 registry.cn-hangzhou.aliyuncs.com/itcrazy2016/user-image:v1.0docker push registry.cn-hangzhou.aliyuncs.com/itcrazy2016/user-image:v1.0</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205430.png" alt="1575297098975"></p></li><li><p>编写Kubernetes配置文件</p><blockquote><p>vi user.yaml/order.yaml</p><p>kubectl apply -f user.yaml/order.yaml<br> user.yaml：</p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 以Deployment部署Pod</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> user<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">selector</span><span class="token punctuation">:</span>     <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>       <span class="token key atrule">app</span><span class="token punctuation">:</span> user  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>     <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>         <span class="token key atrule">app</span><span class="token punctuation">:</span> user    <span class="token key atrule">spec</span><span class="token punctuation">:</span>       <span class="token key atrule">containers</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> user        <span class="token key atrule">image</span><span class="token punctuation">:</span> 172.16.11.125/images/user<span class="token punctuation">-</span>image<span class="token punctuation">:</span>v1.0        <span class="token key atrule">ports</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">---</span><span class="token comment" spellcheck="true"># 创建Pod的Service</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> user<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">ports</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>     <span class="token key atrule">app</span><span class="token punctuation">:</span> user<span class="token punctuation">---</span><span class="token comment" spellcheck="true"># 创建Ingress，定义访问规则，一定要记得提前创建好nginx ingress controller</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> user<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">rules</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> k8s.demo.gper.club    <span class="token key atrule">http</span><span class="token punctuation">:</span>       <span class="token key atrule">paths</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">path</span><span class="token punctuation">:</span> /        <span class="token key atrule">backend</span><span class="token punctuation">:</span>           <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> user          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><p> order.yaml： </p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 以Deployment部署Pod</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> order<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">selector</span><span class="token punctuation">:</span>     <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>       <span class="token key atrule">app</span><span class="token punctuation">:</span> order  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>     <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>         <span class="token key atrule">app</span><span class="token punctuation">:</span> order    <span class="token key atrule">spec</span><span class="token punctuation">:</span>       <span class="token key atrule">containers</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> order        <span class="token key atrule">image</span><span class="token punctuation">:</span> 172.16.11.125/images/order<span class="token punctuation">-</span>image<span class="token punctuation">:</span>v1.0        <span class="token key atrule">ports</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9090</span><span class="token punctuation">---</span><span class="token comment" spellcheck="true"># 创建Pod的Service</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> order<span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">ports</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">9090</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>     <span class="token key atrule">app</span><span class="token punctuation">:</span> order</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205439.png" alt="1575297438234"></p></li><li><p>查看资源</p><pre class=" language-shell"><code class="language-shell">kubectl get podskubectl get pods -o widekubectl get svckubectl get ingress</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205442.png" alt="1575297454570"></p></li><li><p>查看nacos server上的服务信息</p><blockquote><p>可以发现，注册到nacos server上的服务ip地址为pod的ip，比如192.168.80.206/192.168.190.82</p></blockquote><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205444.png" alt="1575297502396"></p><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205447.png" alt="1575297526089"></p></li><li><p>访问测试</p><pre class=" language-shell"><code class="language-shell"># 01 集群内curl user-pod-ip:8080/user/testkubectl logs -f <pod-name> -c <container-name>   [主要是为了看日志输出，证明user能否访问order]# 02 集群外，比如win的浏览器，可以把集群中原来的ingress删除掉http://k8s.demo.gper.club/user/test</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205455.png" alt="1575298225343"></p><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205457.png" alt="1575297804911"></p></li></ol><p><strong>结论</strong>：如果服务都是在K8s集群中，最终将pod ip注册到了nacos server，那么最终服务通过pod ip发现so easy。</p><h4 id="user传统和order迁移K8s"><a href="#user传统和order迁移K8s" class="headerlink" title="user传统和order迁移K8s"></a>user传统和order迁移K8s</h4><blockquote><p>假如user现在不在K8s集群中，order在K8s集群中</p><p>比如user使用本地idea中的，order使用上面K8s中的</p></blockquote><ol><li><p>启动本地idea中的user服务</p></li><li><p>查看nacos server中的user服务列表</p></li><li><p>访问本地的localhost:8080/user/test，并且观察idea中的日志打印，发现访问的是order的pod id，此时肯定是不能进行服务调用的，怎么解决呢？<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205502.png" alt="1575371721867"></p></li><li><p>解决思路</p><blockquote><pre><code>之所以访问不了，是因为order的 pod ip在外界访问不了，怎么解决呢？</code></pre><ol><li>可以将pod启动时所在的宿主机的ip写到容器中，也就是pod id和宿主机ip有一个对应关系</li><li>pod和宿主机使用host网络模式，也就是pod直接用宿主机的ip，但是如果服务高可用会有端口冲突问题[可以使用pod的调度策略，尽可能在高可用的情况下，不会将pod调度在同一个worker中]</li></ol></blockquote></li><li><p>我们来演示一个host网络模式的方式，修改order.yaml文件</p><blockquote><p>修改之后apply之前可以看一下各个节点的9090端口是否被占用</p><p>lsof -i tcp:9090</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">...</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>         <span class="token key atrule">app</span><span class="token punctuation">:</span> order    <span class="token key atrule">spec</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 主要是加上这句话，注意在order.yaml的位置</span>      <span class="token key atrule">hostNetwork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>         <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> order        <span class="token key atrule">image</span><span class="token punctuation">:</span> 172.16.11.125/images/order<span class="token punctuation">-</span>image<span class="token punctuation">:</span>v1.0<span class="token punctuation">...</span></code></pre></blockquote></li><li><p>kubectl apply -f order.yaml </p><blockquote><ul><li><p>kubectl get pods -o wide   —&gt;找到pod运行在哪个机器上，比如w2</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205516.png" alt="1575372314854"></p></li><li><p>查看w2上的9090端口是否启动</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205535.png" alt="1575372342885"></p></li></ul></blockquote></li><li><p>查看nacos server上order服务</p><blockquote><p>可以发现此时用的是w2宿主机的9090端口</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205520.png" alt="1575372374764"></p></blockquote></li><li><p>本地idea访问测试</p><blockquote><p>localhost:8080/user/test</p></blockquote><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210309205523.png" alt="1575372409794"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.K8s必知必会</title>
      <link href="posts/46512102.html"/>
      <url>posts/46512102.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Controllers"><a href="#1-Controllers" class="headerlink" title="1 Controllers"></a>1 Controllers</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/controllers/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/</a></p></blockquote><h3 id="ReplicationController-RC"><a href="#ReplicationController-RC" class="headerlink" title="ReplicationController(RC)"></a>ReplicationController(RC)</h3><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/</a></p><pre><code>A ReplicationController ensures that a specified number of pod replicas are running at any one time. In other words, a ReplicationController makes sure that a pod or a homogeneous set of pods is always up and available.</code></pre></blockquote><p>ReplicationController定义了一个期望的场景，即声明某种Pod的副本数量在任意时刻都符合某个预期值，所以RC的定义包含以下几个部分：</p><ul><li>Pod期待的副本数（replicas）</li><li>用于筛选目标Pod的Label Selector</li><li>当Pod的副本数量小于预期数量时，用于创建新Pod的Pod模板（template）</li></ul><p>也就是说通过RC实现了集群中Pod的高可用，减少了传统IT环境中手工运维的工作。</p><p><strong>Have a try</strong></p><blockquote><p>kind：表示要新建对象的类型</p><p>spec.selector：表示需要管理的Pod的label，这里表示包含app: nginx的label的Pod都会被该RC管理</p><p>spec.replicas：表示受此RC管理的Pod需要运行的副本数</p><p>spec.template：表示用于定义Pod的模板，比如Pod名称、拥有的label以及Pod中运行的应用等</p><p>通过改变RC里Pod模板中的镜像版本，可以实现Pod的升级功能</p><p>kubectl apply -f nginx-pod.yaml，此时k8s会在所有可用的Node上，创建3个Pod，并且每个Pod都有一个app: nginx的label，同时每个Pod中都运行了一个nginx容器。</p><p>如果某个Pod发生问题，Controller Manager能够及时发现，然后根据RC的定义，创建一个新的Pod</p><p>扩缩容：kubectl scale rc nginx –replicas=5</p></blockquote><p><strong>example</strong>：</p><ol><li><p>创建名为nginx_replication.yaml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ReplicationController<span class="token key atrule">metadata</span><span class="token punctuation">:</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span> <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token key atrule">selector</span><span class="token punctuation">:</span>   <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx <span class="token key atrule">template</span><span class="token punctuation">:</span>   <span class="token key atrule">metadata</span><span class="token punctuation">:</span>     <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx     <span class="token key atrule">labels</span><span class="token punctuation">:</span>       <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx   <span class="token key atrule">spec</span><span class="token punctuation">:</span>     <span class="token key atrule">containers</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx       <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx       <span class="token key atrule">ports</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre></li><li><p>根据nginx_replication.yaml创建pod</p><pre class=" language-shell"><code class="language-shell">kubectl apply -f nginx_replication.yaml</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221735.png" alt="1575183143264"></p></li><li><p>查看pod</p><pre class=" language-shell"><code class="language-shell">kubectl get pods -o wide  NAME      READY     STATUSnginx-hksg8   1/1     Running   0          44s   192.168.80.195   w2   nginx-q7bw5   1/1     Running   0          44s   192.168.190.67   w1  nginx-zzwzl   1/1     Running   0          44s   192.168.190.68   w1    kubectl get rcNAME    DESIRED   CURRENT   READY   AGEnginx   3         3         3       2m54s</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221737.png" alt="1575183167088"></p></li><li><p>尝试删除一个pod</p><pre class=" language-shell"><code class="language-shell">kubectl delete pods nginx-zzwzlkubectl get pods</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221740.png" alt="1575183189477"></p></li><li><p>对pod进行扩缩容</p><p>rc = ReplicationController 简写</p><pre class=" language-shell"><code class="language-shell">kubectl scale rc nginx --replicas=5kubectl get podsnginx-8fctt   0/1     ContainerCreating   0          2snginx-9pgwk   0/1     ContainerCreating   0          2snginx-hksg8   1/1     Running             0          6m50snginx-q7bw5   1/1     Running             0          6m50snginx-wzqkf   1/1     Running             0          99s</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221743.png" alt="1575183214999"></p></li><li><p>删除pod</p><pre class=" language-shell"><code class="language-shell">kubectl delete -f nginx_replication.yaml</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221746.png" alt="1575183236799"></p></li></ol><h3 id="ReplicaSet-RS"><a href="#ReplicaSet-RS" class="headerlink" title="ReplicaSet(RS)"></a>ReplicaSet(RS)</h3><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/</a></p><pre><code>A ReplicaSet’s purpose is to maintain a stable set of replica Pods running at any given time. As such, it is often used to guarantee the availability of a specified number of identical Pods.</code></pre><p>在Kubernetes v1.2时，RC就升级成了另外一个概念：Replica Set，官方解释为 “<strong>下一代RC</strong>”</p><p>ReplicaSet和RC没有本质的区别，kubectl中绝大部分作用于RC的命令同样适用于RS</p><p>RS与RC唯一的区别是：RS支持基于集合的Label Sel ector（Set-based selector），而RC只支持基于等式的Label Selector（equality-based selector），这使得Replica Set的功能更强</p></blockquote><p><strong>Have a try</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ReplicaSet<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> frontend<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>     <span class="token key atrule">tier</span><span class="token punctuation">:</span> frontend  <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span>tier<span class="token punctuation">,</span><span class="token key atrule">operator</span><span class="token punctuation">:</span> In<span class="token punctuation">,</span><span class="token key atrule">values</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>frontend<span class="token punctuation">]</span><span class="token punctuation">}</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>  <span class="token punctuation">...</span></code></pre><p><code>注意</code>：一般情况下，我们很少单独使用Replica Set，它主要是被Deployment这个更高的资源对象所使用，从而形成一整套Pod创建、删除、更新的编排机制。当我们使用Deployment时，无须关心它是如何创建和维护Replica Set的，这一切都是自动发生的。同时，无需担心跟其他机制的不兼容问题（比如ReplicaSet不支持rolling-update但Deployment支持）。</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/deployment/</a></p><pre><code>A Deployment provides declarative updates for Pods and ReplicaSets.You describe a desired state in a Deployment, and the Deployment Controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments.</code></pre><p>Deployment相对RC最大的一个升级就是我们可以随时知道当前Pod“部署”的进度。</p><p>创建一个Deployment对象来生成对应的Replica Set并完成Pod副本的创建过程</p><p>检查Deploymnet的状态来看部署动作是否完成（Pod副本的数量是否达到预期的值）</p></blockquote><p><strong>example</strong>：</p><ol><li><p>创建nginx_deployment.yaml文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>     <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>     <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>     <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.7.9        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre></li><li><p>根据nginx_deployment.yaml文件创建pod</p><pre class=" language-shell"><code class="language-shell">kubectl apply -f nginx_deployment.yaml</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222211.png" alt="1575185384598"></p></li><li><p>查看pod</p><blockquote><p>kubectl get pods -o wide</p><p>kubectl get deployment</p><p>kubectl get rs</p><p>kubectl get deployment -o wide</p></blockquote><pre class=" language-shell"><code class="language-shell">nginx-deployment-6dd86d77d-f7dxb   1/1     Running   0      22s   192.168.80.198   w2 nginx-deployment-6dd86d77d-npqxj   1/1     Running   0      22s   192.168.190.71   w1 nginx-deployment-6dd86d77d-swt25   1/1     Running   0      22s   192.168.190.70   w1</code></pre><p>nginx-deployment[deployment]-6dd86d77d[replicaset]-f7dxb[pod]<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221812.png" alt="1575185479502"></p></li><li><p>当前nginx的版本</p><pre class=" language-shell"><code class="language-shell">kubectl get deployment -o wideNAME    READY   UP-TO-DATE   AVAILABLE   AGE     CONTAINERS   IMAGES      SELECTORnginx-deployment   3/3         3     3  3m27s      nginx    nginx:1.7.9   app=nginx</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221815.png" alt="1575185549743"></p></li><li><p>更新nginx的image版本</p><pre class=" language-shell"><code class="language-shell">kubectl set image deployment nginx-deployment nginx=nginx:1.9.1</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221820.png" alt="1575185606568"></p></li><li><p>查询 replicaset 信息</p><pre class=" language-shell"><code class="language-shell">kubectl get rs -o wide</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221823.png" alt="1575185728919"></p></li></ol><h2 id="2-Labels-and-Selectors"><a href="#2-Labels-and-Selectors" class="headerlink" title="2 Labels and Selectors"></a>2 Labels and Selectors</h2><blockquote><p>在前面的yaml文件中，看到很多label，顾名思义，就是给一些资源打上标签的</p><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/</a></p><pre><code>Labels are key/value pairs that are attached to objects, such as pods. </code></pre></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx</code></pre><p>表示名称为nginx-pod的pod，有一个label，key为app，value为nginx。</p><p>我们可以将具有同一个label的pod，交给selector管理</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 匹配具有同一个label属性的pod标签</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx           <span class="token key atrule">template</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 定义pod的模板</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx      <span class="token comment" spellcheck="true"># 定义当前pod的label属性，app为key，value为nginx</span>    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.7.9        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><blockquote><p>查看pod的label标签：kubectl get pods –show-labels</p><p><strong>这里可以尝试一下selector匹配不上的结果</strong></p></blockquote><h2 id="3-Namespace"><a href="#3-Namespace" class="headerlink" title="3 Namespace"></a>3 Namespace</h2><blockquote><p>kubectl get pods</p><p>kubectl get pods -n kube-system</p></blockquote><p>比较一下，上述两行命令的输入是否一样，发现不一样，是因为Pod属于不同的Namespace。</p><blockquote><p>查看一下当前的命名空间：kubectl get namespaces/ns</p><pre><code>NAME              STATUS   AGEdefault           Active   27mkube-node-lease   Active   27mkube-public       Active   27mkube-system       Active   27m</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221830.png" alt="1575185965376"></p></blockquote><p>其实说白了，命名空间就是为了隔离不同的资源，比如：Pod、Service、Deployment等。可以在输入命令的时候指定命名空间<code>-n</code>，如果不指定，则使用默认的命名空间：default。</p><h3 id="创建命名空间"><a href="#创建命名空间" class="headerlink" title="创建命名空间"></a>创建命名空间</h3><blockquote><p>myns-namespace.yaml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> myns</code></pre></blockquote><p>kubectl apply -f myns-namespace.yaml</p><p>kubectl get namespaces/ns</p><pre><code>NAME              STATUS   AGEdefault           Active   38mkube-node-lease   Active   38mkube-public       Active   38mkube-system       Active   38mmyns              Active   6s</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221837.png" alt="1575186125206"></p><h3 id="指定命名空间下的资源"><a href="#指定命名空间下的资源" class="headerlink" title="指定命名空间下的资源"></a>指定命名空间下的资源</h3><blockquote><p>比如创建一个pod，属于myns命名空间下</p><p>vi nginx-pod.yaml</p><p>kubectl apply -f nginx-pod.yaml </p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> myns<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre><blockquote><p>查看myns命名空间下的Pod和资源</p><p>kubectl get pods</p><p>kubectl get pods -n myns</p><p>kubectl get all -n myns</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221841.png" alt="1575186334455"></p><p>kubectl get pods –all-namespaces    #查找所有命名空间下的pod</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221844.png" alt="1575186369339"></p></blockquote><h2 id="4-Network"><a href="#4-Network" class="headerlink" title="4 Network"></a>4 Network</h2><h3 id="4-1-同一个Pod中的容器通信"><a href="#4-1-同一个Pod中的容器通信" class="headerlink" title="4.1 同一个Pod中的容器通信"></a>4.1 同一个Pod中的容器通信</h3><blockquote><p>接下来就要说到跟Kubernetes网络通信相关的内容咯</p><p>我们都知道K8S最小的操作单位是Pod，先思考一下同一个Pod中多个容器要进行通信</p><p>由官网的这段话可以看出，同一个pod中的容器是共享网络ip地址和端口号的，通信显然没问题</p><pre><code>Each Pod is assigned a unique IP address. Every container in a Pod shares the network namespace, including the IP address and network ports. </code></pre></blockquote><p>那如果是通过容器的名称进行通信呢？就需要将所有pod中的容器加入到同一个容器的网络中，我们把该容器称作为pod中的pause container。</p><h3 id="4-2-集群内Pod之间的通信"><a href="#4-2-集群内Pod之间的通信" class="headerlink" title="4.2 集群内Pod之间的通信"></a>4.2 集群内Pod之间的通信</h3><blockquote><p>接下来就聊聊K8S最小的操作单元，Pod之间的通信</p><p>我们都之间Pod会有独立的IP地址，这个IP地址是被Pod中所有的Container共享的</p><p>那多个Pod之间的通信能通过这个IP地址吗？</p><p>我认为需要分两个维度：一是集群中同一台机器中的Pod，二是集群中不同机器中的Pod</p></blockquote><p><strong>准备两个pod，一个nginx，一个busybox</strong></p><blockquote><p>nginx_pod.yaml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">labels</span><span class="token punctuation">:</span>     <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>container      <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">ports</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre></blockquote><blockquote><p>busybox_pod.yaml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox  <span class="token key atrule">labels</span><span class="token punctuation">:</span>     <span class="token key atrule">app</span><span class="token punctuation">:</span> busybox<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox     <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox     <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'echo The app is running! &amp;&amp; sleep 3600'</span><span class="token punctuation">]</span></code></pre></blockquote><blockquote><p>将两个pod运行起来，并且查看运行情况</p><p>kubectl apply -f nginx_pod.yaml</p><p>kubectl apply -f busy_pod.yaml</p><p>kubectl get pods -o wide</p><pre><code>NAME      READY  STATUS    RESTARTS   AGE         IP                NODE  busybox    1/1   Running      0       49s    192.168.221.70   worker02-kubeadm-k8s   nginx-pod  1/1   Running      0      7m46s   192.168.14.1     worker01-kubeadm-k8s </code></pre><p><code>发现</code>：nginx-pod的ip为192.168.14.1     busybox-pod的ip为192.168.221.70</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221851.png" alt="1575187408319"></p></blockquote><h4 id="同一个集群中同一台机器"><a href="#同一个集群中同一台机器" class="headerlink" title="同一个集群中同一台机器"></a>同一个集群中同一台机器</h4><blockquote><p>(1)来到worker01：ping 192.168.14.1</p></blockquote><pre class=" language-shell"><code class="language-shell">PING 192.168.14.1 (192.168.14.1) 56(84) bytes of data.64 bytes from 192.168.14.1: icmp_seq=1 ttl=64 time=0.063 ms64 bytes from 192.168.14.1: icmp_seq=2 ttl=64 time=0.048 ms</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221855.png" alt="1575187698429"></p><blockquote><p>(2)来到worker01：curl 192.168.14.1</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Welcome to nginx!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">35</span>em<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> Tahoma, Verdana, Arial, sans-serif<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221858.png" alt="1575187741999"></p><h4 id="同一个集群中不同机器"><a href="#同一个集群中不同机器" class="headerlink" title="同一个集群中不同机器"></a>同一个集群中不同机器</h4><blockquote><p>(1)来到worker02：ping 192.168.14.1</p></blockquote><pre class=" language-shell"><code class="language-shell">[root@worker02-kubeadm-k8s ~]# ping 192.168.14.1PING 192.168.14.1 (192.168.14.1) 56(84) bytes of data.64 bytes from 192.168.14.1: icmp_seq=1 ttl=63 time=0.680 ms64 bytes from 192.168.14.1: icmp_seq=2 ttl=63 time=0.306 ms64 bytes from 192.168.14.1: icmp_seq=3 ttl=63 time=0.688 ms</code></pre><blockquote><p>(2)来到worker02：curl 192.168.14.1，同样可以访问nginx</p></blockquote><blockquote><p>(3)来到master：</p><p>ping/curl 192.168.14.1          访问的是worker01上的nginx-pod</p><p>ping          192.168.221.70     访问的是worker02上的busybox-pod</p></blockquote><blockquote><p>(4)来到worker01：ping 192.168.221.70         访问的是worker02上的busybox-pod</p></blockquote><h4 id="Calico-插件实现集群通信"><a href="#Calico-插件实现集群通信" class="headerlink" title="Calico 插件实现集群通信"></a>Calico 插件实现集群通信</h4><p><strong>How to implement the Kubernetes Cluster networking model–Calico</strong></p><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/cluster-administration/networking/#the-kubernetes-network-model" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/cluster-administration/networking/#the-kubernetes-network-model</a></p></blockquote><ul><li>pods on a node can communicate with all pods on all nodes without NAT</li><li>agents on a node (e.g. system daemons, kubelet) can communicate with all pods on that node</li><li>pods in the host network of a node can communicate with all pods on all nodes without NAT</li></ul><h3 id="4-3-集群内Service-Cluster-IP"><a href="#4-3-集群内Service-Cluster-IP" class="headerlink" title="4.3 集群内Service-Cluster IP"></a>4.3 集群内Service-Cluster IP</h3><blockquote><p>对于上述的Pod虽然实现了集群内部互相通信，但是Pod是不稳定的，比如通过Deployment管理Pod，随时可能对Pod进行扩缩容，这时候Pod的IP地址是变化的。能够有一个固定的IP，使得集群内能够访问。也就是之前在架构描述的时候所提到的，能够把相同或者具有关联的Pod，打上Label，组成Service。而Service有固定的IP，不管Pod怎么创建和销毁，都可以通过Service的IP进行访问</p><p><code>Service官网</code>：<a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/services-networking/service/</a></p><pre><code>An abstract way to expose an application running on a set of Pods as a network service.With Kubernetes you don’t need to modify your application to use an unfamiliar service discovery mechanism. Kubernetes gives Pods their own IP addresses and a single DNS name for a set of Pods, and can load-balance across them.</code></pre></blockquote><p><strong>example</strong>：</p><ol><li><p>创建whoami-deployment.yaml文件，并且apply</p><pre class=" language-yaml"><code class="language-yaml">  <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment  <span class="token key atrule">metadata</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> whoami<span class="token punctuation">-</span>deployment    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> whoami  <span class="token key atrule">spec</span><span class="token punctuation">:</span>    <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>    <span class="token key atrule">selector</span><span class="token punctuation">:</span>      <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> whoami    <span class="token key atrule">template</span><span class="token punctuation">:</span>      <span class="token key atrule">metadata</span><span class="token punctuation">:</span>        <span class="token key atrule">labels</span><span class="token punctuation">:</span>          <span class="token key atrule">app</span><span class="token punctuation">:</span> whoami      <span class="token key atrule">spec</span><span class="token punctuation">:</span>        <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> whoami          <span class="token key atrule">image</span><span class="token punctuation">:</span> jwilder/whoami          <span class="token key atrule">ports</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8000</span></code></pre></li><li><p>查看pod以及service</p><pre class=" language-shell"><code class="language-shell">whoami-deployment-5dd9ff5fd8-22k9n   192.168.221.80   worker02-kubeadm-k8swhoami-deployment-5dd9ff5fd8-vbwzp   192.168.14.6     worker01-kubeadm-k8swhoami-deployment-5dd9ff5fd8-zzf4d   192.168.14.7     worker01-kubeadm-k8s</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221905.png" alt="1575188774308"><br>   kubect get svc:可以发现目前并没有关于whoami的service</p><pre class=" language-shell"><code class="language-shell">  NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE  kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   19h</code></pre><p>   <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221927.png" alt="1575188802934"></p><ol start="3"><li><p>在集群内正常访问</p><pre class=" language-shell"><code class="language-shell">curl 192.168.221.80:8000/192.168.14.6:8000/192.168.14.7:8000</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222001.png" alt="1575188843853"></p></li></ol></li><li><p>创建whoami的service</p><blockquote><p><code>注意</code>：该地址只能在集群内部访问</p><pre class=" language-shell"><code class="language-shell">kubectl expose deployment whoami-deploymentkubectl get svc    删除svc   kubectl delete service whoami-deployment[root@master-kubeadm-k8s ~]# kubectl get svcNAME                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGEkubernetes          ClusterIP   10.96.0.1        <none>        443/TCP    19hwhoami-deployment   ClusterIP   10.105.147.59   <none>        8000/TCP   23s</code></pre><p><strong>可以发现有一个Cluster IP类型的service，名称为whoami-deployment，IP地址为10.101.201.192</strong></p></blockquote><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222033.png" alt="1575189027978"></p></li><li><p>通过Service的Cluster IP访问</p><pre class=" language-shell"><code class="language-shell">  [root@master-kubeadm-k8s ~]# curl 10.105.147.59:8000  I'm whoami-deployment-678b64444d-b2695  [root@master-kubeadm-k8s ~]# curl 10.105.147.59:8000  I'm whoami-deployment-678b64444d-hgdrk  [root@master-kubeadm-k8s ~]# curl 10.105.147.59:8000  I'm whoami-deployment-678b64444d-65t88</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222036.png" alt="1575189069397"></p></li><li><p>具体查看一下whoami-deployment的详情信息，发现有一个Endpoints连接了具体3个Pod</p><pre class=" language-shell"><code class="language-shell">  [root@master-kubeadm-k8s ~]# kubectl describe svc whoami-deployment  Name:              whoami-deployment  Namespace:         default  Labels:            app=whoami  Annotations:       <none>  Selector:          app=whoami  Type:              ClusterIP  IP:                10.105.147.59  Port:              <unset>  8000/TCP  TargetPort:        8000/TCP  Endpoints:         192.168.14.8:8000,192.168.221.81:8000,192.168.221.82:8000  Session Affinity:  None  Events:            <none></code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222041.png" alt="1575189110133"></p></li><li><p>不妨对whoami扩容成5个</p><pre class=" language-shell"><code class="language-shell">  kubectl scale deployment whoami-deployment --replicas=5</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222043.png" alt="1575189313529"></p></li><li><p>再次访问：curl 10.105.147.59:8000<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222045.png" alt="1575189455480"></p></li><li><p>再次查看service具体信息：kubectl describe svc whoami-deployment<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222048.png" alt="1575189524073"></p></li><li><p>其实对于Service的创建，不仅仅可以使用kubectl expose，也可以定义一个yaml文件</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>service<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> MyApp  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">9376</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> Cluster</code></pre><p><code>conclusion</code>：其实Service存在的意义就是为了Pod的不稳定性，而上述探讨的就是关于Service的一种类型Cluster IP，只能供集群内访问</p></li></ol><blockquote><p>以Pod为中心，已经讨论了关于集群内的通信方式，接下来就是探讨集群中的Pod访问外部服务，以及外部服务访问集群中的Pod</p></blockquote><h3 id="4-4-Pod访问外部服务"><a href="#4-4-Pod访问外部服务" class="headerlink" title="4.4 Pod访问外部服务"></a>4.4 Pod访问外部服务</h3><p>比较简单，没太多好说的内容，直接访问即可</p><h3 id="4-5-外部服务访问集群中的Pod"><a href="#4-5-外部服务访问集群中的Pod" class="headerlink" title="4.5 外部服务访问集群中的Pod"></a>4.5 外部服务访问集群中的Pod</h3><h4 id="Service-NodePort"><a href="#Service-NodePort" class="headerlink" title="Service-NodePort"></a>Service-NodePort</h4><blockquote><p>也是Service的一种类型，可以通过NodePort的方式</p><p>说白了，因为外部能够访问到集群的物理机器IP，所以就是在集群中每台物理机器上暴露一个相同的IP，比如32008</p></blockquote><ol><li><p>根据whoami-deployment.yaml创建pod</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> whoami<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> whoami<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> whoami  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> whoami    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> whoami        <span class="token key atrule">image</span><span class="token punctuation">:</span> jwilder/whoami        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8000</span></code></pre></li><li><p>创建NodePort类型的service，名称为whoami-deployment</p><pre class=" language-shell"><code class="language-shell">kubectl delete svc whoami-deploymentkubectl expose deployment whoami-deployment --type=NodePort[root@master-kubeadm-k8s ~]# kubectl get svcNAME                TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGEkubernetes          ClusterIP   10.96.0.1      <none>        443/TCP          21hwhoami-deployment   NodePort    10.99.108.82   <none>        8000:32041/TCP   7s</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222056.png" alt="1575190229723"></p></li><li><p>注意上述的端口32041，实际上就是暴露在集群中物理机器上的端口</p><pre class=" language-shell"><code class="language-shell">lsof -i tcp:32041netstat -ntlp|grep 32041</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222059.png" alt="1575190311317"></p></li><li><p>浏览器通过物理机器的IP访问</p><pre class=" language-shell"><code class="language-shell">http://192.168.0.51:32041curl 192.168.0.61:32041</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222102.png" alt="1575190358797"></p><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222216.png" alt="1575190487401"></p></li></ol><p><code>conclusion</code>：NodePort虽然能够实现外部访问Pod的需求，但是真的好吗？其实不好，占用了各个物理主机上的端口</p><h4 id="Service-LoadBalance"><a href="#Service-LoadBalance" class="headerlink" title="Service-LoadBalance"></a>Service-LoadBalance</h4><p>通常需要第三方云提供商支持，有约束性</p><h4 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h4><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/services-networking/ingress/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/services-networking/ingress/</a></p><pre><code>An API object that manages external access to the services in a cluster, typically HTTP.Ingress can provide load balancing, SSL termination and name-based virtual hosting.</code></pre></blockquote><p><img src="F:/work/kubernetes1117/images/29.png"></p><blockquote><p>可以发现，Ingress就是帮助我们访问集群内的服务的。不过在看Ingress之前，我们还是先以一个案例出发。</p><p>很简单，在K8S集群中部署tomcat</p></blockquote><p>浏览器想要访问这个tomcat，也就是外部要访问该tomcat，用之前的Service-NodePort的方式是可以的，比如暴露一个32008端口，只需要访问192.168.0.61:32008即可。</p><p>vi my-tomcat.yaml</p><p>kubectl apply -f my-tomcat.yaml</p><p>kubectl get pods</p><p>kubectl get deployment</p><p>kubectl get svc</p><p><code>tomcat-service   NodePort    10.105.51.97   &lt;none&gt;        80:31032/TCP   37s</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> tomcat<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> tomcat  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> tomcat    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat        <span class="token key atrule">image</span><span class="token punctuation">:</span> tomcat        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Service<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">-</span>service<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80   </span>    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP    <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> tomcat  <span class="token key atrule">type</span><span class="token punctuation">:</span> NodePort  </code></pre><blockquote><p>显然，Service-NodePort的方式生产环境不推荐使用，那接下来就基于上述需求，使用Ingress实现访问tomcat的需求。</p><p><code>官网Ingress</code>:  <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/services-networking/ingress/</a><br><code>GitHub Ingress Nginx</code>:  <a href="https://github.com/kubernetes/ingress-nginx" target="_blank" rel="noopener">https://github.com/kubernetes/ingress-nginx</a><br><code>Nginx Ingress Controller</code>:  &lt;<a href="https://kubernetes.github.io/ingress-nginx/" target="_blank" rel="noopener">https://kubernetes.github.io/ingress-nginx/</a></p></blockquote><p><strong>example</strong>：</p><ol><li><p>下载 mandatory.yaml </p><p> <a href="https://github.com/kubernetes/ingress-nginx/edit/master/deploy/static/mandatory.yaml" target="_blank" rel="noopener">https://github.com/kubernetes/ingress-nginx/edit/master/deploy/static/mandatory.yaml</a></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>configuration  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> tcp<span class="token punctuation">-</span>services  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> udp<span class="token punctuation">-</span>services  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>serviceaccount  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>clusterrole  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> configmaps      <span class="token punctuation">-</span> endpoints      <span class="token punctuation">-</span> nodes      <span class="token punctuation">-</span> pods      <span class="token punctuation">-</span> secrets    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> list      <span class="token punctuation">-</span> watch  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> nodes    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> services    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get      <span class="token punctuation">-</span> list      <span class="token punctuation">-</span> watch  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> events    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> create      <span class="token punctuation">-</span> patch  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"extensions"</span>      <span class="token punctuation">-</span> <span class="token string">"networking.k8s.io"</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ingresses    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get      <span class="token punctuation">-</span> list      <span class="token punctuation">-</span> watch  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"extensions"</span>      <span class="token punctuation">-</span> <span class="token string">"networking.k8s.io"</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ingresses/status    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> update<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Role<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>role  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> configmaps      <span class="token punctuation">-</span> pods      <span class="token punctuation">-</span> secrets      <span class="token punctuation">-</span> namespaces    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> configmaps    <span class="token key atrule">resourceNames</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># Defaults to "&lt;election-id>-&lt;ingress-class>"</span>      <span class="token comment" spellcheck="true"># Here: "&lt;ingress-controller-leader>-&lt;nginx>"</span>      <span class="token comment" spellcheck="true"># This has to be adapted if you change either parameter</span>      <span class="token comment" spellcheck="true"># when launching the nginx-ingress-controller.</span>      <span class="token punctuation">-</span> <span class="token string">"ingress-controller-leader-nginx"</span>    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get      <span class="token punctuation">-</span> update  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> configmaps    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> create  <span class="token punctuation">-</span> <span class="token key atrule">apiGroups</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">""</span>    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> endpoints    <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> get<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> RoleBinding<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>role<span class="token punctuation">-</span>nisa<span class="token punctuation">-</span>binding  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Role  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>role<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>serviceaccount    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> rbac.authorization.k8s.io/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRoleBinding<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>clusterrole<span class="token punctuation">-</span>nisa<span class="token punctuation">-</span>binding  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token key atrule">roleRef</span><span class="token punctuation">:</span>  <span class="token key atrule">apiGroup</span><span class="token punctuation">:</span> rbac.authorization.k8s.io  <span class="token key atrule">kind</span><span class="token punctuation">:</span> ClusterRole  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>clusterrole<span class="token key atrule">subjects</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> ServiceAccount    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>serviceaccount    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token punctuation">---</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx    <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx      <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app.kubernetes.io/name</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx        <span class="token key atrule">app.kubernetes.io/part-of</span><span class="token punctuation">:</span> ingress<span class="token punctuation">-</span>nginx      <span class="token key atrule">annotations</span><span class="token punctuation">:</span>        <span class="token key atrule">prometheus.io/port</span><span class="token punctuation">:</span> <span class="token string">"10254"</span>        <span class="token key atrule">prometheus.io/scrape</span><span class="token punctuation">:</span> <span class="token string">"true"</span>    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># wait up to five minutes for the drain of connections</span>      <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">300</span>      <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>serviceaccount      <span class="token key atrule">nodeSelector</span><span class="token punctuation">:</span>        <span class="token key atrule">kubernetes.io/os</span><span class="token punctuation">:</span> linux      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller          <span class="token key atrule">image</span><span class="token punctuation">:</span> quay.io/kubernetes<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller/nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller<span class="token punctuation">:</span>0.26.1          <span class="token key atrule">args</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> /nginx<span class="token punctuation">-</span>ingress<span class="token punctuation">-</span>controller            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>configmap=$(POD_NAMESPACE)/nginx<span class="token punctuation">-</span>configuration            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>tcp<span class="token punctuation">-</span>services<span class="token punctuation">-</span>configmap=$(POD_NAMESPACE)/tcp<span class="token punctuation">-</span>services            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>udp<span class="token punctuation">-</span>services<span class="token punctuation">-</span>configmap=$(POD_NAMESPACE)/udp<span class="token punctuation">-</span>services            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>publish<span class="token punctuation">-</span>service=$(POD_NAMESPACE)/ingress<span class="token punctuation">-</span>nginx            <span class="token punctuation">-</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>annotations<span class="token punctuation">-</span>prefix=nginx.ingress.kubernetes.io          <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>            <span class="token key atrule">allowPrivilegeEscalation</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>            <span class="token key atrule">capabilities</span><span class="token punctuation">:</span>              <span class="token key atrule">drop</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> ALL              <span class="token key atrule">add</span><span class="token punctuation">:</span>                <span class="token punctuation">-</span> NET_BIND_SERVICE            <span class="token comment" spellcheck="true"># www-data -> 33</span>            <span class="token key atrule">runAsUser</span><span class="token punctuation">:</span> <span class="token number">33</span>          <span class="token key atrule">env</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAME              <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>                <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>                  <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.name            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> POD_NAMESPACE              <span class="token key atrule">valueFrom</span><span class="token punctuation">:</span>                <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>                  <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.namespace          <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> http              <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>              <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> https              <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">443</span>              <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP          <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>            <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">3</span>            <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>              <span class="token key atrule">path</span><span class="token punctuation">:</span> /healthz              <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10254</span>              <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP            <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>            <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>            <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>            <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">3</span>            <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>              <span class="token key atrule">path</span><span class="token punctuation">:</span> /healthz              <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10254</span>              <span class="token key atrule">scheme</span><span class="token punctuation">:</span> HTTP            <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>            <span class="token key atrule">successThreshold</span><span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>            <span class="token key atrule">preStop</span><span class="token punctuation">:</span>              <span class="token key atrule">exec</span><span class="token punctuation">:</span>                <span class="token key atrule">command</span><span class="token punctuation">:</span>                  <span class="token punctuation">-</span> /wait<span class="token punctuation">-</span>shutdown<span class="token punctuation">---</span></code></pre></li><li><p>以Deployment方式创建Pod，该Pod为Ingress Nginx Controller，要想让外界访问，可以通过Service的NodePort或者HostPort方式，这里选择HostPort，比如指定worker01运行</p><pre class=" language-shell"><code class="language-shell"># 确保nginx-controller运行到w1节点上kubectl label node w1 name=ingress   # 使用HostPort方式运行，需要增加配置hostNetwork: true# 搜索nodeSelector，并且要确保w1节点上的80和443端口没有被占用，镜像拉取需要较长的时间，这块注意一下哦# mandatory.yaml在网盘中的“课堂源码”目录kubectl apply -f mandatory.yaml  kubectl get all -n ingress-nginx</code></pre><p>新增如图所示配置，根据 name=ingress 选择运行的节点，hostNetwork=true 以 HostPort 的方式暴露端口</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222145.png" alt="1575290173251"></p><p>执行 yaml 文件，并查看 namespace 下 pod</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222148.png" alt="1575292088632"></p></li><li><p>查看<strong>w1</strong>的80和443端口</p><pre class=" language-shell"><code class="language-shell">lsof -i tcp:80lsof -i tcp:443</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222151.png" alt="1575291298602"></p></li><li><p>创建tomcat的pod和service</p><blockquote><blockquote><p>记得将之前的tomcat删除：kubectl delete -f my-tomcat.yaml</p></blockquote><pre class=" language-shell"><code class="language-shell">vi tomcat.yamlkubectl apply -f tomcat.yamlkubectl get svc kubectl get pods</code></pre><p>tomcat.yaml 内容：</p></blockquote><p>```yaml<br>apiVersion: apps/v1<br>kind: Deployment<br>metadata:<br> name: tomcat-deployment<br> labels:<br>   app: tomcat<br>spec:<br> replicas: 1<br> selector:<br>   matchLabels:</p><pre><code> app: tomcat</code></pre><p> template:<br>   metadata:</p><pre><code> labels:   app: tomcat</code></pre><p>   spec:</p><pre><code> containers: - name: tomcat   image: tomcat   ports:   - containerPort: 8080</code></pre></li></ol><hr><p>  apiVersion: v1<br>  kind: Service<br>  metadata:<br>    name: tomcat-service<br>  spec:<br>    ports:<br>    - port: 80<br>      protocol: TCP<br>      targetPort: 8080<br>    selector:<br>      app: tomcat</p><pre><code>![1575291906550](https://gitee.com/soulballad/PicGo/raw/master/img//20210308222155.png)5. 创建Ingress以及定义转发规则&gt;```shell&gt;kubectl apply -f my-ingress.yaml&gt;kubectl get ingress&gt;kubectl describe ingress nginx-ingress&gt;```my-ingress.yaml 内容：```yaml#ingressapiVersion: extensions/v1beta1kind: Ingressmetadata:  name: nginx-ingressspec:  rules:  - host: tomcat.jack.com    http:      paths:      - path: /        backend:          serviceName: tomcat-service          servicePort: 80</code></pre><p>  规则说明：访问 tomcat.jack.com 的根目录时，会被转发到下面的 tomcat-service 服务，tomcat服务的地址是 192.168.19.77:8080</p><p>  <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222159.png" alt="1575291562953"></p><ol start="6"><li><p>修改win的hosts文件，添加dns解析<br>```properties</p></li><li><p>168.8.61 tomcat.jack.com</p><h1 id="这里配置-w1-节点的ip和域名对应（实际配置如下）"><a href="#这里配置-w1-节点的ip和域名对应（实际配置如下）" class="headerlink" title="这里配置 w1 节点的ip和域名对应（实际配置如下）"></a>这里配置 w1 节点的ip和域名对应（实际配置如下）</h1></li><li><p>16.11.129   tomcat.jack.com</p><pre><code></code></pre></li><li><p>打开浏览器，访问tomcat.jack.com</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308222203.png" alt="1575292348309"></p></li></ol><p><code>总结</code>：如果以后想要使用Ingress网络，其实只要定义ingress，service和pod即可，前提是要保证 nginx ingress controller 已经配置好了。</p>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-1.卸载k8s</title>
      <link href="posts/9af34d96.html"/>
      <url>posts/9af34d96.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-kubeadm-reset"><a href="#1-kubeadm-reset" class="headerlink" title="1 kubeadm reset"></a>1 <strong>kubeadm reset</strong></h1><p>先在三个节点上都执行 <strong>kubeadm reset</strong>，然后重新初始化主节点，再分别加入从节点</p><pre class=" language-shell"><code class="language-shell">kubeadm reset</code></pre><p>如果可以恢复集群，就不用删除所有文件</p><h1 id="2-删除所有节点"><a href="#2-删除所有节点" class="headerlink" title="2 删除所有节点"></a>2 删除所有节点</h1><p>首先清理运行到k8s群集中的pod，使用，</p><pre class=" language-shell"><code class="language-shell">$ kubectl delete node --all</code></pre><p>然后从主机系统中删除数据卷和备份（如果不需要）。最后，可以使用脚本停止所有k8s服务，</p><pre class=" language-shell"><code class="language-shell">$ for service in kube-apiserver kube-controller-manager kubectl kubelet kube-proxy kube-scheduler; do      systemctl stop $service  done$ yum -y remove kubernetes #if it's registered as a service</code></pre><h1 id="3-删除文件"><a href="#3-删除文件" class="headerlink" title="3 删除文件"></a>3 删除文件</h1><p>删除相关目录</p><pre class=" language-shell"><code class="language-shell">kubeadm reset -fmodprobe -r ipiplsmodrm -rf ~/.kube/rm -rf /etc/kubernetes/rm -rf /etc/systemd/system/kubelet.service.drm -rf /etc/systemd/system/kubelet.servicerm -rf /usr/bin/kube*rm -rf /etc/cnirm -rf /opt/cnirm -rf /var/lib/etcdrm -rf /var/etcd</code></pre>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.K8s集群搭建及使用</title>
      <link href="posts/884d409a.html"/>
      <url>posts/884d409a.html</url>
      
        <content type="html"><![CDATA[<h1 id="01-搭建K8s集群-无需科学上网"><a href="#01-搭建K8s集群-无需科学上网" class="headerlink" title="01 搭建K8s集群[无需科学上网]"></a>01 搭建K8s集群[无需科学上网]</h1><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#installing-kubeadm-kubelet-and-kubectl" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#installing-kubeadm-kubelet-and-kubectl</a></p><p><code>GitHub</code>：<a href="https://github.com/kubernetes/kubeadm" target="_blank" rel="noopener">https://github.com/kubernetes/kubeadm</a></p><p><code>课程中</code>：使用kubeadm搭建一个3台机器组成的k8s集群，1台master节点，2台worker节点</p><p><strong>如果大家机器配置不够，也可以使用在线的，或者minikube的方式或者1个master和1个worker</strong></p><p><code>配置要求</code>：</p><ul><li>One or more machines running one of:<ul><li>Ubuntu 16.04+</li><li>Debian 9+</li><li>CentOS 7【课程中使用】</li><li>Red Hat Enterprise Linux (RHEL) 7</li><li>Fedora 25+</li><li>HypriotOS v1.0.1+</li><li>Container Linux (tested with 1800.6.0)</li></ul></li><li>2 GB or more of RAM per machine (any less will leave little room for your apps)</li><li>2 CPUs or more</li><li>Full network connectivity between all machines in the cluster (public or private network is fine)</li><li>Unique hostname, MAC address, and product_uuid for every node. See here for more details.</li><li>Certain ports are open on your machines. See here for more details.</li><li>Swap disabled. You <strong>MUST</strong> disable swap in order for the kubelet to work properly.</li></ul></blockquote><h2 id="1-1-版本统一"><a href="#1-1-版本统一" class="headerlink" title="1.1 版本统一"></a>1.1 版本统一</h2><ul><li>Docker 18.09.0</li><li>kubeadm-1.14.0-0 </li><li>kubelet-1.14.0-0 </li><li>kubectl-1.14.0-0<ul><li>k8s.gcr.io/kube-apiserver:v1.14.0</li><li>k8s.gcr.io/kube-controller-manager:v1.14.0</li><li>k8s.gcr.io/kube-scheduler:v1.14.0</li><li>k8s.gcr.io/kube-proxy:v1.14.0</li><li>k8s.gcr.io/pause:3.1</li><li>k8s.gcr.io/etcd:3.3.10</li><li>k8s.gcr.io/coredns:1.3.1</li></ul></li><li>calico:v3.9</li></ul><h2 id="1-2-准备3台centos"><a href="#1-2-准备3台centos" class="headerlink" title="1.2 准备3台centos"></a>1.2 准备3台centos</h2><p>大家根据自己的情况来准备centos7的虚拟机。</p><p>要保证彼此之间能够ping通，也就是处于同一个网络中，虚拟机的配置要求上面也描述咯。</p><h2 id="1-3-更新并安装依赖"><a href="#1-3-更新并安装依赖" class="headerlink" title="1.3 更新并安装依赖"></a>1.3 更新并安装依赖</h2><blockquote><p>3台机器都需要执行</p></blockquote><pre class=" language-shell"><code class="language-shell">yum -y updateyum install -y conntrack ipvsadm ipset jq sysstat curl iptables libseccomp</code></pre><blockquote><p>如果提示没有可用软件包 jq，可按如下操作：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221317.png" alt="image-20191208150622181"></p><pre class=" language-shell"><code class="language-shell">wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmrpm -ivh epel-release-latest-7.noarch.rpmyum install -y jq</code></pre></blockquote><h2 id="1-4-安装Docker"><a href="#1-4-安装Docker" class="headerlink" title="1.4 安装Docker"></a>1.4 安装Docker</h2><blockquote><p>根据之前学习的Docker方式</p><p>在每一台机器上都安装好Docker，版本为18.09.0</p><ol><li>安装必要的依赖<pre class=" language-shell"><code class="language-shell">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></pre></li><li>设置docker仓库<pre class=" language-shell"><code class="language-shell">`添加软件源信息`sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo`更新yum缓存`sudo yum makecache fast</code></pre> 【需要设置一下阿里云镜像加速器】<pre class=" language-shell"><code class="language-shell">sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json <<-'EOF'{"registry-mirrors": ["https://ty2xkivr.mirror.aliyuncs.com"]}EOFsudo systemctl daemon-reload</code></pre></li><li>安装docker<pre class=" language-shell"><code class="language-shell">yum install -y docker-ce-18.09.0 docker-ce-cli-18.09.0 containerd.io</code></pre></li><li>启动docker<pre class=" language-shell"><code class="language-shell">sudo systemctl start docker && sudo systemctl enable docker</code></pre></li></ol></blockquote><h2 id="1-5-修改hosts文件"><a href="#1-5-修改hosts文件" class="headerlink" title="1.5 修改hosts文件"></a>1.5 修改hosts文件</h2><blockquote><p>(1)master</p></blockquote><pre class=" language-shell"><code class="language-shell"># 设置master的hostname，并且修改hosts文件sudo hostnamectl set-hostname mvi /etc/hosts192.168.8.51 m192.168.8.61 w1192.168.8.62 w2</code></pre><blockquote><p>(2)两个worker</p></blockquote><pre class=" language-shell"><code class="language-shell"># 设置worker01/02的hostname，并且修改hosts文件sudo hostnamectl set-hostname w1sudo hostnamectl set-hostname w2vi /etc/hosts192.168.8.51 m192.168.8.61 w1192.168.8.62 w2</code></pre><blockquote><p>(3)使用ping测试一下</p></blockquote><h2 id="1-6-系统基础前提配置"><a href="#1-6-系统基础前提配置" class="headerlink" title="1.6 系统基础前提配置"></a>1.6 系统基础前提配置</h2><pre class=" language-shell"><code class="language-shell">01 `关闭防火墙`    systemctl stop firewalld && systemctl disable firewalld02 `关闭selinux`    setenforce 0    sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config03 `关闭swap`    swapoff -a    sed -i '/swap/s/^\(.*\)$/#\1/g' /etc/fstab04 `配置iptables的ACCEPT规则`    iptables -F && iptables -X && iptables \    -F -t nat && iptables -X -t nat && iptables -P FORWARD ACCEPT05 `设置系统参数`# ===================================================================================cat <<EOF >  /etc/sysctl.d/k8s.confnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOFsysctl --system#====================================================================================</code></pre><h2 id="1-7-Installing-kubeadm-kubelet-and-kubectl"><a href="#1-7-Installing-kubeadm-kubelet-and-kubectl" class="headerlink" title="1.7 Installing kubeadm, kubelet and kubectl"></a>1.7 Installing kubeadm, kubelet and kubectl</h2><ol><li><p>配置yum源</p><pre class=" language-shell"><code class="language-shell">cat <<EOF > /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF</code></pre></li><li><p>安装kubeadm&amp;kubelet&amp;kubectl</p><pre class=" language-shell"><code class="language-shell">yum install -y kubeadm-1.14.0-0 kubelet-1.14.0-0 kubectl-1.14.0-0</code></pre></li><li><p>docker和k8s设置同一个cgroup</p><blockquote><ol><li>修改 docker 配置文件<br> vi /etc/docker/daemon.json<br>添加如下内容：<pre class=" language-properties"><code class="language-properties"><span class="token attr-name">"exec-opts"</span><span class="token punctuation">:</span> <span class="token attr-value">["native.cgroupdriver=systemd"],</span></code></pre><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221518.png" alt="1574950053644"><pre class=" language-shell"><code class="language-shell"># 重启dockersystemctl restart docker</code></pre></li><li>kubelet，这边如果发现输出directory not exist，也说明是没问题的，大家继续往下进行即可<pre class=" language-shell"><code class="language-shell"> sed -i "s/cgroup-driver=systemd/cgroup-driver=cgroupfs/g" /etc/systemd/system/kubelet.service.d/10-kubeadm.conf systemctl enable kubelet && systemctl start kubelet</code></pre></li></ol></blockquote></li></ol><h2 id="1-8-proxy-pause-scheduler等国内镜像"><a href="#1-8-proxy-pause-scheduler等国内镜像" class="headerlink" title="1.8 proxy/pause/scheduler等国内镜像"></a>1.8 proxy/pause/scheduler等国内镜像</h2><ol><li><p>查看kubeadm使用的镜像</p><blockquote><pre class=" language-shell"><code class="language-shell">kubeadm config images list</code></pre><p> 可以发现这里都是国外的镜像</p></blockquote><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">k8s.gcr.io/kube-apiserver</span><span class="token punctuation">:</span><span class="token attr-value">v1.14.0</span><span class="token attr-name">k8s.gcr.io/kube-controller-manager</span><span class="token punctuation">:</span><span class="token attr-value">v1.14.0</span><span class="token attr-name">k8s.gcr.io/kube-scheduler</span><span class="token punctuation">:</span><span class="token attr-value">v1.14.0</span><span class="token attr-name">k8s.gcr.io/kube-proxy</span><span class="token punctuation">:</span><span class="token attr-value">v1.14.0</span><span class="token attr-name">k8s.gcr.io/pause</span><span class="token punctuation">:</span><span class="token attr-value">3.1</span><span class="token attr-name">k8s.gcr.io/etcd</span><span class="token punctuation">:</span><span class="token attr-value">3.3.10</span><span class="token attr-name">k8s.gcr.io/coredns</span><span class="token punctuation">:</span><span class="token attr-value">1.3.1</span></code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221524.png" alt="1574950179450"></p></li><li><p>解决国外镜像不能访问的问题</p><ul><li>创建kubeadm.sh脚本，用于拉取镜像/打tag/删除原有镜像<pre class=" language-shell"><code class="language-shell">vi kubeadm.sh</code></pre></li></ul><p>kubeadm.sh 内容如下：</p><pre class=" language-shell"><code class="language-shell">#!/bin/bashset -eKUBE_VERSION=v1.14.0KUBE_PAUSE_VERSION=3.1ETCD_VERSION=3.3.10CORE_DNS_VERSION=1.3.1GCR_URL=k8s.gcr.ioALIYUN_URL=registry.cn-hangzhou.aliyuncs.com/google_containersimages=(kube-proxy:${KUBE_VERSION}kube-scheduler:${KUBE_VERSION}kube-controller-manager:${KUBE_VERSION}kube-apiserver:${KUBE_VERSION}pause:${KUBE_PAUSE_VERSION}etcd:${ETCD_VERSION}coredns:${CORE_DNS_VERSION})for imageName in ${images[@]} ; do  docker pull $ALIYUN_URL/$imageName  docker tag  $ALIYUN_URL/$imageName $GCR_URL/$imageName  docker rmi $ALIYUN_URL/$imageNamedone</code></pre></li><li><p>运行脚本和查看镜像</p><pre class=" language-shell"><code class="language-shell"># 运行脚本sh ./kubeadm.sh# 查看镜像docker images</code></pre></li><li><p>将这些镜像推送到自己的阿里云仓库【可选，根据自己实际的情况】</p><pre class=" language-shell"><code class="language-shell"># 登录自己的阿里云仓库docker login --username=xxx registry.cn-hangzhou.aliyuncs.com密码：******vi kubeadm-push-aliyun.sh</code></pre><pre class=" language-shell"><code class="language-shell">#!/bin/bashset -eKUBE_VERSION=v1.14.0KUBE_PAUSE_VERSION=3.1ETCD_VERSION=3.3.10CORE_DNS_VERSION=1.3.1GCR_URL=k8s.gcr.ioALIYUN_URL=registry.cn-shenzhen.aliyuncs.com/soulballedimages=(kube-proxy:${KUBE_VERSION}kube-scheduler:${KUBE_VERSION}kube-controller-manager:${KUBE_VERSION}kube-apiserver:${KUBE_VERSION}pause:${KUBE_PAUSE_VERSION}etcd:${ETCD_VERSION}coredns:${CORE_DNS_VERSION})for imageName in ${images[@]} ; do  docker tag $GCR_URL/$imageName $ALIYUN_URL/$imageName  docker push $ALIYUN_URL/$imageName  docker rmi $ALIYUN_URL/$imageNamedone</code></pre></li><li><p>运行脚本</p><pre class=" language-shell"><code class="language-shell">sh ./kubeadm-push-aliyun.sh</code></pre></li></ol><h2 id="1-9-kube-init初始化master"><a href="#1-9-kube-init初始化master" class="headerlink" title="1.9 kube init初始化master"></a>1.9 kube init初始化master</h2><blockquote><p>官网： <a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a></p></blockquote><p>流程</p><ol><li><p>kube init 流程</p><blockquote><ol><li>进行一系列检查，以确定这台机器可以部署kubernetes</li><li>生成kubernetes对外提供服务所需要的各种证书可对应目录<br>/etc/kubernetes/pki/*</li><li>为其他组件生成访问kube-ApiServer所需的配置文件<br>ls /etc/kubernetes/<br>admin.conf  controller-manager.conf  kubelet.conf  scheduler.conf    </li><li>为 Master组件生成Pod配置文件。<br>ls /etc/kubernetes/manifests/*.yaml<br>kube-apiserver.yaml<br>kube-controller-manager.yaml<br>kube-scheduler.yaml    </li><li>生成etcd的Pod YAML文件。<br>ls /etc/kubernetes/manifests/*.yaml<br>kube-apiserver.yaml<br>kube-controller-manager.yaml<br>kube-scheduler.yaml<br>etcd.yaml    </li><li>一旦这些 YAML 文件出现在被 kubelet 监视的/etc/kubernetes/manifests/目录下，kubelet就会自动创建这些yaml文件定义的pod，即master组件的容器。master容器启动后，kubeadm会通过检查localhost：6443/healthz这个master组件的健康状态检查URL，等待master组件完全运行起来</li><li>为集群生成一个bootstrap token</li><li>将ca.crt等 Master节点的重要信息，通过ConfigMap的方式保存在etcd中，工后续部署node节点使用</li><li>最后一步是安装默认插件，kubernetes默认kube-proxy和DNS两个插件是必须安装的</li></ol></blockquote></li><li><p>初始化master节点</p><blockquote><p>官网：<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/</a></p><p><code>注意</code>：<strong>此操作是在主节点上进行</strong></p></blockquote><pre class=" language-shell"><code class="language-shell"># 本地有镜像kubeadm init --kubernetes-version=1.14.0 --apiserver-advertise-address=172.16.11.128 --pod-network-cidr=10.244.0.0/16`【若要重新初始化集群状态：kubeadm reset，然后再进行上述操作】`</code></pre><p> <strong>记得保存好最后kubeadm join的信息</strong><br> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221535.png" alt="1575171669509"></p><pre class=" language-shell"><code class="language-shell"># ================================================================================Your Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:  mkdir -p $HOME/.kube      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config    sudo chown $(id -u):$(id -g) $HOME/.kube/configYou should now deploy a pod network to the cluster.    Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:    https://kubernetes.io/docs/concepts/cluster-administration/addons/Then you can join any number of worker nodes by running the following on each as root:kubeadm join 172.16.11.128:6443 --token 2wmfq6.wqdr6h7yf6qi8jhx \        --discovery-token-ca-cert-hash sha256:1c937057679de26fb044fc352bc05426719f65c85fbebeeb650a6c271b176789# ================================================================================</code></pre></li><li><p>根据日志提示</p><pre class=" language-shell"><code class="language-shell">mkdir -p $HOME/.kubesudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/configsudo chown $(id -u):$(id -g) $HOME/.kube/config</code></pre><p> <strong>此时kubectl cluster-info查看一下是否成功</strong></p></li><li><p>查看pod验证一下</p><blockquote><p>等待一会儿，同时可以发现像etc，controller，scheduler等组件都以pod的方式安装成功了</p><p><code>注意</code>：coredns没有启动，需要安装网络插件</p></blockquote><pre class=" language-shell"><code class="language-shell">kubectl get pods -n kube-system 【查看kube-system的pods】kubectl get pods --all-namespaces 【查看所有pods】</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221540.png" alt="1575172376599"></p><pre class=" language-shell"><code class="language-shell">#=================================================================================NAME                        READY   STATUS    RESTARTS   AGEcoredns-fb8b8dccf-f7g6g     0/1     Pending   0          7m30scoredns-fb8b8dccf-hx765     0/1     Pending   0          7m30setcd-m                      1/1     Running   0          6m30skube-apiserver-m            1/1     Running   0          6m36skube-controller-manager-m   1/1     Running   0          6m42skube-proxy-w9m72            1/1     Running   0          7m30skube-scheduler-m            1/1     Running   0          6m24s#=================================================================================</code></pre></li><li><p>健康检查</p><pre class=" language-shell"><code class="language-shell">curl -k https://localhost:6443/healthz</code></pre><pre class=" language-shell"><code class="language-shell">#==================================================================================[root@master-kubeadm-k8s ~]# curl -k https://localhost:6443/healthzok#==================================================================================</code></pre></li></ol><h2 id="1-10-部署calico网络插件"><a href="#1-10-部署calico网络插件" class="headerlink" title="1.10 部署calico网络插件"></a>1.10 部署calico网络插件</h2><blockquote><p>选择网络插件：<a href="https://kubernetes.io/docs/concepts/cluster-administration/addons/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/cluster-administration/addons/</a></p><p>calico网络插件：<a href="https://docs.projectcalico.org/v3.9/getting-started/kubernetes/" target="_blank" rel="noopener">https://docs.projectcalico.org/v3.9/getting-started/kubernetes/</a></p></blockquote><blockquote><p><code>calico，同样在master节点上操作</code></p></blockquote><pre class=" language-shell"><code class="language-shell"># 选择网络插件    https://kubernetes.io/docs/concepts/cluster-administration/addons/# calico网络插件    https://docs.projectcalico.org/v3.9/getting-started/kubernetes/# 注意：calico，同样在master节点上操作01 `可以先手动pull一下` 【可能拉取较慢】    curl https://docs.projectcalico.org/v3.9/manifests/calico.yaml | grep image 【版本会变化，需要根据实际情况拉取镜像】# =================================================================================          image: calico/cni:v3.9.3          image: calico/pod2daemon-flexvol:v3.9.3          image: calico/node:v3.9.3          image: calico/kube-controllers:v3.9.3# ===================================================================================    `拉取官方镜像`    docker pull calico/cni:v3.9.3    docker pull calico/pod2daemon-flexvol:v3.9.3    docker pull calico/node:v3.9.3    docker pull calico/kube-controllers:v3.9.3    `官方镜像拉取太慢，用Jack老师的阿里云镜像`    docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/kube-controllers:v3.9.3    docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/cni:v3.9.3    docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/pod2daemon-flexvol:v3.9.3    docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/node:v3.9.3    `打tag`    docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/kube-controllers:v3.9.3 calico/kube-controllers:v3.9.3    docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/cni:v3.9.3 calico/cni:v3.9.3    docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/pod2daemon-flexvol:v3.9.3 calico/pod2daemon-flexvol:v3.9.3    docker tag registry.cn-hangzhou.aliyuncs.com/itcrazy2016/node:v3.9.3 calico/node:v3.9.3    `删除registry.cn-hangzhou.aliyuncs.com/itcrazy2016/格式的镜像`     # 注意：打tag不会改变imageId，会删除calico的镜像    # 慎用这条命令，会把tag后的镜像一起删除    docker rmi -f $(docker images registry.cn-hangzhou.aliyuncs.com/itcrazy2016/* -aq)02 `在k8s中安装calico`    yum install -y wget    wget https://docs.projectcalico.org/v3.9/manifests/calico.yaml    kubectl apply -f calico.yaml03 `确认一下calico是否安装成功`    kubectl get pods --all-namespaces -w 【实时查看所有的Pods】</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221550.png" alt="1575173337264"></p><h2 id="1-11-kube-join"><a href="#1-11-kube-join" class="headerlink" title="1.11 kube join"></a>1.11 kube join</h2><blockquote><p><strong>记得保存初始化master节点的最后打印信息【注意这边大家要自己的，下面我的只是一个参考】</strong></p></blockquote><ol><li><p>在woker01和worker02上执行上述命令</p><pre class=" language-shell"><code class="language-shell">kubeadm join 172.16.11.128:6443 --token 2wmfq6.wqdr6h7yf6qi8jhx \    --discovery-token-ca-cert-hash sha256:1c937057679de26fb044fc352bc05426719f65c85fbebeeb650a6c271b176789</code></pre><p>可能出现这种错误</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221557.png" alt="1575173916251"></p><p><a href="https://blog.csdn.net/an_zhenwei/article/details/19152739" target="_blank" rel="noopener">https://blog.csdn.net/an_zhenwei/article/details/19152739</a></p><p>最终成功结果如下所示：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221559.png" alt="1575173722465"></p></li><li><p>在master节点上检查集群信息</p><pre class=" language-shell"><code class="language-shell">kubectl get nodes# 最开始状态可能是NotReady，稍等一会会变成ReadyNAME                   STATUS   ROLES    AGE     VERSIONmaster-kubeadm-k8s     Ready    master   19m     v1.14.0worker01-kubeadm-k8s   Ready    <none>   3m6s    v1.14.0worker02-kubeadm-k8s   Ready    <none>   2m41s   v1.14.0</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221604.png" alt="1575173838201"></p></li></ol><h2 id="1-12-再次体验Pod"><a href="#1-12-再次体验Pod" class="headerlink" title="1.12 再次体验Pod"></a>1.12 再次体验Pod</h2><ol><li>定义 pod.yml 文件，比如 pod_nginx_rs.yaml<pre class=" language-yml"><code class="language-yml">cat > pod_nginx_rs.yaml <<EOFapiVersion: apps/v1kind: ReplicaSetmetadata:  name: nginx  labels:    tier: frontendspec:  replicas: 3  selector:    matchLabels:      tier: frontend  template:    metadata:      name: nginx      labels:        tier: frontend    spec:      containers:      - name: nginx        image: nginx        ports:        - containerPort: 80EOF</code></pre></li><li>根据pod_nginx_rs.yml文件创建pod<pre class=" language-shell"><code class="language-shell">kubectl apply -f pod_nginx_rs.yaml</code></pre></li><li>查看pod<pre class=" language-shell"><code class="language-shell">kubectl get podskubectl get pods -o widekubectl describe pod nginx</code></pre></li><li>感受通过rs将pod扩容<pre class=" language-shell"><code class="language-shell">kubectl scale rs nginx --replicas=5kubectl get pods -o wide</code></pre></li><li>删除pod<pre class=" language-shell"><code class="language-shell">kubectl delete -f pod_nginx_rs.yaml</code></pre></li></ol><h1 id="02-Basic"><a href="#02-Basic" class="headerlink" title="02 Basic"></a>02 Basic</h1><h2 id="2-1-yaml文件"><a href="#2-1-yaml文件" class="headerlink" title="2.1 yaml文件"></a>2.1 yaml文件</h2><h3 id="2-1-1-简介"><a href="#2-1-1-简介" class="headerlink" title="2.1.1 简介"></a>2.1.1 简介</h3><p>YAML（IPA: /ˈjæməl/）是一个可读性高的语言，参考了XML、C、Python等。</p><p>理解：Yet Another Markup Language</p><p>后缀：可以是.yml或者是.yaml，更加推荐.yaml，其实用任意后缀都可以，只是阅读性不强</p><h3 id="2-1-2-基础"><a href="#2-1-2-基础" class="headerlink" title="2.1.2 基础"></a>2.1.2 基础</h3><ul><li>区分大小写</li><li>缩进表示层级关系，相同层级的元素左对齐</li><li>缩进只能使用空格，不能使用TAB</li><li>“#”表示当前行的注释</li><li>是JSON文件的超级，两个可以转换</li><li>—表示分隔符，可以在一个文件中定义多个结构</li><li>使用key: value，其中”:”和value之间要有一个英文空格</li></ul><h3 id="2-1-3-Maps"><a href="#2-1-3-Maps" class="headerlink" title="2.1.3 Maps"></a>2.1.3 Maps</h3><h4 id="2-1-3-1-简单"><a href="#2-1-3-1-简单" class="headerlink" title="2.1.3.1 简单"></a>2.1.3.1 简单</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod</code></pre><blockquote><p>—表示分隔符，可选。要定义多个结构一定要分隔</p><p>apiVersion表示key，v1表示value，英文”:”后面要有一个空格</p><p>kind表示key，Pod表示value</p><p>也可以这样写apiVersion: “v1”</p><p><code>转换为JSON格式</code></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"v1"</span><span class="token punctuation">,</span><span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Pod"</span><span class="token punctuation">}</span></code></pre></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx</code></pre><h4 id="2-1-2-2-复杂"><a href="#2-1-2-2-复杂" class="headerlink" title="2.1.2.2 复杂"></a>2.1.2.2 复杂</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx</code></pre><blockquote><p>metadata表示key，下面的内容表示value，该value中包含两个直接的key：name和labels</p><p>name表示key，nginx-deployment表示value</p><p>labels表示key，下面的表示value，这个值又是一个map</p><p>app表示key，nginx表示value</p><p>相同层级的记得使用空格缩进，左对齐</p><p><code>转换为JSON格式</code></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"apps/v1"</span><span class="token punctuation">,</span><span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Deployment"</span><span class="token punctuation">,</span><span class="token property">"metadata"</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"nginx-deployment"</span><span class="token punctuation">,</span>         <span class="token property">"labels"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"app"</span><span class="token operator">:</span> <span class="token string">"nginx"</span>                   <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><h3 id="2-1-4-Lists"><a href="#2-1-4-Lists" class="headerlink" title="2.1.4 Lists"></a>2.1.4 Lists</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>pod  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>container01    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.28</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>container02    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.28</span></code></pre><blockquote><p>containers表示key，下面的表示value，其中value是一个数组</p><p>数组中有两个元素，每个元素里面包含name和image</p><p>image表示key，myapp-container表示value</p><p><code>转换成JSON格式</code></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"apiVersion"</span><span class="token operator">:</span> <span class="token string">"v1"</span><span class="token punctuation">,</span><span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"Pod"</span><span class="token punctuation">,</span><span class="token property">"metadata"</span><span class="token operator">:</span> <span class="token punctuation">{</span>           <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"myapp"</span><span class="token punctuation">,</span>           <span class="token property">"labels"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                       <span class="token property">"app"</span><span class="token operator">:</span> <span class="token string">"myapp"</span>                     <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">"spec"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"containers"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                 <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"myapp-container01"</span><span class="token punctuation">,</span>                 <span class="token property">"image"</span><span class="token operator">:</span> <span class="token string">"busybox:1.28"</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                 <span class="token punctuation">{</span>                 <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"myapp-container02"</span><span class="token punctuation">,</span>                 <span class="token property">"image"</span><span class="token operator">:</span> <span class="token string">"busybox:1.28"</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><h3 id="2-1-5-找个k8s的yaml文件"><a href="#2-1-5-找个k8s的yaml文件" class="headerlink" title="2.1.5 找个k8s的yaml文件"></a>2.1.5 找个k8s的yaml文件</h3><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/reference/" target="_blank" rel="noopener">https://kubernetes.io/docs/reference/</a></p></blockquote><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># yaml格式对于Pod的定义：</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1          <span class="token comment" spellcheck="true">#必写，版本号，比如v1</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod               <span class="token comment" spellcheck="true">#必写，类型，比如Pod</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>               <span class="token comment" spellcheck="true">#必写，元数据</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx           <span class="token comment" spellcheck="true">#必写，表示pod名称</span>  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default    <span class="token comment" spellcheck="true">#表示pod名称属于的命名空间</span>  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx                  <span class="token comment" spellcheck="true">#自定义标签名字</span><span class="token key atrule">spec</span><span class="token punctuation">:</span>                           <span class="token comment" spellcheck="true">#必写，pod中容器的详细定义</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true">#必写，pod中容器列表</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx                 <span class="token comment" spellcheck="true">#必写，容器名称</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx                <span class="token comment" spellcheck="true">#必写，容器的镜像名称</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80         </span><span class="token comment" spellcheck="true">#表示容器的端口</span></code></pre><h2 id="2-2-Container"><a href="#2-2-Container" class="headerlink" title="2.2 Container"></a>2.2 Container</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/containers/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/containers/</a></p></blockquote><h3 id="2-2-1-Docker世界中"><a href="#2-2-1-Docker世界中" class="headerlink" title="2.2.1 Docker世界中"></a>2.2.1 Docker世界中</h3><p>可以通过docker run运行一个容器</p><p>或者定义一个yml文件，本机使用docker-compose，多机通过docker swarm创建</p><h3 id="2-2-2-K8S世界中"><a href="#2-2-2-K8S世界中" class="headerlink" title="2.2.2 K8S世界中"></a>2.2.2 K8S世界中</h3><p>同样以一个yaml文件维护，container运行在pod中</p><h2 id="2-3-Pod"><a href="#2-3-Pod" class="headerlink" title="2.3 Pod"></a>2.3 Pod</h2><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/</a></p></blockquote><h3 id="2-3-1-What-is-Pod"><a href="#2-3-1-What-is-Pod" class="headerlink" title="2.3.1 What is Pod"></a>2.3.1 What is Pod</h3><pre><code>A Pod is the basic execution unit of a Kubernetes applicationA Pod encapsulates an application’s container (or, in some cases, multiple containers), storage resources, a unique network IP, and options that govern how the container(s) should run</code></pre><h3 id="2-3-2-Pod初体验"><a href="#2-3-2-Pod初体验" class="headerlink" title="2.3.2 Pod初体验"></a>2.3.2 Pod初体验</h3><ol><li><p>创建一个pod的yaml文件，名称为nginx_pod.yaml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre></li><li><p>根据该nginx_pod.yaml文件创建pod</p><pre class=" language-shell"><code class="language-shell">kubectl apply -f nginx_pod.yaml</code></pre></li><li><p>查看pod</p><ol><li><p>kubectl get pods</p><pre class=" language-shell"><code class="language-shell">NAME        READY   STATUS    RESTARTS   AGEnginx-pod   1/1     Running   0          29s</code></pre><p> <img src="E:\笔记\自己整理\typora-user-images\1575176078233.png" alt="1575176078233"></p></li><li><p>kubectl get pods -o wide</p><pre class=" language-shell"><code class="language-shell">NAME       READY     STATUS   RESTARTS   AGE             IP             NODE   nginx-pod   1/1     Running      0       40m       192.168.80.194        w2 </code></pre><p> <img src="E:\笔记\自己整理\typora-user-images\1575176097117.png" alt="1575176097117"></p></li><li><p>kubectl describe pod nginx-pod</p><pre class=" language-shell"><code class="language-shell">Name:               nginx-podNamespace:          defaultPriority:           0PriorityClassName:  <none>Node:               w2/192.168.0.62Start Time:         Sun, 06 Oct 2019 20:45:35 +0000Labels:             app=nginxAnnotations:        cni.projectcalico.org/podIP: 192.168.80.194/32                    kubectl.kubernetes.io/last-applied-configuration:                      {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"app":"nginx"},"name":"nginx-pod","namespace":"default"},"spec":{"c...Status:             RunningIP:                 192.168.80.194Containers:  nginx-container:    Container ID:   docker://eb2fd0b2906f53e9892e22a6fd791c9ac68fb8e5efce3bbf94ec12bae96e1984    Image:          nginx    Image ID:       docker-pullable:/</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221627.png" alt="1575176570319"></p></li></ol></li><li><p>可以发现该pod运行在worker02节点上<br> 于是来到worker02节点，docker ps一下</p><pre class=" language-shell"><code class="language-shell">CONTAINER ID  IMAGE  COMMAND                    CREATED        STATUS   PORTS   NAMESeb2fd0b2906f  nginx  "nginx -g 'daemon of…"   6 minutes ago       Up 6 minutes           k8s_nginx-container_nginx-pod_default_3ee0706d-e87a-11e9-a904-5254008afee6_0</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221632.png" alt="1575176186190"><br> 不妨进入该容器试试[可以发现只有在worker02上有该容器，因为pod运行在worker02上]：<br> docker exec -it k8s_nginx-container_nginx-pod_default_3ee0706d-e87a-11e9-a904-5254008afee6_0 bash</p><pre class=" language-shell"><code class="language-shell">root@nginx-pod:/#</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221636.png" alt="1575176229999"></p></li><li><p>访问nginx容器</p><pre class=" language-shell"><code class="language-shell">curl 192.168.80.194    # OK，并且在任何一个集群中的Node上访问都成功</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221639.png" alt="1575176286921"></p></li><li><p>删除Pod</p><pre class=" language-shell"><code class="language-shell">kubectl delete -f nginx_pod.yamlkubectl get pods</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221642.png" alt="1575176337465"></p></li></ol><h3 id="2-3-3-Storage-and-Networking"><a href="#2-3-3-Storage-and-Networking" class="headerlink" title="2.3.3 Storage and Networking"></a>2.3.3 Storage and Networking</h3><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/#networking" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/#networking</a></p></blockquote><ul><li>Networking</li></ul><pre><code>Each Pod is assigned a unique IP address. Every container in a Pod shares the network namespace, including the IP address and network ports. </code></pre><blockquote><p><code>官网</code>：<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/#storage" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/#storage</a></p></blockquote><ul><li>Storage</li></ul><pre><code>A Pod can specify a set of shared storage Volumes. All containers in the Pod can ccess the shared volumes, allowing those containers to share data. </code></pre>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.K8s初体验</title>
      <link href="posts/c21efa77.html"/>
      <url>posts/c21efa77.html</url>
      
        <content type="html"><![CDATA[<h1 id="K8S核心组件和架构图"><a href="#K8S核心组件和架构图" class="headerlink" title="K8S核心组件和架构图"></a>K8S核心组件和架构图</h1><blockquote><p>K8S Docs Concepts：<a href="https://kubernetes.io/docs/concepts/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/</a></p></blockquote><ol><li><p>先以container为起点，k8s既然是容器编排工具，那么一定会有container</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308220807.png" alt="1574768918418"></p></li><li><p>那k8s如何操作这些container呢？从感性的角度来讲，得要有点逼格，k8s不想直接操作 container，因为操作container的事情是docker来做的，k8s中要有自己的最小操作单位，称之为Pod 说白了，Pod就是一个或多个Container的组合</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308220809.png" alt="1574768937480"></p><p><code>看看官网怎么描述的</code> ：<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/pods/pod/</a></p><blockquote><p>A Pod (as in a pod of whales or pea pod) is a group of one or more containers (such as Docker containers),  with shared storage/network, and a specification for how to run the containers. </p></blockquote></li><li><p>那Pod的维护谁来做呢？那就是ReplicaSet，通过selector来进行管理</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308220818.png" alt="1574768961033"></p><p><code>看看官网怎么描述的</code> ：<a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/</a></p><blockquote><p>A ReplicaSet is defined with fields, including a selector that specifies how to identify Pods it can acquire, a number of replicas indicating how many Pods it should be maintaining, and a pod template specifying the data of new Pods it should create to meet the number of replicas criteria.</p></blockquote></li><li><p>Pod和ReplicaSet的状态如何维护和监测呢？Deployment</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308220832.png" alt="1574769005569"></p><p><code>官网是如何描述的</code> ：<a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/deployment/</a></p><blockquote><p>A Deployment controller provides declarative updates for Pods and ReplicaSets. </p><p>You describe a desired state in a Deployment, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments. </p></blockquote></li><li><p>不妨把相同或者有关联的Pod分门别类一下，那怎么分门别类呢？Label</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308220858.png" alt="1574769061160"></p><p><code>官网是如何描述的</code> ：<a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/</a></p><blockquote><p>Labels are key/value pairs that are attached to objects, such as pods.</p></blockquote></li><li><p>具有相同label的service要是能够有个名称就好了，Service</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308220920.png" alt="1574769094822"></p><p><code>看官网上怎么说</code> ：<a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/services-networking/service/</a></p><blockquote><p>An abstract way to expose an application running on a set of Pods as a network service.</p><p>With Kubernetes you don’t need to modify your application to use an unfamiliar service discovery mechanism. Kubernetes gives Pods their own IP addresses and a single DNS name for a set of Pods, and can load-balance across them.</p></blockquote></li><li><p>上述说了这么多，Pod运行在哪里呢？当然是机器咯，比如一台centos机器，我们把这个机器称作为Node</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308220932.png" alt="1574769128069"></p><p><code>看看官网怎么说</code> ：<a href="https://kubernetes.io/docs/concepts/architecture/nodes/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/architecture/nodes/</a></p><blockquote><p>A node is a worker machine in Kubernetes, previously known as a minion. A node may be a VM or physical machine, depending on the cluster. Each node contains the services necessary to run pods and is managed by the master components.</p></blockquote></li><li><p>难道只有一个Node吗？显然不太合适，多台Node共同组成集群才行嘛<br> 画个图表示一下咯，最好能把之前的Label，Service也一起画上去，整体感受一下</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308220940.png" alt="1574769157729"></p></li><li><p>此时，我们把目光转移到由3个Node节点组成的Master-Node集群</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221049.png" alt="1574769165280"></p></li><li><p>这个集群要配合完成一些工作，总要有一些组件的支持吧？接下来我们来想想有哪些组件，然后画一个相对完整的架构图</p><blockquote><ol><li>总得要有一个操作集群的客户端，也就是和集群打交道</li></ol><p> <strong>kubectl</strong></p><ol start="2"><li><p>请求肯定是到达Master Node，然后再分配给Worker Node创建Pod之类的关键是命令通过kubectl过来之后，是不是要认证授权一下？</p><p> <strong>需要认证/授权</strong></p></li><li><p>请求过来之后，Master Node中谁来接收？</p><pre><code>**APIServer** 接收kubectl 传过来的请求</code></pre></li><li><p>API收到请求之后，接下来调用哪个Worker Node创建Pod，Container之类的，得要有调度策略 <strong>Scheduler</strong><br> [<a href="https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/]" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/scheduling/kube-scheduler/]</a>    </p></li><li><p>Scheduler通过不同的策略，真正要分发请求到不同的Worker Node上创建内容，具体谁负责？<br> <strong>Controller Manager</strong>    </p></li><li><p>Worker Node接收到创建请求之后，具体谁来负责 Kubelet 服务，最终Kubelet会调用Docker Engine，创建对应的容器[这边是不是也反应出一点，在Node上需要有Docker Engine，不然怎么创建维护容器？]    </p><p> <strong>kube-proxy</strong></p></li><li><p>会不会涉及到域名解析的问题？<br> <strong>DNS</strong></p></li><li><p>是否需要有监控面板能够监测整个集群的状态？<br> <strong>Dashboard</strong></p></li><li><p>集群中这些数据如何保存？分布式存储<br> <strong>ETCD</strong>    </p></li><li><p>至于像容器的持久化存储，网络等可以联系一下Docker中的内容</p></li></ol></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221116.png" alt="1574943008281"></p></li><li><p>不妨把这个图翻转一下方便查看</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221146.png" alt="1574769331383"></p></li><li><p>官网K8S架构图</p><blockquote><p><a href="https://kubernetes.io/docs/concepts/architecture/cloud-controller/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/architecture/cloud-controller/</a></p></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308221153.png" alt="1574769343621"></p></li></ol><p><code>小结</code> ：有些小伙伴可能会想，有些组件知道它的作用了，有些有些模糊。没关系，目前我们只是停留在理论层面的推断和分析，毕竟一点实际操作都没有，现在能够有个感性的认知就已经很不错了</p><h1 id="The-Common-Ways-of-Installing-Kubernetes"><a href="#The-Common-Ways-of-Installing-Kubernetes" class="headerlink" title="The Common Ways of Installing Kubernetes"></a>The Common Ways of Installing Kubernetes</h1><h2 id="The-hard-way"><a href="#The-hard-way" class="headerlink" title="The hard way"></a>The hard way</h2><blockquote><p><code>Kelsey Hightower</code> ：<a href="https://github.com/kelseyhightower" target="_blank" rel="noopener">https://github.com/kelseyhightower</a></p></blockquote><h2 id="在线play-with-k8s"><a href="#在线play-with-k8s" class="headerlink" title="在线play-with-k8s"></a>在线play-with-k8s</h2><blockquote><p><code>网址</code> ：<a href="https://labs.play-with-k8s.com/" target="_blank" rel="noopener">https://labs.play-with-k8s.com/</a></p></blockquote><pre><code>This is a sandbox environment. Using personal credentials  is HIGHLY! discouraged. Any consequences of doing so, are completely the user's responsibilites.You can bootstrap a cluster as follows:1. Initializes cluster master node:kubeadm init --apiserver-advertise-address $(hostname -i)2. Initialize cluster networking:kubectl apply -n kube-system -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 |tr -d '\n')"3. (Optional) Create an nginx deployment:kubectl apply -f https://raw.githubusercontent.com/kubernetes/website/master/content/en/examples/application/nginx-app.yaml</code></pre><h2 id="Cloud上搭建"><a href="#Cloud上搭建" class="headerlink" title="Cloud上搭建"></a>Cloud上搭建</h2><blockquote><p><code>GitHub</code> ：<a href="https://github.com/kubernetes/kops" target="_blank" rel="noopener">https://github.com/kubernetes/kops</a></p></blockquote><h2 id="企业级解决方案CoreOS"><a href="#企业级解决方案CoreOS" class="headerlink" title="企业级解决方案CoreOS"></a>企业级解决方案CoreOS</h2><blockquote><p><code>coreos</code> ：<a href="https://coreos.com/tectonic/" target="_blank" rel="noopener">https://coreos.com/tectonic/</a></p></blockquote><h2 id="Minikube-Y"><a href="#Minikube-Y" class="headerlink" title="Minikube[Y]"></a>Minikube[Y]</h2><blockquote><p>K8S单节点，适合在本地学习使用<br>官网 ：<a href="https://kubernetes.io/docs/setup/learning-environment/minikube/" target="_blank" rel="noopener">https://kubernetes.io/docs/setup/learning-environment/minikube/</a><br>GitHub ：<a href="https://github.com/kubernetes/minikube" target="_blank" rel="noopener">https://github.com/kubernetes/minikube</a></p></blockquote><h2 id="kubeadm-Y"><a href="#kubeadm-Y" class="headerlink" title="kubeadm[Y]"></a>kubeadm[Y]</h2><blockquote><p>本地多节点<br>GitHub ：<a href="https://github.com/kubernetes/kubeadm" target="_blank" rel="noopener">https://github.com/kubernetes/kubeadm</a></p></blockquote><h1 id="使用Minikube搭建单节点K8s"><a href="#使用Minikube搭建单节点K8s" class="headerlink" title="使用Minikube搭建单节点K8s"></a>使用Minikube搭建单节点K8s</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><blockquote><p>kubectl官网 ：<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-windows" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-windows</a></p><p>minikube官网 ：<a href="https://kubernetes.io/docs/tasks/tools/install-minikube/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/tools/install-minikube/</a></p></blockquote><p>安装步骤：</p><ul><li><p>选择任意一种虚拟化的方式</p><pre><code>• Hyper-V• VirtualBox[课上选择的]</code></pre></li><li><p>安装kubectl</p><ol><li>根据官网步骤  [或]  直接下载:<br><a href="https://storage.googleapis.com/kubernetes-release/release/v1.16.2/bin/windows/amd64/kubectl.exe" target="_blank" rel="noopener">https://storage.googleapis.com/kubernetes-release/release/v1.16.2/bin/windows/amd64/kubectl.exe</a></li><li>配置kubectl.exe所在路径的环境变量，使得cmd窗口可以直接使用kubectl命令</li><li>kubectl version检查是否配置成功</li></ol></li><li><p>安装minikube</p><ol><li>根据官网步骤  [或]  直接下载:<br><a href="https://github.com/kubernetes/minikube/releases/download/v1.5.2/minikube-windows-amd64.exe" target="_blank" rel="noopener">https://github.com/kubernetes/minikube/releases/download/v1.5.2/minikube-windows-amd64.exe</a></li><li>修改minikube-windows-amd64.exe名称为minikube.exe</li><li>配置minikube所在路径的环境变量，使得cmd窗口可以直接使用minikube命令</li><li>minikube version检查是否配置成功</li></ol></li><li><p>使用minikube创建单节点的k8s</p><pre class=" language-shell"><code class="language-shell">minikube start --vm-driver=virtualbox --image-repository=gcr.azk8s.cn/google-containers</code></pre></li><li><p>小结</p><p>其实就是通过minikube创建一个虚拟机<br>这个虚拟机中安装好了单节点的K8S环境然后通过kubectl进行交互</p></li></ul><pre class=" language-shell"><code class="language-shell"># 创建K8Sminikube start# 删除K8Sminikube delete# 进入到K8S的机器中minikube ssh# 查看状态minikube status# 进入dashboardminikube dashboard</code></pre><h2 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h2><blockquote><p>kubectl官网 ：<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-linux" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-linux</a></p><p>minikube官网 ：<a href="https://kubernetes.io/docs/tasks/tools/install-minikube/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/tools/install-minikube/</a></p></blockquote><p>安装步骤：</p><ul><li><p>安装docker</p></li><li><p>安装kubectl</p><blockquote><ol><li><p>下载[这边我给大家下载好了，在网盘kubectl&amp;minikube中，大家上传到自己的centos7机器中。</p></li><li><p>授权</p><pre class=" language-shell"><code class="language-shell">chmod +x ./kubectl</code></pre></li><li><p>添加到环境变量</p><pre class=" language-shell"><code class="language-shell">sudo mv ./kubectl /usr/local/bin/kubectl</code></pre></li><li><p>检查</p><pre class=" language-shell"><code class="language-shell">kubectl version</code></pre></li></ol></blockquote></li><li><p>安装minikube</p><blockquote><ol><li><p>下载[这边我给大家下载好了，在网盘kubectl</p><pre class=" language-shell"><code class="language-shell">wget https://github.com/kubernetes/minikube/releases/download/v1.5.2/minikube-linux-amd64</code></pre></li><li><p>配置环境变量</p><pre class=" language-shell"><code class="language-shell">sudo mv minikube-linux-amd64 minikube && chmod +x minikube && mv minikube /usr/local/bin/</code></pre></li><li><p>检查</p><pre class=" language-shell"><code class="language-shell">minikube version</code></pre></li></ol></blockquote></li><li><p>使用minikube创建单节点的k8s</p><pre class=" language-shell"><code class="language-shell">minikube start --vm-driver=none --image-repository=gcr.azk8s.cn/google-containers</code></pre></li></ul><h2 id="Mac-OS"><a href="#Mac-OS" class="headerlink" title="Mac OS"></a>Mac OS</h2><p>也是下载安装kubectl和minikube，选择virtualbox，然后minikube start，就可以通过kubectl操作咯</p><h2 id="先感受一下Kubernetes"><a href="#先感受一下Kubernetes" class="headerlink" title="先感受一下Kubernetes"></a>先感受一下Kubernetes</h2><blockquote><p>既然已经通过Minikube搭建了单节点的Kubernetes，不妨先感受一些组件的存在以及操作咯</p></blockquote><h3 id="查看连接信息"><a href="#查看连接信息" class="headerlink" title="查看连接信息"></a>查看连接信息</h3><pre class=" language-shell"><code class="language-shell">kubectl config viewkubectl config get-contextskubectl cluster-info</code></pre><h3 id="体验Pod"><a href="#体验Pod" class="headerlink" title="体验Pod"></a>体验Pod</h3><ol><li><p>创建pod_nginx.yaml</p><blockquote><p>resources/basic/pod_nginx.yaml</p></blockquote><pre class=" language-yaml"><code class="language-yaml">  <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod  <span class="token key atrule">metadata</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">labels</span><span class="token punctuation">:</span>   <span class="token important">&amp;nbsp</span>;  app<span class="token punctuation">:</span> nginx  <span class="token key atrule">spec</span><span class="token punctuation">:</span>    <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx   <span class="token important">&amp;nbsp</span>;  image<span class="token punctuation">:</span> nginx   <span class="token important">&amp;nbsp</span>;  ports<span class="token punctuation">:</span>   <span class="token important">&amp;nbsp</span>;  <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></code></pre></li><li><p>根据pod_nginx.yaml文件创建pod</p><pre class=" language-shell"><code class="language-shell">kubectl apply -f pod_nginx.yaml</code></pre></li><li><p>查看pod</p><pre class=" language-shell"><code class="language-shell">kubectl get podskubectl get pods -o widekubectl describe pod nginx</code></pre></li><li><p>进入nginx容器</p><pre class=" language-shell"><code class="language-shell"># kubectl进入kubectl exec -it nginx bash# 通过docker进入minikube sshdocker psdocker exec -it containerid bash</code></pre></li><li><p>访问nginx，端口转发</p><pre class=" language-shell"><code class="language-shell"># 若在minikube中，直接访问# 若在物理主机上，要做端口转发    kubectl port-forward nginx 8080:80</code></pre></li><li><p>删除pod</p><pre class=" language-shell"><code class="language-shell">kubectl delete -f pod_nginx.yaml</code></pre></li></ol><p><code>小结</code> ：通过Minikube，我们使用kubectl操作单节点的K8S，而且也能感受到pod的创建和删除，包括pod中对应的容器，一切才刚刚开始，具体细节咱们先不聊，后面慢慢说。</p>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Docker Compose&amp;Swarm</title>
      <link href="posts/4eff6249.html"/>
      <url>posts/4eff6249.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Docker-Compose"><a href="#1-Docker-Compose" class="headerlink" title="1 Docker Compose"></a>1 Docker Compose</h1><blockquote><p><code>官网</code>：<a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">https://docs.docker.com/compose/</a></p></blockquote><h2 id="1-1-业务背景"><a href="#1-1-业务背景" class="headerlink" title="1.1 业务背景"></a>1.1 业务背景</h2><h2 id="1-2-Docker传统方式实现"><a href="#1-2-Docker传统方式实现" class="headerlink" title="1.2 Docker传统方式实现"></a>1.2 Docker传统方式实现</h2><h3 id="1-2-1-写Python代码-amp-build-image"><a href="#1-2-1-写Python代码-amp-build-image" class="headerlink" title="1.2.1 写Python代码&amp;build image"></a>1.2.1 写Python代码&amp;build image</h3><ol><li>创建文件夹<pre class=" language-shell"><code class="language-shell">mkdir -p /tmp/composetestcd /tmp/composetest</code></pre></li><li>创建app.py文件，写业务内容<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> redis<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>cache <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'redis'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_hit_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    retries <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> cache<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">'hits'</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> redis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError <span class="token keyword">as</span> exc<span class="token punctuation">:</span>            <span class="token keyword">if</span> retries <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> exc            retries <span class="token operator">-=</span> <span class="token number">1</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    count <span class="token operator">=</span> get_hit_count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'Hello World! I have been seen {} times.\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count<span class="token punctuation">)</span></code></pre></li><li>新建requirements.txt文件<pre><code>flaskredis</code></pre></li><li>编写Dockerfile<pre class=" language-dockerfile"><code class="language-dockerfile">FROM python:3.7-alpineWORKDIR /codeENV FLASK_APP app.pyENV FLASK_RUN_HOST 0.0.0.0RUN apk add --no-cache gcc musl-dev linux-headersCOPY requirements.txt requirements.txtRUN pip install -r requirements.txtCOPY . .CMD ["flask", "run"]</code></pre></li><li>根据Dockerfile生成image<pre class=" language-shell"><code class="language-shell">docker build -t python-app-image .</code></pre></li><li>查看images：docker images<pre class=" language-shell"><code class="language-shell">python-app-image latest 7e1d81f366b7 3 minutes ago  213MB</code></pre></li></ol><h3 id="1-2-2-获取Redis的image"><a href="#1-2-2-获取Redis的image" class="headerlink" title="1.2.2 获取Redis的image"></a>1.2.2 获取Redis的image</h3><pre><code>docker pull redis:alpine</code></pre><h3 id="1-2-3-创建两个container"><a href="#1-2-3-创建两个container" class="headerlink" title="1.2.3 创建两个container"></a>1.2.3 创建两个container</h3><ol><li><p>创建网络</p><pre class=" language-shell"><code class="language-shell">docker network lsdocker network create --subnet=172.20.0.0/24 app-net </code></pre></li><li><p>创建python程序的container，并指定网段和端口</p><pre class=" language-shell"><code class="language-shell">docker run -d --name web -p 5000:5000 --network app-net python-app-image</code></pre></li><li><p>创建redis的container，并指定网段</p><pre class=" language-shell"><code class="language-shell">docker run -d --name redis --network app-net redis:alpine</code></pre></li></ol><h3 id="1-2-4-访问测试"><a href="#1-2-4-访问测试" class="headerlink" title="1.2.4 访问测试"></a>1.2.4 访问测试</h3><p>ip[centos]:5000</p><h2 id="1-3-简介和安装"><a href="#1-3-简介和安装" class="headerlink" title="1.3 简介和安装"></a>1.3 简介和安装</h2><h3 id="1-3-1-简介"><a href="#1-3-1-简介" class="headerlink" title="1.3.1 简介"></a>1.3.1 简介</h3><blockquote><p><code>官网</code>：<a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">https://docs.docker.com/compose/</a></p><pre><code>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration.</code></pre></blockquote><h3 id="1-3-2-安装"><a href="#1-3-2-安装" class="headerlink" title="1.3.2 安装"></a>1.3.2 安装</h3><blockquote><p>Linux环境中需要单独安装</p><p><code>官网</code>：<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">https://docs.docker.com/compose/install/</a></p></blockquote><p>Github 源</p><pre class=" language-shell"><code class="language-shell">sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</code></pre><p>DaoCloud 源</p><pre class=" language-shell"><code class="language-shell">curl -L https://get.daocloud.io/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose</code></pre><p>添加权限</p><pre class=" language-shell"><code class="language-shell">sudo chmod +x /usr/local/bin/docker-compose</code></pre><p>卸载</p><pre class=" language-shell"><code class="language-shell">sudo rm /usr/local/bin/docker-compose</code></pre><p>查看 docker-compose 版本</p><pre class=" language-shell"><code class="language-shell">docker-compose version</code></pre><h2 id="1-4-docker-compose实现"><a href="#1-4-docker-compose实现" class="headerlink" title="1.4 docker compose实现"></a>1.4 docker compose实现</h2><blockquote><p><code>reference</code>：<a href="https://docs.docker.com/compose/gettingstarted/" target="_blank" rel="noopener">https://docs.docker.com/compose/gettingstarted/</a></p></blockquote><h3 id="1-4-1-同样的前期准备"><a href="#1-4-1-同样的前期准备" class="headerlink" title="1.4.1 同样的前期准备"></a>1.4.1 同样的前期准备</h3><p>新建目录，比如composetest</p><p>进入目录，编写app.py代码</p><p>创建requirements.txt文件</p><p>编写Dockerfile</p><h3 id="1-4-2-编写docker-compose-yaml文件"><a href="#1-4-2-编写docker-compose-yaml文件" class="headerlink" title="1.4.2 编写docker-compose.yaml文件"></a>1.4.2 编写docker-compose.yaml文件</h3><p>默认名称，当然也可以指定，<code>docker-compose.yaml</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> .    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5000:5000"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> app<span class="token punctuation">-</span>net  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"redis:alpine"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> app<span class="token punctuation">-</span>net<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">app-net</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge</code></pre><blockquote><p>(1)通过docker compose创建容器</p></blockquote><pre class=" language-shell"><code class="language-shell">docker-compose up -d</code></pre><blockquote><p>(2)访问测试</p></blockquote><h2 id="1-5-详解docker-compose-yml文件"><a href="#1-5-详解docker-compose-yml文件" class="headerlink" title="1.5 详解docker-compose.yml文件"></a>1.5 详解docker-compose.yml文件</h2><blockquote><ol><li>version: ‘3’<br>表示docker-compose的版本</li><li>services<br>一个service表示一个container</li><li>networks<br>相当于docker network create app-net</li><li>volumes<br>相当于-v v1:/var/lib/mysql</li><li>image<br>表示使用哪个镜像，本地build则用build，远端则用image</li><li>ports<br>相当于-p 8080:8080</li><li>environment<br>相当于-e </li></ol></blockquote><h2 id="1-6-docker-compose常见操作"><a href="#1-6-docker-compose常见操作" class="headerlink" title="1.6 docker-compose常见操作"></a>1.6 docker-compose常见操作</h2><ol><li><p>查看版本</p><pre class=" language-shell"><code class="language-shell">docker-compose version</code></pre></li><li><p>根据yml创建service</p><pre class=" language-shell"><code class="language-shell">docker-compose up指定yaml：docker-compose  up -f xxx.yaml后台运行：docker-compose up -d</code></pre></li><li><p>查看启动成功的service</p><pre class=" language-shell"><code class="language-shell">docker-compose ps也可以使用docker ps</code></pre></li><li><p>查看images</p><pre class=" language-shell"><code class="language-shell">docker-compose images</code></pre></li><li><p>停止/启动service</p><pre class=" language-shell"><code class="language-shell">docker-compose stop/start </code></pre></li><li><p>删除service[同时会删除掉network和volume]</p><pre class=" language-shell"><code class="language-shell">docker-compose down</code></pre></li><li><p>进入到某个service</p><pre class=" language-shell"><code class="language-shell">docker-compose exec redis sh</code></pre></li></ol><h2 id="1-7-scale扩缩容"><a href="#1-7-scale扩缩容" class="headerlink" title="1.7 scale扩缩容"></a>1.7 scale扩缩容</h2><ol><li><p>修改docker-compose.yaml文件，主要是把web的ports去掉，不然会报错</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> .    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> app<span class="token punctuation">-</span>net  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">"redis:alpine"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> app<span class="token punctuation">-</span>net<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">app-net</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge</code></pre></li><li><p>创建service</p><pre class=" language-shell"><code class="language-shell">docker-compose up -d</code></pre></li><li><p>若要对python容器进行扩缩容</p><pre class=" language-shell"><code class="language-shell">docker-compose up --scale web=5 -ddocker-compose psdocker-compose logs web</code></pre></li></ol><h1 id="2-Docker-Swarm"><a href="#2-Docker-Swarm" class="headerlink" title="2 Docker Swarm"></a>2 Docker Swarm</h1><blockquote><p><code>官网</code>：<a href="https://docs.docker.com/swarm/" target="_blank" rel="noopener">https://docs.docker.com/swarm/</a></p></blockquote><h2 id="2-1-Install-Swarm"><a href="#2-1-Install-Swarm" class="headerlink" title="2.1 Install Swarm"></a>2.1 Install Swarm</h2><h3 id="2-1-1-环境准备"><a href="#2-1-1-环境准备" class="headerlink" title="2.1.1 环境准备"></a>2.1.1 环境准备</h3><ol><li><p>根据Vagrantfile创建3台centos机器</p><blockquote><p>[<strong>大家可以根据自己实际的情况准备3台centos机器，不一定要使用vagrant+virtualbox</strong>]</p><p>新建swarm-docker-centos7文件夹，创建Vagrantfile</p></blockquote><pre class=" language-ruby"><code class="language-ruby">boxes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token symbol">:name</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"manager-node"</span><span class="token punctuation">,</span>        <span class="token symbol">:eth1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.0.11"</span><span class="token punctuation">,</span>        <span class="token symbol">:mem</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"1024"</span><span class="token punctuation">,</span>        <span class="token symbol">:cpu</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"1"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token symbol">:name</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"worker01-node"</span><span class="token punctuation">,</span>        <span class="token symbol">:eth1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.0.12"</span><span class="token punctuation">,</span>        <span class="token symbol">:mem</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"1024"</span><span class="token punctuation">,</span>        <span class="token symbol">:cpu</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"1"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token symbol">:name</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"worker02-node"</span><span class="token punctuation">,</span>        <span class="token symbol">:eth1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"192.168.0.13"</span><span class="token punctuation">,</span>        <span class="token symbol">:mem</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"1024"</span><span class="token punctuation">,</span>        <span class="token symbol">:cpu</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"1"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token constant">Vagrant</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>  config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>box <span class="token operator">=</span> <span class="token string">"centos/7"</span>   boxes<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>opts<span class="token operator">|</span>      config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>define opts<span class="token punctuation">[</span><span class="token symbol">:name</span><span class="token punctuation">]</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>        config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>hostname <span class="token operator">=</span> opts<span class="token punctuation">[</span><span class="token symbol">:name</span><span class="token punctuation">]</span>        config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provider <span class="token string">"vmware_fusion"</span> <span class="token keyword">do</span> <span class="token operator">|</span>v<span class="token operator">|</span>          v<span class="token punctuation">.</span>vmx<span class="token punctuation">[</span><span class="token string">"memsize"</span><span class="token punctuation">]</span> <span class="token operator">=</span> opts<span class="token punctuation">[</span><span class="token symbol">:mem</span><span class="token punctuation">]</span>          v<span class="token punctuation">.</span>vmx<span class="token punctuation">[</span><span class="token string">"numvcpus"</span><span class="token punctuation">]</span> <span class="token operator">=</span> opts<span class="token punctuation">[</span><span class="token symbol">:cpu</span><span class="token punctuation">]</span>        <span class="token keyword">end</span>        config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provider <span class="token string">"virtualbox"</span> <span class="token keyword">do</span> <span class="token operator">|</span>v<span class="token operator">|</span>          v<span class="token punctuation">.</span>customize <span class="token punctuation">[</span><span class="token string">"modifyvm"</span><span class="token punctuation">,</span> <span class="token symbol">:id</span><span class="token punctuation">,</span> <span class="token string">"--memory"</span><span class="token punctuation">,</span> opts<span class="token punctuation">[</span><span class="token symbol">:mem</span><span class="token punctuation">]</span><span class="token punctuation">]</span>          v<span class="token punctuation">.</span>customize <span class="token punctuation">[</span><span class="token string">"modifyvm"</span><span class="token punctuation">,</span> <span class="token symbol">:id</span><span class="token punctuation">,</span> <span class="token string">"--cpus"</span><span class="token punctuation">,</span> opts<span class="token punctuation">[</span><span class="token symbol">:cpu</span><span class="token punctuation">]</span><span class="token punctuation">]</span>          v<span class="token punctuation">.</span>customize <span class="token punctuation">[</span><span class="token string">"modifyvm"</span><span class="token punctuation">,</span> <span class="token symbol">:id</span><span class="token punctuation">,</span> <span class="token string">"--name"</span><span class="token punctuation">,</span> opts<span class="token punctuation">[</span><span class="token symbol">:name</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">end</span>        config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>network <span class="token symbol">:public_network</span><span class="token punctuation">,</span> ip<span class="token punctuation">:</span> opts<span class="token punctuation">[</span><span class="token symbol">:eth1</span><span class="token punctuation">]</span>      <span class="token keyword">end</span>  <span class="token keyword">end</span><span class="token keyword">end</span></code></pre></li><li><p>进入到对应的centos里面，使得root账户能够登陆，从而使用XShell登陆</p><pre class=" language-shell"><code class="language-shell">vagrant ssh manager-node/worker01-node/worker02-nodesudo -ivi /etc/ssh/sshd_config修改PasswordAuthentication yespasswd    修改密码systemctl restart sshd</code></pre></li><li><p>在win上ping一下各个主机，看是否能ping通</p><pre class=" language-shell"><code class="language-shell">ping 192.168.0.11/12/13</code></pre></li><li><p>在每台机器上安装docker engine</p><blockquote><p><code>小技巧</code>：要想让每个shell窗口一起执行同样的命令”查看–&gt;撰写–&gt;撰写窗口–&gt;全部会话”</p></blockquote></li><li><p>docker中自带 docker swarm，因此安装好docker即可</p></li></ol><h3 id="2-1-2-搭建Swarm集群"><a href="#2-1-2-搭建Swarm集群" class="headerlink" title="2.1.2 搭建Swarm集群"></a>2.1.2 搭建Swarm集群</h3><ol><li><p>进入manager</p><blockquote><p><code>提示</code>：manager node也可以作为worker node提供服务</p></blockquote><pre class=" language-shell"><code class="language-shell">docker swarm init --advertise-addr=192.168.0.11</code></pre><p> <code>注意观察日志，拿到worker node加入manager node的信息</code></p><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308220211.png" alt="1574686082854"></p><pre class=" language-shell"><code class="language-shell">docker swarm join --token SWMTKN-1-0a5ph4nehwdm9wzcmlbj2ckqqso38pkd238rprzwcoawabxtdq-arcpra6yzltedpafk3qyvv0y3 192.168.0.11:2377</code></pre></li><li><p>进入两个worker 分别执行上面命令</p><pre class=" language-shell"><code class="language-shell">docker swarm join --token SWMTKN-1-0a5ph4nehwdm9wzcmlbj2ckqqso38pkd238rprzwcoawabxtdq-arcpra6yzltedpafk3qyvv0y3 192.168.0.11:2377</code></pre><p> <code>日志打印</code></p><pre><code>This node joined a swarm as a worker.</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308220235.png" alt="1574686134021"></p></li><li><p>进入到manager node查看集群状态</p><pre class=" language-shell"><code class="language-shell">docker node ls</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308220238.png" alt="1574686171330"></p></li><li><p>node类型的转换</p><blockquote><p>可以将worker提升成manager，从而保证manager的高可用</p></blockquote><pre class=" language-shell"><code class="language-shell">docker node promote worker01-nodedocker node promote worker02-node# 降级可以用demotedocker node demote worker01-node</code></pre><p> <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308220248.png" alt="1574686305074"></p></li></ol><h3 id="2-1-3-在线环境"><a href="#2-1-3-在线环境" class="headerlink" title="2.1.3 在线环境"></a>2.1.3 在线环境</h3><blockquote><p><a href="http://labs.play-with-docker.com/" target="_blank" rel="noopener">http://labs.play-with-docker.com</a></p></blockquote><h2 id="2-2-Swarm基本操作"><a href="#2-2-Swarm基本操作" class="headerlink" title="2.2 Swarm基本操作"></a>2.2 Swarm基本操作</h2><h3 id="2-2-1-Service"><a href="#2-2-1-Service" class="headerlink" title="2.2.1 Service"></a>2.2.1 Service</h3><ol><li><p>创建一个tomcat的service</p><pre class=" language-shell"><code class="language-shell">docker service create --name my-tomcat tomcat</code></pre></li><li><p>查看当前swarm的service</p><pre class=" language-shell"><code class="language-shell">docker service ls</code></pre></li><li><p>查看service的启动日志</p><pre class=" language-shell"><code class="language-shell">docker service logs my-tomcat</code></pre></li><li><p>查看service的详情</p><pre class=" language-shell"><code class="language-shell">docker service inspect my-tomcat</code></pre></li><li><p>查看my-tomcat运行在哪个node上</p><pre class=" language-shell"><code class="language-shell">docker service ps my-tomcat</code></pre><p> <code>日志</code></p><pre><code>ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTSu6o4mz4tj396        my-tomcat.1         tomcat:latest       worker01-node       Running             Running 3 minutes ago  </code></pre></li><li><p>水平扩展service</p><pre class=" language-shell"><code class="language-shell"># 把my-tomcat扩容成3个docker service scale my-tomcat=3docker service lsdocker service ps my-tomcat</code></pre><p> <code>日志</code>：可以发现，其他node上都运行了一个my-tomcat的service</p><pre class=" language-shell"><code class="language-shell">[root@manager-node ~]# docker service ps my-tomcatID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTSu6o4mz4tj396        my-tomcat.1         tomcat:latest       worker01-node       Running             Running 8 minutes ago                        v505wdu3fxqo        my-tomcat.2         tomcat:latest       manager-node        Running             Running 46 seconds ago                       wpbsilp62sc0        my-tomcat.3         tomcat:latest       worker02-node       Running             Running 49 seconds ago  </code></pre><p> 此时到worker01-node上：docker ps，可以发现container的name和service名称不一样，这点要知道</p><pre><code>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESbc4b9bb097b8        tomcat:latest       "catalina.sh run"   10 minutes ago      Up 10 minutes       8080/tcp            my-tomcat.1.u6o4mz4tj3969a1p3mquagxok</code></pre></li><li><p>如果某个node上的my-tomcat挂掉了，这时候会自动扩展</p><pre class=" language-shell"><code class="language-shell">[worker01-node]docker rm -f containerid[manager-node]docker service lsdocker service ps my-tomcat</code></pre></li><li><p>删除service</p><pre class=" language-shell"><code class="language-shell">docker service rm my-tomcat</code></pre></li></ol><h3 id="2-2-2-多机通信overlay网络"><a href="#2-2-2-多机通信overlay网络" class="headerlink" title="2.2.2 多机通信overlay网络"></a>2.2.2 多机通信overlay网络</h3><blockquote><p>[3.7的延续]</p><p><code>业务场景</code>：workpress+mysql 实现个人博客搭建</p><blockquote><p><a href="https://hub.docker.com/_/wordpress?tab=description" target="_blank" rel="noopener">https://hub.docker.com/_/wordpress?tab=description</a></p></blockquote></blockquote><h4 id="2-2-2-1-传统手动方式实现"><a href="#2-2-2-1-传统手动方式实现" class="headerlink" title="2.2.2.1 传统手动方式实现"></a>2.2.2.1 传统手动方式实现</h4><h5 id="2-2-2-1-1-一台centos上，分别创建容器"><a href="#2-2-2-1-1-一台centos上，分别创建容器" class="headerlink" title="2.2.2.1.1 一台centos上，分别创建容器"></a>2.2.2.1.1 一台centos上，分别创建容器</h5><ol><li><p>创建mysql容器[创建完成等待一会，注意mysql的版本]</p><pre class=" language-shell"><code class="language-shell">docker run -d --name mysql -v v1:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=examplepass -e MYSQL_DATABASE=db_wordpress mysql:5.6</code></pre></li><li><p>创建wordpress容器[将wordpress的80端口映射到centos的8080端口]</p><pre class=" language-shell"><code class="language-shell">docker run -d --name wordpress --link mysql -e WORDPRESS_DB_HOST=mysql:3306 -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=examplepass -e WORDPRESS_DB_NAME=db_wordpress -p 8080:80 wordpress</code></pre></li><li><p>查看默认bridge的网络，可以发现两个容器都在其中</p><pre class=" language-shell"><code class="language-shell">docker network inspect bridge</code></pre></li><li><p>访问测试<br> win浏览器中输入：ip[centos]:8080，一直下一步</p></li></ol><h5 id="2-2-2-1-2-使用docker-compose创建"><a href="#2-2-2-1-2-使用docker-compose创建" class="headerlink" title="2.2.2.1.2 使用docker compose创建"></a>2.2.2.1.2 使用docker compose创建</h5><blockquote><p>docker-compose的方式还是在一台机器中，网络这块很清晰</p></blockquote><ol><li><p>创建wordpress-mysql文件夹</p><pre class=" language-shell"><code class="language-shell">mkdir -p /tmp/wordpress-mysqlcd /tmp/wordpress-mysql</code></pre></li><li><p>创建docker-compose.yml文件</p><pre class=" language-yml"><code class="language-yml">version: '3.1'services:  wordpress:    image: wordpress    restart: always    ports:      - 8080:80    environment:      WORDPRESS_DB_HOST: db      WORDPRESS_DB_USER: exampleuser      WORDPRESS_DB_PASSWORD: examplepass      WORDPRESS_DB_NAME: exampledb    volumes:      - wordpress:/var/www/html  db:    image: mysql:5.7    restart: always    environment:      MYSQL_DATABASE: exampledb      MYSQL_USER: exampleuser      MYSQL_PASSWORD: examplepass      MYSQL_RANDOM_ROOT_PASSWORD: '1'    volumes:      - db:/var/lib/mysqlvolumes:  wordpress:  db:</code></pre></li><li><p>根据docker-compose.yml文件创建service</p><pre class=" language-shell"><code class="language-shell">docker-compose up -d</code></pre></li><li><p>访问测试<br> win10浏览器ip[centos]:8080，一直下一步</p></li><li><p>值得关注的点是网络</p><pre class=" language-shell"><code class="language-shell">docker network lsdocker network inspect wordpress-mysql_default</code></pre></li></ol><h4 id="2-2-2-2-Swarm中实现"><a href="#2-2-2-2-Swarm中实现" class="headerlink" title="2.2.2.2 Swarm中实现"></a>2.2.2.2 Swarm中实现</h4><blockquote><p>还是wordpress+mysql的案例，在docker swarm集群中怎么玩呢？</p></blockquote><ol><li><p>创建一个overlay网络，用于docker swarm中多机通信</p><pre class=" language-shell"><code class="language-shell">【manager-node】docker network create -d overlay my-overlay-netdocker network ls [此时worker node查看不到]</code></pre></li><li><p>创建mysql的service</p><p> 【manager-node】</p><ol><li><p>创建service</p><pre class=" language-shell"><code class="language-shell">docker service create --name mysql --mount type=volume,source=v1,destination=/var/lib/mysql --env MYSQL_ROOT_PASSWORD=examplepass --env MYSQL_DATABASE=db_wordpress --network my-overlay-net mysql:5.6</code></pre></li><li><p>查看service</p><pre class=" language-shell"><code class="language-shell">docker service lsdocker service ps mysql</code></pre></li></ol></li><li><p>创建wordpress的service</p><ol><li><p>创建service  [注意之所以下面可以通过mysql名字访问，也是因为有DNS解析]</p><pre class=" language-shell"><code class="language-shell">docker service create --name wordpress --env WORDPRESS_DB_USER=root --env WORDPRESS_DB_PASSWORD=examplepass --env WORDPRESS_DB_HOST=mysql:3306 --env WORDPRESS_DB_NAME=db_wordpress -p 8080:80 --network my-overlay-net wordpress</code></pre></li><li><p>查看service</p><pre class=" language-shell"><code class="language-shell">docker service lsdocker service ps wordpress</code></pre></li><li><p>此时mysql和wordpress的service运行在哪个node上，这时候就能看到my-overlay-net的网络</p><pre class=" language-shell"><code class="language-shell">docker network ls</code></pre></li></ol></li><li><p>测试</p><pre><code>win浏览器访问ip[manager/worker01/worker02]:8080都能访问成功</code></pre></li><li><p>查看my-overlay-net</p><pre><code>docker network inspect my-overlay-net</code></pre></li><li><p>为什么没有用etcd？docker swarm中有自己的分布式存储机制</p></li></ol><h2 id="2-3-Routing-Mesh"><a href="#2-3-Routing-Mesh" class="headerlink" title="2.3 Routing Mesh"></a>2.3 Routing Mesh</h2><h3 id="2-3-1-Ingress"><a href="#2-3-1-Ingress" class="headerlink" title="2.3.1 Ingress"></a>2.3.1 Ingress</h3><blockquote><p>通过前面的案例我们发现，部署一个wordpress的service，映射到主机的8080端口，这时候通过swarm集群中的任意主机ip:8080都能成功访问，这是因为什么？</p><p><code>把问题简化</code>：使用 my-overlay-net 网络创建一个tomcat</p><pre class=" language-shell"><code class="language-shell">docker service create --name tomcat  -p 8080:8080 --network my-overlay-net tomcat</code></pre></blockquote><ol><li><p>记得使用一个自定义的overlay类型的网络</p><pre class=" language-shell"><code class="language-shell">--network my-overlay-net</code></pre></li><li><p>查看service情况</p><pre class=" language-shell"><code class="language-shell">docker service lsdocker service ps tomcat</code></pre></li><li><p>访问3台机器的ip:8080测试</p><pre><code>发现都能够访问到tomcat的欢迎页</code></pre></li></ol><h3 id="2-4-2-Internal"><a href="#2-4-2-Internal" class="headerlink" title="2.4.2 Internal"></a>2.4.2 Internal</h3><blockquote><p>之前在实战wordpress+mysql的时候，发现wordpress中可以直接通过mysql名称访问</p><p>这样可以说明两点，第一是其中一定有dns解析，第二是两个service的ip是能够ping通的</p><p><code>思考</code>：不妨再创建一个service，也同样使用上述tomcat的overlay网络，然后来实验</p><p>创建 whoami 容器</p><pre class=" language-shell"><code class="language-shell">docker service create --name whoami -p 8000:8000 --network my-overlay-net -d  jwilder/whoami</code></pre></blockquote><ol><li><p>查看whoami的情况</p><pre><code>docker service ps whoami</code></pre></li><li><p>在各自容器中互相ping一下彼此，也就是容器间的通信</p><pre class=" language-shell"><code class="language-shell">#tomcat容器中ping whoamidocker exec -it 9d7d4c2b1b80 ping whoami64 bytes from bogon (10.0.0.8): icmp_seq=1 ttl=64 time=0.050 ms64 bytes from bogon (10.0.0.8): icmp_seq=2 ttl=64 time=0.080 ms#whoami容器中ping tomcatdocker exec -it 5c4fe39e7f60 ping tomcat64 bytes from bogon (10.0.0.18): icmp_seq=1 ttl=64 time=0.050 ms64 bytes from bogon (10.0.0.18): icmp_seq=2 ttl=64 time=0.080 ms</code></pre></li><li><p>将whoami进行扩容</p><pre class=" language-shell"><code class="language-shell">docker service scale whoami=3docker service ps whoami     #manager,worker01,worker02</code></pre></li><li><p>此时再ping whoami service，并且访问whoami服务</p><pre class=" language-shell"><code class="language-shell">#pingdocker exec -it 9d7d4c2b1b80 ping whoami64 bytes from bogon (10.0.0.8): icmp_seq=1 ttl=64 time=0.055 ms64 bytes from bogon (10.0.0.8): icmp_seq=2 ttl=64 time=0.084 ms#访问docker exec -it 9d7d4c2b1b80 curl whoami:8000  [多访问几次]I'm 09f4158c81aeI'm aebc574dc990I'm 7755bc7da921</code></pre></li></ol><p><code>小结</code>：通过上述的实验可以发现什么？whoami服务对其他服务暴露的ip是不变的，但是通过whoami名称访问8000端口，确实访问到的是不同的service，就说明访问其实是像下面这张图。</p><p>也就是说whoami service对其他服务提供了一个统一的VIP入口，别的服务访问时会做负载均衡。</p><h2 id="2-5-Stack"><a href="#2-5-Stack" class="headerlink" title="2.5 Stack"></a>2.5 Stack</h2><blockquote><p>docker stack deploy：<a href="https://docs.docker.com/engine/reference/commandline/stack_deploy/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/stack_deploy/</a></p><p>compose-file：<a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">https://docs.docker.com/compose/compose-file/</a></p><p>有没有发现上述部署service很麻烦？要是能够类似于 docker-compose.yml 文件那种方式一起管理该多好？这就要涉及到 docker swarm中的Stack，我们直接通过前面的 wordpress+mysql 案例看看怎么使用咯。</p></blockquote><ol><li><p>新建service.yml文件</p><pre class=" language-yml"><code class="language-yml">version: '3'services:  wordpress:    image: wordpress    ports:      - 8080:80    environment:      WORDPRESS_DB_HOST: db      WORDPRESS_DB_USER: exampleuser      WORDPRESS_DB_PASSWORD: examplepass      WORDPRESS_DB_NAME: exampledb    networks:      - ol-net    volumes:      - wordpress:/var/www/html    deploy:      mode: replicated      replicas: 3      restart_policy:        condition: on-failure        delay: 5s        max_attempts: 3      update_config:        parallelism: 1        delay: 10s  db:    image: mysql:5.7    environment:      MYSQL_DATABASE: exampledb      MYSQL_USER: exampleuser      MYSQL_PASSWORD: examplepass      MYSQL_RANDOM_ROOT_PASSWORD: '1'    volumes:      - db:/var/lib/mysql    networks:      - ol-net    deploy:      mode: global      placement:        constraints:          - node.role == managervolumes:  wordpress:  db:networks:  ol-net:    driver: overlay</code></pre></li><li><p>根据service.yml创建service</p><pre class=" language-shell"><code class="language-shell">docker statck deploy -c service.yml my-service</code></pre></li><li><p>常见操作</p><ol><li><p>查看stack具体信息</p><pre class=" language-shell"><code class="language-shell">docker stack lsNAME                SERVICES            ORCHESTRATORmy-service          2                   Swarm</code></pre></li><li><p>查看具体的service</p><pre class=" language-shell"><code class="language-shell">docker stack services my-serviceID                  NAME                   MODE                REPLICAS            IMAGE               PORTS    icraimlesu61        my-service_db          global              1/1                 mysql:5.7               iud2g140za5c        my-service_wordpress   replicated          3/3                 wordpress:latest    *:8080->80/tcp</code></pre></li><li><p>查看某个service</p><pre class=" language-shell"><code class="language-shell">docker service inspect my-service-db</code></pre></li></ol></li><li><p>访问测试<br>win浏览器ip[manager,worker01,worker02]:8080</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.Docker项目实战</title>
      <link href="posts/8bc952e4.html"/>
      <url>posts/8bc952e4.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Docker数据持久化"><a href="#1-Docker数据持久化" class="headerlink" title="1 Docker数据持久化"></a>1 Docker数据持久化</h1><h2 id="1-1-Volume"><a href="#1-1-Volume" class="headerlink" title="1.1 Volume"></a>1.1 Volume</h2><ol><li><p>创建mysql数据库的container</p><pre class=" language-shell"><code class="language-shell">docker run -d --name mysql01 -e MYSQL_ROOT_PASSWORD=jack123  mysql</code></pre></li><li><p>创建volume</p><pre class=" language-shell"><code class="language-shell">docker volume create --name test</code></pre></li><li><p>查看volume</p><pre class=" language-shell"><code class="language-shell">docker volume ls</code></pre></li><li><p>删除volume</p><pre class=" language-shell"><code class="language-shell"># 删除单个volumedocker volume rm -f volumeId# 删除所有volumedocker volume rm -f $(docker volume ls)</code></pre></li><li><p>具体查看该volume</p><pre class=" language-shell"><code class="language-shell">docker volume inspect 2fda8b112808f57852eddfd8984c1deba0bdcf91c65be4e1139d85a749165682</code></pre><p>  <img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214941.png" alt="1574580102318"></p></li><li><p>名字不好看，name太长，修改一下</p><pre><code>"-v mysql01_volume:/var/lib/mysql"表示给上述的 volume 起一个能识别的名字</code></pre><pre class=" language-shell"><code class="language-shell">docker run -d --name mysql01 -v mysql01_volume:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=jack123  mysql</code></pre></li><li><p>查看volume</p><pre class=" language-shell"><code class="language-shell">docker volume lsdocker volume inspect mysql01_volume</code></pre></li><li><p>真的能够持久化保存数据吗？不妨来做个实验</p><pre class=" language-shell"><code class="language-shell"># 进入容器中docker exec -it mysql01 bash# 登录mysql服务mysql -uroot -pjack123# 创建测试库create database db_test# 退出mysql服务，退出mysql container# 删除mysql容器docker rm -f mysql01# 查看volumedocker volume ls# 发现volume还在DRIVER &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  VOLUME NAMElocal &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mysql01_volume# 新建一个mysql container，并且指定使用"mysql01_volume"docker run -d --name test-mysql -v mysql01_volume:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=jack123 mysql# 进入容器，登录mysql服务，查看数据库docker exec -it test-mysql bashmysql -uroot -pjack123show database;# 可以发现db_test仍然在| information_schema || db_test &nbsp; &nbsp; &nbsp;       || mysql &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  || performance_schema || sys </code></pre></li></ol><h2 id="1-2-Bind-Mounting"><a href="#1-2-Bind-Mounting" class="headerlink" title="1.2 Bind Mounting"></a>1.2 Bind Mounting</h2><ol><li><p>创建一个tomcat容器</p><pre class=" language-shell"><code class="language-shell">docker run -d --name tomcat01 -p 9090:8080 -v /tmp/test:/usr/local/tomcat/webapps/test tomcat</code></pre></li><li><p>查看两个目录</p><pre class=" language-shell"><code class="language-shell">centos：cd /tmp/testtomcat容器：cd /usr/local/tomcat/webapps/test</code></pre></li><li><p>在centos的/tmp/test中新建1.html，并写一些内容</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">20</span>pt<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>This is p!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre></li><li><p>进入tomcat01的对应目录查看，发现也有一个 1.html，并且也有内容</p></li><li><p>在centos7上访问该路径：curl localhost:9090/test/1.html</p></li><li><p>在win浏览器中通过ip访问</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308215033.png" alt="1574581470347"></p></li></ol><h1 id="2-Docker实战"><a href="#2-Docker实战" class="headerlink" title="2 Docker实战"></a>2 Docker实战</h1><h2 id="2-1-MySQL高可用集群搭建"><a href="#2-1-MySQL高可用集群搭建" class="headerlink" title="2.1 MySQL高可用集群搭建"></a>2.1 MySQL高可用集群搭建</h2><ol><li><p>拉取pxc镜像</p><pre class=" language-shell"><code class="language-shell">docker pull percona/percona-xtradb-cluster:5.7.21</code></pre></li><li><p>复制pxc镜像(实则重命名)</p><pre class=" language-shell"><code class="language-shell">docker tag percona/percona-xtradb-cluster:5.7.21 pxc</code></pre></li><li><p>删除pxc原来的镜像l</p><pre class=" language-shell"><code class="language-shell">docker rmi percona/percona-xtradb-cluster:5.7.21</code></pre></li><li><p>创建一个单独的网段，给mysql数据库集群使用</p><blockquote><ul><li>(1)docker network create –subnet=172.18.0.0/24 pxc-net</li><li>(2)docket network inspect pxc-net   [查看详情]</li><li>(3)docker network rm pxc-net        [删除]</li></ul></blockquote></li><li><p>创建和删除volume</p><blockquote><p>创建：docker volume create –name v1<br>删除：docker volume rm v1<br>查看详情：docker volume inspect v1</p></blockquote></li><li><p>创建单个PXC容器demo</p><ul><li><p>[CLUSTER_NAME PXC集群名字]</p></li><li><p>[XTRABACKUP_PASSWORD数据库同步需要用到的密码]</p><p>```shell<br>docker run -d -p 3301:3306 </p></li><li><p>v v1:/var/lib/mysql</p></li><li><p>e MYSQL_ROOT_PASSWORD=jack123</p></li><li><p>e CLUSTER_NAME=PXC</p></li><li><p>e XTRABACKUP_PASSWORD=jack123</p></li><li><p>-privileged –name=node1 –net=pxc-net –ip 172.18.0.2<br>pxc</p><pre><code></code></pre></li></ul></li><li><p>搭建PXC[MySQL]集群</p><ol><li><p>准备3个数据卷</p><pre class=" language-shell"><code class="language-shell">docker volume create --name v1docker volume create --name v2docker volume create --name v3</code></pre></li><li><blockquote><p>运行三个PXC容器<br>【在创建完第一个node1，需要等待一段时间，大概1分钟左右，等node1启动初始化完成，才能创建node2和node3，不然会出错，大家一定要注意哦】</p></blockquote><pre class=" language-shell"><code class="language-shell">docker run -d -p 3301:3306 -v v1:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=jack123 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=jack123 --privileged --name=node1 --net=pxc-net --ip 172.18.0.2 pxc</code></pre><p> [CLUSTER_JOIN将该数据库加入到某个节点上组成集群]</p><pre class=" language-shell"><code class="language-shell">docker run -d -p 3302:3306 -v v2:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=jack123 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=jack123 -e CLUSTER_JOIN=node1 --privileged --name=node2 --net=pxc-net --ip 172.18.0.3 pxcdocker run -d -p 3303:3306 -v v3:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=jack123 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=jack123 -e CLUSTER_JOIN=node1 --privileged --name=node3 --net=pxc-net --ip 172.18.0.4 pxc</code></pre></li><li><p>MySQL工具连接测试<br> Jetbrains Datagrip</p></li></ol></li></ol><p><strong>数据库的负载均衡</strong></p><ol><li><p>拉取haproxy镜像</p><pre class=" language-shell"><code class="language-shell">docker pull haproxy</code></pre></li><li><p>创建haproxy配置文件，这里使用bind mounting的方式</p><pre class=" language-shell"><code class="language-shell">touch /tmp/haproxy/haproxy.cfg</code></pre><p><code>haproxy.cfg</code></p><pre class=" language-properties"><code class="language-properties">global<span class="token comment" spellcheck="true">    #工作目录，这边要和创建容器指定的目录对应</span><span class="token attr-name">    chroot</span> <span class="token attr-value">/usr/local/etc/haproxy</span><span class="token comment" spellcheck="true">    #日志文件</span><span class="token attr-name">    log</span> <span class="token attr-value">127.0.0.1 local5 info</span><span class="token comment" spellcheck="true">    #守护进程运行</span>    daemondefaults<span class="token attr-name">    log</span> <span class="token attr-value">global</span><span class="token attr-name">    mode</span> <span class="token attr-value">   http</span><span class="token comment" spellcheck="true">    #日志格式</span><span class="token attr-name">    option</span> <span class="token attr-value"> httplog</span><span class="token comment" spellcheck="true">    #日志中不记录负载均衡的心跳检测记录</span><span class="token attr-name">    option</span> <span class="token attr-value"> dontlognull</span><span class="token comment" spellcheck="true">    #连接超时（毫秒）</span><span class="token attr-name">    timeout</span> <span class="token attr-value">connect 5000</span><span class="token comment" spellcheck="true">    #客户端超时（毫秒）</span><span class="token attr-name">    timeout</span> <span class="token attr-value">client  50000</span><span class="token comment" spellcheck="true">    #服务器超时（毫秒）</span><span class="token attr-name">    timeout</span> <span class="token attr-value">server  50000</span><span class="token comment" spellcheck="true">    #监控界面   </span><span class="token attr-name">    listen</span> <span class="token attr-value"> admin_stats</span><span class="token comment" spellcheck="true">    #监控界面的访问的IP和端口</span><span class="token attr-name">    bind</span> <span class="token attr-value"> 0.0.0.0:8888</span><span class="token comment" spellcheck="true">    #访问协议</span><span class="token attr-name">    mode</span> <span class="token attr-value">       http</span><span class="token comment" spellcheck="true">    #URI相对地址</span><span class="token attr-name">    stats</span> <span class="token attr-value">uri   /dbs_monitor</span><span class="token comment" spellcheck="true">    #统计报告格式</span><span class="token attr-name">    stats</span> <span class="token attr-value">realm     Global\ statistics</span><span class="token comment" spellcheck="true">    #登陆帐户信息</span><span class="token attr-name">    stats</span> <span class="token attr-value">auth  admin:admin</span><span class="token comment" spellcheck="true">    #数据库负载均衡</span><span class="token attr-name">    listen</span> <span class="token attr-value"> proxy-mysql</span><span class="token comment" spellcheck="true">    #访问的IP和端口，haproxy开发的端口为3306</span><span class="token comment" spellcheck="true">    #假如有人访问haproxy的3306端口，则将请求转发给下面的数据库实例</span><span class="token attr-name">    bind</span> <span class="token attr-value"> 0.0.0.0:3306  </span><span class="token comment" spellcheck="true">    #网络协议</span><span class="token attr-name">    mode</span> <span class="token attr-value"> tcp</span><span class="token comment" spellcheck="true">    #负载均衡算法（轮询算法）</span><span class="token comment" spellcheck="true">    #轮询算法：roundrobin</span><span class="token comment" spellcheck="true">    #权重算法：static-rr</span><span class="token comment" spellcheck="true">    #最少连接算法：leastconn</span><span class="token comment" spellcheck="true">    #请求源IP算法：source </span><span class="token attr-name">    balance</span> <span class="token attr-value"> roundrobin</span><span class="token comment" spellcheck="true">    #日志格式</span><span class="token attr-name">    option</span> <span class="token attr-value"> tcplog</span><span class="token comment" spellcheck="true">    #在MySQL中创建一个没有权限的haproxy用户，密码为空。</span><span class="token comment" spellcheck="true">    #Haproxy使用这个账户对MySQL数据库心跳检测</span><span class="token attr-name">    option</span> <span class="token attr-value"> mysql-check user haproxy</span><span class="token attr-name">    server</span> <span class="token attr-value"> MySQL_1 172.18.0.2:3306 check weight 1 maxconn 2000  </span><span class="token attr-name">    server</span> <span class="token attr-value"> MySQL_2 172.18.0.3:3306 check weight 1 maxconn 2000  </span><span class="token attr-name">    server</span> <span class="token attr-value"> MySQL_3 172.18.0.4:3306 check weight 1 maxconn 2000 </span><span class="token comment" spellcheck="true">    #使用keepalive检测死链</span><span class="token attr-name">    option</span> <span class="token attr-value"> tcpka</span></code></pre></li><li><p>创建haproxy容器，因为当前centos的网络和win使用的是桥接，所以直接端口映射到centos上即可，如果不想用桥接，则需要修改Vagrantfile进行端口映射</p><pre class=" language-shell"><code class="language-shell">#这样可以直接访问centos的IP:8888和3306docker run -it -d -p 8888:8888 -p 3306:3306 -v /tmp/haproxy:/usr/local/etc/haproxy --name haproxy01 --privileged --net=pxc-net haproxy</code></pre></li><li><p>根据haproxy.cfg文件启动haproxy</p><pre class=" language-shell"><code class="language-shell"># 进入haproxy01容器docker exec -it haproxy01 bash # 启动 haproxyhaproxy -f /usr/local/etc/haproxy/haproxy.cfg</code></pre></li><li><p>在MySQL数据库上创建用户，用于心跳检测</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'haproxy'</span>@'<span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span><span class="token string">';[小技巧[如果创建失败，可以先输入一下命令]:    drop user '</span>haproxy<span class="token string">'@'</span><span class="token operator">%</span><span class="token string">';    flush privileges;    CREATE USER '</span>haproxy<span class="token string">'@'</span><span class="token operator">%</span><span class="token string">' IDENTIFIED BY '</span>'<span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre></li><li><p>win浏览器访问</p><pre><code>http://centos_ip:8888/dbs_monitor用户名密码都是:admin</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308215234.png" alt="1574584344082"></p></li><li><p>win上的datagrip连接haproxy01</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">ip</span><span class="token punctuation">:</span><span class="token attr-value">centos_ip</span><span class="token attr-name">port</span><span class="token punctuation">:</span><span class="token attr-value">3306</span><span class="token attr-name">user</span><span class="token punctuation">:</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">:</span><span class="token attr-value">jack123</span></code></pre></li><li><p>在haproxy连接上进行数据操作，然后查看数据库集群各个节点</p></li></ol><h2 id="2-2-Nginx-Spring-Boot-MySQL"><a href="#2-2-Nginx-Spring-Boot-MySQL" class="headerlink" title="2.2 Nginx+Spring Boot+MySQL"></a>2.2 Nginx+Spring Boot+MySQL</h2><h3 id="2-2-1-网络规划"><a href="#2-2-1-网络规划" class="headerlink" title="2.2.1 网络规划"></a>2.2.1 网络规划</h3><ol><li><p>创建一个网段</p><pre class=" language-shell"><code class="language-shell">docker network create --subnet=172.18.0.0/24 pro-net</code></pre></li><li><p>各组件网络划分</p><ul><li>mysql：172.18.0.6</li><li>spring boot：172.18.0.11/12/13</li><li>nginx：172.18.0.10</li></ul></li></ol><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308215256.png" alt="1574578294615"></p><h3 id="2-2-2-MySQL"><a href="#2-2-2-MySQL" class="headerlink" title="2.2.2 MySQL"></a>2.2.2 MySQL</h3><blockquote><p>(1)创建volume</p></blockquote><pre class=" language-shell"><code class="language-shell">docker volume create v1</code></pre><blockquote><p>(2)创建mysql容器</p></blockquote><pre class=" language-shell"><code class="language-shell">docker run -d --name my-mysql -v v1:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=jack123 --net=pro-net --ip 172.18.0.6 mysql</code></pre><blockquote><p>(3)datagrip连接，执行.mysql文件</p></blockquote><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">name</span><span class="token punctuation">:</span><span class="token attr-value">my-mysql</span><span class="token attr-name">ip</span><span class="token punctuation">:</span><span class="token attr-value">centos-ip</span><span class="token attr-name">端口</span><span class="token punctuation">:</span><span class="token attr-value">3306</span><span class="token attr-name">user</span><span class="token punctuation">:</span><span class="token attr-value">root</span><span class="token attr-name">password</span><span class="token punctuation">:</span><span class="token attr-value">jack123</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">schema</span> db_pro <span class="token keyword">collate</span> utf8mb4_0900_ai_ci<span class="token punctuation">;</span><span class="token keyword">use</span> db_pro<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    number <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-2-3-Spring-Boot项目"><a href="#2-2-3-Spring-Boot项目" class="headerlink" title="2.2.3 Spring Boot项目"></a>2.2.3 Spring Boot项目</h3><blockquote><p>Spring Boot+MyBatis实现CRUD操作，名称为 “springboot-mybatis”</p></blockquote><pre><code>(1)在本地测试该项目的功能    主要是修改application.yml文件中数据库的相关配置(2)在项目根目录下执行mvn clean package打成一个jar包    [记得修改一下application.yml文件数据库配置]    mvn clean package -Dmaven.test.skip=true    在target下找到"springboot-mybatis-0.0.1-SNAPSHOT.jar.jar"(3)在docker环境中新建一个目录 "springboot-mybatis"(4)安装文件传输工具yum install lrzsz，然后上传"springboot-mybatis-0.0.1-SNAPSHOT.jar"到该目录下，并且在此目录创建Dockerfile(5)编写Dockerfile内容    FROM openjdk:8    MAINTAINER itcrazy2016    LABEL name="springboot-mybatis" version="1.0" author="itcrazy2016"    COPY springboot-mybatis-0.0.1-SNAPSHOT.jar springboot-mybatis.jar    CMD ["java","-jar","springboot-mybatis.jar"](6)基于Dockerfile构建镜像    docker build -t sbm-image .(7)基于image创建container    docker run -d --name sb01 -p 8081:8080 --net=pro-net --ip 172.18.0.11 sbm-image(8)查看启动日志docker logs sb01(9)在win浏览器访问 http://192.168.8.118:8081/user/listall</code></pre><h4 id="2-2-3-1-网络问题"><a href="#2-2-3-1-网络问题" class="headerlink" title="2.2.3.1 网络问题"></a>2.2.3.1 网络问题</h4><p>因为sb01和my-mysql在同一个bridge的网段上，所以是可以互相ping通，比如</p><pre class=" language-shell"><code class="language-shell">docker exec -it sb01 ping 172.18.0.6ordocker exec -it sb01 ping my-mysql</code></pre><p>so? application.yml文件不妨这样修改一下？也就是把ip地址直接换成容器的名字</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">url</span><span class="token punctuation">:</span> <span class="token attr-value">jdbc:mysql://my-mysql/db_gupao_springboot?</span></code></pre><h4 id="2-2-3-2-创建多个项目容器"><a href="#2-2-3-2-创建多个项目容器" class="headerlink" title="2.2.3.2 创建多个项目容器"></a>2.2.3.2 创建多个项目容器</h4><pre class=" language-shell"><code class="language-shell">docker run -d --name sb01 -p 8081:8080 --net=pro-net --ip 172.18.0.11 sbm-imagedocker run -d --name sb02 -p 8082:8080 --net=pro-net --ip 172.18.0.12 sbm-imagedocker run -d --name sb03 -p 8083:8080 --net=pro-net --ip 172.18.0.13 sbm-image</code></pre><h3 id="2-2-4-Nginx"><a href="#2-2-4-Nginx" class="headerlink" title="2.2.4 Nginx"></a>2.2.4 Nginx</h3><blockquote><p>(1)在centos的/tmp/nginx下新建nginx.conf文件，并进行相应的配置</p></blockquote><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">user</span> <span class="token attr-value">nginx;</span><span class="token attr-name">worker_processes</span> <span class="token attr-value"> 1;</span><span class="token attr-name">events</span> <span class="token attr-value">{</span><span class="token attr-name">    worker_connections</span> <span class="token attr-value"> 1024;</span>}<span class="token attr-name">http</span> <span class="token attr-value">{</span><span class="token attr-name">    include</span> <span class="token attr-value">      /etc/nginx/mime.types;</span><span class="token attr-name">    default_type</span> <span class="token attr-value"> application/octet-stream;</span><span class="token attr-name">    sendfile</span> <span class="token attr-value">       on;</span><span class="token attr-name">    keepalive_timeout</span> <span class="token attr-value"> 65; </span><span class="token attr-name">    server</span> <span class="token attr-value">{</span><span class="token attr-name">        listen</span> <span class="token attr-value">80;</span><span class="token attr-name">        location</span> <span class="token attr-value">/ {</span><span class="token attr-name">            proxy_pass</span> <span class="token attr-value">http://balance;</span>        }    }<span class="token attr-name">    upstream</span> <span class="token attr-value">balance{  </span><span class="token attr-name">        server</span> <span class="token attr-value">172.18.0.11:8080;</span><span class="token attr-name">        server</span> <span class="token attr-value">172.18.0.12:8080;</span><span class="token attr-name">        server</span> <span class="token attr-value">172.18.0.13:8080;</span>    }<span class="token attr-name">    include</span> <span class="token attr-value">/etc/nginx/conf.d/*.conf;</span>}</code></pre><blockquote><p>(2)创建nginx容器</p><p><code>注意</code>：先在centos7上创建/tmp/nginx目录，并且创建nginx.conf文件，写上内容</p></blockquote><pre class=" language-shell"><code class="language-shell">docker run -d --name my-nginx -p 80:80 -v /tmp/nginx/nginx.conf:/etc/nginx/nginx.conf --network=pro-net --ip 172.18.0.10 nginx</code></pre><blockquote><p>(3)win浏览器访问: ip[centos]/user/listall</p><p><a href="http://172.18.0.10/user/listall" target="_blank" rel="noopener">http://172.18.0.10/user/listall</a></p></blockquote><p><code>思考</code>：若将172.18.0.11/12/13改成sb01/02/03是否可以？</p>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Docker网络大揭秘</title>
      <link href="posts/85245340.html"/>
      <url>posts/85245340.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker网络大揭秘"><a href="#Docker网络大揭秘" class="headerlink" title="Docker网络大揭秘"></a>Docker网络大揭秘</h1><blockquote><p>docker网络官网<a href="https://docs.docker.com/network/" target="_blank" rel="noopener">https://docs.docker.com/network/</a></p></blockquote><h1 id="1-计算机网络模型"><a href="#1-计算机网络模型" class="headerlink" title="1 计算机网络模型"></a>1 计算机网络模型</h1><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213138.png" alt="1574563309355"></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213201.png" alt="1574563341914"></p><h1 id="2-Linux中网卡"><a href="#2-Linux中网卡" class="headerlink" title="2 Linux中网卡"></a>2 Linux中网卡</h1><h2 id="2-1-查看网卡-网络接口"><a href="#2-1-查看网卡-网络接口" class="headerlink" title="2.1 查看网卡[网络接口]"></a>2.1 查看网卡[网络接口]</h2><blockquote><p>01-ip link show</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213216.png" alt="1574566972722"></p><p>02-ls /sys/class/net</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213220.png" alt="1574566992664"></p><p>03-ip a</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213223.png" alt="1574567016722"></p></blockquote><h2 id="2-2-网卡"><a href="#2-2-网卡" class="headerlink" title="2.2 网卡"></a>2.2 网卡</h2><h3 id="2-2-1-ip-a解读"><a href="#2-2-1-ip-a解读" class="headerlink" title="2.2.1 ip a解读"></a>2.2.1 ip a解读</h3><blockquote><p>状态：UP/DOWN/UNKOWN等<br>link/ether：MAC地址<br>inet：绑定的IP地址</p></blockquote><h3 id="2-2-2-配置文件"><a href="#2-2-2-配置文件" class="headerlink" title="2.2.2 配置文件"></a>2.2.2 配置文件</h3><blockquote><p>在Linux中网卡对应的其实就是文件，所以找到对应的网卡文件即可</p><p>比如：cat <code>/etc/sysconﬁg/network-scripts/ifcfg-eth0</code></p></blockquote><h3 id="2-2-3-给网卡添加IP地址"><a href="#2-2-3-给网卡添加IP地址" class="headerlink" title="2.2.3 给网卡添加IP地址"></a>2.2.3 给网卡添加IP地址</h3><blockquote><p>当然，这块可以直接修改 <code>ifcfg-*</code> 文件，但是我们通过命令添加试试</p><pre class=" language-shell"><code class="language-shell">(1)ip addr add 192.168.0.100/24 dev eth0(2)删除IP地址ip addr delete 192.168.0.100/24 dev eth0</code></pre></blockquote><h3 id="2-2-4-网卡启动与关闭"><a href="#2-2-4-网卡启动与关闭" class="headerlink" title="2.2.4 网卡启动与关闭"></a>2.2.4 网卡启动与关闭</h3><p><code>重启网卡</code>：service network restart / systemctl restart network</p><p><code>启动/关闭某个网卡</code>：ifup/ifdown eth0 or ip link set eth0 up/down</p><h1 id="3-Network-Namespace"><a href="#3-Network-Namespace" class="headerlink" title="3 Network Namespace"></a>3 Network Namespace</h1><blockquote><p>在linux上，网络的隔离是通过 network namespace 来管理的，不同的network namespace是互相隔离的</p><p>ip netns list：查看当前机器上的 network namespace</p><p><code>network namespace 的管理</code></p><pre class=" language-shell"><code class="language-shell">ip netns list        #查看ip netns add ns1     #添加ip netns delete ns1  #删除</code></pre></blockquote><h2 id="3-1-namespace实战"><a href="#3-1-namespace实战" class="headerlink" title="3.1 namespace实战"></a>3.1 namespace实战</h2><ol><li><p>创建一个 network namespace</p><pre class=" language-shell"><code class="language-shell">ip netns add ns1</code></pre></li><li><p>查看该namespace下网卡的情况</p><pre class=" language-shell"><code class="language-shell">ip netns exec ns1 ip a</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213642.png" alt="1574567890599"></p></li><li><p>启动ns1上的lo网卡</p><pre class=" language-shell"><code class="language-shell">ip netns exec ns1 ifup loorip netns exec ns1 ip link set lo up</code></pre></li><li><p>再次查看<br>可以发现state变成了UNKOWN</p><pre class=" language-shell"><code class="language-shell">ip netns exec ns1 ip a</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213654.png" alt="1574567864305"></p></li><li><p>再次创建一个network namespace</p><pre class=" language-shell"><code class="language-shell">ip netns add ns2ip netns exec ns2 ifup lo</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213659.png" alt="1574563785361"></p></li><li><p>此时想让两个namespace网络连通起来<br><code>veth pair</code> ：Virtual Ethernet Pair，是一个成对的端口，可以实现上述功能</p></li></ol><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213714.png" alt="1574563810478"></p><ol start="7"><li><p>创建一对link，也就是接下来要通过veth pair连接的link</p><pre class=" language-shell"><code class="language-shell">ip link add veth-ns1 type veth peer name veth-ns2</code></pre></li><li><p>查看link情况</p><pre class=" language-shell"><code class="language-shell">ip link </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213733.png" alt="1574568282475"></p></li><li><p>将veth-ns1加入ns1中，将veth-ns2加入ns2中</p><pre class=" language-shell"><code class="language-shell">ip link set veth-ns1 netns ns1 ip link set veth-ns2 netns ns2 ip link show</code></pre><p>发现少了两块网卡，这两块网卡分别被派给 ns1 和 ns2</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213744.png" alt="1574568439820"></p></li><li><p>查看宿主机和ns1，ns2的link情况</p><pre class=" language-shell"><code class="language-shell">ip link ip netns exec ns1 ip link ip netns exec ns2 ip link </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213748.png" alt="1574568573117"></p></li><li><p>此时veth-ns1和veth-ns2还没有ip地址，显然通信还缺少点条件</p><pre class=" language-shell"><code class="language-shell"> ip netns exec ns1 ip addr add 192.168.0.11/24 dev veth-ns1  ip netns exec ns2 ip addr add 192.168.0.12/24 dev veth-ns2 </code></pre><p>这里根据实际情况添加的ip是 172.16.11.11/24 </p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213801.png" alt="1574568861400"></p></li><li><p>再次查看，发现state是DOWN，并且还是没有IP地址</p><pre class=" language-shell"><code class="language-shell"> ip netns exec ns1 ip link  ip netns exec ns2 ip link </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213807.png" alt="1574568830352"></p></li><li><p>启动veth-ns1和veth-ns2</p><pre class=" language-shell"><code class="language-shell"> ip netns exec ns1 ip link set veth-ns1 up  ip netns exec ns2 ip link set veth-ns2 up </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213812.png" alt="1574568880344"></p></li><li><p>再次查看，发现state是UP，同时有IP</p><pre class=" language-shell"><code class="language-shell"> ip netns exec ns1 ip a  ip netns exec ns2 ip a </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213815.png" alt="1574569122789"></p></li><li><p>此时两个network namespace互相ping一下，发现是可以ping通的</p><pre class=" language-shell"><code class="language-shell"> ip netns exec ns1 ping 192.168.0.12  ip netns exec ns2 ping 192.168.0.11 </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213818.png" alt="1574569175046"></p></li></ol><h2 id="2-2-Container的NS"><a href="#2-2-Container的NS" class="headerlink" title="2.2 Container的NS"></a>2.2 Container的NS</h2><p>按照上面的描述，实际上每个container，都会有自己的network namespace，并且是独立的，我们可以进入<br>到容器中进行验证</p><ol><li><p>不妨创建两个container看看？</p><pre class=" language-shell"><code class="language-shell">docker run -d --name tomcat01 -p 8081:8080 tomcat docker run -d --name tomcat02 -p 8082:8080 tomcat </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213833.png" alt="1574569564515"></p></li><li><p>进入到两个容器中，并且查看ip</p><pre class=" language-shell"><code class="language-shell">docker exec -it tomcat01 ip a docker exec -it tomcat02 ip a </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213853.png" alt="1574569609338"></p></li><li><p>互相 ping一下是可以ping通的</p></li></ol><blockquote><p>值得我们思考的是，此时tomcat01和tomcat02属于两个network namespace，是如何能够ping通的？<br>有些小伙伴可能会想，不就跟上面的namespace实战一样吗？<strong>注意这里并没有veth-pair技术</strong> </p></blockquote><h1 id="4-深入分析container网络-Bridge"><a href="#4-深入分析container网络-Bridge" class="headerlink" title="4 深入分析container网络-Bridge"></a>4 深入分析container网络-Bridge</h1><h2 id="4-1-docker0默认bridge"><a href="#4-1-docker0默认bridge" class="headerlink" title="4.1 docker0默认bridge"></a>4.1 docker0默认bridge</h2><ol><li><p>查看centos的网络:ip a，可以发现</p><pre class=" language-shell"><code class="language-shell">3: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default    link/ether 02:42:8e:e1:62:9f brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:8eff:fee1:629f/64 scope link       valid_lft forever preferred_lft forever21: veth9053ca2@if20: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default    link/ether 9a:ae:93:25:4d:f9 brd ff:ff:ff:ff:ff:ff link-netnsid 2    inet6 fe80::98ae:93ff:fe25:4df9/64 scope link       valid_lft forever preferred_lft forever23: veth5a11411@if22: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default    link/ether 56:b0:2c:db:26:08 brd ff:ff:ff:ff:ff:ff link-netnsid 3    inet6 fe80::54b0:2cff:fedb:2608/64 scope link       valid_lft forever preferred_lft forever</code></pre></li><li><p>查看容器tomcat01的网络：docker exec -it tomcat01 ip a，可以发现</p><pre class=" language-shell"><code class="language-shell">1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever20: eth0@if21: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever</code></pre></li><li><p>在centos中ping一下tomcat01的网络，发现可以ping通<br>ping 172.17.0.2 </p><pre class=" language-shell"><code class="language-shell">[root@bogon ~]# ping 172.17.0.2 PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data. 64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.120 ms 64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.060 ms 64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.056 ms </code></pre></li><li><p>既然可以ping通，而且centos和tomcat1又属于不同的network namespace，是怎么连接的？<br>很显然，跟之前的实战是一样的，画个图</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308213943.png" alt="1574564447302"></p></li><li><p>也就是说，在tomcat01中有一个eth0和centos的docker0中有一个veth3是成对的，类似于之前实战中的<br>veth-ns1和veth-ns2，不妨再通过一个命令确认下：<code>brctl</code></p><pre class=" language-shell"><code class="language-shell"> # 安装一下：yum install bridge-utils brctl show </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214021.png" alt="1574570287629"></p></li><li><p>那为什么tomcat01和tomcat02能ping通呢？不多说，直接上图</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214036.png" alt="1574564504647"></p></li><li><p>这种网络连接方法我们称之为Bridge，其实也可以通过命令查看docker中的网络模式：docker network ls<br>bridge也是docker中默认的网络模式</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214044.png" alt="1574570820455"></p></li><li><p>不妨检查一下bridge：docker network inspect bridge</p><pre class=" language-json"><code class="language-json"><span class="token property">"Containers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"6ad312b32f62b48935f3c95c58ae061df710bfebbd3d721b467507b9516eeb81"</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"tomcat02"</span><span class="token punctuation">,</span>         <span class="token property">"EndpointID"</span><span class="token operator">:</span>         <span class="token string">"aa9c612c79f867e874d0cae1aab45374373b61e9cdbe79925d07ae2e89a1cca0"</span><span class="token punctuation">,</span>         <span class="token property">"MacAddress"</span><span class="token operator">:</span> <span class="token string">"02:42:ac:11:00:03"</span><span class="token punctuation">,</span>         <span class="token property">"IPv4Address"</span><span class="token operator">:</span> <span class="token string">"172.17.0.3/16"</span><span class="token punctuation">,</span>         <span class="token property">"IPv6Address"</span><span class="token operator">:</span> <span class="token string">""</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token property">"f49fc396d8e04f2b330163d91bb5d1482715202b4e2fd0c7f42833722787742a"</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"tomcat01"</span><span class="token punctuation">,</span>         <span class="token property">"EndpointID"</span><span class="token operator">:</span>         <span class="token string">"c5440b063e8fc0c9c44f3f61bf68f577283417eb23cfa9a361d37973d01a8ba5"</span><span class="token punctuation">,</span>         <span class="token property">"MacAddress"</span><span class="token operator">:</span> <span class="token string">"02:42:ac:11:00:02"</span><span class="token punctuation">,</span>         <span class="token property">"IPv4Address"</span><span class="token operator">:</span> <span class="token string">"172.17.0.2/16"</span><span class="token punctuation">,</span>         <span class="token property">"IPv6Address"</span><span class="token operator">:</span> <span class="token string">""</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li><li><p>在tomcat01容器中是可以访问互联网的，顺便把这张图画一下咯，NAT是通过iptables实现的</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214104.png" alt="1574564607653"></p></li></ol><h2 id="4-2-创建自己的network"><a href="#4-2-创建自己的network" class="headerlink" title="4.2 创建自己的network"></a>4.2 创建自己的network</h2><ol><li><p>创建一个network，类型为bridge</p><pre class=" language-shell"><code class="language-shell">docker network create tomcat-net or docker network create --subnet=172.18.0.0/24 tomcat-net </code></pre></li><li><p>查看已有的 network：<code>docker network ls</code></p><pre class=" language-shell"><code class="language-shell">NETWORK ID          NAME                DRIVER              SCOPE a1aa0d802154        bridge              bridge              local 058b2ea4bf85        host                host                local 0604ff19e224        none                null                local 3012e3afd264        tomcat-net          bridge              local </code></pre></li><li><p>查看tomcat-net详情信息：</p><pre class=" language-shell"><code class="language-shell">docker network inspect tomcat-net</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214135.png" alt="1574571059011"></p><p>可以发现 tomcat-net 的网段在 172.18.0.*</p></li><li><p>创建tomcat的容器，并且指定使用 tomcat-net</p><pre class=" language-shell"><code class="language-shell">docker run -d --name custom-net-tomcat --network tomcat-net tomcat </code></pre></li><li><p>查看custom-net-tomcat的网络信息</p><pre class=" language-shell"><code class="language-shell">docker exec -it custom-net-tomcat ip a </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214150.png" alt="1574571219989"></p><p>custom-net-tomcat 的 ip 是 172.18.0.2，在 172.18 网段</p></li><li><p>查看网卡信息</p><pre class=" language-shell"><code class="language-shell">ip a </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214156.png" alt="1574571438805"></p></li><li><p>查看网卡接口  <code>brctl show</code> </p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214201.png" alt="1574571555229"></p></li><li><p>此时在custom-net-tomcat容器中ping一下tomcat01的ip会如何？发现无法ping通</p><pre class=" language-shell"><code class="language-shell">docker exec -it custom-net-tomcat ping 172.17.0.2 PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data. ^C --- 172.17.0.2 ping statistics --- 4 packets transmitted, 0 received, 100% packet loss, time 3000ms </code></pre></li><li><p>此时如果tomcat01容器能够连接到tomcat-net上应该就可以咯</p><pre class=" language-shell"><code class="language-shell">docker network connect tomcat-net tomcat01 </code></pre></li><li><p>查看tomcat-net网络，可以发现tomcat01这个容器也在其中</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214217.png" alt="1574571903558"></p></li><li><p>此时进入到tomcat01或者custom-net-tomcat中，不仅可以通过ip地址ping通，而且可以通过名字ping<br>到，这时候因为都连接到了用户自定义的tomcat-net bridge上</p><pre class=" language-shell"><code class="language-shell">docker exec -it tomcat01 bash </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214228.png" alt="1574572062945"></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214233.png" alt="1574572113713"></p><p><strong>但是ping tomcat02是不通的</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214236.png" alt="1574572288284"></p></li></ol><h1 id="5-深入分析Container网络-Host-amp-None"><a href="#5-深入分析Container网络-Host-amp-None" class="headerlink" title="5 深入分析Container网络-Host &amp; None"></a>5 深入分析Container网络-Host &amp; None</h1><h2 id="5-1-Host"><a href="#5-1-Host" class="headerlink" title="5.1 Host"></a>5.1 Host</h2><ol><li><p>创建一个tomcat容器，并且指定网络为host</p><pre class=" language-shell"><code class="language-shell">docker run -d --name my-tomcat-host --network host tomcat </code></pre></li><li><p>查看ip地址</p><pre class=" language-shell"><code class="language-shell">docker exec -it my-tomcat-host ip a 可以发现和centos是一样的</code></pre></li><li><p>检查host网络</p><pre class=" language-json"><code class="language-json"><span class="token property">"Containers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"e1f00d47db344b6688e99c0f5b393e232309fbe1a4d9c3fc3e1ce7c107f3312d"</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"my-tomcat-host"</span><span class="token punctuation">,</span>         <span class="token property">"EndpointID"</span><span class="token operator">:</span>         <span class="token string">"f08456d9dca024cf6f911f8d32329ba2587ea89554c96b77c32698ace6998525"</span><span class="token punctuation">,</span>         <span class="token property">"MacAddress"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>         <span class="token property">"IPv4Address"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>         <span class="token property">"IPv6Address"</span><span class="token operator">:</span> <span class="token string">""</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li></ol><p>使用 host 网络不需要进行端口映射</p><h2 id="5-2-None"><a href="#5-2-None" class="headerlink" title="5.2 None"></a>5.2 None</h2><ol><li><p>创建一个tomcat容器，并且指定网络为none</p><pre class=" language-shell"><code class="language-shell">docker run -d --name my-tomcat-none --network none tomcat </code></pre></li><li><p>查看ip地址</p><pre class=" language-shell"><code class="language-shell">docker exec -it my-tomcat-none ip a 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000     link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00     inet 127.0.0.1/8 scope host lo        valid_lft forever preferred_lft forever </code></pre></li><li><p>检查none网络</p><pre class=" language-json"><code class="language-json"><span class="token property">"Containers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>     <span class="token property">"bb3f0db4fa76a25b5377da9c3bbf087ac7ef0de0a3f9c37a4ae959983d33105c"</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"my-tomcat-none"</span><span class="token punctuation">,</span>         <span class="token property">"EndpointID"</span><span class="token operator">:</span>         <span class="token string">"26055c08c968f9d6d03d10b3b66dfea004c35f5d2bd4067a2306566973e92f9e"</span><span class="token punctuation">,</span>         <span class="token property">"MacAddress"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>         <span class="token property">"IPv4Address"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>         <span class="token property">"IPv6Address"</span><span class="token operator">:</span> <span class="token string">""</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></li></ol><h1 id="6-端口映射及折腾"><a href="#6-端口映射及折腾" class="headerlink" title="6 端口映射及折腾"></a>6 端口映射及折腾</h1><h2 id="6-1-端口映射"><a href="#6-1-端口映射" class="headerlink" title="6.1 端口映射"></a>6.1 端口映射</h2><ol><li><p>创建一个tomcat容器，名称为port-tomcat</p><pre class=" language-shell"><code class="language-shell">docker run -d --name port-tomcat tomcat </code></pre></li><li><p>思考一下要访问该tomcat怎么做？肯定是通过ip:port方式</p><pre class=" language-shell"><code class="language-shell">docker exec -it port-tomcat bash curl localhost:8080 </code></pre></li><li><p>那如果要在centos7上访问呢？</p><pre class=" language-shell"><code class="language-shell">docker exec -it port-tomcat ip a     ---->得到其ip地址，比如172.17.0.4 curl 172.17.0.4:8080 </code></pre><p><code>小结</code>：之所以能够访问成功，是因为centos上的docker0连接了port-tomcat的network namespace</p></li><li><p>那如果要在centos7通过curl localhost方式访问呢？显然就要将port-tomcat的8080端口映射到centos上</p><pre class=" language-shell"><code class="language-shell">docker rm -f port-tomcat docker run -d --name port-tomcat -p 8090:8080 tomcat curl localhost:8090 </code></pre></li></ol><h2 id="6-2-折腾"><a href="#6-2-折腾" class="headerlink" title="6.2 折腾"></a>6.2 折腾</h2><blockquote><p>(1)centos7是运行在win10上的虚拟机，如果想要在win10上通过ip:port方式访问呢？</p></blockquote><pre><code>#此时需要centos和win网络在同一个网段，所以在Vagrantfile文件中 #这种方式等同于桥接网络。也可以给该网络指定使用物理机哪一块网卡，比如 #config.vm.network"public_network",:bridge=&gt;'en1: Wi-Fi (AirPort)' config.vm.network"public_network"   centos7: ip a    ---&gt;192.168.8.118 win10:浏览器访问   192.168.8.118:9080 </code></pre><blockquote><p>(2)如果也想把centos7上的8090映射到win10的某个端口呢？然后浏览器访问localhost:port</p></blockquote><pre><code>#此时需要将centos7上的端口和win10上的端口做映射 config.vm.network"forwarded_port",guest:8098,host:8090 #记得vagrant reload生效一下 win10：浏览器访问   localhost：8098 </code></pre><h2 id="6-3-画个图强化一下"><a href="#6-3-画个图强化一下" class="headerlink" title="6.3 画个图强化一下"></a>6.3 画个图强化一下</h2><p>什么？上面的过程还是觉得有些难理解？不急，画个图展现一下</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214417.png" alt="1574565654107"></p><h1 id="7-多机之间的container通信"><a href="#7-多机之间的container通信" class="headerlink" title="7 多机之间的container通信"></a>7 多机之间的container通信</h1><blockquote><p>多机之间的container通信[放到Docker Swarm中详细聊] </p></blockquote><blockquote><p>在同一台centos7机器上，发现无论怎么折腾，我们一定有办法让两个container通信。<br>那如果是在两台centos7机器上呢？画个图</p></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214428.png" alt="1574565684257"></p><pre><code>(1)使得两边的eth0能够通信 (2)前提要确保spring-boot-project container和mysql container的IP地址不一样 (3)将spring-boot-project中的所有信息当成eth0要传输给另外一端的信息 (4)具体通过vxlan技术实现  www.evoila.de/2015/11/06/what-is-vxlan-and-how-it-works (5)处在vxlan的底层:underlay    处在xxlan的上层:overlay </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308214445.png" alt="1574565701714"></p>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Docker镜像和容器</title>
      <link href="posts/b7f0d5ad.html"/>
      <url>posts/b7f0d5ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="Image-and-Container"><a href="#Image-and-Container" class="headerlink" title="Image and Container"></a>Image and Container</h1><h1 id="1-深入探讨Image"><a href="#1-深入探讨Image" class="headerlink" title="1 深入探讨Image"></a>1 深入探讨Image</h1><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308212323.png" alt="1574497514630"></p><blockquote><p>说白了，image就是由一层一层的layer组成的。</p></blockquote><h2 id="1-1-官方image"><a href="#1-1-官方image" class="headerlink" title="1.1 官方image"></a>1.1 官方image</h2><blockquote><p><a href="https://github.com/docker-library" target="_blank" rel="noopener">https://github.com/docker-library</a></p></blockquote><p><strong>mysql</strong></p><blockquote><p><a href="https://github.com/docker-library/mysql/blob/master/5.7/Dockerfile" target="_blank" rel="noopener">https://github.com/docker-library/mysql/blob/master/5.7/Dockerfile</a></p></blockquote><h2 id="1-2-Dockerﬁle"><a href="#1-2-Dockerﬁle" class="headerlink" title="1.2 Dockerﬁle"></a>1.2 Dockerﬁle</h2><blockquote><p>不妨我们也来制作一个自己的image镜像，顺便学习一下Dockerﬁle文件中常见语法</p></blockquote><h3 id="1-2-1-FROM"><a href="#1-2-1-FROM" class="headerlink" title="1.2.1 FROM"></a>1.2.1 FROM</h3><p>指定基础镜像，比如 FROM ubuntu:14.04</p><pre class=" language-dockerfile"><code class="language-dockerfile">FROM ubuntu:14.04</code></pre><h3 id="1-2-2-RUN"><a href="#1-2-2-RUN" class="headerlink" title="1.2.2 RUN"></a>1.2.2 RUN</h3><p>在镜像内部执行一些命令，比如安装软件，配置环境等，换行可以使用””</p><pre class=" language-dockerfile"><code class="language-dockerfile">RUN groupadd -r mysql && useradd -r -g mysql mysql</code></pre><h3 id="1-2-3-ENV"><a href="#1-2-3-ENV" class="headerlink" title="1.2.3 ENV"></a>1.2.3 ENV</h3><p>设置变量的值，ENV MYSQL_MA JOR 5.7，可以通过docker run –e key=value修改，后面可以直接使用${MYSQL_MA JOR}</p><pre class=" language-dockerfile"><code class="language-dockerfile">ENV MYSQL_MAJOR 5.7</code></pre><h3 id="1-2-4-LABEL"><a href="#1-2-4-LABEL" class="headerlink" title="1.2.4 LABEL"></a>1.2.4 LABEL</h3><p>设置镜像标签</p><pre class=" language-dockerfile"><code class="language-dockerfile">LABEL email="itcrazy2016@163.com"LABEL name="itcrazy2016"</code></pre><h3 id="1-2-5-VOLUME"><a href="#1-2-5-VOLUME" class="headerlink" title="1.2.5 VOLUME"></a>1.2.5 VOLUME</h3><p>指定数据的挂在目录</p><pre class=" language-dockerfile"><code class="language-dockerfile">VOLUME /var/lib/mysql</code></pre><h3 id="1-2-5-COPY"><a href="#1-2-5-COPY" class="headerlink" title="1.2.5 COPY"></a>1.2.5 COPY</h3><p>将主机的文件复制到镜像内，如果目录不存在，会自动创建所需要的目录，注意只是复制，不会提取和解压</p><pre class=" language-dockerfile"><code class="language-dockerfile">COPY docker-entrypoint.sh /usr/local/bin/</code></pre><h3 id="1-2-6-ADD"><a href="#1-2-6-ADD" class="headerlink" title="1.2.6 ADD"></a>1.2.6 ADD</h3><p>将主机的文件复制到镜像内，和COPY类似，只是ADD会对压缩文件提取和解压</p><pre class=" language-dockerfile"><code class="language-dockerfile">ADD application.yml /etc/itcrazy2016/</code></pre><h3 id="1-2-7-WORKDIR"><a href="#1-2-7-WORKDIR" class="headerlink" title="1.2.7 WORKDIR"></a>1.2.7 WORKDIR</h3><p>指定镜像的工作目录，之后的命令都是基于此目录工作，若不存在则创建</p><pre class=" language-dockerfile"><code class="language-dockerfile">WORKDIR /usr/localWORKDIR tomcatRUN touch test.txt</code></pre><blockquote><p>会在/usr/local/tomcat下创建test.txt文件</p></blockquote><pre class=" language-dockerfile"><code class="language-dockerfile">WORKDIR /rootADD app.yml test/</code></pre><blockquote><p>会在/root/test下多出一个app.yml文件</p></blockquote><h3 id="1-2-8-CMD"><a href="#1-2-8-CMD" class="headerlink" title="1.2.8 CMD"></a>1.2.8 CMD</h3><p>容器启动的时候默认会执行的命令，若有多个CMD命令，则最后一个生效</p><pre class=" language-dockerfile"><code class="language-dockerfile">CMD ["mysqld"]或CMD mysqld</code></pre><h3 id="1-2-9-ENTRYPOINT"><a href="#1-2-9-ENTRYPOINT" class="headerlink" title="1.2.9 ENTRYPOINT"></a>1.2.9 ENTRYPOINT</h3><p>和CMD的使用类似</p><pre class=" language-dockerfile"><code class="language-dockerfile">ENTRYPOINT ["docker-entrypoint.sh"]</code></pre><p><code>和CMD的不同</code></p><p>docker run执行时，会覆盖CMD的命令，而ENTRYPOINT不会</p><h3 id="1-2-10-EXPOSE"><a href="#1-2-10-EXPOSE" class="headerlink" title="1.2.10 EXPOSE"></a>1.2.10 EXPOSE</h3><p>指定镜像要暴露的端口，启动镜像时，可以使用-p将该端口映射给宿主机</p><pre class=" language-dockerfile"><code class="language-dockerfile">EXPOSE 3306 33060</code></pre><h2 id="1-3-Dockerﬁle实战"><a href="#1-3-Dockerﬁle实战" class="headerlink" title="1.3 Dockerﬁle实战"></a>1.3 Dockerﬁle实战</h2><blockquote><p>Dockerﬁle实战Spring Boot项目 </p></blockquote><pre class=" language-java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>创建一个Spring Boot项目    dockerfile<span class="token operator">-</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>写一个controller    <span class="token annotation punctuation">@RestController</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DockerController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dockerfile"</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@ResponseBody</span>        String <span class="token function">dockerfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"hello docker"</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>mvn clean <span class="token keyword">package</span> 打成一个jar包    在target下找到 <span class="token string">"dockerfile-demo-0.0.1-SNAPSHOT.jar"</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>在docker环境中新建一个目录 <span class="token string">"first-dockerfile"</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>上传<span class="token string">"dockerfile-demo-0.0.1-SNAPSHOT.jar"</span>到该目录下，并且在此目录创建<span class="token function">Dockerfile</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>创建Dockerfile文件，编写内容    FROM openjdk<span class="token operator">:</span><span class="token number">8</span>    MAINTAINER itcrazy2016    LABEL name<span class="token operator">=</span><span class="token string">"dockerfile-demo"</span> version<span class="token operator">=</span><span class="token string">"1.0"</span> author<span class="token operator">=</span><span class="token string">"itcrazy2016"</span>    COPY dockerfile<span class="token operator">-</span>demo<span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token punctuation">.</span>jar dockerfile<span class="token operator">-</span>image<span class="token punctuation">.</span>jar    CMD <span class="token punctuation">[</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"-jar"</span><span class="token punctuation">,</span><span class="token string">"dockerfile-image.jar"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>基于Dockerfile构建镜像    docker build <span class="token operator">-</span>t test<span class="token operator">-</span>docker<span class="token operator">-</span>image <span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>基于image创建container    docker run <span class="token operator">-</span>d <span class="token operator">--</span>name user01 <span class="token operator">-</span>p <span class="token number">6666</span><span class="token operator">:</span><span class="token number">8080</span> test<span class="token operator">-</span>docker<span class="token operator">-</span><span class="token function">image</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>查看启动日志docker logs <span class="token function">user01</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>宿主机上访问curl localhost<span class="token operator">:</span><span class="token number">6666</span><span class="token operator">/</span>dockerfile    hello <span class="token function">docker</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>还可以再次启动一个    docker run <span class="token operator">-</span>d <span class="token operator">--</span>name user02 <span class="token operator">-</span>p <span class="token number">8081</span><span class="token operator">:</span><span class="token number">8080</span> test<span class="token operator">-</span>docker<span class="token operator">-</span>image</code></pre><h2 id="1-4-镜像仓库"><a href="#1-4-镜像仓库" class="headerlink" title="1.4 镜像仓库"></a>1.4 镜像仓库</h2><h3 id="1-4-1-docker-hub"><a href="#1-4-1-docker-hub" class="headerlink" title="1.4.1 docker hub"></a>1.4.1 docker hub</h3><blockquote><p>hub.docker.com<br>itcrazy2018登录</p></blockquote><pre class=" language-shell"><code class="language-shell">(1)在docker机器上登录    docker login(2)输入用户名和密码(3)docker push itcrazy2018/test-docker-image[注意镜像名称要和docker id一致，不然push不成功](4)给image重命名，并删除掉原来的    docker tag test-docker-image itcrazy2018/test-docker-image:v1.0    docker rmi -f test-docker-image(5)再次推送，刷新hub.docker.com后台，发现成功    docker push itcrazy2018/test-docker-image:v1.0(6)提供别人下载，并且运行    docker pull itcrazy2018/test-docker-image    docker run -d --name user01 -p 6661:8080 itcrazy2018/test-docker-image</code></pre><h3 id="1-4-2-阿里云docker-hub"><a href="#1-4-2-阿里云docker-hub" class="headerlink" title="1.4.2 阿里云docker hub"></a>1.4.2 阿里云docker hub</h3><blockquote><p>阿里云docker仓库<br><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/repositories" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/repositories</a><br>参考手册<br><a href="https://cr.console.aliyun.com/repository/cn-hangzhou/dreamit/image-repo/details" target="_blank" rel="noopener">https://cr.console.aliyun.com/repository/cn-hangzhou/dreamit/image-repo/details</a></p></blockquote><pre class=" language-shell"><code class="language-shell">(1)登录到阿里云docker仓库sudo docker login --username=itcrazy2016@163.com registry.cn-hangzhou.aliyuncs.com(2)输入密码(3)创建命名空间，比如itcrazy2016(4)给image打tagsudo docker tag test-docker-image registry.cn-hangzhou.aliyuncs.com/itcrazy2016/test-docker-image:v1.0(5)推送镜像到docker阿里云仓库sudo docker push registry.cn-hangzhou.aliyuncs.com/itcrazy2016/test-docker-image:v1.0(6)别人下载，并且运行    docker pull registry.cn-hangzhou.aliyuncs.com/itcrazy2016/test-docker-image:v1.0    docker run -d --name user01 -p 6661:8080 registry.cn-hangzhou.aliyuncs.com/itcrazy2016/test-docker-image:v1.0</code></pre><h3 id="1-4-3-搭建Docker-Harbor"><a href="#1-4-3-搭建Docker-Harbor" class="headerlink" title="1.4.3 搭建Docker Harbor"></a>1.4.3 搭建Docker Harbor</h3><pre><code>(1)访问github上的harbor项目    https://github.com/goharbor/harbor(2)下载版本，比如1.7.1    https://github.com/goharbor/harbor/releases(3)找一台安装了docker-compose[这个请看后文]，上传并解压    tar -zxvf xxx.tar.gz(4)进入到harbor目录    修改harbor.cfg文件，主要是ip地址的修改成当前机器的ip地址    同时也可以看到Harbor的密码，默认是Harbor12345(5)安装harbor，需要一些时间，依赖 docker-compose    sh install.sh(6)浏览器访问，比如39.100.39.63，输入用户名和密码即可</code></pre><h2 id="1-5-Image常见操作"><a href="#1-5-Image常见操作" class="headerlink" title="1.5 Image常见操作"></a>1.5 Image常见操作</h2><pre class=" language-shell"><code class="language-shell">(1)查看本地image列表    docker images    docker image ls(2)获取远端镜像    docker pull(3)删除镜像[注意此镜像如果正在使用，或者有关联的镜像，则需要先处理完]    docker image rm imageid    docker rmi -f imageid    docker rmi -f $(docker image ls)     删除所有镜像(4)运行镜像    docker run image(5)发布镜像    docker push</code></pre><h1 id="2-深入探讨Container"><a href="#2-深入探讨Container" class="headerlink" title="2 深入探讨Container"></a>2 深入探讨Container</h1><blockquote><p>既然container是由image运行起来的，那么是否可以理解为container和image有某种关系？</p></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308212902.png" alt="1574498234425"></p><p><code>理解</code> ：其实可以理解为container只是基于image之后的layer而已，也就是可以通过docker run image 创建出一个container出来。</p><h2 id="2-1-container到image"><a href="#2-1-container到image" class="headerlink" title="2.1 container到image"></a>2.1 container到image</h2><blockquote><p>既然container是基于image之上的，想想是否能够由一个container反推出image呢？<br>肯定是可以的，比如通过docker run运行起一个container出来，这时候对container对一些修改，然后再生成一个新的image，这时候image的由来就不仅仅只能通过Dockerﬁle咯。</p></blockquote><p><code>实验</code></p><pre class=" language-shell"><code class="language-shell">(1)拉取一个centos image    docker pull centos(2)根据centos镜像创建出一个container    docker run -d -it --name my-centos centos(3)进入my-centos容器中    docker exec -it my-centos bash(4)输入vim命令    bash: vim: command not found(5)我们要做的是    对该container进行修改，也就是安装一下vim命令，然后将其生成一个新的centos(6)在centos的container中安装vim    yum install -y vim(7)退出容器，将其生成一个新的centos，名称为"vim-centos-image"    docker commit my-centos vim-centos-image(8)查看镜像列表，并且基于"vim-centos-image"创建新的容器    docker run -d -it --name my-vim-centos vim-centos-image(9)进入到my-vim-centos容器中，检查vim命令是否存在    docker exec -it my-vim-centos bash    vim</code></pre><p><code>结论</code> ：可以通过docker commit命令基于一个container重新生成一个image，但是一般得到image的方式不建议这么做，不然image怎么来的就全然不知道。</p><h2 id="2-2-container资源限制"><a href="#2-2-container资源限制" class="headerlink" title="2.2 container资源限制"></a>2.2 container资源限制</h2><blockquote><p>如果不对container的资源做限制，它就会无限制地使用物理机的资源，这样显然是不合适的。</p><p><code>查看资源情况</code> ：docker stats tomcat01</p></blockquote><h3 id="2-2-1-内存限制"><a href="#2-2-1-内存限制" class="headerlink" title="2.2.1 内存限制"></a>2.2.1 内存限制</h3><pre class=" language-shell"><code class="language-shell">--memory    Memory limit如果不设置 --memory-swap，其大小和memory一样docker run -d --memory 100M --name tomcat1 tomcat</code></pre><h3 id="2-2-2-CPU限制"><a href="#2-2-2-CPU限制" class="headerlink" title="2.2.2 CPU限制"></a>2.2.2 CPU限制</h3><pre class=" language-shell"><code class="language-shell">--cpu-shares    权重docker run -d --cpu-shares 10 --name tomcat2 tomcat</code></pre><h3 id="2-2-3-图形化资源监控"><a href="#2-2-3-图形化资源监控" class="headerlink" title="2.2.3 图形化资源监控"></a>2.2.3 图形化资源监控</h3><blockquote><p><a href="https://github.com/weaveworks/scope" target="_blank" rel="noopener">https://github.com/weaveworks/scope</a></p></blockquote><pre class=" language-shell"><code class="language-shell">sudo curl -L git.io/scope -o /usr/local/bin/scopesudo chmod a+x /usr/local/bin/scopescope launch 39.100.39.63</code></pre><pre class=" language-shell"><code class="language-shell"># 停止scopescope stop# 同时监控两台机器，在两台机器中分别执行如下命令scope launch ip1 ip2</code></pre><h2 id="2-3-container常见操作"><a href="#2-3-container常见操作" class="headerlink" title="2.3 container常见操作"></a>2.3 container常见操作</h2><pre class=" language-shell"><code class="language-shell">(1)根据镜像创建容器    docker run -d --name -p 9090:8080 my-tomcat tomcat(2)查看运行中的container    docker ps(3)查看所有的container[包含退出的]    docker ps -a(4)删除container    docker rm containerid    docker rm -f $(docker ps -aq)    删除所有container(5)进入到一个container中    docker exec -it container bash(6)根据container生成image    docker commit container imageId (7)查看某个container的日志    docker logs container(8)查看容器资源使用情况    docker stats container(9)查看容器详情信息    docker inspect container(10)停止/启动容器    docker stop/start container    docker stop $(docker ps -aq)</code></pre><h1 id="3-底层技术支持"><a href="#3-底层技术支持" class="headerlink" title="3 底层技术支持"></a>3 底层技术支持</h1><blockquote><p>Container是一种轻量级的虚拟化技术，不用模拟硬件创建虚拟机。</p><p>Docker是基于Linux Kernel的Namespace、CGroups、UnionFileSystem等技术封装成的一种自定义容器格式，从而提供一套虚拟运行环境。</p><pre><code>Namespace：用来做隔离的，比如pid[进程]、net[网络]、mnt[挂载点]等CGroups: Controller Groups用来做资源限制，比如内存和CPU等Union file systems：用来做image和container分层</code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Docker初体验</title>
      <link href="posts/41ccce2c.html"/>
      <url>posts/41ccce2c.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-What-is-Docker"><a href="#1-What-is-Docker" class="headerlink" title="1 What is Docker"></a>1 What is Docker</h1><h2 id="1-1-官网首页"><a href="#1-1-官网首页" class="headerlink" title="1.1 官网首页"></a>1.1 官网首页</h2><blockquote><p><a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a></p><pre><code>Modernize your applications, accelerate innovation Securely build, share and run modern applications anywhere</code></pre></blockquote><h2 id="1-2-Docs"><a href="#1-2-Docs" class="headerlink" title="1.2 Docs"></a>1.2 Docs</h2><blockquote><p><a href="https://docs.docker.com/get-started/" target="_blank" rel="noopener">https://docs.docker.com/get-started/</a></p><pre><code>Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers. The use of Linux containers to deploy applications is called containerization. Containers are not new, but their use for easily deploying applications is.</code></pre></blockquote><h2 id="1-3-不理解，我太难了"><a href="#1-3-不理解，我太难了" class="headerlink" title="1.3 不理解，我太难了"></a>1.3 不理解，我太难了</h2><blockquote><p><code>不妨从一个需求开始</code> ：开发好了一个项目shopping，部署上线</p></blockquote><ul><li><p>远古时代</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20210308204011.png" alt="1574490121638"></p><p><code>问题</code> ：成本高、部署慢、浪费资源、硬件限制、不利于迁移扩展</p></li><li><p>虚拟化时代</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308211016.png" alt="1574490142121"></p><p><code>优点</code> ：相对利用好资源，相对容易扩展等。<br><code>缺点</code> ：虚拟机太重了，一上来占用较多物理资源，移植性差，资源利用率低等。</p></li><li><p>容器时代</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308211022.png" alt="1574490159893"></p></li></ul><h2 id="1-4-再次理解Docker"><a href="#1-4-再次理解Docker" class="headerlink" title="1.4 再次理解Docker"></a>1.4 再次理解Docker</h2><blockquote><p>Docker is a platform for developers and sysadmins to develop, deploy, and run applications with containers. The use of Linux containers to deploy applications is called containerization. Containers are not new, but their use for easily deploying applications is.</p></blockquote><blockquote><p>发现还是比较容易理解的，但是这里有一句 “Containers are not new”，也就是容器化技术很早就出现了，比如常见的容器化技术有OpenVZ，LXC，RKT等</p></blockquote><h2 id="1-5-Docker的优势和应用场景"><a href="#1-5-Docker的优势和应用场景" class="headerlink" title="1.5 Docker的优势和应用场景"></a>1.5 Docker的优势和应用场景</h2><blockquote><p><a href="http://www.docker.com/" target="_blank" rel="noopener">www.docker.com</a> —&gt;Solutions</p></blockquote><blockquote><p>(1)有助于Microservices的落地和部署<br>(2)充分利用物理机资源，同时能够整合服务器资源<br>(3)提高开发效率，测试效率，部署效率，有利于DevOps的落地，CICD<br>(4)云原生落地，应用更好地迁移<br>…</p></blockquote><h1 id="2-What-is-Image-and-Container"><a href="#2-What-is-Image-and-Container" class="headerlink" title="2 What is Image and Container?"></a>2 What is Image and Container?</h1><h2 id="2-1-What-is-Image"><a href="#2-1-What-is-Image" class="headerlink" title="2.1 What is Image?"></a>2.1 What is Image?</h2><blockquote><p>Why is docker?-&gt;<a href="https://www.docker.com/resources/what-container" target="_blank" rel="noopener">What is a container</a></p><pre><code>A Docker container image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings.</code></pre></blockquote><h2 id="2-2-What-is-Container？"><a href="#2-2-What-is-Container？" class="headerlink" title="2.2 What is Container？"></a>2.2 What is Container？</h2><blockquote><p>Why is docker?-&gt;<a href="https://www.docker.com/resources/what-container" target="_blank" rel="noopener">What is a container</a></p><pre><code>A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another.</code></pre></blockquote><h2 id="2-3-Relation-between-image-and-container"><a href="#2-3-Relation-between-image-and-container" class="headerlink" title="2.3 Relation between image and container"></a>2.3 Relation between image and container</h2><pre><code>Container images become containers at runtime and in the case of Docker containers- images become containers when they run on Docker Engine.</code></pre><h2 id="2-4-View-from-Docs"><a href="#2-4-View-from-Docs" class="headerlink" title="2.4 View from Docs"></a>2.4 View from Docs</h2><blockquote><p>从帮助文档的角度看<br><a href="https://www.docker.com/" target="_blank" rel="noopener">docker官网</a>-&gt;Resources-&gt;Docs-&gt;Get started-&gt;Get started with Docker-&gt;Orientation-&gt;Images<br>and containers</p><pre><code>A container is launched by running an image. An image is an executable package hat includes everything needed to run an application--the code, a runtime, libraries, environment variables, and configuration files.A container is a runtime instance of an image--what the image becomes in memory when executed (that is, an image with state, or a user process). You can see a list of your running containers with the command, docker ps, just as you would in Linux.</code></pre></blockquote><h1 id="3-Containers-and-virtual-machines"><a href="#3-Containers-and-virtual-machines" class="headerlink" title="3 Containers and virtual machines"></a>3 Containers and virtual machines</h1><blockquote><p>docker官网](<a href="http://www.docker.com)->resources->docs->get/" target="_blank" rel="noopener">www.docker.com)-&gt;Resources-&gt;Docs-&gt;Get</a> started-&gt;Get started with Docker-</p><p>Orientation-&gt;Containers and virtual machines</p><pre><code>A container runs natively on Linux and shares the kernel of the host machine with other containers. It runs a discrete process, taking no more memory than any other executable, making it lightweight.By contrast, a virtual machine (VM) runs a full-blown “guest” operating system with virtual access to host resources through a hypervisor. In general, VMs provide an environment with more resources than most applications need.</code></pre></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308211045.png" alt="1574490493791"></p><h1 id="4-Docker-Engine-and-Architecture"><a href="#4-Docker-Engine-and-Architecture" class="headerlink" title="4 Docker Engine and Architecture"></a>4 Docker Engine and Architecture</h1><blockquote><p><a href="https://docs.docker.com/engine/docker-overview/" target="_blank" rel="noopener">https://docs.docker.com/engine/docker-overview/</a></p></blockquote><h2 id="4-1-Docker-Engine"><a href="#4-1-Docker-Engine" class="headerlink" title="4.1 Docker Engine"></a>4.1 Docker Engine</h2><p>Docker Engine is a client-server application with these major components:</p><ul><li>A server which is a type of long-running program called a daemon process (the dockerd<br>command).</li><li>A REST API which speciﬁes interfaces that programs can use to talk to the daemon and<br>instruct it what to do.</li><li>A command line interface (CLI) client (the docker command).</li></ul><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308211055.png" alt="1574490530300"></p><h2 id="4-2-Docker-Architecture"><a href="#4-2-Docker-Architecture" class="headerlink" title="4.2 Docker Architecture"></a>4.2 Docker Architecture</h2><pre><code>Docker uses a client-server architecture. The Docker client talks to the Docker daemon, which does the heavy lifting of building, running, and distributing your Docker containers. The Docker client and daemon can run on the same system, or you can connect a Docker client to a remote Docker daemon. The Docker client and daemon communicate using a REST API, over UNIX sockets or a network interface.</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308211110.png" alt="1574490564640"></p><h1 id="5-Install-and-Experience"><a href="#5-Install-and-Experience" class="headerlink" title="5 Install and Experience"></a>5 Install and Experience</h1><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img//20210308211156.png" alt="1574490717597"></p><h2 id="5-1-在Win10上准备centos7"><a href="#5-1-在Win10上准备centos7" class="headerlink" title="5.1 在Win10上准备centos7"></a>5.1 在Win10上准备centos7</h2><pre><code>和大家说明一下，我们的目的仅仅是要安装一个centos7，然后在centos7上安装docker如果搞不定vagrant+virtualbox的方式，也可以直接使用VM搭建一个centos7或者你可以直接使用一台云服务器，上面安装了centos7毕竟我们的目的只是为了得到一个centos7的机器，所以不必花太多精力在这个问题上折腾我上课用的环境是【    win10 64位    VirtualBox-6.0.12-133076-Win   [已上传到网盘的“上课课件/virtualbox”目录]    vagrant_2.2.6_x86_64  [已上传到网盘的“上课课件/vagrant”目录]    centos7   [已上传到网盘的“上课课件”目录]    XShell6】</code></pre><p><strong>踩坑指南</strong>：如果安装过程碰到一些问题，我特地给大家准备了一份手记，放在gper上</p><p><a href="https://gper.club/articles/7e7e7f7ff7g58gc1g6e" target="_blank" rel="noopener">https://gper.club/articles/7e7e7f7ff7g58gc1g6e</a></p><blockquote><p><code>采用vagrant+virtual box</code></p></blockquote><h3 id="5-1-1-下载安装vagrant"><a href="#5-1-1-下载安装vagrant" class="headerlink" title="5.1.1 下载安装vagrant"></a>5.1.1 下载安装vagrant</h3><pre><code>01 访问Vagrant官网https://www.vagrantup.com/02 点击DownloadWindows，MacOS，Linux等03 选择对应的版本04 傻瓜式安装05 命令行输入vagrant，测试是否安装成功</code></pre><h3 id="5-1-2-下载安装virtual-box"><a href="#5-1-2-下载安装virtual-box" class="headerlink" title="5.1.2 下载安装virtual box"></a>5.1.2 下载安装virtual box</h3><pre><code>01 访问VirtualBox官网    https://www.virtualbox.org/02 选择左侧的“Downloads”03 选择对应的操作系统版本04 傻瓜式安装05 [win10中若出现]安装virtualbox快完成时立即回滚，并提示安装出现严重错误    (1)打开服务    (2)找到Device Install Service和Device Setup Manager，然后启动    (3)再次尝试安装</code></pre><h3 id="5-1-3-安装centos7"><a href="#5-1-3-安装centos7" class="headerlink" title="5.1.3 安装centos7"></a>5.1.3 安装centos7</h3><pre><code>01 创建centos7文件夹，并进入其中[目录全路径不要有中文字符]02 在此目录下打开cmd，运行vagrant init centos/7   此时会在当前目录下生成Vagrantfile，同时指定使用的镜像为centos/7，关键是这个镜像在哪里，我已经提前准备好了，名称是virtualbox.box文件03 将virtualbox.box文件添加到vagrant管理的镜像中    (1)下载网盘中的virtualbox.box文件    (2)保存到磁盘的某个目录，比如D:\virtualbox.box    (3)添加镜像并起名叫centos/7：vagrant box add centos/7 D:\virtualbox.box    (4)vagrant box list  查看本地的box[这时候可以看到centos/7]04 centos/7镜像有了，根据Vagrantfile文件启动创建虚拟机    来到centos7文件夹，在此目录打开cmd窗口，执行vagrant up[打开virtual box观察，可以发现centos7创建成功]05 以后大家操作虚拟机，还是要在centos文件夹打开cmd窗口操作    vagrant halt   优雅关闭    vagrant up     正常启动06 vagrant常用命令    (1)vagrant ssh            进入刚才创建的centos7中    (2)vagrant status        查看centos7的状态    (3)vagrant halt        停止/关闭centos7    (4)vagrant destroy        删除centos7    (5)vagrant status        查看当前vagrant创建的虚拟机    (6)Vagrantfile中也可以写脚本命令，使得centos7更加丰富        但是要注意，修改了Vagrantfile，要想使正常运行的centos7生效，必须使用vagrant reload</code></pre><blockquote><p><code>至此，使用vagrant+virtualbox搭建centos7完成，后面可以修改Vagrantfile对虚拟机进行相应配置</code></p></blockquote><h3 id="5-1-4-通过Xshell连接centos7"><a href="#5-1-4-通过Xshell连接centos7" class="headerlink" title="5.1.4 通过Xshell连接centos7"></a>5.1.4 通过Xshell连接centos7</h3><pre><code>01 使用centos7的默认账号连接    在centos文件夹下执行vagrant ssh-config    关注:Hostname  Port  IdentityFile    IP:127.0.0.1    port:2222    用户名:vagrant    密码:vagrant    文件:Identityfile指向的文件private-key02 使用root账户登录    vagrant ssh   进入到虚拟机中    sudo -i    vi /etc/ssh/sshd_config    修改PasswordAuthentication yes    passwd修改密码，比如abc123    systemctl restart sshd    使用账号root，密码abc123进行登录</code></pre><h3 id="5-1-5-Vagrantfile通用写法"><a href="#5-1-5-Vagrantfile通用写法" class="headerlink" title="5.1.5 Vagrantfile通用写法"></a>5.1.5 Vagrantfile通用写法</h3><pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># -*- mode: ruby -*-</span><span class="token comment" spellcheck="true"># vi: set ft=ruby :</span><span class="token comment" spellcheck="true"># All Vagrant configuration is done below. The "2" in Vagrant.configure</span><span class="token comment" spellcheck="true"># configures the configuration version (we support older styles for</span><span class="token comment" spellcheck="true"># backwards compatibility). Please don't change it unless you know what</span><span class="token comment" spellcheck="true"># you're doing.</span><span class="token constant">Vagrant</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>  <span class="token comment" spellcheck="true"># The most common configuration options are documented and commented below.</span>  <span class="token comment" spellcheck="true"># For a complete reference, please see the online documentation at</span>  <span class="token comment" spellcheck="true"># https://docs.vagrantup.com.</span>  <span class="token comment" spellcheck="true"># Every Vagrant development environment requires a box. You can search for</span>  <span class="token comment" spellcheck="true"># boxes at https://vagrantcloud.com/search.</span>  config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>box <span class="token operator">=</span> <span class="token string">"centos/7"</span>  <span class="token comment" spellcheck="true"># Disable automatic box update checking. If you disable this, then</span>  <span class="token comment" spellcheck="true"># boxes will only be checked for updates when the user runs</span>  <span class="token comment" spellcheck="true"># `vagrant box outdated`. This is not recommended.</span>  <span class="token comment" spellcheck="true"># config.vm.box_check_update = false</span>  <span class="token comment" spellcheck="true"># Create a forwarded port mapping which allows access to a specific port</span>  <span class="token comment" spellcheck="true"># within the machine from a port on the host machine. In the example below,</span>  <span class="token comment" spellcheck="true"># accessing "localhost:8080" will access port 80 on the guest machine.</span>  <span class="token comment" spellcheck="true"># NOTE: This will enable public access to the opened port</span>  <span class="token comment" spellcheck="true"># config.vm.network "forwarded_port", guest: 80, host: 8080</span>  <span class="token comment" spellcheck="true"># Create a forwarded port mapping which allows access to a specific port</span>  <span class="token comment" spellcheck="true"># within the machine from a port on the host machine and only allow access</span>  <span class="token comment" spellcheck="true"># via 127.0.0.1 to disable public access</span>  <span class="token comment" spellcheck="true"># config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"</span>  <span class="token comment" spellcheck="true"># Create a private network, which allows host-only access to the machine</span>  <span class="token comment" spellcheck="true"># using a specific IP.</span>  <span class="token comment" spellcheck="true"># config.vm.network "private_network", ip: "192.168.33.10"</span>  <span class="token comment" spellcheck="true"># Create a public network, which generally matched to bridged network.</span>  <span class="token comment" spellcheck="true"># Bridged networks make the machine appear as another physical device on</span>  <span class="token comment" spellcheck="true"># your network.</span>  config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>network <span class="token string">"public_network"</span>  <span class="token comment" spellcheck="true"># Share an additional folder to the guest VM. The first argument is</span>  <span class="token comment" spellcheck="true"># the path on the host to the actual folder. The second argument is</span>  <span class="token comment" spellcheck="true"># the path on the guest to mount the folder. And the optional third</span>  <span class="token comment" spellcheck="true"># argument is a set of non-required options.</span>  <span class="token comment" spellcheck="true"># config.vm.synced_folder "../data", "/vagrant_data"</span>  <span class="token comment" spellcheck="true"># Provider-specific configuration so you can fine-tune various</span>  <span class="token comment" spellcheck="true"># backing providers for Vagrant. These expose provider-specific options.</span>  <span class="token comment" spellcheck="true"># Example for VirtualBox:</span>  <span class="token comment" spellcheck="true">#</span>  <span class="token comment" spellcheck="true"># config.vm.provider "virtualbox" do |vb|</span>  <span class="token comment" spellcheck="true">#   # Display the VirtualBox GUI when booting the machine</span>  <span class="token comment" spellcheck="true">#   vb.gui = true</span>  <span class="token comment" spellcheck="true">#</span>  <span class="token comment" spellcheck="true">#   # Customize the amount of memory on the VM:</span>  <span class="token comment" spellcheck="true">#   vb.memory = "1024"</span>  <span class="token comment" spellcheck="true"># end</span>    config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provider <span class="token string">"virtualbox"</span> <span class="token keyword">do</span> <span class="token operator">|</span>vb<span class="token operator">|</span>        vb<span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token string">"4000"</span>        vb<span class="token punctuation">.</span>name<span class="token operator">=</span> <span class="token string">"jack-centos7"</span>        vb<span class="token punctuation">.</span>cpus<span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">end</span>  <span class="token comment" spellcheck="true">#</span>  <span class="token comment" spellcheck="true"># View the documentation for the provider you are using for more</span>  <span class="token comment" spellcheck="true"># information on available options.</span>  <span class="token comment" spellcheck="true"># Enable provisioning with a shell script. Additional provisioners such as</span>  <span class="token comment" spellcheck="true"># Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the</span>  <span class="token comment" spellcheck="true"># documentation for more information about their specific syntax and use.</span>  <span class="token comment" spellcheck="true"># config.vm.provision "shell", inline: &lt;&lt;-SHELL</span>  <span class="token comment" spellcheck="true">#   apt-get update</span>  <span class="token comment" spellcheck="true">#   apt-get install -y apache2</span>  <span class="token comment" spellcheck="true"># SHELL</span><span class="token keyword">end</span></code></pre><h3 id="5-1-6-box的打包分发"><a href="#5-1-6-box的打包分发" class="headerlink" title="5.1.6 box的打包分发"></a>5.1.6 box的打包分发</h3><pre><code>01 退出虚拟机    vagrant halt02 打包    vagrant package --output first-docker-centos7.box03 得到first-docker-centos7.box04 将first-docker-centos7.box添加到其他的vagrant环境中    vagrant box add first-docker-centos7 first-docker-centos7.box05 得到Vagrantfile    vagrant init first-docker-centos706 根据Vagrantfile启动虚拟机    vagrant up [此时可以得到和之前一模一样的环境，但是网络要重新配置]</code></pre><h2 id="5-2-安装docker"><a href="#5-2-安装docker" class="headerlink" title="5.2 安装docker"></a>5.2 安装docker</h2><blockquote><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></p></blockquote><ol><li><p>进入centos7</p><pre class=" language-shell"><code class="language-shell">vagrant ssh</code></pre></li><li><p>卸载之前的docker</p><pre class=" language-shell"><code class="language-shell">sudo yum remove docker \               docker-client \               docker-client-latest \               docker-common \               docker-latest \               docker-latest-logrotate \               docker-logrotate \               docker-engine</code></pre><pre><code>docker 卸载不干净例如：官网介绍docker卸载的方法一般为1&gt; yum remove docker-ce -y2&gt; rm -fr /var/lib/docker*但试过后你依然无法安装新版本，尤其是高版本降到低版本docker，问题在于docker你并没有卸载干净正确的卸载方法如下：1&gt; yum list installed|grep docker 查看2&gt; yum remove [docker名称]</code></pre></li><li><p>安装必要的依赖</p><pre class=" language-shell"><code class="language-shell">sudo yum install -y yum-utils \device-mapper-persistent-data \lvm2</code></pre></li><li><p>设置docker仓库  [设置阿里云镜像仓库可以先自行百度，后面课程也会有自己的docker hub讲解]    </p><pre class=" language-shell"><code class="language-shell">sudo yum-config-manager \   --add-repo \   https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p> [访问<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">这个地址</a>，使用自己的阿里云账号登录，查看菜单栏左下角，发现有一个镜像加速器]</p></li><li><p>安装docker</p><pre class=" language-shell"><code class="language-shell">sudo yum install -y docker-ce docker-ce-cli containerd.io</code></pre></li><li><p>启动docker</p><pre class=" language-shell"><code class="language-shell">sudo systemctl start docker</code></pre></li><li><p>测试docker安装是否成功</p><pre class=" language-shell"><code class="language-shell">sudo docker run hello-world</code></pre></li></ol><h2 id="5-3-docker基本体验"><a href="#5-3-docker基本体验" class="headerlink" title="5.3 docker基本体验"></a>5.3 docker基本体验</h2><pre class=" language-shell"><code class="language-shell">01 创建tomcat容器    docker pull tomcat    docker run -d --name my-tomcat -p 9090:8080 tomcat02 创建mysql容器    docker run -d --name my-mysql -p 3301:3306 -e MYSQL_ROOT_PASSWORD=jack123 --privileged mysql03 进入到容器里面    docker exec -it containerid /bin/bash</code></pre><h2 id="5-4-可能有的疑惑"><a href="#5-4-可能有的疑惑" class="headerlink" title="5.4 可能有的疑惑"></a>5.4 可能有的疑惑</h2><p>(1)docker pull在哪拉取的镜像？</p><pre><code>默认是在hub.docker.com</code></pre><p>(2)docker pull tomcat拉取的版本是？</p><pre><code>默认是最新的版本，可以在后面指定版本":"</code></pre><p>(3)简单先说一下命令咯</p><pre><code>docker pull        拉取镜像到本地docker run         根据某个镜像创建容器-d                 让容器在后台运行，其实就是一个进程--name             给容器指定一个名字-p                 将容器的端口映射到宿主机的端口docker exec -it    进入到某个容器中并交互式运行</code></pre>]]></content>
      
      
      <categories>
          
          <category> 容器化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.RabbitMQ</title>
      <link href="posts/9f0084be.html"/>
      <url>posts/9f0084be.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/13.RabbitMQ-min.png"></p>]]></content>
      
      
      <categories>
          
          <category> 思维导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.MySQL</title>
      <link href="posts/bde4cf37.html"/>
      <url>posts/bde4cf37.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/10.Redis-111.png"></p>]]></content>
      
      
      <categories>
          
          <category> 思维导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.Redis</title>
      <link href="posts/e1f753b7.html"/>
      <url>posts/e1f753b7.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/10.Redis-111.png"></p>]]></content>
      
      
      <categories>
          
          <category> 思维导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.Kafka</title>
      <link href="posts/6719fd03.html"/>
      <url>posts/6719fd03.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/9.Kafka-min.png"></p>]]></content>
      
      
      <categories>
          
          <category> 思维导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.Zookeeper</title>
      <link href="posts/65627ed4.html"/>
      <url>posts/65627ed4.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/8.Zookeeper-min.png"></p>]]></content>
      
      
      <categories>
          
          <category> 思维导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.接口幂等性设计</title>
      <link href="posts/38221db1.html"/>
      <url>posts/38221db1.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-幂等性定义"><a href="#1-幂等性定义" class="headerlink" title="1.幂等性定义"></a>1.幂等性定义</h2><h3 id="1-1-数学定义"><a href="#1-1-数学定义" class="headerlink" title="1.1 数学定义"></a>1.1 数学定义</h3><blockquote><p>在数学里，幂等有两种主要的定义：- 在某二元运算下，幂等元素是指被自己重复运算(或对于函数是为复合)的结果等于它自己的元素。例如，乘法下唯一两个幂等实数为0和1。即 s *s = s- 某一元运算为幂等的时，其作用在任一元素两次后会和其作用一次的结果相同。例如，高斯符号便是幂等的，即f(f(x)) = f(x)。</p></blockquote><h3 id="1-2-HTTP规范的定义"><a href="#1-2-HTTP规范的定义" class="headerlink" title="1.2 HTTP规范的定义"></a>1.2 HTTP规范的定义</h3><p>在HTTP/1.1规范中幂等性的定义是：</p><blockquote><p>A request method is considered “idempotent” if the intended effect on the server of multiple identical requests with that method is the same as the effect for a single such request. Of the request methods defined by this specification, PUT, DELETE, and safe request methods are idempotent.</p></blockquote><p>HTTP的幂等性指的是一次和多次请求某一个资源应该具有相同的副作用。如通过PUT接口将数据的Status置为1，无论是第一次执行还是多次执行，获取到的结果应该是相同的，即执行完成之后Status =1。</p><h2 id="2-何种接口提供幂等性"><a href="#2-何种接口提供幂等性" class="headerlink" title="2. 何种接口提供幂等性"></a>2. 何种接口提供幂等性</h2><h3 id="2-1-HTTP支持幂等性的接口"><a href="#2-1-HTTP支持幂等性的接口" class="headerlink" title="2.1 HTTP支持幂等性的接口"></a>2.1 HTTP支持幂等性的接口</h3><p>在HTTP规范中定义GET,PUT和DELETE方法应该具有幂等性。</p><ul><li>GET方法</li></ul><blockquote><p>The GET method requests transfer of a current selected representation for the target resource,GET is the primary mechanism of information retrieval and the focus of almost all performance optimizations. Hence, when people speak of retrieving some identifiable information via HTTP, they are generally referring to making a GET request.</p></blockquote><p>GET方法是向服务器查询，不会对系统产生副作用，具有幂等性（不代表每次请求都是相同的结果)</p><ul><li>PUT方法</li></ul><blockquote><p>The PUT method requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload.</p></blockquote><p>也就是说PUT方法首先判断系统中是否有相关的记录，如果有记录则更新该记录，如果没有则新增记录。</p><ul><li>DELETE 方法</li></ul><blockquote><p>The DELETE method requests that the origin server remove the association between the target resource and its current functionality. In effect, this method is similar to the rm command in UNIX: it expresses a deletion operation on the URI mapping of the origin server rather than an expectation that the previously associated information be deleted.</p></blockquote><p>DELETE方法是删除服务器上的相关记录。</p><h3 id="2-2-实际业务"><a href="#2-2-实际业务" class="headerlink" title="2.2 实际业务"></a>2.2 实际业务</h3><p>现在简化为这样一个系统，用户购买商品的订单系统与支付系统；订单系统负责记录用户的购买记录已经订单的流转状态（orderStatus)，支付系统用于付款，提供</p><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token keyword">int</span> accountid<span class="token punctuation">,</span>BigDecimal amount<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//用于付款，扣除用户的</span></code></pre><p>接口，订单系统与支付系统通过分布式网络交互。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20190510114714.png"></p><p>这种情况下，支付系统已经扣款，但是订单系统因为网络原因，没有获取到确切的结果，因此订单系统需要重试。由上图可见，支付系统并没有做到接口的幂等性，订单系统第一次调用和第二次调用，用户分别被扣了两次钱，不符合幂等性原则（同一个订单，无论是调用了多少次，用户都只会扣款一次）。如果需要支持幂等性，付款接口需要修改为以下接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token keyword">int</span> orderId<span class="token punctuation">,</span><span class="token keyword">int</span> accountId<span class="token punctuation">,</span>BigDecimal amount<span class="token punctuation">)</span></code></pre><p>通过orderId来标定订单的唯一性，付款系统只要检测到订单已经支付过，则第二次调用不会扣款而会直接返回结果：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20190510114714.png"></p><p>在不同的业务中不同接口需要有不同的幂等性，特别是在分布式系统中，因为网络原因而未能得到确定的结果，往往需要支持接口幂等性。</p><h2 id="3-分布式系统接口幂等性"><a href="#3-分布式系统接口幂等性" class="headerlink" title="3.分布式系统接口幂等性"></a>3.分布式系统接口幂等性</h2><p>随着分布式系统及微服务的普及，因为网络原因而导致调用系统未能获取到确切的结果从而导致重试，这就需要被调用系统具有幂等性。例如上文所阐述的支付系统，针对同一个订单保证支付的幂等性，一旦订单的支付状态确定之后，以后的操作都会返回相同的结果，对用户的扣款也只会有一次。这种接口的幂等性，简化到数据层面的操作：</p><pre class=" language-java"><code class="language-java">update userAmount set amount <span class="token operator">=</span>  <span class="token string">'value'</span> <span class="token punctuation">,</span>paystatus <span class="token operator">=</span> <span class="token string">'paid'</span> where orderId<span class="token operator">=</span> <span class="token string">'orderid'</span> and paystatus <span class="token operator">=</span> <span class="token string">'unpay'</span></code></pre><p>其中value是用户要减少的订单，paystatus代表支付状态，paid代表已经支付，unpay代表未支付，orderid是订单号。</p><p>在上文中提到的订单系统，订单具有自己的状态（orderStatus)，订单状态存在一定的流转。订单首先有提交（0），付款中（1），付款成功（2），付款失败（3），简化之后其流转路径如图： </p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20190510115251.png"></p><p>当orderStatus = 1 时，其前置状态只能是0，也就是说将orderStatus由0-&gt;1 是需要幂等性的</p><pre class=" language-java"><code class="language-java">update Order set orderStatus <span class="token operator">=</span> <span class="token number">1</span> where OrderId <span class="token operator">=</span> <span class="token string">'orderid'</span> and orderStatus <span class="token operator">=</span> <span class="token number">0</span></code></pre><p>当orderStatus 处于0，1两种状态时，对订单执行0-&gt;1 的状态流转操作应该是具有幂等性的。这时候需要在执行update操作之前检测orderStatus是否已经=1，如果已经=1则直接返回true即可。</p><p>但是如果此时orderStatus = 2，再进行订单状态0-&gt;1 时操作就无法成功，但是幂等性是针对同一个请求的，也就是针对同一个requestid保持幂等。</p><p>这时候再执行</p><pre class=" language-java"><code class="language-java">update Order set orderStatus <span class="token operator">=</span> <span class="token number">1</span> where OrderId <span class="token operator">=</span> <span class="token string">'orderid'</span> and orderStatus <span class="token operator">=</span> <span class="token number">0</span></code></pre><p>接口会返回失败，系统没有产生修改，如果再发一次，requestid是相同的，对系统同样没有产生修改。</p><h2 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4.解决方案"></a>4.解决方案</h2><p>在微服务架构下，我们在完成一个订单流程时经常遇到下面的场景：</p><blockquote><ol><li>一个订单创建接口，第一次调用超时了，然后调用方重试了一次</li><li>在订单创建时，我们需要去扣减库存，这时接口发生了超时，调用方重试了一次</li><li>当这笔订单开始支付，在支付请求发出之后，在服务端发生了扣钱操作，接口响应超时了，调用方重试了一次</li><li>一个订单状态更新接口，调用方连续发送了两个消息，一个是已创建，一个是已付款。但是你先接收到已付款，然后又接收到了已创建</li><li>在支付完成订单之后，需要发送一条短信，当一台机器接收到短信发送的消息之后，处理较慢。消息中间件又把消息投递给另外一台机器处理</li></ol></blockquote><p>以上问题，就是在单体架构转成微服务架构之后，带来的问题。当然不是说单体架构下没有这些问题，在单体架构下同样要避免重复请求。但是出现的问题要比这少得多。</p><p>为了解决以上问题，就需要保证接口的幂等性，接口的幂等性实际上就是<strong>接口可重复调用，在调用方多次调用的情况下，接口最终得到的结果是一致的</strong>。有些接口可以天然的实现幂等性，比如查询接口，对于查询来说，你查询一次和两次，对于系统来说，没有任何影响，查出的结果也是一样。</p><p>除了查询功能具有天然的幂等性之外，增加、更新、删除都要保证幂等性。那么如何来保证幂等性呢？</p><h3 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h3><p>如果使用全局唯一ID，就是根据业务的操作和内容生成一个全局ID，在执行操作前先根据这个全局唯一ID是否存在，来判断这个操作是否已经执行。如果不存在则把全局ID，存储到存储系统中，比如数据库、redis等。如果存在则表示该方法已经执行。</p><p>从工程的角度来说，使用全局ID做幂等可以作为一个业务的基础的微服务存在，在很多的微服务中都会用到这样的服务，在每个微服务中都完成这样的功能，会存在工作量重复。另外打造一个高可靠的幂等服务还需要考虑很多问题，比如一台机器虽然把全局ID先写入了存储，但是在写入之后挂了，这就需要引入全局ID的超时机制。</p><p>使用全局唯一ID是一个通用方案，可以支持插入、更新、删除业务操作。但是这个方案看起来很美但是实现起来比较麻烦，下面的方案适用于特定的场景，但是实现起来比较简单。</p><h3 id="去重表"><a href="#去重表" class="headerlink" title="去重表"></a>去重表</h3><p>这种方法适用于在业务中有唯一标的插入场景中，比如在以上的支付场景中，如果一个订单只会支付一次，所以订单ID可以作为唯一标识。这时，我们就可以建一张去重表，并且把唯一标识作为唯一索引，在我们实现时，把创建支付单据和写入去去重表，放在一个事务中，如果重复创建，数据库会抛出唯一约束异常，操作就会回滚。</p><h3 id="插入或更新"><a href="#插入或更新" class="headerlink" title="插入或更新"></a>插入或更新</h3><p>这种方法插入并且有唯一索引的情况，比如我们要关联商品品类，其中商品的ID和品类的ID可以构成唯一索引，并且在数据表中也增加了唯一索引。这时就可以使用InsertOrUpdate操作。在mysql数据库中如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> goods_category <span class="token punctuation">(</span>goods_id<span class="token punctuation">,</span>category_id<span class="token punctuation">,</span>create_time<span class="token punctuation">,</span>update_time<span class="token punctuation">)</span>        <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">#{goodsId},#{categoryId},now(),now()) </span>       <span class="token keyword">on</span> <span class="token keyword">DUPLICATE KEY</span> <span class="token keyword">UPDATE</span>       update_time<span class="token operator">=</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="多版本控制"><a href="#多版本控制" class="headerlink" title="多版本控制"></a>多版本控制</h3><p>这种方法适合在更新的场景中，比如我们要更新商品的名字，这时我们就可以在更新的接口中增加一个版本号，来做幂等</p><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">updateGoodsName</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span>String newName<span class="token punctuation">,</span><span class="token keyword">int</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在实现时可以如下</p><pre class=" language-java"><code class="language-java">update goods set name<span class="token operator">=</span>#<span class="token punctuation">{</span>newName<span class="token punctuation">}</span><span class="token punctuation">,</span>version<span class="token operator">=</span>#<span class="token punctuation">{</span>version<span class="token punctuation">}</span> where id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span> and version<span class="token operator">&lt;</span>$<span class="token punctuation">{</span>version<span class="token punctuation">}</span></code></pre><h3 id="状态机控制"><a href="#状态机控制" class="headerlink" title="状态机控制"></a>状态机控制</h3><p>这种方法适合在有状态机流转的情况下，比如就会订单的创建和付款，订单的付款肯定是在之前，这时我们可以通过在设计状态字段时，使用int类型，并且通过值类型的大小来做幂等，比如订单的创建为0，付款成功为100。付款失败为99</p><p>在做状态机更新时，我们就这可以这样控制</p><pre class=" language-java"><code class="language-java">update `order` set status<span class="token operator">=</span>#<span class="token punctuation">{</span>status<span class="token punctuation">}</span> where id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span> and status<span class="token operator">&lt;</span>#<span class="token punctuation">{</span>status<span class="token punctuation">}</span></code></pre><p>以上就是保证接口幂等性的一些方法。</p><p>参考：<a href="https://nicky-chin.cn/2018/03/26/interface-idempotency/" target="_blank" rel="noopener">接口设计的幂等性考虑</a></p>]]></content>
      
      
      <categories>
          
          <category> 方案设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方案设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.扫码登录实现方案汇总</title>
      <link href="posts/c7222c0c.html"/>
      <url>posts/c7222c0c.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是扫码登录？"><a href="#1-什么是扫码登录？" class="headerlink" title="1.什么是扫码登录？"></a>1.什么是扫码登录？</h2><p>　　web端登录，为了实现方便性以及安全性，展示二维码，APP端扫码，完成登录流程，要求：自己的web服务，自己的APP（使用第三方登录微信QQ）；大致流程如下：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1191422-20190809145610411-1991365261.png"></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1191422-20190809145638023-1943064100.png"></p><h2 id="2-技术难点"><a href="#2-技术难点" class="headerlink" title="2.技术难点"></a>2.技术难点</h2><p>　　手机扫码完成后调用后端登录接口，完成登录，这里服务器需要通知前端说我已经登录完成，你可以开始跳转了；说白了就是服务器向客户端推送消息的流程；</p><h2 id="3-二维码生成"><a href="#3-二维码生成" class="headerlink" title="3.二维码生成"></a>3.二维码生成</h2><p>java端使用google的zxing包，生成二维码；将二维码一Base64的方式传到前端；Google的依赖是：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.zxing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>二维码生成以及转Base工具类下载链接： <a href="https://pan.baidu.com/s/14r4OTBQlB236YYYu3Uav3w" target="_blank" rel="noopener">https://pan.baidu.com/s/14r4OTBQlB236YYYu3Uav3w</a></p><h2 id="4-实现方案"><a href="#4-实现方案" class="headerlink" title="4.实现方案"></a>4.实现方案</h2><h3 id="1-前端轮询"><a href="#1-前端轮询" class="headerlink" title="1.前端轮询"></a>1.前端轮询</h3><blockquote><p>最实用运用最广的实现方案（90%使用率）</p></blockquote><p>前端轮询实现，目前运用的企业：CSDN，支付宝，京东等</p><h3 id="2-短连接-轮询"><a href="#2-短连接-轮询" class="headerlink" title="2.短连接+轮询"></a>2.短连接+轮询</h3><blockquote><p>短连接+轮询 – polling（即时）</p></blockquote><p>微信网页版扫码登录；</p><p>何为短连接：客户端向后端发送请求，后端没有消息推送客户端，则阻塞当前线程，等N秒后，仍没有消息，response前端；</p><p>前端：</p><p>​        先看微信的前端场景：　　</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1191422-20190809151354455-65636721.png"></p><p>​        如无消息，在阻塞20秒左右响应408，并开启新的请求：　　</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1191422-20190809151436762-762377656.png"></p><p>​        则前端只需要保证收到错误的状态码，重新发起请求即可；</p><p>后端：</p><p>​        Tomcat连接数有限，如果一个连接需要占用连接20秒，那么用户一多连接数很快消耗殆尽，这里需要使用DeferredResult来异步实现；具体实现方法看：<a href="https://www.cnblogs.com/code-sayhi/articles/10191526.html" target="_blank" rel="noopener">https://www.cnblogs.com/code-sayhi/articles/10191526.html</a></p><p>​        Redis（list+blpop）：redis存储用户是否扫码登录成功；基于redis和blpop来实现没有消息阻塞后端线程固定时间；（这里只说具体思路）</p><h3 id="3-websocket"><a href="#3-websocket" class="headerlink" title="3.websocket"></a>3.websocket</h3><p>基于netty-socketIO实现web端和服务端通信；具分布式部署方案以及相关信息见： <a href="https://www.cnblogs.com/code-sayhi/articles/11327487.html" target="_blank" rel="noopener">https://www.cnblogs.com/code-sayhi/articles/11327487.html</a></p><h3 id="4-第三方goeasy消息即时通信"><a href="#4-第三方goeasy消息即时通信" class="headerlink" title="4.第三方goeasy消息即时通信"></a>4.第三方goeasy消息即时通信</h3><p>即时，不占用服务器资源，开发简单，总知哪都好就是“要钱”；确定：并发量小，服务真的贵，自己使用websocket轻松可以实现2万的并发</p><p>下面说下简单的实现：</p><p>4.1：进入官网：<a href="https://www.goeasy.io/" target="_blank" rel="noopener">https://www.goeasy.io</a> ;创建免费应用</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1191422-20190809153207982-1122524761.png"></p><p>后端：下载相应依赖，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/goeasy"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoEasyController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/sendMessage"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GoEasy goEasy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GoEasy</span><span class="token punctuation">(</span> <span class="token string">"https://rest-hangzhou.goeasy.io"</span><span class="token punctuation">,</span> <span class="token string">"BC-d7920b8c7567461d8042935546fc3360"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goEasy<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span><span class="token string">"Hello, GoEasy!"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PublishListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"消息发布成功。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailed</span><span class="token punctuation">(</span>GoEasyError error<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"消息发布失败, 错误编码："</span> <span class="token operator">+</span> error<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 错误信息： "</span> <span class="token operator">+</span> error<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>前端：导入对应的js文件：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1191422-20190809153827227-2109454931.png"></p><p> 由于我是使用的Angular，这里通过这个js对其简单的封装；在ts中在用到的地方 ，然后直接调用 goEasyUtils.getMessage(‘xxxx’);</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1191422-20190809154155923-361025570.png"></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1191422-20190809154233191-2077260118.png"></p><h3 id="5-基于SSE实现"><a href="#5-基于SSE实现" class="headerlink" title="5.基于SSE实现"></a>5.基于SSE实现</h3><p>我们曾如此渴望生命的波澜，到后来才发现，人生最曼妙的风景是内心的淡定与从容</p><p>参考： <a href="https://www.cnblogs.com/code-sayhi/articles/11310870.html" target="_blank" rel="noopener">全网最全的扫码登录实现方案</a></p>]]></content>
      
      
      <categories>
          
          <category> 方案设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方案设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.JVM</title>
      <link href="posts/312faddf.html"/>
      <url>posts/312faddf.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/11.JVM.png"></p>]]></content>
      
      
      <categories>
          
          <category> 思维导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.扫码登录实现原理</title>
      <link href="posts/7b64cef5.html"/>
      <url>posts/7b64cef5.html</url>
      
        <content type="html"><![CDATA[<h2 id="需求介绍"><a href="#需求介绍" class="headerlink" title="需求介绍"></a>需求介绍</h2><p>​    首先，介绍下什么是扫码登录。现在，大部分同学手机上都装有qq和淘宝，天猫等这一类的软件。而开发这些app的企业，都有他们相对应的网站。为了让用户在使用他们的网站时，登录更加方便和安全。这些企业提供了， 使用手机，扫一扫，就可以登录的服务。网页登录时的效果如下：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1104082-20180819144037770-1158316031.png"></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1104082-20180819144537526-1353453799.png"></p><pre><code>  有很多小伙伴可能会感到很神奇，网页上只是显示了个二维码，它怎么就知道是哪个手机扫到了二维码，并且进行登录的呢？而且，登录完成以后，还能直接把用户信息显示给用户，真的是很神奇啊。</code></pre><h2 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h2><h3 id="网页端-服务器"><a href="#网页端-服务器" class="headerlink" title="网页端+服务器"></a>网页端+服务器</h3><p>　　接下来就是对于这个服务的详细实现。首先，大概说一下原理：用户打开网站的登录页面的时候，向浏览器的服务器发送<strong>获取登录二维码</strong>的请求。服务器收到请求后，随机生成一个uuid，将这个id作为key值存入redis服务器，同时设置一个过期时间，再过期后，用户登录二维码需要进行刷新重新获取。同时，将这个key值和本公司的验证字符串合在一起，通过二维码生成接口，生成一个二维码的图片（二维码生成，网上有很多现成的接口和源码，这里不再介绍。）然后，将二维码图片和uuid一起返回给用户浏览器。</p><p>　　浏览器拿到二维码和uuid后，会每隔一秒向浏览器发送一次，登录是否成功的请求。请求中携带有uuid作为当前页面的标识符。这里有的同学就会奇怪了，服务器只存了个uuid在redis中作为key值，怎么会有用户的id信息呢？ </p><p>　　这里确实会有用户的id信息，这个id信息是由手机服务器存入redis中的。具体操作如下：</p><h3 id="手机端-服务器"><a href="#手机端-服务器" class="headerlink" title="手机端+服务器"></a>手机端+服务器</h3><p>　　话说，浏览器拿到二维码后，将二维码展示到网页上，并给用户一个提示：请掏出您的手机，打开扫一扫进行登录。用户拿出手机扫描二维码，就可以得到一个验证信息和一个uuid（扫描二维码获取字符串的功能在网上同样有很多demo，这里就不详细介绍了）。由于手机端已经进行过了登录，在访问手机端的服务器的时候，参数中都回携带一个用户的token，手机端服务器可以从中解析到用户的userId（这里从token中取值而不是手机端直接传userid是为了安全，直接传userid可能会被截获和修改，token是加密的，被修改的风险会小很多）。手机端将解析到的数据和用户token一起作为参数，向服务器发送验证登录请求（这里的服务器是手机服务器，手机端的服务器跟网页端服务器不是同一台服务器）。服务器收到请求后，首先对比参数中的验证信息，确定是否为用户登录请求接口。如果是，返回一个确认信息给手机端。</p><p>　　手机端收到返回后，将登录确认框显示给用户（防止用户误操作，同时使登录更加人性化）。用户确认是进行的登录操作后，手机再次发送请求。服务器拿到uuId和userId后，将用户的userid作为value值存入redis中以uuid作为key的键值对中。</p><h2 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h2><p>　　然后，浏览器再次发送请求的时候，浏览器端的服务器就可以得到一个用户Id，并调用登录的方法，声成一个浏览器端的token，再浏览器再次发送请求的时候，将用户信息返回给浏览器，登录成功。这里存储用户id而不是直接存储用户信息是因为，手机端的用户信息，不一定是和浏览器端的用户信息完全一致。</p><p>　　登录原理图如下：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1104082-20180819163724539-2009463073.png"></p><p>参考： <a href="https://www.cnblogs.com/liyasong/p/saoma.html" target="_blank" rel="noopener">扫码登录实现原理</a></p>]]></content>
      
      
      <categories>
          
          <category> 方案设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方案设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.如何设计一个安全的对外接口</title>
      <link href="posts/28ed7026.html"/>
      <url>posts/28ed7026.html</url>
      
        <content type="html"><![CDATA[<p>最近有个项目需要对外提供一个接口，提供公网域名进行访问，而且接口和交易订单有关，所以安全性很重要；这里整理了一下常用的一些安全措施以及具体如何去实现。</p><h2 id="安全措施"><a href="#安全措施" class="headerlink" title="安全措施"></a><strong>安全措施</strong></h2><p>个人觉得安全措施大体来看主要在两个方面，一方面就是如何保证数据在传输过程中的安全性，另一个方面是数据已经到达服务器端，服务器端如何识别数据，如何不被攻击；下面具体看看都有哪些安全措施。</p><h3 id="1-数据加密"><a href="#1-数据加密" class="headerlink" title="1. 数据加密"></a>1. 数据加密</h3><p>我们知道数据在传输过程中是很容易被抓包的，如果直接传输比如通过 http 协议，那么用户传输的数据可以被任何人获取；所以必须对数据加密，常见的做法对关键字段加密比如用户密码直接通过 md5 加密；现在主流的做法是使用 https 协议，在 http 和 tcp 之间添加一层加密层 (SSL 层)，这一层负责数据的加密和解密；</p><h3 id="2-数据加签"><a href="#2-数据加签" class="headerlink" title="2. 数据加签"></a>2. 数据加签</h3><p>数据加签就是由发送者产生一段无法伪造的一段数字串，来保证数据在传输过程中不被篡改；你可能会问数据如果已经通过 https 加密了，还有必要进行加签吗？数据在传输过程中经过加密，理论上就算被抓包，也无法对数据进行篡改；但是我们要知道加密的部分其实只是在外网，现在很多服务在内网中都需要经过很多服务跳转，所以这里的加签可以防止内网中数据被篡改；</p><h3 id="3-时间戳机制"><a href="#3-时间戳机制" class="headerlink" title="3. 时间戳机制"></a>3. 时间戳机制</h3><p>数据是很容易被抓包的，但是经过如上的加密，加签处理，就算拿到数据也不能看到真实的数据；但是有不法者不关心真实的数据，而是直接拿到抓取的数据包进行恶意请求；这时候可以使用时间戳机制，在每次请求中加入当前的时间，服务器端会拿到当前时间和消息中的时间相减，看看是否在一个固定的时间范围内比如 5 分钟内；这样恶意请求的数据包是无法更改里面时间的，所以 5 分钟后就视为非法请求了；</p><h3 id="4-AppId-机制"><a href="#4-AppId-机制" class="headerlink" title="4. AppId 机制"></a>4. AppId 机制</h3><p>大部分网站基本都需要用户名和密码才能登录，并不是谁来能使用我的网站，这其实也是一种安全机制；对应的对外提供的接口其实也需要这么一种机制，并不是谁都可以调用，需要使用接口的用户需要在后台开通 appid，提供给用户相关的密钥；在调用的接口中需要提供 appid + 密钥，服务器端会进行相关的验证；</p><h3 id="5-限流机制"><a href="#5-限流机制" class="headerlink" title="5. 限流机制"></a>5. 限流机制</h3><p>本来就是真实的用户，并且开通了 appid，但是出现频繁调用接口的情况；这种情况需要给相关 appid 限流处理，常用的限流算法有令牌桶和漏桶算法；</p><h3 id="6-黑名单机制"><a href="#6-黑名单机制" class="headerlink" title="6. 黑名单机制"></a>6. 黑名单机制</h3><p>如果此 appid 进行过很多非法操作，或者说专门有一个中黑系统，经过分析之后直接将此 appid 列入黑名单，所有请求直接返回错误码；</p><h3 id="7-数据合法性校验"><a href="#7-数据合法性校验" class="headerlink" title="7. 数据合法性校验"></a>7. 数据合法性校验</h3><p>这个可以说是每个系统都会有的处理机制，只有在数据是合法的情况下才会进行数据处理；每个系统都有自己的验证规则，当然也可能有一些常规性的规则，比如身份证长度和组成，电话号码长度和组成等等；</p><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a><strong>如何实现</strong></h2><p>以上大体介绍了一下常用的一些接口安全措施，当然可能还有其他我不知道的方式，希望大家补充，下面看看以上这些方法措施，具体如何实现；</p><h3 id="1-数据加密-1"><a href="#1-数据加密-1" class="headerlink" title="1. 数据加密"></a>1. 数据加密</h3><p>现在主流的加密方式有对称加密和非对称加密；</p><p><strong>对称加密</strong>：对称密钥在加密和解密的过程中使用的密钥是相同的，常见的对称加密算法有 DES，AES；优点是计算速度快，缺点是在数据传送前，发送方和接收方必须商定好秘钥，然后使双方都能保存好秘钥，如果一方的秘钥被泄露，那么加密信息也就不安全了；</p><p><strong>非对称加密</strong>：服务端会生成一对密钥，私钥存放在服务器端，公钥可以发布给任何人使用；优点就是比起对称加密更加安全，但是加解密的速度比对称加密慢太多了；广泛使用的是 RSA 算法；</p><p>两种方式各有优缺点，而 https 的实现方式正好是结合了两种加密方式，整合了双方的优点，在安全和性能方面都比较好；</p><p>对称加密和非对称加密代码实现，jdk 提供了相关的工具类可以直接使用，此处不过多介绍；</p><h3 id="2-数据加签-1"><a href="#2-数据加签-1" class="headerlink" title="2. 数据加签"></a>2. 数据加签</h3><p>数据签名使用比较多的是 md5 算法，将需要提交的数据通过某种方式组合和一个字符串，然后通过 md5 生成一段加密字符串，这段加密字符串就是数据包的签名，可以看一个简单的例子：</p><pre class=" language-java"><code class="language-java">str：参数<span class="token number">1</span><span class="token operator">=</span><span class="token punctuation">{</span>参数<span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">&amp;</span>参数<span class="token number">2</span><span class="token operator">=</span><span class="token punctuation">{</span>参数<span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&amp;参数n<span class="token operator">=</span><span class="token punctuation">{</span>参数n<span class="token punctuation">}</span>$key<span class="token operator">=</span><span class="token punctuation">{</span>用户密钥<span class="token punctuation">}</span><span class="token punctuation">;</span> MD5<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意最后的用户密钥，客户端和服务端都有一份，这样会更加安全；</p><h3 id="3-时间戳机制-1"><a href="#3-时间戳机制-1" class="headerlink" title="3. 时间戳机制"></a>3. 时间戳机制</h3><p>解密后的数据，经过签名认证后，我们拿到数据包中的客户端时间戳字段，然后用服务器当前时间去减客户端时间，看结果是否在一个区间内，伪代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> interval<span class="token operator">=</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">1000</span>；<span class="token comment" spellcheck="true">//超时时间</span><span class="token keyword">long</span> clientTime<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getparameter</span><span class="token punctuation">(</span><span class="token string">"clientTime"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> serverTime<span class="token operator">=</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>serverTime<span class="token operator">-</span>clientTime<span class="token operator">></span>interval<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">"超过处理时长"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="4-AppId-机制-1"><a href="#4-AppId-机制-1" class="headerlink" title="4. AppId 机制"></a>4. AppId 机制</h3><p>生成一个唯一的 AppId 即可，密钥使用字母、数字等特殊字符随机生成即可；生成唯一 AppId 根据实际情况看是否需要全局唯一；但是不管是否全局唯一最好让生成的 Id 有如下属性：趋势递增：这样在保存数据库的时候，使用索引性能更好；信息安全：尽量不要连续的，容易发现规律；关于全局唯一 Id 生成的方式常见的有类 snowflake 方式等；</p><h3 id="5-限流机制-1"><a href="#5-限流机制-1" class="headerlink" title="5. 限流机制"></a>5. 限流机制</h3><p>常用的限流算法包括：令牌桶限流， 漏桶限流， 计数器限流；</p><p><strong>1. 令牌桶限流</strong> 令牌桶算法的原理是系统以一定速率向桶中放入令牌，填满了就丢弃令牌；请求来时会先从桶中取出令牌，如果能取到令牌，则可以继续完成请求，否则等待或者拒绝服务；令牌桶允许一定程度突发流量，只要有令牌就可以处理，支持一次拿多个令牌；</p><p><strong>2. 漏桶限流</strong> 漏桶算法的原理是按照固定常量速率流出请求，流入请求速率任意，当请求数超过桶的容量时，新的请求等待或者拒绝服务；可以看出漏桶算法可以强制限制数据的传输速度；</p><p><strong>3. 计数器限流</strong> 计数器是一种比较简单粗暴的算法，主要用来限制总并发数，比如数据库连接池、线程池、秒杀的并发数；计数器限流只要一定时间内的总请求数超过设定的阀值则进行限流；具体基于以上算法如何实现，Guava 提供了 RateLimiter 工具类基于基于令牌桶算法：</p><pre class=" language-java"><code class="language-java">RateLimiter rateLimiter <span class="token operator">=</span> RateLimiter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上代码表示一秒钟只允许处理五个并发请求，以上方式只能用在单应用的请求限流，不能进行全局限流；这个时候就需要分布式限流，可以基于 redis+lua 来实现；</p><h3 id="6-黑名单机制-1"><a href="#6-黑名单机制-1" class="headerlink" title="6. 黑名单机制"></a>6. 黑名单机制</h3><p>如何为什么中黑我们这边不讨论，我们可以给每个用户设置一个状态比如包括：初始化状态，正常状态，中黑状态，关闭状态等等；或者我们直接通过分布式配置中心，直接保存黑名单列表，每次检查是否在列表中即可；</p><h3 id="7-数据合法性校验-1"><a href="#7-数据合法性校验-1" class="headerlink" title="7. 数据合法性校验"></a>7. 数据合法性校验</h3><p>合法性校验包括：常规性校验以及业务校验；常规性校验：包括签名校验，必填校验，长度校验，类型校验，格式校验等；业务校验：根据实际业务而定，比如订单金额不能小于 0 等；</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>本文大致列举了几种常见的安全措施机制包括：数据加密、数据加签、时间戳机制、AppId 机制、限流机制、黑名单机制以及数据合法性校验；当然肯定有其他方式，欢迎补充。</p>]]></content>
      
      
      <categories>
          
          <category> 方案设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方案设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.分布式事务</title>
      <link href="posts/29117629.html"/>
      <url>posts/29117629.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/6.%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 思维导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.一个秒杀系统的设计思考</title>
      <link href="posts/c4292d51.html"/>
      <url>posts/c4292d51.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>秒杀大家都不陌生。自2011年首次出现以来，无论是双十一购物还是 12306 抢票，秒杀场景已随处可见。简单来说，秒杀就是在同一时刻大量请求争抢购买同一商品并完成交易的过程。从架构视角来看，秒杀系统本质是一个高性能、高一致、高可用的三高系统。而打造并维护一个超大流量的秒杀系统需要进行哪些关注，就是本文讨论的话题。</p><h1 id="1-整体思考"><a href="#1-整体思考" class="headerlink" title="1. 整体思考"></a>1. 整体思考</h1><h3 id="1-1-秒杀存在的问题"><a href="#1-1-秒杀存在的问题" class="headerlink" title="1.1 秒杀存在的问题"></a>1.1 秒杀存在的问题</h3><p>对于一个日常平稳的业务系统，如果直接开通秒杀功能的话，往往会出现很多问题——</p><table><thead><tr><th>干系人</th><th>问题分类</th><th>业务出现的问题</th><th>设计要求</th></tr></thead><tbody><tr><td>用户</td><td>体验较差</td><td>秒杀开始，系统瞬间承受平时数十倍甚至上百倍的流量，直接宕掉</td><td>高性能</td></tr><tr><td></td><td></td><td>用户下单后却付不了款，显示商品已经被其他人买走了</td><td>一致性</td></tr><tr><td>商家</td><td>商品超卖</td><td>100 件商品，却出现 200 人下单成功，成功下单买到商品的人数远远超过活动商品数量的上限</td><td>一致性</td></tr><tr><td></td><td>资金受损</td><td>竞争对手通过恶意下单的方式将活动商品全部下单，导致库存清零，商家无法正常售卖</td><td>高可用</td></tr><tr><td></td><td></td><td>秒杀器猖獗，黄牛通过秒杀器扫货，商家无法达到营销目的</td><td>高可用</td></tr><tr><td>平台</td><td>风险不可控</td><td>系统的其它与秒杀活动不相关的模块变得异常缓慢，业务影响面扩散</td><td>高可用</td></tr><tr><td></td><td>拖垮网站</td><td>在线人数创新高，核心链路涉及的上下游服务从前到后都在告警</td><td>高性能</td></tr><tr><td></td><td></td><td>库存只有一份，所有请求集中读写同一个数据，DB 出现单点</td><td>高性能</td></tr></tbody></table><h3 id="1-2-设计方向的思考"><a href="#1-2-设计方向的思考" class="headerlink" title="1.2 设计方向的思考"></a>1.2 设计方向的思考</h3><p>秒杀本质是要求一个瞬时高发下的承压系统，这也是其区别于其他业务的核心场景。对日常系统秒杀产生的问题逐一进行拆解分类，秒杀对应到架构设计，其实就是高可用、一致性和高性能的要求。关于秒杀系统的设计思考，本文即基于此 3 层依次推进，简述如下——</p><ul><li>高性能。 秒杀涉及高读和高写的支持，如何支撑高并发，如何抵抗高IOPS？核心优化理念其实是类似的：高读就尽量”少读”或”读少”，高写就数据拆分。本文将从动静分离、热点优化以及服务端性能优化 3 个方面展开</li><li>一致性。 秒杀的核心关注是商品库存，有限的商品在同一时间被多个请求同时扣减，而且要保证准确性，显而易见是一个难题。如何做到既不多又不少？本文将从业界通用的几种减库存方案切入，讨论一致性设计的核心逻辑</li><li>高可用。 大型分布式系统在实际运行过程中面对的工况是非常复杂的，业务流量的突增、依赖服务的不稳定、应用自身的瓶颈、物理资源的损坏等方方面面都会对系统的运行带来大大小小的的冲击。如何保障应用在复杂工况环境下还能高效稳定运行，如何预防和面对突发问题，系统设计时应该从哪些方面着手？本文将从架构落地的全景视角进行关注思考</li></ul><h1 id="2-高性能"><a href="#2-高性能" class="headerlink" title="2. 高性能"></a>2. 高性能</h1><h2 id="2-1-动静分离"><a href="#2-1-动静分离" class="headerlink" title="2.1 动静分离"></a>2.1 动静分离</h2><p>大家可能会注意到，秒杀过程中你是不需要刷新整个页面的，只有时间在不停跳动。这是因为一般都会对大流量的秒杀系统做系统的静态化改造，即数据意义上的动静分离。动静分离三步走：1、数据拆分；2、静态缓存；3、数据整合。</p><h3 id="2-1-1-数据拆分"><a href="#2-1-1-数据拆分" class="headerlink" title="2.1.1 数据拆分"></a>2.1.1 数据拆分</h3><p>动静分离的首要目的是将动态页面改造成适合缓存的静态页面。因此第一步就是分离出动态数据，主要从以下 2 个方面进行：</p><ol><li>用户。用户身份信息包括登录状态以及登录画像等，相关要素可以单独拆分出来，通过动态请求进行获取；与之相关的广平推荐，如用户偏好、地域偏好等，同样可以通过异步方式进行加载</li><li>时间。秒杀时间是由服务端统一管控的，可以通过动态请求进行获取</li></ol><p>这里你可以打开电商平台的一个秒杀页面，看看这个页面里都有哪些动静数据。</p><h3 id="2-1-2-静态缓存"><a href="#2-1-2-静态缓存" class="headerlink" title="2.1.2 静态缓存"></a>2.1.2 静态缓存</h3><p>分离出动静态数据之后，第二步就是将静态数据进行合理的缓存，由此衍生出两个问题：1、怎么缓存；2、哪里缓存</p><h4 id="2-1-2-1-怎么缓存"><a href="#2-1-2-1-怎么缓存" class="headerlink" title="2.1.2.1 怎么缓存"></a>2.1.2.1 怎么缓存</h4><p>静态化改造的一个特点是直接缓存整个 HTTP 连接而不是仅仅缓存静态数据，如此一来，Web 代理服务器根据请求 URL，可以直接取出对应的响应体然后直接返回，响应过程无需重组 HTTP 协议，也无需解析 HTTP 请求头。而作为缓存键，URL唯一化是必不可少的，只是对于商品系统，URL 天然是可以基于商品 ID 来进行唯一标识的，比如淘宝的 “<a href="https://item.taobao.com/item.htm?id=xxxx&quot;%E3%80%82" target="_blank" rel="noopener">https://item.taobao.com/item.htm?id=xxxx"。</a></p><h4 id="2-1-2-2-哪里缓存"><a href="#2-1-2-2-哪里缓存" class="headerlink" title="2.1.2.2 哪里缓存"></a>2.1.2.2 哪里缓存</h4><p>静态数据缓存到哪里呢？可以有三种方式：1、浏览器；2、CDN ；3、服务端。</p><ul><li>浏览器当然是第一选择，但用户的浏览器是不可控的，主要体现在如果用户不主动刷新，系统很难主动地把消息推送给用户（注意，当讨论静态数据时，潜台词是 “相对不变”，言外之意是 “可能会变”），如此可能会导致用户端在很长一段时间内看到的信息都是错误的。对于秒杀系统，保证缓存可以在秒级时间内失效是不可或缺的。</li><li>服务端主要进行动态逻辑计算及加载，本身并不擅长处理大量连接，每个连接消耗内存较多，同时 Servlet 容器解析 HTTP 较慢，容易侵占逻辑计算资源；另外，静态数据下沉至此也会拉长请求路径。</li></ul><p>因此通常将静态数据缓存在 CDN，其本身更擅长处理大并发的静态文件请求，既可以做到主动失效，又离用户尽可能近，同时规避 Java 语言层面的弱点。需要注意的是，上 CDN 有以下几个问题需要解决：</p><blockquote><ol><li>失效问题。任何一个缓存都应该是有时效的，尤其对于一个秒杀场景。所以，系统需要保证全国各地的 CDN 在秒级时间内失效掉缓存信息，这实际对 CDN 的失效系统要求是很高的</li><li>命中率问题。高命中是缓存系统最为核心的性能要求，不然缓存就失去了意义。如果将数据放到全国各地的 CDN ，势必会导致请求命中同一个缓存的可能性降低，那么命中率就成为一个问题</li></ol></blockquote><p>因此，将数据放到全国所有的 CDN 节点是不太现实的，失效问题、命中率问题都会面临比较大的挑战。更为可行的做法是选择若干 CDN 节点进行静态化改造，节点的选取通常需要满足以下几个条件：</p><blockquote><ol><li>临近访问量集中的地区</li><li>距离主站较远的地区</li><li>节点与主站间网络质量良好的地区</li></ol></blockquote><p>基于以上因素，选择 CDN 的二级缓存比较合适，因为二级缓存数量偏少，容量也更大，访问量相对集中，这样就可以较好解决缓存的失效问题以及命中率问题，是当前比较理想的一种 CDN 化方案。部署方式如下图所示：<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img/bVbz9yC123.png" alt="image"></p><h3 id="2-1-3-数据整合"><a href="#2-1-3-数据整合" class="headerlink" title="2.1.3 数据整合"></a>2.1.3 数据整合</h3><p>分离出动静态数据之后，前端如何组织数据页就是一个新的问题，主要在于动态数据的加载处理，通常有两种方案：ESI（Edge Side Includes）方案和 CSI（Client Side Include）方案。</p><blockquote><ol><li>ESI 方案：Web 代理服务器上请求动态数据，并将动态数据插入到静态页面中，用户看到页面时已经是一个完整的页面。这种方式对服务端性能要求高，但用户体验较好</li><li>CSI 方案：Web 代理服务器上只返回静态页面，前端单独发起一个异步 JS 请求动态数据。这种方式对服务端性能友好，但用户体验稍差</li></ol></blockquote><h3 id="2-1-4-小结"><a href="#2-1-4-小结" class="headerlink" title="2.1.4 小结"></a>2.1.4 小结</h3><p>动静分离对于性能的提升，抽象起来只有两点，一是数据要尽量少，以便减少没必要的请求，二是路径要尽量短，以便提高单次请求的效率。具体方法其实就是基于这个大方向进行的。</p><h2 id="2-2-热点优化"><a href="#2-2-热点优化" class="headerlink" title="2.2 热点优化"></a>2.2 热点优化</h2><p>热点分为热点操作和热点数据，以下分开进行讨论。</p><h3 id="2-2-1-热点操作"><a href="#2-2-1-热点操作" class="headerlink" title="2.2.1 热点操作"></a>2.2.1 热点操作</h3><p>零点刷新、零点下单、零点添加购物车等都属于热点操作。热点操作是用户的行为，不好改变，但可以做一些限制保护，比如用户频繁刷新页面时进行提示阻断。</p><h3 id="2-2-2-热点数据"><a href="#2-2-2-热点数据" class="headerlink" title="2.2.2 热点数据"></a>2.2.2 热点数据</h3><p>热点数据的处理三步走，一是热点识别，二是热点隔离，三是热点优化。</p><h4 id="2-2-2-1-热点识别"><a href="#2-2-2-1-热点识别" class="headerlink" title="2.2.2.1 热点识别"></a>2.2.2.1 热点识别</h4><p>热点数据分为静态热点和动态热点，具体如下：</p><blockquote><ol><li>静态热点：能够提前预测的热点数据。大促前夕，可以根据大促的行业特点、活动商家等纬度信息分析出热点商品，或者通过卖家报名的方式提前筛选；另外，还可以通过技术手段提前预测，例如对买家每天访问的商品进行大数据计算，然后统计出 TOP N 的商品，即可视为热点商品</li><li>动态热点：无法提前预测的热点数据。冷热数据往往是随实际业务场景发生交替变化的，尤其是如今直播卖货模式的兴起——带货商临时做一个广告，就有可能导致一件商品在短时间内被大量购买。由于此类商品日常访问较少，即使在缓存系统中一段时间后也会被逐出或过期掉，甚至在db中也是冷数据。瞬时流量的涌入，往往导致缓存被击穿，请求直接到达DB，引发DB压力过大</li></ol></blockquote><p>因此秒杀系统需要实现热点数据的动态发现能力，一个常见的实现思路是：</p><blockquote><ol><li>异步采集交易链路各个环节的热点 Key 信息，如 Nginx采集访问URL或 Agent 采集热点日志（一些中间件本身已具备热点发现能力），提前识别潜在的热点数据</li><li>聚合分析热点数据，达到一定规则的热点数据，通过订阅分发推送到链路系统，各系统根据自身需求决定如何处理热点数据，或限流或缓存，从而实现热点保护</li></ol></blockquote><p>需要注意的是：</p><blockquote><ol><li>热点数据采集最好采用异步方式，一方面不会影响业务的核心交易链路，一方面可以保证采集方式的通用性</li><li>热点发现最好做到秒级实时，这样动态发现才有意义，实际上也是对核心节点的数据采集和分析能力提出了较高的要求</li></ol></blockquote><h4 id="2-2-2-2-热点隔离"><a href="#2-2-2-2-热点隔离" class="headerlink" title="2.2.2.2 热点隔离"></a>2.2.2.2 热点隔离</h4><p>热点数据识别出来之后，第一原则就是将热点数据隔离出来，不要让 1% 影响到另外的 99%，可以基于以下几个层次实现热点隔离：</p><ol><li>业务隔离。秒杀作为一种营销活动，卖家需要单独报名，从技术上来说，系统可以提前对已知热点做缓存预热</li><li>系统隔离。系统隔离是运行时隔离，通过分组部署和另外 99% 进行分离，另外秒杀也可以申请单独的域名，入口层就让请求落到不同的集群中</li><li>数据隔离。秒杀数据作为热点数据，可以启用单独的缓存集群或者DB服务组，从而更好的实现横向或纵向能力扩展</li></ol><p>当然，实现隔离还有很多种办法。比如，可以按照用户来区分，为不同的用户分配不同的 Cookie，入口层路由到不同的服务接口中；再比如，域名保持一致，但后端调用不同的服务接口；又或者在数据层给数据打标进行区分等等，这些措施的目的都是把已经识别的热点请求和普通请求区分开来。</p><h4 id="2-2-2-3-热点优化"><a href="#2-2-2-3-热点优化" class="headerlink" title="2.2.2.3 热点优化"></a>2.2.2.3 热点优化</h4><p>热点数据隔离之后，也就方便对这 1% 的请求做针对性的优化，方式无外乎两种：</p><ol><li>缓存：热点缓存是最为有效的办法。如果热点数据做了动静分离，那么可以长期缓存静态数据</li><li>限流：流量限制更多是一种保护机制。需要注意的是，各服务要时刻关注请求是否触发限流并及时进行review</li></ol><h4 id="2-2-2-4-小结"><a href="#2-2-2-4-小结" class="headerlink" title="2.2.2.4 小结"></a>2.2.2.4 小结</h4><p>数据的热点优化与动静分离是不一样的，热点优化是基于二八原则对数据进行了纵向拆分，以便进行针对性地处理。热点识别和隔离不仅对“秒杀”这个场景有意义，对其他的高性能分布式系统也非常有参考价值。</p><h2 id="2-3-系统优化"><a href="#2-3-系统优化" class="headerlink" title="2.3 系统优化"></a>2.3 系统优化</h2><p>对于一个软件系统，提高性能可以有很多种手段，如提升硬件水平、调优JVM 性能，这里主要关注代码层面的性能优化——</p><ol><li>减少序列化：减少 Java 中的序列化操作可以很好的提升系统性能。序列化大部分是在 RPC 阶段发生，因此应该尽量减少 RPC 调用，一种可行的方案是将多个关联性较强的应用进行 “合并部署”，从而减少不同应用之间的 RPC 调用（微服务设计规范）</li><li>直接输出流数据：只要涉及字符串的I/O操作，无论是磁盘 I/O 还是网络 I/O，都比较耗费 CPU 资源，因为字符需要转换成字节，而这个转换又必须查表编码。所以对于常用数据，比如静态字符串，推荐提前编码成字节并缓存，具体到代码层面就是通过 OutputStream() 类函数从而减少数据的编码转换；另外，热点方法toString()不要直接调用ReflectionToString实现，推荐直接硬编码，并且只打印DO的基础要素和核心要素</li><li>裁剪日志异常堆栈：无论是外部系统异常还是应用本身异常，都会有堆栈打出，超大流量下，频繁的输出完整堆栈，只会加剧系统当前负载。可以通过日志配置文件控制异常堆栈输出的深度</li><li>去组件框架：极致优化要求下，可以去掉一些组件框架，比如去掉传统的 MVC 框架，直接使用 Servlet 处理请求。这样可以绕过一大堆复杂且用处不大的处理逻辑，节省毫秒级的时间，当然，需要合理评估你对框架的依赖程度</li></ol><h2 id="2-4-总结一下"><a href="#2-4-总结一下" class="headerlink" title="2.4 总结一下"></a>2.4 总结一下</h2><p>性能优化需要一个基准值，所以系统还需要做好应用基线，比如性能基线（何时性能突然下降）、成本基线（去年大促用了多少机器）、链路基线（核心流程发生了哪些变化），通过基线持续关注系统性能，促使系统在代码层面持续提升编码质量、业务层面及时下掉不合理调用、架构层面不断优化改进。</p><h1 id="3-一致性"><a href="#3-一致性" class="headerlink" title="3. 一致性"></a>3. 一致性</h1><p>秒杀系统中，库存是个关键数据，卖不出去是个问题，超卖更是个问题。秒杀场景下的一致性问题，主要就是库存扣减的准确性问题。</p><h2 id="3-1-减库存的方式"><a href="#3-1-减库存的方式" class="headerlink" title="3.1 减库存的方式"></a>3.1 减库存的方式</h2><p>电商场景下的购买过程一般分为两步：下单和付款。“提交订单”即为下单，“支付订单”即为付款。基于此设定，减库存一般有以下几个方式：</p><ol><li>下单减库存。买家下单后，扣减商品库存。下单减库存是最简单的减库存方式，也是控制最为精确的一种</li><li>付款减库存。买家下单后，并不立即扣减库存，而是等到付款后才真正扣减库存。但因为付款时才减库存，如果并发比较高，可能出现买家下单后付不了款的情况，因为商品已经被其他人买走了</li><li>预扣库存。这种方式相对复杂一些，买家下单后，库存为其保留一定的时间（如 15 分钟），超过这段时间，库存自动释放，释放后其他买家可以购买</li></ol><p>能够看到，减库存方式是基于购物过程的多阶段进行划分的，但无论是在下单阶段还是付款阶段，都会存在一些问题，下面进行具体分析。</p><h2 id="3-2-减库存的问题"><a href="#3-2-减库存的问题" class="headerlink" title="3.2 减库存的问题"></a>3.2 减库存的问题</h2><h3 id="3-2-1-下单减库存"><a href="#3-2-1-下单减库存" class="headerlink" title="3.2.1 下单减库存"></a>3.2.1 下单减库存</h3><p>优势：用户体验最好。下单减库存是最简单的减库存方式，也是控制最精确的一种。下单时可以直接通过数据库事务机制控制商品库存，所以一定不会出现已下单却付不了款的情况。</p><p>劣势：可能卖不出去。正常情况下，买家下单后付款概率很高，所以不会有太大问题。但有一种场景例外，就是当卖家参加某个促销活动时，竞争对手通过恶意下单的方式将该商品全部下单，导致库存清零，那么这就不能正常售卖了——要知道，恶意下单的人是不会真正付款的，这正是 “下单减库存” 的不足之处。</p><h3 id="3-2-2-付款减库存"><a href="#3-2-2-付款减库存" class="headerlink" title="3.2.2 付款减库存"></a>3.2.2 付款减库存</h3><p>优势：一定实际售卖。“下单减库存” 可能导致恶意下单，从而影响卖家的商品销售， “付款减库存” 由于需要付出真金白银，可以有效避免。</p><p>劣势：用户体验较差。用户下单后，不一定会实际付款，假设有 100 件商品，就可能出现 200 人下单成功的情况，因为下单时不会减库存，所以也就可能出现下单成功数远远超过真正库存数的情况，这尤其会发生在大促的热门商品上。如此一来就会导致很多买家下单成功后却付不了款，购物体验自然是比较差的。</p><h3 id="3-2-3-预扣库存"><a href="#3-2-3-预扣库存" class="headerlink" title="3.2.3 预扣库存"></a>3.2.3 预扣库存</h3><p>优势：缓解了以上两种方式的问题。预扣库存实际就是“下单减库存”和 “付款减库存”两种方式的结合，将两次操作进行了前后关联，下单时预扣库存，付款时释放库存。</p><p>劣势：并没有彻底解决以上问题。比如针对恶意下单的场景，虽然可以把有效付款时间设置为 10 分钟，但恶意买家完全可以在 10 分钟之后再次下单。</p><h3 id="3-2-4-小结"><a href="#3-2-4-小结" class="headerlink" title="3.2.4 小结"></a>3.2.4 小结</h3><p>减库存的问题主要体现在用户体验和商业诉求两方面，其本质原因在于购物过程存在两步甚至多步操作，在不同阶段减库存，容易存在被恶意利用的漏洞。</p><h2 id="3-3-实际如何减库存"><a href="#3-3-实际如何减库存" class="headerlink" title="3.3 实际如何减库存"></a>3.3 实际如何减库存</h2><p><strong>业界最为常见的是预扣库存</strong>。无论是外卖点餐还是电商购物，下单后一般都有个 “有效付款时间”，超过该时间订单自动释放，这就是典型的预扣库存方案。但如上所述，预扣库存还需要解决恶意下单的问题，保证商品卖的出去；另一方面，如何避免超卖，也是一个痛点。</p><ol><li>卖的出去：恶意下单的解决方案主要还是结合安全和反作弊措施来制止。比如，识别频繁下单不付款的买家并进行打标，这样可以在打标买家下单时不减库存；再比如为大促商品设置单人最大购买件数，一人最多只能买 N 件商品；又或者对重复下单不付款的行为进行次数限制阻断等</li><li>避免超卖：库存超卖的情况实际分为两种。对于普通商品，秒杀只是一种大促手段，即使库存超卖，商家也可以通过补货来解决；而对于一些商品，秒杀作为一种营销手段，完全不允许库存为负，也就是在数据一致性上，需要保证大并发请求时数据库中的库存字段值不能为负，一般有多种方案：一是在通过事务来判断，即保证减后库存不能为负，否则就回滚；二是直接设置数据库字段类型为无符号整数，这样一旦库存为负就会在执行 SQL 时报错；三是使用 CASE WHEN 判断语句——</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> item <span class="token keyword">SET</span> inventory <span class="token operator">=</span> <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> inventory <span class="token operator">>=</span> xxx <span class="token keyword">THEN</span> inventory<span class="token operator">-</span>xxx <span class="token keyword">ELSE</span> inventory <span class="token keyword">END</span></code></pre><p>业务手段保证商品卖的出去，技术手段保证商品不会超卖，库存问题从来就不是简单的技术难题，解决问题的视角是多种多样的。</p><h2 id="3-4-一致性性能的优化"><a href="#3-4-一致性性能的优化" class="headerlink" title="3.4 一致性性能的优化"></a>3.4 一致性性能的优化</h2><p>库存是个关键数据，更是个热点数据。对系统来说，热点的实际影响就是 “高读” 和 “高写”，也是秒杀场景下最为核心的一个技术难题。</p><h3 id="3-4-1-高并发读"><a href="#3-4-1-高并发读" class="headerlink" title="3.4.1 高并发读"></a>3.4.1 高并发读</h3><p>秒杀场景解决高并发读问题，关键词是“分层校验”。即在读链路时，只进行不影响性能的检查操作，如用户是否具有秒杀资格、商品状态是否正常、用户答题是否正确、秒杀是否已经结束、是否非法请求等，而不做一致性校验等容易引发瓶颈的检查操作；直到写链路时，才对库存做一致性检查，在数据层保证最终准确性。</p><p>因此，在分层校验设定下，系统可以采用分布式缓存甚至LocalCache来抵抗高并发读。即允许读场景下一定的脏数据，这样只会导致少量原本无库存的下单请求被误认为是有库存的，等到真正写数据时再保证最终一致性，由此做到高可用和一致性之间的平衡。</p><p>实际上，分层校验的核心思想是：<strong>不同层次尽可能过滤掉无效请求，只在“漏斗” 最末端进行有效处理，从而缩短系统瓶颈的影响路径</strong>。</p><h3 id="3-4-2-高并发写"><a href="#3-4-2-高并发写" class="headerlink" title="3.4.2 高并发写"></a>3.4.2 高并发写</h3><p>高并发写的优化方式，一种是更换DB选型，一种是优化DB性能，以下分别进行讨论。</p><h4 id="3-4-2-1-更换DB选型"><a href="#3-4-2-1-更换DB选型" class="headerlink" title="3.4.2.1 更换DB选型"></a>3.4.2.1 更换DB选型</h4><p>秒杀商品和普通商品的减库存是有差异的，核心区别在数据量级小、交易时间短，因此能否把秒杀减库存直接放到缓存系统中实现呢，也就是直接在一个带有持久化功能的缓存中进行减库存操作，比如 Redis？</p><p>如果减库存逻辑非常单一的话，比如没有复杂的 SKU 库存和总库存这种联动关系的话，个人认为是完全可以的。但如果有比较复杂的减库存逻辑，或者需要使用到事务，那就必须在数据库中完成减库存操作。</p><h4 id="3-4-2-2-优化DB性能"><a href="#3-4-2-2-优化DB性能" class="headerlink" title="3.4.2.2 优化DB性能"></a>3.4.2.2 优化DB性能</h4><p>库存数据落地到数据库实现其实是一行存储（MySQL），因此会有大量线程来竞争 InnoDB 行锁。但并发越高，等待线程就会越多，TPS 下降，RT 上升，吞吐量会受到严重影响——注意，这里假设数据库已基于上文【性能优化】完成数据隔离，以便于讨论聚焦 。</p><p>解决并发锁的问题，有两种办法：</p><ol><li>应用层排队。通过缓存加入集群分布式锁，从而控制集群对数据库同一行记录进行操作的并发度，同时也能控制单个商品占用数据库连接的数量，防止热点商品占用过多的数据库连接</li><li>数据层排队。应用层排队是有损性能的，数据层排队是最为理想的。业界中，阿里的数据库团队开发了针对InnoDB 层上的补丁程序（patch），可以基于DB层对单行记录做并发排队，从而实现秒杀场景下的定制优化——注意，排队和锁竞争是有区别的，如果熟悉 MySQL 的话，就会知道 InnoDB 内部的死锁检测，以及 MySQL Server 和 InnoDB 的切换都是比较消耗性能的。另外阿里的数据库团队还做了很多其他方面的优化，如 COMMIT_ON_SUCCESS 和 ROLLBACK_ON_FAIL 的补丁程序，通过在 SQL 里加入提示（hint），实现事务不需要等待实时提交，而是在数据执行完最后一条 SQL 后，直接根据 TARGET_AFFECT_ROW 的结果进行提交或回滚，减少网络等待的时间（毫秒级）。目前阿里已将包含这些补丁程序的 MySQL 开源：<a href="https://github.com/alibaba/AliSQL?spm=a2c4e.10696291.0.0.34ba19a415ghm4" target="_blank" rel="noopener">AliSQL</a></li></ol><h3 id="3-4-3-小结"><a href="#3-4-3-小结" class="headerlink" title="3.4.3 小结"></a>3.4.3 小结</h3><p>高读和高写的两种处理方式大相径庭。读请求的优化空间要大一些，而写请求的瓶颈一般都在存储层，优化思路的本质还是基于 CAP 理论做平衡。</p><h2 id="3-5-总结一下"><a href="#3-5-总结一下" class="headerlink" title="3.5 总结一下"></a>3.5 总结一下</h2><p>当然，减库存还有很多细节问题，例如预扣的库存超时后如何进行回补，再比如第三方支付如何保证减库存和付款时的状态一致性，这些也是很大的挑战。</p><h1 id="4-高可用"><a href="#4-高可用" class="headerlink" title="4. 高可用"></a>4. 高可用</h1><p>盯过秒杀流量监控的话，会发现它不是一条蜿蜒而起的曲线，而是一条挺拔的直线，这是因为秒杀请求高度集中于某一特定的时间点。这样一来就会造成一个特别高的零点峰值，而对资源的消耗也几乎是瞬时的。所以秒杀系统的可用性保护是不可或缺的。</p><h2 id="4-1-流量削峰"><a href="#4-1-流量削峰" class="headerlink" title="4.1 流量削峰"></a>4.1 流量削峰</h2><p>对于秒杀的目标场景，最终能够抢到商品的人数是固定的，无论 100 人和 10000 人参加结果都是一样的，即有效请求额度是有限的。并发度越高，无效请求也就越多。但秒杀作为一种商业营销手段，活动开始之前是希望有更多的人来刷页面，只是真正开始后，秒杀请求不是越多越好。因此系统可以设计一些规则，人为的延缓秒杀请求，甚至可以过滤掉一些无效请求。</p><h3 id="4-1-1-答题"><a href="#4-1-1-答题" class="headerlink" title="4.1.1 答题"></a>4.1.1 答题</h3><p>早期秒杀只是简单的点击秒杀按钮，后来才增加了答题。为什么要增加答题呢？主要是通过提升购买的复杂度，达到两个目的：</p><ol><li>防止作弊。早期秒杀器比较猖獗，存在恶意买家或竞争对手使用秒杀器扫货的情况，商家没有达到营销的目的，所以增加答题来进行限制</li><li>延缓请求。零点流量的起效时间是毫秒级的，答题可以人为拉长峰值下单的时长，由之前的 &lt;1s 延长到 &lt;10s。这个时间对于服务端非常重要，会大大减轻高峰期并发压力；另外，由于请求具有先后顺序，答题后置的请求到来时可能已经没有库存了，因此根本无法下单，此阶段落到数据层真正的写也就非常有限了</li></ol><p>需要注意的是，答题除了做正确性验证，还需要对提交时间做验证，比如&lt;1s 人为操作的可能性就很小，可以进一步防止机器答题的情况。</p><p>答题目前已经使用的非常普遍了，本质是通过在入口层削减流量，从而让系统更好地支撑瞬时峰值。</p><h3 id="4-1-2-排队"><a href="#4-1-2-排队" class="headerlink" title="4.1.2 排队"></a>4.1.2 排队</h3><p>最为常见的削峰方案是使用消息队列，通过把同步的直接调用转换成异步的间接推送缓冲瞬时流量。除了消息队列，类似的排队方案还有很多，例如：</p><ol><li>线程池加锁等待</li><li>本地内存蓄洪等待</li><li>本地文件序列化写，再顺序读</li></ol><p>排队方式的弊端也是显而易见的，主要有两点：</p><ol><li>请求积压。流量高峰如果长时间持续，达到了队列的水位上限，队列同样会被压垮，这样虽然保护了下游系统，但是和请求直接丢弃也没多大区别</li><li>用户体验。异步推送的实时性和有序性自然是比不上同步调用的，由此可能出现请求先发后至的情况，影响部分敏感用户的购物体验</li></ol><p>排队本质是在业务层将一步操作转变成两步操作，从而起到缓冲的作用，但鉴于此种方式的弊端，最终还是要基于业务量级和秒杀场景做出妥协和平衡。</p><h3 id="4-1-3-过滤"><a href="#4-1-3-过滤" class="headerlink" title="4.1.3 过滤"></a>4.1.3 过滤</h3><p>过滤的核心结构在于分层，通过在不同层次过滤掉无效请求，达到数据读写的精准触发。常见的过滤主要有以下几层：</p><p>1、读限流：对读请求做限流保护，将超出系统承载能力的请求过滤掉<br>2、读缓存：对读请求做数据缓存，将重复的请求过滤掉<br>3、写限流：对写请求做限流保护，将超出系统承载能力的请求过滤掉<br>4、写校验：对写请求做一致性校验，只保留最终的有效数据</p><p>过滤的核心目的是通过减少无效请求的数据IO保障有效请求的IO性能。</p><h3 id="4-1-4-小结"><a href="#4-1-4-小结" class="headerlink" title="4.1.4 小结"></a>4.1.4 小结</h3><p>系统可以通过入口层的答题、业务层的排队、数据层的过滤达到流量削峰的目的，本质是在寻求商业诉求与架构性能之间的平衡。另外，新的削峰手段也层出不穷，以业务切入居多，比如零点大促时同步发放优惠券或发起抽奖活动，将一部分流量分散到其他系统，这样也能起到削峰的作用。</p><h2 id="4-2-Plan-B"><a href="#4-2-Plan-B" class="headerlink" title="4.2 Plan B"></a>4.2 Plan B</h2><p>当一个系统面临持续的高峰流量时，其实是很难单靠自身调整来恢复状态的，日常运维没有人能够预估所有情况，意外总是无法避免。尤其在秒杀这一场景下，为了保证系统的高可用，必须设计一个 Plan B 方案来进行兜底。</p><p>高可用建设，其实是一个系统工程，贯穿在系统建设的整个生命周期。<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img/bVbz9yR123.png" alt="image"></p><p>具体来说，系统的高可用建设涉及架构阶段、编码阶段、测试阶段、发布阶段、运行阶段，以及故障发生时，逐一进行分析：</p><ol><li>架构阶段：考虑系统的可扩展性和容错性，避免出现单点问题。例如多地单元化部署，即使某个IDC甚至地市出现故障，仍不会影响系统运转</li><li>编码阶段：保证代码的健壮性，例如RPC调用时，设置合理的超时退出机制，防止被其他系统拖垮，同时也要对无法预料的返回错误进行默认的处理</li><li>测试阶段：保证CI的覆盖度以及Sonar的容错率，对基础质量进行二次校验，并定期产出整体质量的趋势报告</li><li>发布阶段：系统部署最容易暴露错误，因此要有前置的checklist模版、中置的上下游周知机制以及后置的回滚机制</li><li>运行阶段：系统多数时间处于运行态，最重要的是运行时的实时监控，及时发现问题、准确报警并能提供详细数据，以便排查问题</li><li>故障发生：首要目标是及时止损，防止影响面扩大，然后定位原因、解决问题，最后恢复服务</li></ol><p>对于日常运维而言，高可用更多是针对运行阶段而言的，此阶段需要额外进行加强建设，主要有以下几种手段：</p><ol><li>预防：建立常态压测体系，定期对服务进行单点压测以及全链路压测，摸排水位</li><li>管控：做好线上运行的降级、限流和熔断保护。需要注意的是，无论是限流、降级还是熔断，对业务都是有损的，所以在进行操作前，一定要和上下游业务确认好再进行。就拿限流来说，哪些业务可以限、什么情况下限、限流时间多长、什么情况下进行恢复，都要和业务方反复确认</li><li>监控：建立性能基线，记录性能的变化趋势；建立报警体系，发现问题及时预警</li><li>恢复：遇到故障能够及时止损，并提供快速的数据订正工具，不一定要好，但一定要有</li></ol><p>在系统建设的整个生命周期中，每个环节中都可能犯错，甚至有些环节犯的错，后面是无法弥补的或者成本极高的。所以高可用是一个系统工程，必须放到整个生命周期中进行全面考虑。同时，考虑到服务的增长性，高可用更需要长期规划并进行体系化建设。</p><h3 id="4-3-总结"><a href="#4-3-总结" class="headerlink" title="4.3 总结"></a>4.3 总结</h3><p>高可用其实是在说 “稳定性”，稳定性是一个平时不重要，但出了问题就要命的事情，然而它的落地又是一个问题——平时业务发展良好，稳定性建设就会降级给业务让路。解决这个问题必须在组织上有所保障，比如让业务负责人背上稳定性绩效指标，同时在部门中建立稳定性建设小组，小组成员由每条线的核心力量兼任，绩效由稳定性负责人来打分，这样就可以把体系化的建设任务落实到具体的业务系统中了。</p><h1 id="5-个人总结"><a href="#5-个人总结" class="headerlink" title="5. 个人总结"></a>5. 个人总结</h1><p>一个秒杀系统的设计，可以根据不同级别的流量，由简单到复杂打造出不同的架构，本质是各方面的取舍和权衡。当然，你可能注意到，本文并没有涉及具体的选型方案，因为这些对于架构来说并不重要，作为架构师，应该时刻提醒自己主线是什么。</p><p>同时也在这里抽象、提炼一下，主要是个人对于秒杀设计的提纲式整理，方便各位同学进行参考——!<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1460000021026492.png" alt="image"></p><p>参考：<a href="https://segmentfault.com/a/1190000020970562" target="_blank" rel="noopener">一个秒杀系统的设计思考</a></p>]]></content>
      
      
      <categories>
          
          <category> 方案设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方案设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.分布式架构演变</title>
      <link href="posts/72dddfde.html"/>
      <url>posts/72dddfde.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/5.%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98.png"></p>]]></content>
      
      
      <categories>
          
          <category> 思维导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.秒杀系统架构分析与实战</title>
      <link href="posts/346960d3.html"/>
      <url>posts/346960d3.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-秒杀业务分析"><a href="#1-秒杀业务分析" class="headerlink" title="1.秒杀业务分析"></a>1.秒杀业务分析</h1><ol><li><strong>正常电子商务流程</strong></li></ol><blockquote><p>（1）查询商品；<br>（2）创建订单；<br>（3）扣减库存；<br>（4）更新订单；<br>（5）付款；<br>（6）卖家发货；</p></blockquote><ol start="2"><li><strong>秒杀业务的特性</strong></li></ol><blockquote><p>（1）低廉价格；<br> （2）大幅推广；<br> （3）瞬时售空；<br> （4）一般是定时上架；<br> （5）时间短、瞬时并发量高；</p></blockquote><h1 id="2-秒杀技术挑战"><a href="#2-秒杀技术挑战" class="headerlink" title="2 秒杀技术挑战"></a>2 秒杀技术挑战</h1><p>假设某网站秒杀活动只推出一件商品，预计会吸引1万人参加活动，也就说最大并发请求数是10000，秒杀系统需要面对的技术挑战有：</p><h2 id="2-1-对现有网站业务造成冲击"><a href="#2-1-对现有网站业务造成冲击" class="headerlink" title="2.1 对现有网站业务造成冲击"></a>2.1 对现有网站业务造成冲击</h2><p>秒杀活动只是网站营销的一个附加活动，这个活动具有时间短，并发访问量大的特点，如果和网站原有应用部署在一起，必然会对现有业务造成冲击，稍有不慎可能导致整个网站瘫痪。</p><blockquote><p><strong>解决方案</strong>：将秒杀系统独立部署，甚至<strong>使用独立域名，使其与网站完全隔离</strong>。</p></blockquote><h2 id="2-2-应用和数据库负载高"><a href="#2-2-应用和数据库负载高" class="headerlink" title="2.2 应用和数据库负载高"></a>2.2 应用和数据库负载高</h2><p>用户在秒杀开始前，通过不停刷新浏览器页面以保证不会错过秒杀，这些请求如果按照一般的网站应用架构，访问应用服务器、连接数据库，会对应用服务器和数据库服务器造成负载压力。</p><blockquote><p><strong>解决方案</strong>：重新设计秒杀商品页面，不使用网站原来的商品详细页面，<strong>页面内容静态化，用户请求不需要经过应用服务直接从Nginx代理服务器返回</strong>。由于存在高并发，不适合使用关系型数据库，使用Redis等内存级缓存解决，同时预先生成数据，提高并发性能。。</p></blockquote><h2 id="2-3-剧增的网络及服务器带宽"><a href="#2-3-剧增的网络及服务器带宽" class="headerlink" title="2.3 剧增的网络及服务器带宽"></a>2.3 剧增的网络及服务器带宽</h2><p>假设商品页面大小200K（主要是商品图片大小），那么需要的网络和服务器带宽是2G（200K×10000），这些网络带宽是因为秒杀活动新增的，超过网站平时使用的带宽。</p><blockquote><p><strong>解决方案</strong>：因为秒杀新增的网络带宽，必须和运营商重新购买或者租借。为了减轻网站服务器的压力，<strong>需要将秒杀商品页面缓存在CDN，同样需要和CDN服务商临时租借新增的出口带宽</strong>。</p></blockquote><h2 id="2-4-防止直接请求活动URL"><a href="#2-4-防止直接请求活动URL" class="headerlink" title="2.4 防止直接请求活动URL"></a>2.4 防止直接请求活动URL</h2><p>秒杀的游戏规则是到了秒杀才能开始对商品下单购买，在此时间点之前，只能浏览商品信息，不能下单。而下单页面也是一个普通的URL，如果得到这个URL，不用等到秒杀开始就可以下单了。</p><blockquote><p><strong>解决方案</strong>：为了避免用户直接访问下单页面URL，需要将改URL动态化，即使秒杀系统的开发者也无法在秒杀开始前访问下单页面的URL。办法是在<strong>下单页面URL加入由服务器端生成的随机数作为参数，在秒杀开始的时候才能得到</strong>，同时加入在URL加入后端生成的sign作为参数，由后端进行校验。</p></blockquote><h2 id="2-5-控制活动页面按钮点亮"><a href="#2-5-控制活动页面按钮点亮" class="headerlink" title="2.5 控制活动页面按钮点亮"></a>2.5 控制活动页面按钮点亮</h2><p>购买按钮只有在秒杀开始的时候才能点亮，在此之前是灰色的。如果该页面是动态生成的，当然可以在服务器端构造响应页面输出，控制该按钮是灰色还是点亮，但是为了减轻服务器端负载压力，更好地利用CDN、反向代理等性能优化手段，该页面被设计为静态页面，缓存在CDN、反向代理服务器上，甚至用户浏览器上。秒杀开始时，用户刷新页面，请求根本不会到达应用服务器。</p><blockquote><p><strong>解决方案</strong>：使用JavaScript脚本控制，<strong>在秒杀商品静态页面中加入一个JavaScript文件引用，该JavaScript文件中包含秒杀开始标志为否</strong>；当秒杀开始的时候生成一个新的JavaScript文件（<strong>文件名保持不变，只是内容不一样</strong>），更新秒杀开始标志为是，<strong>加入下单页面的URL及随机数参数（这个随机数只会产生一个，即所有人看到的URL都是同一个，服务器端可以用redis这种分布式缓存服务器来保存随机数）</strong>，并被用户浏览器加载，控制秒杀商品页面的展示。<strong>这个JavaScript文件的加载可以加上随机版本号（例如xx.js?v=32353823），这样就不会被浏览器、CDN和反向代理服务器缓存</strong>。</p><p>这个JavaScript文件非常小，即使每次浏览器刷新都访问JavaScript文件服务器也不会对服务器集群和网络带宽造成太大压力。</p></blockquote><h2 id="2-6-限制业务系统的请求数量"><a href="#2-6-限制业务系统的请求数量" class="headerlink" title="2.6 限制业务系统的请求数量"></a>2.6 限制业务系统的请求数量</h2><p>由于最终能够成功秒杀到商品的用户只有一个，因此需要在用户提交订单时，检查是否已经有订单提交。如果已经有订单提交成功，则需要更新 JavaScript文件，更新秒杀开始标志为否，购买按钮变灰。事实上，由于最终能够成功提交订单的用户只有一个，为了减轻下单页面服务器的负载压力，可以<strong>控制进入下单页面的入口，只有少数用户能进入下单页面，其他用户直接进入秒杀结束页面</strong>。</p><blockquote><p><strong>解决方案</strong>：假设下单服务器集群有10台服务器，每台服务器只接受最多10个下单请求。在还没有人提交订单成功之前，如果一台服务器已经有十单了，而有的一单都没处理，可能出现的用户体验不佳的场景是用户第一次点击购买按钮进入已结束页面，再刷新一下页面，有可能被一单都没有处理的服务器处理，进入了填写订单的页面，<strong>可以考虑通过cookie的方式来应对，符合一致性原则</strong>。当然可以<strong>采用最少连接的负载均衡算法</strong>，出现上述情况的概率大大降低。</p></blockquote><h2 id="2-7-正式下单前置检查"><a href="#2-7-正式下单前置检查" class="headerlink" title="2.7 正式下单前置检查"></a>2.7 正式下单前置检查</h2><ul><li><p><strong>下单服务器检查本机已处理的下单请求数目：</strong></p><blockquote><p>如果超过10条，直接返回已结束页面给用户；</p><p>如果未超过10条，则用户可进入填写订单及确认页面；</p></blockquote></li><li><p><strong>检查全局已提交订单数目：</strong></p><blockquote><p>已超过秒杀商品总数，返回已结束页面给用户；</p><p>未超过秒杀商品总数，提交到子订单系统；</p></blockquote></li></ul><h2 id="2-8-定时上架秒杀的商品"><a href="#2-8-定时上架秒杀的商品" class="headerlink" title="2.8 定时上架秒杀的商品"></a>2.8 定时上架秒杀的商品</h2><p>该功能实现方式很多。不过目前比较好的方式是：提前设定好商品的上架时间，用户可以在前台看到该商品，但是无法点击“立即购买”的按钮。但是需要考虑的是，<strong>有人可以绕过前端的限制，直接通过URL的方式发起购买</strong>，这就需要在前台商品页面，以及bug页面到后端的数据库，都要进行时钟同步。越在后端控制，安全性越高。</p><p><strong>定时秒杀的话，就要避免卖家在秒杀前对商品做编辑带来的不可预期的影响</strong>。这种特殊的变更需要多方面评估。一般禁止编辑，如需变更，可以走数据订正的流程。</p><h2 id="2-9-库存占用和扣减"><a href="#2-9-库存占用和扣减" class="headerlink" title="2.9 库存占用和扣减"></a>2.9 库存占用和扣减</h2><p>库存占用：</p><blockquote><p>一般有三种方案：</p><ul><li>方案一：加入购物车的时候去预占库存；<ul><li>特点：占用库存时间过早，加入购物车的不一定购买，想要购买的却没有库存，库存被非目标用户占用，分配不合理；</li></ul></li><li>方案二：下单的时候去预占库存<strong>（推荐）</strong>；<ul><li>特点：用户下单说明购买意愿强烈，可以在此时占用；如果在支付时限内没有付款，可以取消订单回退库存占用；</li></ul></li><li>方案三：支付的时候去预占库存；<ul><li>特点：1000个用户去支付，却只有100件商品，那么只有100个用户能支付成功，其他用户支付失败，用户体验差。</li></ul></li></ul></blockquote><p>扣减库存：</p><blockquote><p>支付成功后扣减库存</p></blockquote><h2 id="2-10-防止库存超卖"><a href="#2-10-防止库存超卖" class="headerlink" title="2.10 防止库存超卖"></a>2.10 防止库存超卖</h2><p>由于库存并发更新的问题，导致在实际库存已经不足的情况下，库存依然在减，导致卖家的商品卖得件数超过秒杀的预期。</p><blockquote><p>方案：<strong>采用乐观锁</strong></p><ul><li><p><strong>悲观锁</strong>：</p><ul><li>说明：单个商品一次只能有一个用户下单：每个用户下单前都要获取锁，获取锁成功后方可下单，下单完成后占用库存；</li><li>特点：能严格保证库存的准确性，但在高并发下对性能很差。</li></ul></li><li><p><strong>乐观锁</strong>：</p><ul><li><p>说明：所有用户均可下单，但在实际占用库存时，需判断库存是否足够，如果占用失败说明库存不充足，则下单失败；</p></li><li><p>特点：兼顾了库存的准确性，同时比悲观锁有更好的性能表现。</p></li><li><p>SQL：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> t_product <span class="token keyword">set</span> remain <span class="token operator">=</span> remain<span class="token operator">-</span>?<span class="token number">2</span><span class="token punctuation">,</span> occupy<span class="token operator">=</span>occupy<span class="token operator">+</span>?<span class="token number">2</span> <span class="token keyword">where</span> product_id<span class="token operator">=</span> ?<span class="token number">1</span> <span class="token operator">and</span> remain<span class="token operator">-</span>?<span class="token number">2</span><span class="token operator">>=</span><span class="token number">0</span></code></pre></li></ul></li></ul></blockquote><h2 id="2-11-秒杀器的应对"><a href="#2-11-秒杀器的应对" class="headerlink" title="2.11 秒杀器的应对"></a>2.11 秒杀器的应对</h2><p>秒杀器一般下单个购买及其迅速，根据购买记录可以甄别出一部分。可以通过校验码达到一定的方法，这就要求校验码足够安全，不被破解，采用的方式有：<strong>秒杀专用验证码，电视公布验证码，秒杀答题</strong>。</p><h1 id="3-秒杀架构原则"><a href="#3-秒杀架构原则" class="headerlink" title="3 秒杀架构原则"></a>3 秒杀架构原则</h1><h2 id="3-1-尽量将请求拦截在系统上游"><a href="#3-1-尽量将请求拦截在系统上游" class="headerlink" title="3.1 尽量将请求拦截在系统上游"></a>3.1 尽量将请求拦截在系统上游</h2><p>传统秒杀系统之所以挂，请求都压倒了后端数据层，数据读写锁冲突严重，并发高响应慢，几乎所有请求都超时，流量虽大，下单成功的有效流量甚小【一趟火车其实只有2000张票，200w个人来买，基本没有人能买成功，请求有效率为0】。</p><h2 id="3-2-读多写少的场景多使用缓存"><a href="#3-2-读多写少的场景多使用缓存" class="headerlink" title="3.2 读多写少的场景多使用缓存"></a>3.2 读多写少的场景多使用缓存</h2><p>这是一个典型的<strong>读多写少</strong>的应用场景【一趟火车其实只有2000张票，200w个人来买，最多2000个人下单成功，其他人都是查询库存，写比例只有0.1%，读比例占99.9%】，<strong>非常适合使用缓存</strong>。</p><h1 id="4-秒杀架构设计"><a href="#4-秒杀架构设计" class="headerlink" title="4. 秒杀架构设计"></a>4. 秒杀架构设计</h1><p>秒杀系统为秒杀而设计，不同于一般的网购行为，参与秒杀活动的用户更关心的是<strong>如何能快速刷新商品页面，在秒杀开始的时候抢先进入下单页面</strong>，而不是商品详情等用户体验细节，因此秒杀系统的页面设计应尽可能简单。</p><p>商品页面中的购买按钮只有在秒杀活动开始的时候才变亮，在此之前及秒杀商品卖出后，该按钮都是灰色的，不可以点击。</p><p>下单表单也尽可能简单，购买数量只能是一个且不可以修改，送货地址和付款方式都使用用户默认设置，没有默认也可以不填，允许等订单提交后修改；只有第一个提交的订单发送给网站的订单子系统，其余用户提交订单后只能看到秒杀结束页面。</p><p><strong>要做一个这样的秒杀系统，业务会分为两个阶段：</strong></p><blockquote><p>第一个阶段是秒杀开始前某个时间到秒杀开始， 这个阶段可以称之为<strong>准备阶段，用户在准备阶段等待秒杀</strong>；</p><p>第二个阶段就是秒杀开始到所有参与秒杀的用户获得秒杀结果， 这个就称为<strong>秒杀阶段</strong>吧。</p></blockquote><h2 id="4-1-前端层设计"><a href="#4-1-前端层设计" class="headerlink" title="4.1 前端层设计"></a>4.1 前端层设计</h2><p>首先要有一个展示秒杀商品的页面，在这个页面上做一个秒杀活动开始的倒计时，<strong>在准备阶段内用户会陆续打开这个秒杀的页面， 并且可能不停的刷新页面</strong>。这里需要考虑几个问题：</p><h3 id="4-1-1-秒杀页面的展示"><a href="#4-1-1-秒杀页面的展示" class="headerlink" title="4.1.1 秒杀页面的展示"></a>4.1.1 秒杀页面的展示</h3><p>我们知道一个html页面还是比较大的，即使做了压缩，http头和内容的大小也可能高达数十K，加上其他的css， js，图片等资源，如果同时有几千万人参与一个商品的抢购，一般机房带宽也就只有1G10G，<strong>网络带宽就极有可能成为瓶颈</strong>，所以这个页面上<strong>各类静态资源首先应分开存放，然后放到cdn节点上分散压力</strong>，由于CDN节点遍布全国各地，能缓冲掉绝大部分的压力，而且还比机房带宽便宜。</p><h3 id="4-1-2-页面时间的准确性"><a href="#4-1-2-页面时间的准确性" class="headerlink" title="4.1.2 页面时间的准确性"></a>4.1.2 页面时间的准确性</h3><p>出于性能原因这个<strong>一般由js调用客户端本地时间</strong>，就有可能出现客户端时钟与服务器时钟不一致，另外服务器之间也是有可能出现时钟不一致。<strong>客户端与服务器时钟不一致可以采用客户端定时和服务器同步时间</strong>，这里考虑一下性能问题，用于同步时间的接口由于不涉及到后端逻辑，只需要将当前web服务器的时间发送给客户端就可以了，因此速度很快，就我以前测试的结果来看，一台标准的web服务器2W+QPS不会有问题，如果100W人同时刷，100W QPS也只需要50台web，一台硬件LB就可以了~，并且web服务器群是可以很容易的横向扩展的(LB+DNS轮询)，这个接口可以只返回一小段json格式的数据，而且可以优化一下减少不必要cookie和其他http头的信息，所以数据量不会很大，<strong>一般来说网络不会成为瓶颈，即使成为瓶颈也可以考虑多机房专线连通，加智能DNS的解决方案</strong>；web服务器之间时间不同步可以采用统一时间服务器的方式，<strong>比如每隔1分钟所有参与秒杀活动的web服务器就与时间服务器做一次时间同步</strong>。</p><h3 id="4-1-3-浏览器层请求拦截"><a href="#4-1-3-浏览器层请求拦截" class="headerlink" title="4.1.3 浏览器层请求拦截"></a>4.1.3 浏览器层请求拦截</h3><blockquote><p>（1）<strong>产品层面</strong>，用户点击“查询”或者“购票”后，按钮置灰，禁止用户重复提交请求;</p><p>（2）<strong>JS层面</strong>，限制用户在x秒之内只能提交一次请求;</p></blockquote><h2 id="4-2-站点层设计"><a href="#4-2-站点层设计" class="headerlink" title="4.2 站点层设计"></a>4.2 站点层设计</h2><p>前端层的请求拦截，只能拦住小白用户（不过这是99%的用户哟），高端的程序员根本不吃这一套，写个for循环，直接调用你后端的http请求，怎么整？</p><blockquote><p>（1）<strong>同一个uid，限制访问频度</strong>，做页面缓存，x秒内到达站点层的请求，均返回同一页面</p><p>（2）<strong>同一个item的查询，例如手机车次</strong>，做页面缓存，x秒内到达站点层的请求，均返回同一页面</p></blockquote><p>如此限流，又有99%的流量会被拦截在站点层。</p><h2 id="4-3-服务层设计"><a href="#4-3-服务层设计" class="headerlink" title="4.3 服务层设计"></a>4.3 服务层设计</h2><p>站点层的请求拦截，只能拦住普通程序员，高级黑客，假设他控制了10w台肉鸡（并且假设买票不需要实名认证），这下uid的限制不行了吧？怎么整？</p><blockquote><p>（1）大哥，我是服务层，我清楚的知道小米只有1万部手机，我清楚的知道一列火车只有2000张车票，我透10w个请求去数据库有什么意义呢？<strong>对于写请求，做请求队列，每次只透过有限的写请求去数据层，如果均成功再放下一批，如果库存不够则队列里的写请求全部返回“已售完”</strong>；</p><p>（2）<strong>对于读请求，还用说么？cache来抗</strong>，不管是memcached还是redis，单机抗个每秒10w应该都是没什么问题的；</p></blockquote><p>如此限流，只有非常少的写请求，和非常少的读缓存miss的请求会透到数据层去，又有99.9%的请求被拦住了。</p><blockquote><ol><li><strong>用户请求分发模块</strong>：使用Nginx或Apache将用户的请求分发到不同的机器上。</li><li><strong>用户请求预处理模块</strong>：判断商品是不是还有剩余来决定是不是要处理该请求。</li><li><strong>用户请求处理模块</strong>：把通过预处理的请求封装成事务提交给数据库，并返回是否成功。</li><li><strong>数据库接口模块</strong>：该模块是数据库的唯一接口，负责与数据库交互，提供RPC接口供查询是否秒杀结束、剩余数量等信息。</li></ol></blockquote><h3 id="4-3-1-用户请求预处理模块"><a href="#4-3-1-用户请求预处理模块" class="headerlink" title="4.3.1 用户请求预处理模块"></a>4.3.1 用户请求预处理模块</h3><p>经过HTTP服务器的分发后，单个服务器的负载相对低了一些，但总量依然可能很大，如果后台商品已经被秒杀完毕，那么直接给后来的请求返回秒杀失败即可，不必再进一步发送事务了，示例代码可以如下所示：</p><pre class=" language-cpp"><code class="language-cpp">package seckill<span class="token punctuation">;</span>import org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpRequest<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 预处理阶段，把不必要的请求直接驳回，必要的请求添加到队列中进入下一阶段. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreProcessor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 商品是否还有剩余</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> boolean reminds <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">forbidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Do something.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> boolean <span class="token function">checkReminds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>reminds<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 远程检测是否还有剩余，该RPC接口应由数据库服务器提供，不必完全严格检查.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>RPC<span class="token punctuation">.</span><span class="token function">checkReminds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                reminds <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> reminds<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 每一个HTTP请求都要经过该预处理.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preProcess</span><span class="token punctuation">(</span>HttpRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkReminds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 一个并发的队列</span>            RequestQueue<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果已经没有商品了，则直接驳回请求即可.</span>            <span class="token function">forbidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>并发队列的选择</strong></p><p>Java的并发包提供了三个常用的并发队列实现，分别是：<strong>ConcurrentLinkedQueue、LinkedBlockingQueue和ArrayBlockingQueue</strong>。</p><blockquote><ul><li>ArrayBlockingQueue是<strong>初始容量固定的阻塞队列</strong>，我们可以用来作为数据库模块成功竞拍的队列，比如有10个商品，那么我们就设定一个10大小的数组队列。</li><li>ConcurrentLinkedQueue使用的是<strong>CAS原理无锁队列实现，是一个异步队列</strong>，入队的速度很快，出队进行了加锁，性能稍慢。</li><li>LinkedBlockingQueue也是<strong>阻塞的队列，入队和出队都用了加锁</strong>，当队空的时候线程会暂时阻塞。</li></ul></blockquote><p>由于我们的系统<strong>入队需求要远大于出队需求</strong>，一般不会出现队空的情况，所以我们可以选择ConcurrentLinkedQueue来作为我们的请求队列实现：</p><pre class=" language-swift"><code class="language-swift">package seckill<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span><span class="token builtin">ArrayBlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span><span class="token builtin">ConcurrentLinkedQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token builtin">HttpRequest</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestQueue</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token builtin">ConcurrentLinkedQueue</span><span class="token operator">&lt;</span><span class="token builtin">HttpRequest</span><span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentLinkedQueue</span><span class="token operator">&lt;</span><span class="token builtin">HttpRequest</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-2-用户请求模块"><a href="#4-3-2-用户请求模块" class="headerlink" title="4.3.2 用户请求模块"></a>4.3.2 用户请求模块</h3><pre class=" language-cpp"><code class="language-cpp">package seckill<span class="token punctuation">;</span>import org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpRequest<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Processor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 发送秒杀事务到数据库队列.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">kill</span><span class="token punctuation">(</span>BidInfo info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DB<span class="token punctuation">.</span>bids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BidInfo info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">BidInfo</span><span class="token punctuation">(</span>RequestQueue<span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>info <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">kill</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">BidInfo</span> <span class="token punctuation">{</span>    <span class="token function">BidInfo</span><span class="token punctuation">(</span>HttpRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Do something.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-3-数据库模块"><a href="#4-3-3-数据库模块" class="headerlink" title="4.3.3 数据库模块"></a>4.3.3 数据库模块</h3><p> 数据库主要是使用一个ArrayBlockingQueue来暂存有可能成功的用户请求。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> seckill<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ArrayBlockingQueue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * DB应该是数据库的唯一接口. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DB</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> ArrayBlockingQueue<span class="token operator">&lt;</span>BidInfo<span class="token operator">></span> bids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span>BidInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkReminds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// TODO</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 单线程操作</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          BidInfo info <span class="token operator">=</span> bids<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// insert into table Bids values(item_id, user_id, bid_date, other)</span>              <span class="token comment" spellcheck="true">// select count(id) from Bids where item_id = ?</span>              <span class="token comment" spellcheck="true">// 如果数据库商品数量大约总数，则标志秒杀已完成，设置标志位reminds = false.</span>              info <span class="token operator">=</span> bids<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-4-数据库设计"><a href="#4-4-数据库设计" class="headerlink" title="4.4 数据库设计"></a>4.4 数据库设计</h2><h3 id="4-4-1-基本概念"><a href="#4-4-1-基本概念" class="headerlink" title="4.4.1 基本概念"></a>4.4.1 基本概念</h3><ol><li><p>单库</p><ul><li><p>即单一数据库</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000002.webp"></p></li></ul></li><li><p>分片</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000003.webp"></p><ul><li><strong>分片解决的是“数据量太大”的问题，也就是通常说的“水平切分”</strong>。一旦引入分片，势必有“数据路由”的概念，哪个数据访问哪个库。</li><li>路由规则通常有3种方法：<ul><li><strong>范围：range</strong><br>优点：简单，容易扩展<br>缺点：各库压力不均（新号段更活跃）</li><li><strong>哈希：hash 【大部分互联网公司采用的方案二：哈希分库，哈希路由】</strong><br>  优点：简单，数据均衡，负载均匀<br>  缺点：迁移麻烦（2库扩3库数据要迁移）</li><li><strong>路由服务：router-config-server</strong><br>  优点：灵活性强，业务与路由算法解耦<br>  缺点：每次访问数据库前多一次查询</li></ul></li></ul></li><li><p>分组</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000004.webp"></p><ul><li><p>分组解决“可用性”问题，分组通常通过<strong>主从复制</strong>的方式实现。</p></li><li><p><strong>互联网公司数据库实际软件架构是：又分片，又分组</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000005.webp"></p></li></ul></li></ol><h3 id="4-4-2-设计思路"><a href="#4-4-2-设计思路" class="headerlink" title="4.4.2 设计思路"></a>4.4.2 设计思路</h3><p>数据库软件架构师平时设计些什么东西呢？至少要考虑以下四点：</p><blockquote><ol><li>如何保证数据可用性；</li><li>如何提高数据库读性能（大部分应用读多写少，读会先成为瓶颈）；</li><li>如何保证一致性；</li><li>如何提高扩展性；</li></ol></blockquote><h4 id="4-4-2-1-如何保证数据的可用性？"><a href="#4-4-2-1-如何保证数据的可用性？" class="headerlink" title="4.4.2.1 如何保证数据的可用性？"></a>4.4.2.1 如何保证数据的可用性？</h4><p><strong>解决可用性问题的思路是=&gt;冗余</strong></p><blockquote><p>如何保证站点的可用性？复制站点，冗余站点</p><p>如何保证服务的可用性？复制服务，冗余服务</p><p>如何保证数据的可用性？复制数据，冗余数据</p></blockquote><p><strong>数据的冗余，会带来一个副作用=&gt;引发一致性问题（先不说一致性问题，先说可用性）。</strong></p><h4 id="4-4-2-2-如何保证数据库“读”高可用？"><a href="#4-4-2-2-如何保证数据库“读”高可用？" class="headerlink" title="4.4.2.2 如何保证数据库“读”高可用？"></a>4.4.2.2 如何保证数据库“读”高可用？</h4><p><strong>冗余读库</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000006.webp"></p><p><strong>冗余读库带来的副作用？读写有延时，可能不一致</strong>。</p><p>上面这个图是很多互联网公司mysql的架构，写仍然是单点，不能保证写高可用。</p><h4 id="4-4-2-3-如何保证数据库“写”高可用？"><a href="#4-4-2-3-如何保证数据库“写”高可用？" class="headerlink" title="4.4.2.3 如何保证数据库“写”高可用？"></a>4.4.2.3 如何保证数据库“写”高可用？</h4><p><strong>冗余写库</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000007.webp"></p><p><strong>采用双主互备的方式，可以冗余写库带来的副作用？双写同步，数据可能冲突（例如“自增id”同步冲突）</strong>，如何解决同步冲突，有两种常见解决方案：</p><blockquote><ol><li>两个写库使用不同的初始值，相同的步长来增加id：1写库的id为0,2,4,6…；2写库的id为1,3,5,7…；</li><li>不使用数据的id，业务层自己生成唯一的id，保证数据不冲突；</li></ol></blockquote><p><strong>实际中没有使用上述两种架构来做读写的“高可用”，采用的是“双主当主从用”的方式：</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000008.webp"></p><p>仍是双主，但<strong>只有一个主提供服务（读+写），另一个主是“shadow-master”，只用来保证高可用，平时不提供服务</strong>。</p><p>master挂了，shadow-master顶上（vip漂移，对业务层透明，不需要人工介入）。这种方式的好处：</p><blockquote><ol><li>读写没有延时；</li><li>读写高可用；</li></ol></blockquote><p>不足：</p><blockquote><ol><li>不能通过加从库的方式扩展读性能；</li><li>资源利用率为50%，一台冗余主没有提供服务；</li></ol></blockquote><p>那如何提高读性能呢？进入第二个话题，如何提供读性能。</p><h4 id="4-4-2-4-如何扩展读性能"><a href="#4-4-2-4-如何扩展读性能" class="headerlink" title="4.4.2.4 如何扩展读性能"></a>4.4.2.4 如何扩展读性能</h4><p>提高读性能的方式大致有三种，<strong>第一种是建立索引</strong>。这种方式不展开，要提到的一点是，<strong>不同的库可以建立不同的索引</strong>。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000009.webp"></p><p>不同的库可以建立不同的索引</p><blockquote><p><strong>写库</strong>不建立索引；</p><p><strong>线上读库</strong>建立线上访问索引，例如uid；</p><p><strong>线下读库</strong>建立线下访问索引，例如time；</p></blockquote><p><strong>第二种扩充读性能的方式是，增加从库</strong>，这种方法大家用的比较多，但是，存在两个缺点：</p><blockquote><ol><li>从库越多，同步越慢；</li><li>同步越慢，数据不一致窗口越大（不一致后面说，还是先说读性能的提高）；</li></ol></blockquote><p>实际中没有采用这种方法提高数据库读性能（没有从库），<strong>采用的是增加缓存</strong>。常见的缓存架构如下：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000010.webp"></p><p>上游是业务应用，下游是主库，从库（读写分离），缓存。实际的玩法：<strong>服务+数据库+缓存一套</strong>。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000011.webp"></p><p>业务层不直接面向db和cache，<strong>服务层屏蔽了底层db、cache的复杂性</strong>。为什么要引入服务层，今天不展开，采用了“服务+数据库+缓存一套”的方式提供数据访问，<strong>用cache提高读性能</strong>。</p><blockquote><p><strong>不管采用主从的方式扩展读性能，还是缓存的方式扩展读性能，数据都要复制多份（主+从，db+cache），一定会引发一致性问题。</strong></p></blockquote><h4 id="4-4-2-5-如何保证一致性？"><a href="#4-4-2-5-如何保证一致性？" class="headerlink" title="4.4.2.5 如何保证一致性？"></a>4.4.2.5 如何保证一致性？</h4><p>主从数据库的一致性，通常有两种解决方案：</p><ol><li><p><strong>中间件</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000012.webp"></p><p>如果某一个key有写操作，在不一致时间窗口内，中间件会将这个key的读操作也路由到主库上。这个方案的缺点是，<strong>数据库中间件的门槛较高</strong>（百度，腾讯，阿里，360等一些公司有）。</p></li><li><p><strong>强制读主</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000013.webp"></p><p>上面实际用的“双主当主从用”的架构，不存在主从不一致的问题。第二类不一致，<strong>是db与缓存间的不一致</strong>：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000014.webp"></p><p>常见玩法：数据库+缓存</p><p>常见的缓存架构如上，此时<strong>写操作</strong>的顺序是：</p><blockquote><p>（1）淘汰cache；</p><p>（2）写数据库；</p></blockquote><p><strong>读操作</strong>的顺序是：</p><blockquote><p>（1）读cache，如果cache hit则返回；</p><p>（2）如果cache miss，则读从库；</p><p>（3）读从库后，将数据放回cache；</p></blockquote><p>在一些异常时序情况下，有可能从【从库读到旧数据（同步还没有完成），旧数据入cache后】，数据会长期不一致。<code>解决办法是“缓存双淘汰”</code>，写操作时序升级为：</p><blockquote><p>（1）淘汰cache；</p><p>（2）写数据库；</p><p>（3）在经过“主从同步延时窗口时间”后，再次发起一个异步淘汰cache的请求；</p></blockquote><p>这样，即使有脏数据如cache，一个小的时间窗口之后，脏数据还是会被淘汰。带来的代价是，多引入一次读miss（成本可以忽略）。</p><p>除此之外，最佳实践之一是：<strong>建议为所有cache中的item设置一个超时时间</strong>。</p></li><li><p><strong>如何提高数据库的扩展性？</strong></p><p>原来用hash的方式路由，分为2个库，数据量还是太大，要分为3个库，势必需要进行数据迁移，有一个很帅气的“数据库秒级扩容”方案。</p><p><strong>如何秒级扩容？</strong></p><p>首先，<strong>我们不做2库变3库的扩容，我们做2库变4库（库加倍）的扩容（未来4-&gt;8-&gt;16）</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000015.webp"></p><p>服务+数据库是一套（省去了缓存），<strong>数据库采用“双主”的模式</strong>。</p><p><strong>扩容步骤：</strong></p><blockquote><p><strong>第一步</strong>，将一个主库提升;</p><p><strong>第二步</strong>，修改配置，2库变4库（原来MOD2，现在配置修改后MOD4），扩容完成；</p></blockquote><p><strong>原MOD2为偶的部分，现在会MOD4余0或者2；原MOD2为奇的部分，现在会MOD4余1或者3</strong>；数据不需要迁移，同时，双主互相同步，一遍是余0，一边余2，两边数据同步也不会冲突，秒级完成扩容！</p><p>最后，要做一些收尾工作：</p><blockquote><ol><li>将旧的双主同步解除；</li><li>增加新的双主（双主是保证可用性的，shadow-master平时不提供服务）；</li><li>删除多余的数据（余0的主，可以将余2的数据删除掉）；</li></ol></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000016.webp"></p><p>这样，秒级别内，我们就完成了2库变4库的扩展。</p></li></ol><h1 id="5-大并发带来的挑战"><a href="#5-大并发带来的挑战" class="headerlink" title="5. 大并发带来的挑战"></a>5. 大并发带来的挑战</h1><h2 id="5-1-请求接口的合理设计"><a href="#5-1-请求接口的合理设计" class="headerlink" title="5.1 请求接口的合理设计"></a>5.1 请求接口的合理设计</h2><p>一个秒杀或者抢购页面，通常分为2个部分，一个是<strong>静态的HTML等内容</strong>，另一个就是<strong>参与秒杀的Web后台请求接口</strong>。</p><p><strong>通常静态HTML等内容，是通过CDN的部署，一般压力不大，核心瓶颈实际上在后台请求接口上</strong>。这个后端接口，必须能够支持高并发请求，同时，非常重要的一点，必须尽可能“快”，在最短的时间里返回用户的请求结果。<strong>为了实现尽可能快这一点，接口的后端存储使用内存级别的操作会更好一点</strong>。仍然直接面向MySQL之类的存储是不合适的，<strong>如果有这种复杂业务的需求，都建议采用异步写入</strong>。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000017.webp"></p><p>当然，也有一些秒杀和抢购<strong>采用“滞后反馈”</strong>，就是说秒杀当下不知道结果，一段时间后才可以从页面中看到用户是否秒杀成功。但是，这种属于“偷懒”行为，同时给用户的体验也不好，容易被用户认为是“暗箱操作”。</p><h2 id="5-2-高并发的挑战：一定要“快”"><a href="#5-2-高并发的挑战：一定要“快”" class="headerlink" title="5.2 高并发的挑战：一定要“快”"></a>5.2 高并发的挑战：一定要“快”</h2><p>我们通常衡量一个<strong>Web系统的吞吐率的指标是QPS（Query Per Second，每秒处理请求数），解决每秒数万次的高并发场景，这个指标非常关键</strong>。举个例子，我们假设处理一个业务请求平均响应时间为100ms，同时，系统内有20台Apache的Web服务器，配置MaxClients为500个（表示Apache的最大连接数目）。</p><p>那么，我们的Web系统的理论峰值QPS为（理想化的计算方式）：</p><pre class=" language-mathematica"><code class="language-mathematica">20*500/0.1 = 100000 （10万QPS）</code></pre><p>咦？我们的系统似乎很强大，1秒钟可以处理完10万的请求，5w/s的秒杀似乎是“纸老虎”哈。实际情况，当然没有这么理想。<strong>在高并发的实际场景下，机器都处于高负载的状态，在这个时候平均响应时间会被大大增加</strong>。</p><p><strong>就Web服务器而言，Apache打开了越多的连接进程，CPU需要处理的上下文切换也越多，额外增加了CPU的消耗，然后就直接导致平均响应时间增加</strong>。因此上述的<strong>MaxClient数目，要根据CPU、内存等硬件因素综合考虑，绝对不是越多越好</strong>。可以<strong>通过Apache自带的abench来测试一下，取一个合适的值</strong>。然后，我们<strong>选择内存操作级别的存储的Redis，在高并发的状态下，存储的响应时间至关重要</strong>。网络带宽虽然也是一个因素，不过，这种请求数据包一般比较小，一般很少成为请求的瓶颈。负载均衡成为系统瓶颈的情况比较少，在这里不做讨论哈。</p><p>那么问题来了，假设我们的系统，在5w/s的高并发状态下，平均响应时间从100ms变为250ms（实际情况，甚至更多）：</p><pre class=" language-mathematica"><code class="language-mathematica">20*500/0.25 = 40000 （4万QPS）</code></pre><p>于是，我们的系统剩下了4w的QPS，面对5w每秒的请求，中间相差了1w。</p><p>然后，这才是真正的恶梦开始。举个例子，高速路口，1秒钟来5部车，每秒通过5部车，高速路口运作正常。突然，这个路口1秒钟只能通过4部车，车流量仍然依旧，结果必定出现大塞车。（5条车道忽然变成4条车道的感觉）。</p><p>同理，某一个秒内，20*500个可用连接进程都在满负荷工作中，却仍然有1万个新来请求，没有连接进程可用，系统陷入到异常状态也是预期之内。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000018.webp"></p><p>其实在正常的非高并发的业务场景中，也有类似的情况出现，某个业务请求接口出现问题，响应时间极慢，将整个Web请求响应时间拉得很长，逐渐将Web服务器的可用连接数占满，其他正常的业务请求，无连接进程可用。</p><p>更可怕的问题是，是用户的行为特点，系统越是不可用，用户的点击越频繁，<strong>恶性循环最终导致“雪崩”（其中一台Web机器挂了，导致流量分散到其他正常工作的机器上，再导致正常的机器也挂，然后恶性循环）</strong>，将整个Web系统拖垮。</p><h2 id="5-3-重启与过载保护"><a href="#5-3-重启与过载保护" class="headerlink" title="5.3 重启与过载保护"></a>5.3 重启与过载保护</h2><p>如果系统发生“雪崩”，贸然重启服务，是无法解决问题的。最常见的现象是，启动起来后，立刻挂掉。这个时候，<strong>最好在入口层将流量拒绝，然后再将重启</strong>。如果是redis/memcache这种服务也挂了，重启的时候需要注意“预热”，并且很可能需要比较长的时间。</p><p>秒杀和抢购的场景，流量往往是超乎我们系统的准备和想象的。这个时候，过载保护是必要的。<strong>如果检测到系统满负载状态，拒绝请求也是一种保护措施</strong>。在前端设置过滤是最简单的方式，但是，这种做法是被用户“千夫所指”的行为。更合适一点的是，<strong>将过载保护设置在CGI入口层，快速将客户的直接请求返回</strong>。</p><h1 id="6-作弊的手段：进攻与防守"><a href="#6-作弊的手段：进攻与防守" class="headerlink" title="6. 作弊的手段：进攻与防守"></a>6. 作弊的手段：进攻与防守</h1><p>秒杀和抢购收到了“海量”的请求，实际上里面的水分是很大的。不少用户，为了“抢“到商品，会使用“刷票工具”等类型的辅助工具，帮助他们发送尽可能多的请求到服务器。还有一部分高级用户，制作强大的自动请求脚本。<strong>这种做法的理由也很简单，就是在参与秒杀和抢购的请求中，自己的请求数目占比越多，成功的概率越高</strong>。</p><p>这些都是属于“作弊的手段”，不过，有“进攻”就有“防守”，这是一场没有硝烟的战斗哈。</p><h2 id="6-1-同一个账号，一次性发出多个请求"><a href="#6-1-同一个账号，一次性发出多个请求" class="headerlink" title="6.1 同一个账号，一次性发出多个请求"></a>6.1 同一个账号，一次性发出多个请求</h2><p>部分用户通过浏览器的插件或者其他工具，在秒杀开始的时间里，<strong>以自己的账号，一次发送上百甚至更多的请求</strong>。实际上，这样的用户破坏了秒杀和抢购的公平性。</p><p>这种请求在某些没有做数据安全处理的系统里，也可能造成另外一种破坏，导致某些判断条件被绕过。例如一个简单的领取逻辑，先判断用户是否有参与记录，如果没有则领取成功，最后写入到参与记录中。这是个非常简单的逻辑，但是，在高并发的场景下，存在深深的漏洞。<strong>多个并发请求通过负载均衡服务器，分配到内网的多台Web服务器，它们首先向存储发送查询请求，然后，在某个请求成功写入参与记录的时间差内，其他的请求获查询到的结果都是“没有参与记录”</strong>。这里，就存在逻辑判断被绕过的风险。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000019.webp"></p><blockquote><p><strong>应对方案：</strong></p><p>在程序入口处，一个账号只允许接受1个请求，其他请求过滤。不仅解决了同一个账号，发送N个请求的问题，还保证了后续的逻辑流程的安全。<strong>实现方案，可以通过Redis这种内存缓存服务，写入一个标志位（只允许1个请求写成功，结合watch的乐观锁的特性），成功写入的则可以继续参加</strong>。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000020.webp"></p><p>或者，自己实现一个服务，将同一个账号的请求放入一个队列中，处理完一个，再处理下一个。</p></blockquote><h2 id="6-2-多个账号，一次性发送多个请求"><a href="#6-2-多个账号，一次性发送多个请求" class="headerlink" title="6.2 多个账号，一次性发送多个请求"></a>6.2 多个账号，一次性发送多个请求</h2><p>很多公司的账号注册功能，在发展早期几乎是没有限制的，很容易就可以注册很多个账号。因此，<strong>也导致了出现了一些特殊的工作室，通过编写自动注册脚本，积累了一大批“僵尸账号”，数量庞大，几万甚至几十万的账号不等，专门做各种刷的行为（这就是微博中的“僵尸粉“的来源）</strong>。举个例子，例如微博中有转发抽奖的活动，如果我们使用几万个“僵尸号”去混进去转发，这样就可以大大提升我们中奖的概率。</p><p>这种账号，使用在秒杀和抢购里，也是同一个道理。例如，iPhone官网的抢购，火车票黄牛党。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000021.webp"></p><blockquote><p><strong>应对方案：</strong></p><p>这种场景，可以<strong>通过检测指定机器IP请求频率就可以解决，如果发现某个IP请求频率很高，可以给它弹出一个验证码或者直接禁止它的请求</strong>：</p><ol><li><strong>弹出验证码，最核心的追求，就是分辨出真实用户。</strong>因此，大家可能经常发现，网站弹出的验证码，有些是“鬼神乱舞”的样子，有时让我们根本无法看清。他们这样做的原因，其实也是为了让验证码的图片不被轻易识别，因为强大的“自动脚本”可以通过图片识别里面的字符，然后让脚本自动填写验证码。实际上，有一些非常创新的验证码，效果会比较好，例如给你一个简单问题让你回答，或者让你完成某些简单操作（例如百度贴吧的验证码）。</li><li><strong>直接禁止IP，实际上是有些粗暴的，因为有些真实用户的网络场景恰好是同一出口IP的，可能会有“误伤“</strong>。但是这一个做法简单高效，根据实际场景使用可以获得很好的效果。</li></ol></blockquote><h2 id="6-3-多个账号，不同IP发送不同请求"><a href="#6-3-多个账号，不同IP发送不同请求" class="headerlink" title="6.3 多个账号，不同IP发送不同请求"></a>6.3 多个账号，不同IP发送不同请求</h2><p>所谓道高一尺，魔高一丈。有进攻，就会有防守，永不休止。<strong>这些“工作室”，发现你对单机IP请求频率有控制之后，他们也针对这种场景，想出了他们的“新进攻方案”，就是不断改变IP</strong>。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000022.webp"></p><p>有同学会好奇，这些随机IP服务怎么来的。<strong>有一些是某些机构自己占据一批独立IP，然后做成一个随机代理IP的服务，有偿提供给这些“工作室”使用</strong>。还有一些更为黑暗一点的，就是<strong>通过木马黑掉普通用户的电脑，这个木马也不破坏用户电脑的正常运作，只做一件事情，就是转发IP包，普通用户的电脑被变成了IP代理出口</strong>。通过这种做法，黑客就拿到了大量的独立IP，然后搭建为随机IP服务，就是为了挣钱。</p><blockquote><p><strong>应对方案：</strong></p><p>说实话，这种场景下的请求，和真实用户的行为，已经基本相同了，想做分辨很困难。再做进一步的限制很容易“误伤“真实用户，这个时候，<strong>通常只能通过设置业务门槛高来限制这种请求了，或者通过账号行为的”数据挖掘“来提前清理掉它们</strong>。</p><p>僵尸账号也还是有一些共同特征的，例如<strong>账号很可能属于同一个号码段甚至是连号的，活跃度不高，等级低，资料不全等等</strong>。根据这些特点，适当设置参与门槛，例如限制参与秒杀的账号等级。<strong>通过这些业务手段，也是可以过滤掉一些僵尸号</strong>。</p></blockquote><h1 id="7-高并发下的数据安全"><a href="#7-高并发下的数据安全" class="headerlink" title="7. 高并发下的数据安全"></a>7. 高并发下的数据安全</h1><p>我们知道在<strong>多线程写入同一个文件的时候，会存现“线程安全”的问题</strong>（多个线程同时运行同一段代码，如果每次运行结果和单线程运行的结果是一样的，结果和预期相同，就是线程安全的）。<strong>如果是MySQL数据库，可以使用它自带的锁机制很好的解决问题，但是，在大规模并发的场景中，是不推荐使用MySQL的</strong>。<strong>秒杀和抢购的场景中，还有另外一个问题，就是“超发”，如果在这方面控制不慎，会产生发送过多的情况</strong>。我们也曾经听说过，某些电商搞抢购活动，买家成功拍下后，商家却不承认订单有效，拒绝发货。这里的问题，也许并不一定是商家奸诈，而是系统技术层面存在超发风险导致的。</p><h2 id="7-1-超发的原因"><a href="#7-1-超发的原因" class="headerlink" title="7.1 超发的原因"></a>7.1 超发的原因</h2><p>假设某个抢购场景中，我们一共只有100个商品，在最后一刻，我们已经消耗了99个商品，仅剩最后一个。这个时候，系统发来多个并发请求，这批请求读取到的商品余量都是99个，然后都通过了这一个余量判断，最终导致超发。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000023.webp"></p><p>在上面的这个图中，就导致了并发用户B也“抢购成功”，多让一个人获得了商品。这种场景，在高并发的情况下非常容易出现。</p><h2 id="7-2-悲观锁思路"><a href="#7-2-悲观锁思路" class="headerlink" title="7.2 悲观锁思路"></a>7.2 悲观锁思路</h2><p>解决线程安全的思路很多，可以从“悲观锁”的方向开始讨论。</p><blockquote><p><strong>悲观锁，也就是在修改数据的时候，采用锁定状态，排斥外部请求的修改。遇到加锁的状态，就必须等待。</strong></p></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000024.webp"></p><p>虽然上述的方案的确解决了线程安全的问题，但是，别忘记，<strong>我们的场景是“高并发”。也就是说，会很多这样的修改请求，每个请求都需要等待“锁”，某些线程可能永远都没有机会抢到这个“锁”，这种请求就会死在那里</strong>。同时，这种请求会很多，<strong>瞬间增大系统的平均响应时间，结果是可用连接数被耗尽，系统陷入异常</strong>。</p><h2 id="7-3-FIFO队列思路"><a href="#7-3-FIFO队列思路" class="headerlink" title="7.3 FIFO队列思路"></a>7.3 FIFO队列思路</h2><p>那好，那么我们稍微修改一下上面的场景，<strong>我们直接将请求放入队列中的，采用FIFO（First Input First Output，先进先出），这样的话，我们就不会导致某些请求永远获取不到锁</strong>。看到这里，是不是有点强行将多线程变成单线程的感觉哈。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000025.webp"></p><p>然后，我们现在解决了锁的问题，全部请求采用“先进先出”的队列方式来处理。那么新的问题来了，<strong>高并发的场景下，因为请求很多，很可能一瞬间将队列内存“撑爆”，然后系统又陷入到了异常状态</strong>。或者设计一个极大的内存队列，也是一种方案，但是，系统处理完一个队列内请求的速度根本无法和疯狂涌入队列中的数目相比。也就是说，队列内的请求会越积累越多，最终Web系统平均响应时候还是会大幅下降，系统还是陷入异常。</p><h2 id="7-4-乐观锁思路"><a href="#7-4-乐观锁思路" class="headerlink" title="7.4 乐观锁思路"></a>7.4 乐观锁思路</h2><p>这个时候，我们就可以讨论一下“乐观锁”的思路了。<strong>乐观锁，是相对于“悲观锁”采用更为宽松的加锁机制，大都是采用带版本号（Version）更新。</strong>实现就是，这个数据所有请求都有资格去修改，但会获得一个该数据的版本号，只有版本号符合的才能更新成功，其他的返回抢购失败。这样的话，我们就不需要考虑队列的问题，不过，<strong>它会增大CPU的计算开销</strong>。但是，综合来说，这是一个比较好的解决方案。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/ia_100000026.webp"></p><p>有很多软件和服务都“乐观锁”功能的支持，例如<strong>Redis中的watch就是其中之一</strong>。通过这个实现，我们保证了数据的安全。</p><h1 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h1><p>互联网正在高速发展，使用互联网服务的用户越多，高并发的场景也变得越来越多。电商秒杀和抢购，是两个比较典型的互联网高并发场景。虽然我们解决问题的具体技术方案可能千差万别，但是遇到的挑战却是相似的，因此解决问题的思路也异曲同工。</p><p>参考：<a href="https://www.jianshu.com/p/df4fbecb1a4b" target="_blank" rel="noopener">秒杀架构的分析与实战</a></p>]]></content>
      
      
      <categories>
          
          <category> 方案设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 方案设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.设计模式</title>
      <link href="posts/20f314e.html"/>
      <url>posts/20f314e.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/2.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.png"></p>]]></content>
      
      
      <categories>
          
          <category> 思维导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.如何学习新技术</title>
      <link href="posts/d88c9280.html"/>
      <url>posts/d88c9280.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/0.%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E6%96%B0%E6%8A%80%E6%9C%AF.png"></p>]]></content>
      
      
      <categories>
          
          <category> 思维导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.阿里员工排查Java问题常用工具</title>
      <link href="posts/bf8aaefe.html"/>
      <url>posts/bf8aaefe.html</url>
      
        <content type="html"><![CDATA[<h1 id="我的问题排查工具箱"><a href="#我的问题排查工具箱" class="headerlink" title="我的问题排查工具箱"></a>我的问题排查工具箱</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时的工作中经常碰到很多疑难问题的处理，在解决问题的同时，有一些工具起到了相当大的作用，在此书写下来，一是作为笔记，可以让自己后续忘记了可快速翻阅，二是分享，希望看到此文的同学们可以拿出自己日常觉得帮助很大的工具，大家一起进步。</p><p>闲话不多说，开搞。</p><h2 id="Linux命令类"><a href="#Linux命令类" class="headerlink" title="Linux命令类"></a>Linux命令类</h2><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>最常用的tail -f</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tail</span> -300f shopbase.log <span class="token comment" spellcheck="true">#倒数300行并进入实时监听文件写入模式</span></code></pre><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">grep</span> forest f.txt     <span class="token comment" spellcheck="true">#文件查找</span><span class="token function">grep</span> forest f.txt cpf.txt <span class="token comment" spellcheck="true">#多文件查找</span><span class="token function">grep</span> <span class="token string">'log'</span> /home/admin -r -n <span class="token comment" spellcheck="true">#目录下查找所有符合关键字的文件</span><span class="token function">cat</span> f.txt <span class="token operator">|</span> <span class="token function">grep</span> -i shopbase    <span class="token function">grep</span> <span class="token string">'shopbase'</span> /home/admin -r -n --include *.<span class="token punctuation">{</span>vm,java<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#指定文件后缀</span><span class="token function">grep</span> <span class="token string">'shopbase'</span> /home/admin -r -n --exclude *.<span class="token punctuation">{</span>vm,java<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#反匹配</span><span class="token function">seq</span> 10 <span class="token operator">|</span> <span class="token function">grep</span> 5 -A 3    <span class="token comment" spellcheck="true">#上匹配</span><span class="token function">seq</span> 10 <span class="token operator">|</span> <span class="token function">grep</span> 5 -B 3    <span class="token comment" spellcheck="true">#下匹配</span><span class="token function">seq</span> 10 <span class="token operator">|</span> <span class="token function">grep</span> 5 -C 3    <span class="token comment" spellcheck="true">#上下匹配，平时用这个就妥了</span><span class="token function">cat</span> f.txt <span class="token operator">|</span> <span class="token function">grep</span> -c <span class="token string">'SHOPBASE'</span></code></pre><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>1 基础命令</p><pre class=" language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$4</span>,<span class="token variable">$6</span>}'</span> f.txt<span class="token function">awk</span> <span class="token string">'{print NR,<span class="token variable">$0</span>}'</span> f.txt cpf.txt    <span class="token function">awk</span> <span class="token string">'{print FNR,<span class="token variable">$0</span>}'</span> f.txt cpf.txt<span class="token function">awk</span> <span class="token string">'{print FNR,FILENAME,<span class="token variable">$0</span>}'</span> f.txt cpf.txt<span class="token function">awk</span> <span class="token string">'{print FILENAME,"NR="NR,"FNR="FNR,"$"NF"="<span class="token variable">$NF</span>}'</span> f.txt cpf.txt<span class="token keyword">echo</span> 1:2:3:4 <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print <span class="token variable">$1</span>,<span class="token variable">$2</span>,<span class="token variable">$3</span>,<span class="token variable">$4</span>}'</span></code></pre><p>2 匹配</p><pre class=" language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'/ldb/ {print}'</span> f.txt   <span class="token comment" spellcheck="true">#匹配ldb</span><span class="token function">awk</span> <span class="token string">'!/ldb/ {print}'</span> f.txt  <span class="token comment" spellcheck="true">#不匹配ldb</span><span class="token function">awk</span> <span class="token string">'/ldb/ &amp;&amp; /LISTEN/ {print}'</span> f.txt   <span class="token comment" spellcheck="true">#匹配ldb和LISTEN</span><span class="token function">awk</span> <span class="token string">'<span class="token variable">$5</span> ~ /ldb/ {print}'</span> f.txt <span class="token comment" spellcheck="true">#第五列匹配ldb</span></code></pre><p>3 内建变量</p><p>NR:NR表示从awk开始执行后，按照记录分隔符读取的数据次数，默认的记录分隔符为换行符，因此默认的就是读取的数据行数，NR可以理解为Number of Record的缩写。</p><p>FNR:在awk处理多个输入文件的时候，在处理完第一个文件后，NR并不会从1开始，而是继续累加，因此就出现了FNR，每当处理一个新文件的时候，FNR就从1开始计数，FNR可以理解为File Number of Record。</p><p>NF: NF表示目前的记录被分割的字段的数目，NF可以理解为Number of Field。</p><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> -u admin <span class="token function">find</span> /home/admin /tmp /usr -name \*.log<span class="token punctuation">(</span>多个目录去找<span class="token punctuation">)</span><span class="token function">find</span> <span class="token keyword">.</span> -iname \*.txt<span class="token punctuation">(</span>大小写都匹配<span class="token punctuation">)</span><span class="token function">find</span> <span class="token keyword">.</span> -type d<span class="token punctuation">(</span>当前目录下的所有子目录<span class="token punctuation">)</span><span class="token function">find</span> /usr -type l<span class="token punctuation">(</span>当前目录下所有的符号链接<span class="token punctuation">)</span><span class="token function">find</span> /usr -type l -name <span class="token string">"z*"</span> -ls<span class="token punctuation">(</span>符号链接的详细信息 eg:inode,目录<span class="token punctuation">)</span><span class="token function">find</span> /home/admin -size +250000k<span class="token punctuation">(</span>超过250000k的文件，当然+改成-就是小于了<span class="token punctuation">)</span><span class="token function">find</span> /home/admin f -perm 777 -exec <span class="token function">ls</span> -l <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span> <span class="token punctuation">(</span>按照权限查询文件<span class="token punctuation">)</span><span class="token function">find</span> /home/admin -atime -1  1天内访问过的文件<span class="token function">find</span> /home/admin -ctime -1  1天内状态改变过的文件    <span class="token function">find</span> /home/admin -mtime -1  1天内修改过的文件<span class="token function">find</span> /home/admin -amin -1  1分钟内访问过的文件<span class="token function">find</span> /home/admin -cmin -1  1分钟内状态改变过的文件    <span class="token function">find</span> /home/admin -mmin -1  1分钟内修改过的文件</code></pre><h3 id="pgm"><a href="#pgm" class="headerlink" title="pgm"></a>pgm</h3><p>批量查询vm-shopbase满足条件的日志</p><pre class=" language-bash"><code class="language-bash">pgm -A -f vm-shopbase <span class="token string">'cat /home/admin/shopbase/logs/shopbase.log.2017-01-17|grep 2069861630'</span></code></pre><h3 id="tsar"><a href="#tsar" class="headerlink" title="tsar"></a>tsar</h3><p>tsar是咱公司自己的采集工具。很好用, 将历史收集到的数据持久化在磁盘上，所以我们快速来查询历史的系统数据。当然实时的应用情况也是可以查询的啦。大部分机器上都有安装。</p><pre class=" language-bash"><code class="language-bash">tsar  <span class="token comment" spellcheck="true">##可以查看最近一天的各项指标</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/fc25b8f22e53818d5576c5d00dd52618.png"></p><pre class=" language-bash"><code class="language-bash">tsar --live <span class="token comment" spellcheck="true">##可以查看实时指标，默认五秒一刷</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/b68910c5416fd85a99a49a092fc9ffbb.png"></p><pre class=" language-bash"><code class="language-bash">tsar -d 20161218 <span class="token comment" spellcheck="true">##指定查看某天的数据，貌似最多只能看四个月的数据</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/aafdbfb515b817a2aceb270d1d470c19.png"></p><pre class=" language-bash"><code class="language-bash">tsar --memtsar --loadtsar --cpu<span class="token comment" spellcheck="true">##当然这个也可以和-d参数配合来查询某天的单个指标的情况 </span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/cb46ef4e374e1502d3b672d04d48099a.png"><br><img src="https://gitee.com/soulballad/PicGo/raw/master/img/079f3fa722bfa1991557469eb97c7273.png"><br><img src="https://gitee.com/soulballad/PicGo/raw/master/img/6dd77351ad4d1ad84cdbfba20c9d4c29.png"></p><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>top除了看一些基本信息之外，剩下的就是配合来查询vm的各种问题了</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> java<span class="token function">top</span> -H -p pid</code></pre><p>获得线程10进制转16进制后jstack去抓看这个线程到底在干啥</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">netstat</span> -nat<span class="token operator">|</span><span class="token function">awk</span>  <span class="token string">'{print <span class="token variable">$6</span>}'</span><span class="token operator">|</span><span class="token function">sort</span><span class="token operator">|</span><span class="token function">uniq</span> -c<span class="token operator">|</span><span class="token function">sort</span> -rn <span class="token comment" spellcheck="true">#查看当前连接，注意close_wait偏高的情况，比如如下</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/250a027410775cf5990d0db6e87ba927.png"><br><img src="https://gitee.com/soulballad/PicGo/raw/master/img/639811da529750064e2f70867d6234e0.png"></p><h2 id="排查利器"><a href="#排查利器" class="headerlink" title="排查利器"></a>排查利器</h2><h3 id="btrace"><a href="#btrace" class="headerlink" title="btrace"></a>btrace</h3><p>首当其冲的要说的是btrace。真是生产环境&amp;预发的排查问题大杀器。 简介什么的就不说了。直接上代码干</p><ol><li><p>查看当前谁调用了ArrayList的add方法，同时只打印当前ArrayList的size大于500的线程调用栈</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@OnMethod</span><span class="token punctuation">(</span>clazz <span class="token operator">=</span> <span class="token string">"java.util.ArrayList"</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"add"</span><span class="token punctuation">,</span> location <span class="token operator">=</span> <span class="token annotation punctuation">@Location</span><span class="token punctuation">(</span>value <span class="token operator">=</span> Kind<span class="token punctuation">.</span>CALL<span class="token punctuation">,</span> clazz <span class="token operator">=</span> <span class="token string">"/.*/"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"/.*/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ProbeClassName</span> String probeClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@ProbeMethodName</span> String probeMethod<span class="token punctuation">,</span> <span class="token annotation punctuation">@TargetInstance</span> Object instance<span class="token punctuation">,</span> <span class="token annotation punctuation">@TargetMethodOrField</span> String method<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">,</span> <span class="token string">"size"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">479</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"check who ArrayList.add method:"</span> <span class="token operator">+</span> probeClass <span class="token operator">+</span> <span class="token string">"#"</span> <span class="token operator">+</span> probeMethod  <span class="token operator">+</span> <span class="token string">", method:"</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">", size:"</span> <span class="token operator">+</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">"java.util.ArrayList"</span><span class="token punctuation">,</span> <span class="token string">"size"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">jstack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>监控当前服务方法被调用时返回的值以及请求的参数</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@OnMethod</span><span class="token punctuation">(</span>clazz <span class="token operator">=</span> <span class="token string">"com.taobao.sellerhome.transfer.biz.impl.C2CApplyerServiceImpl"</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"nav"</span><span class="token punctuation">,</span> location <span class="token operator">=</span> <span class="token annotation punctuation">@Location</span><span class="token punctuation">(</span>value <span class="token operator">=</span> Kind<span class="token punctuation">.</span>RETURN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mt</span><span class="token punctuation">(</span><span class="token keyword">long</span> userId<span class="token punctuation">,</span> <span class="token keyword">int</span> current<span class="token punctuation">,</span> <span class="token keyword">int</span> relation<span class="token punctuation">,</span> String check<span class="token punctuation">,</span> String redirectUrl<span class="token punctuation">,</span> <span class="token annotation punctuation">@Return</span> AnyType result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"parameter# userId:"</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">", current:"</span> <span class="token operator">+</span> current <span class="token operator">+</span> <span class="token string">", relation:"</span> <span class="token operator">+</span> relation <span class="token operator">+</span> <span class="token string">", check:"</span> <span class="token operator">+</span> check <span class="token operator">+</span> <span class="token string">", redirectUrl:"</span> <span class="token operator">+</span> redirectUrl <span class="token operator">+</span> <span class="token string">", result:"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><p>其他功能集团的一些工具或多或少都有，就不说了。感兴趣的请移步。<br><a href="https://github.com/btraceio/btrace" target="_blank" rel="noopener">https://github.com/btraceio/btrace</a></p><p>注意:</p><ol><li>经过观察，1.3.9的release输出不稳定，要多触发几次才能看到正确的结果</li><li>正则表达式匹配trace类时范围一定要控制，否则极有可能出现跑满CPU导致应用卡死的情况</li><li>由于是字节码注入的原理，想要应用恢复到正常情况，需要重启应用。</li></ol><h3 id="Greys"><a href="#Greys" class="headerlink" title="Greys"></a>Greys</h3><p>Greys是@杜琨的大作吧。说几个挺棒的功能(部分功能和btrace重合):</p><p><code>sc -df xxx</code>: 输出当前类的详情,包括源码位置和classloader结构</p><p><code>trace class method</code>: 相当喜欢这个功能! 很早前可以早JProfiler看到这个功能。打印出当前方法调用的耗时情况，细分到每个方法。对排查方法性能时很有帮助，比如我之前这篇就是使用了trace命令来的:<a href="http://www.atatech.org/articles/52947%E3%80%82" target="_blank" rel="noopener">http://www.atatech.org/articles/52947。</a></p><p>其他功能部分和btrace重合，可以选用，感兴趣的请移步。<br><a href="http://www.atatech.org/articles/26247" target="_blank" rel="noopener">http://www.atatech.org/articles/26247</a></p><p>另外相关联的是arthas，他是基于Greys的，感兴趣的再移步<a href="http://mw.alibaba-inc.com/products/arthas/docs/middleware-container/arthas.wiki/home.html?spm=a1z9z.8109794.header.32.1lsoMc" target="_blank" rel="noopener">http://mw.alibaba-inc.com/products/arthas/docs/middleware-container/arthas.wiki/home.html?spm=a1z9z.8109794.header.32.1lsoMc</a></p><h3 id="javOSize"><a href="#javOSize" class="headerlink" title="javOSize"></a>javOSize</h3><p>就说一个功能<br><code>classes</code>：通过修改了字节码，改变了类的内容，即时生效。 所以可以做到快速的在某个地方打个日志看看输出，缺点是对代码的侵入性太大。但是如果自己知道自己在干嘛，的确是不错的玩意儿。</p><p>其他功能Greys和btrace都能很轻易做的到，不说了。</p><p>可以看看我之前写的一篇javOSize的简介<a href="http://www.atatech.org/articles/38546" target="_blank" rel="noopener">http://www.atatech.org/articles/38546</a><br>官网请移步<a href="http://www.javosize.com/" target="_blank" rel="noopener">http://www.javosize.com/</a></p><h3 id="JProfiler"><a href="#JProfiler" class="headerlink" title="JProfiler"></a>JProfiler</h3><p>之前判断许多问题要通过JProfiler，但是现在Greys和btrace基本都能搞定了。再加上出问题的基本上都是生产环境(网络隔离)，所以基本不怎么使用了，但是还是要标记一下。<br>官网请移步<a href="https://www.ej-technologies.com/products/jprofiler/overview.html" target="_blank" rel="noopener">https://www.ej-technologies.com/products/jprofiler/overview.html</a></p><h2 id="大杀器"><a href="#大杀器" class="headerlink" title="大杀器"></a>大杀器</h2><h3 id="eclipseMAT"><a href="#eclipseMAT" class="headerlink" title="eclipseMAT"></a>eclipseMAT</h3><p>可作为eclipse的插件，也可作为单独的程序打开。<br>详情请移步<a href="http://www.eclipse.org/mat/" target="_blank" rel="noopener">http://www.eclipse.org/mat/</a></p><h3 id="zprofiler"><a href="#zprofiler" class="headerlink" title="zprofiler"></a>zprofiler</h3><p>集团内的开发应该是无人不知无人不晓了。简而言之一句话:有了zprofiler还要mat干嘛<br>详情请移步<a href="http://zprofiler.alibaba-inc.com/" target="_blank" rel="noopener">zprofiler.alibaba-inc.com</a></p><h2 id="java三板斧，噢不对，是七把"><a href="#java三板斧，噢不对，是七把" class="headerlink" title="java三板斧，噢不对，是七把"></a>java三板斧，噢不对，是七把</h2><h3 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h3><p>我只用一条命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> -u admin /opt/taobao/java/bin/jps -mlvV</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/7b156cb53250bf5f91811900c2575a91.png"></p><h3 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h3><p>普通用法:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jstack 2815</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/bc501bf424b3d2884e6ec118d14554a3.png"></p><p>native+java栈:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jstack -m 2815</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/4c59dc2971f3d8778e1898d64266266a.png"></p><h3 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h3><p>可看系统启动的参数，如下</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jinfo -flags 2815</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/bc879145e2994e9a09327407ed88382c.png"></p><h3 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h3><p>两个用途</p><p>1.查看堆的情况</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jmap -heap 2815</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/00d9eaef08cdb51263d202d26795036b.png"><br><img src="https://gitee.com/soulballad/PicGo/raw/master/img/3c08bccf81fef8b7bcae2b321012b503.png"></p><p>2.dump</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jmap -dump:live,format<span class="token operator">=</span>b,file<span class="token operator">=</span>/tmp/heap2.bin 2815</code></pre><p>或者</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jmap -dump:format<span class="token operator">=</span>b,file<span class="token operator">=</span>/tmp/heap3.bin 2815</code></pre><p>3.看看堆都被谁占了? 再配合zprofiler和btrace，排查问题简直是如虎添翼</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jmap -histo 2815 <span class="token operator">|</span> <span class="token function">head</span> -10</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/500ec6709fcd03a4fca2679615d54522.png"></p><h3 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h3><p>jstat参数众多，但是使用一个就够了</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> -u admin /opt/taobao/install/ajdk-8_1_1_fp1-b52/bin/jstat -gcutil 2815 1000 </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/05743916a9187535c202fb410d30d50d.png"></p><h3 id="jdb"><a href="#jdb" class="headerlink" title="jdb"></a>jdb</h3><p>时至今日，jdb也是经常使用的。<br>jdb可以用来预发debug,假设你预发的java_home是/opt/taobao/java/，远程调试端口是8000.那么<br><code>sudo -u admin /opt/taobao/java/bin/jdb -attach 8000</code>.</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/16332fcd45b20137bffc7a3b9a88b0f1.png"></p><p>出现以上代表jdb启动成功。后续可以进行设置断点进行调试。<br>具体参数可见oracle官方说明<a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/7/docs/technotes/tools/windows/jdb.html</a></p><h3 id="CHLSDB"><a href="#CHLSDB" class="headerlink" title="CHLSDB"></a>CHLSDB</h3><p>CHLSDB感觉很多情况下可以看到更好玩的东西，不详细叙述了。 查询资料听说jstack和jmap等工具就是基于它的。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> -u admin /opt/taobao/java/bin/java -classpath /opt/taobao/java/lib/sa-jdi.jar sun.jvm.hotspot.CLHSDB</code></pre><p>更详细的可见R大此贴<br><a href="http://rednaxelafx.iteye.com/blog/1847971" target="_blank" rel="noopener">http://rednaxelafx.iteye.com/blog/1847971</a></p><h2 id="plugin-of-intellij-idea"><a href="#plugin-of-intellij-idea" class="headerlink" title="plugin of intellij idea"></a>plugin of intellij idea</h2><h3 id="key-promoter"><a href="#key-promoter" class="headerlink" title="key promoter"></a>key promoter</h3><p>快捷键一次你记不住，多来几次你总能记住了吧？</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/356c11885a95e28736a605aecdc8083e.png"></p><h3 id="maven-helper"><a href="#maven-helper" class="headerlink" title="maven helper"></a>maven helper</h3><p>分析maven依赖的好帮手。</p><h2 id="VM-options"><a href="#VM-options" class="headerlink" title="VM options"></a>VM options</h2><ol><li><p>你的类到底是从哪个文件加载进来的？</p><pre class=" language-bash"><code class="language-bash">-XX:+TraceClassLoading结果形如<span class="token punctuation">[</span>Loaded java.lang.invoke.MethodHandleImpl<span class="token variable">$Lazy</span> from D:\programme\jdk\jdk8U74\jre\lib\rt.jar<span class="token punctuation">]</span> </code></pre></li><li><p>应用挂了输出dump文件</p><pre class=" language-bash"><code class="language-bash">-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath<span class="token operator">=</span>/home/admin/logs/java.hprof集团的vm参数里边基本都有这个选项</code></pre></li></ol><h2 id="jar包冲突"><a href="#jar包冲突" class="headerlink" title="jar包冲突"></a>jar包冲突</h2><p>把这个单独写个大标题不过分吧？每个人或多或少都处理过这种烦人的case。我特么下边这么多方案不信就搞不定你?</p><h3 id="mvn-dependency-tree-gt-dependency-txt"><a href="#mvn-dependency-tree-gt-dependency-txt" class="headerlink" title="mvn dependency:tree > ~/dependency.txt"></a>mvn dependency:tree &gt; ~/dependency.txt</h3><p>打出所有依赖</p><h3 id="mvn-dependency-tree-Dverbose-Dincludes-groupId-artifactId"><a href="#mvn-dependency-tree-Dverbose-Dincludes-groupId-artifactId" class="headerlink" title="mvn dependency:tree -Dverbose -Dincludes=groupId:artifactId"></a>mvn dependency:tree -Dverbose -Dincludes=groupId:artifactId</h3><p>只打出指定groupId和artifactId的依赖关系</p><h3 id="XX-TraceClassLoading"><a href="#XX-TraceClassLoading" class="headerlink" title="-XX:+TraceClassLoading"></a>-XX:+TraceClassLoading</h3><p>vm启动脚本加入。在tomcat启动脚本中可见加载类的详细信息</p><h3 id="verbose"><a href="#verbose" class="headerlink" title="-verbose"></a>-verbose</h3><p>vm启动脚本加入。在tomcat启动脚本中可见加载类的详细信息</p><h3 id="greys-sc"><a href="#greys-sc" class="headerlink" title="greys:sc"></a>greys:sc</h3><p>greys的sc命令也能清晰的看到当前类是从哪里加载过来的</p><h3 id="tomcat-classloader-locate"><a href="#tomcat-classloader-locate" class="headerlink" title="tomcat-classloader-locate"></a>tomcat-classloader-locate</h3><p>通过以下url可以获知当前类是从哪里加载的<br>curl <a href="http://localhost:8006/classloader/locate?class=org.apache.xerces.xs.XSObject" target="_blank" rel="noopener">http://localhost:8006/classloader/locate?class=org.apache.xerces.xs.XSObject</a></p><h2 id="ALI-TOMCAT带给我们的惊喜-感谢-务观"><a href="#ALI-TOMCAT带给我们的惊喜-感谢-务观" class="headerlink" title="ALI-TOMCAT带给我们的惊喜(感谢@务观)"></a>ALI-TOMCAT带给我们的惊喜(感谢@务观)</h2><ol><li><p>列出容器加载的jar列表</p><p>curl <a href="http://localhost:8006/classloader/jars" target="_blank" rel="noopener">http://localhost:8006/classloader/jars</a></p></li><li><p>列出当前当当前类加载的实际jar包位置，解决类冲突时有用</p><p>curl <a href="http://localhost:8006/classloader/locate?class=org.apache.xerces.xs.XSObject" target="_blank" rel="noopener">http://localhost:8006/classloader/locate?class=org.apache.xerces.xs.XSObject</a><br><img src="https://gitee.com/soulballad/PicGo/raw/master/img/4568b16d3db0daf98e852412b830f1a8.png"></p></li></ol><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><h3 id="gpref"><a href="#gpref" class="headerlink" title="gpref"></a>gpref</h3><p><a href="http://www.atatech.org/articles/33317" target="_blank" rel="noopener">http://www.atatech.org/articles/33317</a></p><h3 id="dmesg"><a href="#dmesg" class="headerlink" title="dmesg"></a>dmesg</h3><p>如果发现自己的java进程悄无声息的消失了，几乎没有留下任何线索，那么dmesg一发，很有可能有你想要的。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">dmesg</span><span class="token operator">|</span><span class="token function">grep</span> -i <span class="token function">kill</span><span class="token operator">|</span><span class="token function">less</span></code></pre><p>去找关键字oom_killer。找到的结果类似如下:</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>6710782.021013<span class="token punctuation">]</span> java invoked oom-killer: gfp_mask<span class="token operator">=</span>0xd0, order<span class="token operator">=</span>0, oom_adj<span class="token operator">=</span>0, oom_scoe_adj<span class="token operator">=</span>0<span class="token punctuation">[</span>6710782.070639<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>ffffffff81118898<span class="token operator">></span><span class="token punctuation">]</span> ? oom_kill_process+0x68/0x140 <span class="token punctuation">[</span>6710782.257588<span class="token punctuation">]</span> Task <span class="token keyword">in</span> /LXC011175068174 killed as a result of limit of /LXC011175068174 <span class="token punctuation">[</span>6710784.698347<span class="token punctuation">]</span> Memory cgroup out of memory: Kill process 215701 <span class="token punctuation">(</span>java<span class="token punctuation">)</span> score 854 or sacrifice child <span class="token punctuation">[</span>6710784.707978<span class="token punctuation">]</span> Killed process 215701, UID 679, <span class="token punctuation">(</span>java<span class="token punctuation">)</span> total-vm:11017300kB, anon-rss:7152432kB, file-rss:1232kB</code></pre><p>以上表明，对应的java进程被系统的OOM Killer给干掉了，得分为854.<br>解释一下OOM killer（Out-Of-Memory killer），该机制会监控机器的内存资源消耗。当机器内存耗尽前，该机制会扫描所有的进程（按照一定规则计算，内存占用，时间等），挑选出得分最高的进程，然后杀死，从而保护机器。</p><p>dmesg日志时间转换公式:<br>log实际时间=格林威治1970-01-01+(当前时间秒数-系统启动至今的秒数+dmesg打印的log时间)秒数：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">date</span> -d <span class="token string">"1970-01-01 UTC `echo "</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span>-<span class="token punctuation">$(</span>cat /proc/uptime<span class="token operator">|</span><span class="token function">cut</span> -f 1 -d<span class="token string">' '</span><span class="token punctuation">)</span>+12288812.926194<span class="token string">"|bc ` seconds"</span></code></pre><p>剩下的，就是看看为什么内存这么大，触发了OOM-Killer了。</p><h2 id="新技能get"><a href="#新技能get" class="headerlink" title="新技能get"></a>新技能get</h2><h3 id="RateLimiter"><a href="#RateLimiter" class="headerlink" title="RateLimiter"></a>RateLimiter</h3><p>想要精细的控制QPS? 比如这样一个场景，你调用某个接口，对方明确需要你限制你的QPS在400之内你怎么控制？这个时候RateLimiter就有了用武之地。详情可移步<a href="http://ifeve.com/guava-ratelimiter/" target="_blank" rel="noopener">http://ifeve.com/guava-ratelimiter/</a></p><blockquote><p>原文链接： <a href="https://developer.aliyun.com/article/69520" target="_blank" rel="noopener">https://developer.aliyun.com/article/69520</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 问题定位分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.CPU占用100%定位方法</title>
      <link href="posts/5901445c.html"/>
      <url>posts/5901445c.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-背景"><a href="#0-背景" class="headerlink" title="0. 背景"></a>0. 背景</h1><p>经常做后端服务开发的同学，或多或少都遇到过 CPU 负载特别高的问题。尤其是在周末或大半夜，突然群里有人反馈线上机器负载特别高，不熟悉定位流程和思路的同学可能登上服务器一通手忙脚乱，定位过程百转千回。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/001158_Rbyb_568818.png"></p><p>对此，也有不少同学曾经整理过相关流程或方法论，类似把大象放进冰箱要几步，传统的方案一般是4步：</p><ol><li>top oder by with P：1040 // 首先按进程负载排序找到  maxLoad(pid)</li><li>top -Hp 进程PID：1073   // 找到相关负载 线程PID</li><li>printf “0x%x\n” 线程PID： 0x431  // 将线程PID转换为 16进制，为后面查找 jstack 日志做准备</li><li>jstack 进程PID | vim +/十六进制线程PID -     // 例如：jstack 1040|vim +/0x431 -</li></ol><p>但是对于线上问题定位来说，分秒必争，上面的 4 步还是太繁琐耗时了，有没有可能封装成为一个工具，在有问题的时候一键定位，秒级找到有问题的代码行呢？</p><p>当然可以！工具链的成熟与否不仅体现了一个开发者的运维能力，也体现了开发者的效率意识。<a href="https://github.com/oldratlee" target="_blank" rel="noopener">淘宝的oldratlee 同学</a>就将上面的流程封装为了一个工具：<a href="https://github.com/oldratlee/useful-scripts/blob/master/docs/java.md#beer-show-busy-java-threadssh" target="_blank" rel="noopener">show-busy-java-threads.sh</a>（点击可直接下载，或参考文末链接下载），可以很方便的定位线上的这类问题，下面我会举两个例子来看实际的效果。</p><p>快速安装使用：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>curl -fsSL https://raw.githubusercontent.com/oldratlee/useful-scripts/master/test-cases/self-installer.sh<span class="token punctuation">)</span></code></pre><h1 id="1-正则表达式导致的100"><a href="#1-正则表达式导致的100" class="headerlink" title="1. 正则表达式导致的100%"></a>1. 正则表达式导致的100%</h1><blockquote><ol><li>java 正则表达式回溯造成 CPU 100%</li></ol></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegexLoad</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> patternMatch <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"([\\w\\s]+)+([+\\-/*])+([\\w\\s]+)"</span><span class="token punctuation">,</span>                <span class="token string">"([\\w\\s]+)+([+\\-/*])+([\\w\\s]+)+([+\\-/*])+([\\w\\s]+)"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> patternList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        patternList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Avg Volume Units product A + Volume Units product A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        patternList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Avg Volume Units /  Volume Units product A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        patternList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Avg retailer On Hand / Volume Units Plan / Store Count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        patternList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Avg Hand Volume Units Plan Store Count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        patternList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1 - Avg merchant Volume Units"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        patternList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Total retailer shipment Count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span>patternList <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>patternMatch<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>patternMatch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Matcher matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Passed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Failed;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编译、运行上述代码之后，咱们就能观察到服务器多了一个 100% CPU 的 java 进程：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/002812_wnlg_568818.png"></p><p>怎么使用呢？</p><blockquote><p>show-busy-java-threads.sh<br># 从 所有的 Java进程中找出最消耗CPU的线程（缺省5个），打印出其线程栈。</p><p>show-busy-java-threads.sh -c &lt;要显示的线程栈数&gt;</p><p>show-busy-java-threads.sh -c &lt;要显示的线程栈数&gt; -p &lt;指定的Java Process&gt;<br># -F选项：执行jstack命令时加上-F选项（强制jstack），一般情况不需要使用<br>show-busy-java-threads.sh -p &lt;指定的Java Process&gt; -F</p><p>show-busy-java-threads.sh -s &lt;指定jstack命令的全路径&gt;<br># 对于sudo方式的运行，JAVA_HOME环境变量不能传递给root，<br># 而root用户往往没有配置JAVA_HOME且不方便配置，<br># 显式指定jstack命令的路径就反而显得更方便了</p><p>show-busy-java-threads.sh -a &lt;输出记录到的文件&gt;</p><p>show-busy-java-threads.sh -t &lt;重复执行的次数&gt; -i &lt;重复执行的间隔秒数&gt;<br># 缺省执行一次；执行间隔缺省是3秒</p><p>##############################<br># 注意：<br>##############################<br># 如果Java进程的用户 与 执行脚本的当前用户 不同，则jstack不了这个Java进程。<br># 为了能切换到Java进程的用户，需要加sudo来执行，即可以解决：<br>sudo show-busy-java-threads.sh</p></blockquote><p>示例：</p><pre class=" language-bash"><code class="language-bash">work@dev_zz_Master 10.48.186.32 23:45:50 ~/demo <span class="token operator">></span><span class="token function">bash</span> show-busy-java-threads.sh<span class="token punctuation">[</span>1<span class="token punctuation">]</span> Busy<span class="token punctuation">(</span>96.2%<span class="token punctuation">)</span> thread<span class="token punctuation">(</span>8577/0x2181<span class="token punctuation">)</span> stack of java process<span class="token punctuation">(</span>8576<span class="token punctuation">)</span> under user<span class="token punctuation">(</span>work<span class="token punctuation">)</span>:<span class="token string">"main"</span> prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007f0c64006800 nid<span class="token operator">=</span>0x2181 runnable <span class="token punctuation">[</span>0x00007f0c6a64a000<span class="token punctuation">]</span>   java.lang.Thread.State: RUNNABLE        at java.util.regex.Pattern<span class="token variable">$GroupHead</span>.match<span class="token punctuation">(</span>Pattern.java:4168<span class="token punctuation">)</span>        at java.util.regex.Pattern<span class="token variable">$Loop</span>.match<span class="token punctuation">(</span>Pattern.java:4295<span class="token punctuation">)</span>        <span class="token punctuation">..</span>.        at java.util.regex.Matcher.match<span class="token punctuation">(</span>Matcher.java:1127<span class="token punctuation">)</span>        at java.util.regex.Matcher.matches<span class="token punctuation">(</span>Matcher.java:502<span class="token punctuation">)</span>        at RegexLoad.main<span class="token punctuation">(</span>RegexLoad.java:27<span class="token punctuation">)</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span> Busy<span class="token punctuation">(</span>1.5%<span class="token punctuation">)</span> thread<span class="token punctuation">(</span>8591/0x218f<span class="token punctuation">)</span> stack of java process<span class="token punctuation">(</span>8576<span class="token punctuation">)</span> under user<span class="token punctuation">(</span>work<span class="token punctuation">)</span>:<span class="token string">"C2 CompilerThread1"</span> daemon prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007f0c64095800 nid<span class="token operator">=</span>0x218f waiting on condition <span class="token punctuation">[</span>0x0000000000000000<span class="token punctuation">]</span>   java.lang.Thread.State: RUNNABLE<span class="token punctuation">[</span>3<span class="token punctuation">]</span> Busy<span class="token punctuation">(</span>0.8%<span class="token punctuation">)</span> thread<span class="token punctuation">(</span>8590/0x218e<span class="token punctuation">)</span> stack of java process<span class="token punctuation">(</span>8576<span class="token punctuation">)</span> under user<span class="token punctuation">(</span>work<span class="token punctuation">)</span>:<span class="token string">"C2 CompilerThread0"</span> daemon prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007f0c64093000 nid<span class="token operator">=</span>0x218e waiting on condition <span class="token punctuation">[</span>0x0000000000000000<span class="token punctuation">]</span>   java.lang.Thread.State: RUNNABLE<span class="token punctuation">[</span>4<span class="token punctuation">]</span> Busy<span class="token punctuation">(</span>0.2%<span class="token punctuation">)</span> thread<span class="token punctuation">(</span>8593/0x2191<span class="token punctuation">)</span> stack of java process<span class="token punctuation">(</span>8576<span class="token punctuation">)</span> under user<span class="token punctuation">(</span>work<span class="token punctuation">)</span>:<span class="token string">"VM Periodic Task Thread"</span> prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007f0c640a2800 nid<span class="token operator">=</span>0x2191 waiting on condition <span class="token punctuation">[</span>5<span class="token punctuation">]</span> Busy<span class="token punctuation">(</span>0.1%<span class="token punctuation">)</span> thread<span class="token punctuation">(</span>25159/0x6247<span class="token punctuation">)</span> stack of java process<span class="token punctuation">(</span>25137<span class="token punctuation">)</span> under user<span class="token punctuation">(</span>work<span class="token punctuation">)</span>:<span class="token string">"VM Periodic Task Thread"</span> prio<span class="token operator">=</span>10 tid<span class="token operator">=</span>0x00007f13340b4000 nid<span class="token operator">=</span>0x6247 waiting on condition work@dev_zz_Master 10.48.186.32 23:46:04 ~/demo <span class="token operator">></span></code></pre><p>可以看到，一键直接定位异常代码行，是不是很方便？</p><h1 id="2-线程死锁，程序-hang-住"><a href="#2-线程死锁，程序-hang-住" class="headerlink" title="2. 线程死锁，程序 hang 住"></a>2. 线程死锁，程序 hang 住</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleDeadLock</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object l1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object l2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Thread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 1: Holding lock 1..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span> Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 1: Waiting for lock 2..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 2: Holding lock 1 &amp; 2..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Thread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 2: Holding lock 2..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span> Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 2: Waiting for lock 1..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread 2: Holding lock 2 &amp; 1..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行之后的效果：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/004024_1mKu_568818.png"></p><p>如何用工具定位：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/004314_1iHO_568818.png"></p><p>一键定位：可以清晰的看到线程互相锁住了对方等待的资源，导致死锁，直接定位到代码行和具体原因。</p><p>通过上面两个例子，我想各位同学应该对这个工具和工具能解决什么问题有了比较深刻的了解了，遇到 CPU 100% 问题可以从此不再慌乱。但是更多的还是依赖大家自己去实践，毕竟实践出真知嘛~</p><h1 id="3-免费实用的脚本工具大礼包"><a href="#3-免费实用的脚本工具大礼包" class="headerlink" title="3. 免费实用的脚本工具大礼包"></a>3. 免费实用的脚本工具大礼包</h1><p>除了正文提到的 show-busy-java-threads.sh，oldratlee 同学还整合和不少常见的开发、运维过程中涉及到的脚本工具，觉得特别有用的我简单列下：</p><h2 id="3-1-show-duplicate-java-classes"><a href="#3-1-show-duplicate-java-classes" class="headerlink" title="3.1 show-duplicate-java-classes"></a>3.1 show-duplicate-java-classes</h2><p>偶尔会遇到本地开发、测试都正常，上线后却莫名其妙的 class 异常，历经千辛万苦找到的原因竟然是 Jar冲突！这个工具就可以找出Java Lib（Java库，即Jar文件）或Class目录（类目录）中的重复类。</p><p>Java开发的一个麻烦的问题是Jar冲突（即多个版本的Jar），或者说重复类。会出NoSuchMethod等的问题，还不见得当时出问题。找出有重复类的Jar，可以防患未然。</p><blockquote><p># 查找当前目录下所有Jar中的重复类<br>show-duplicate-java-classes</p><p># 查找多个指定目录下所有Jar中的重复类<br>show-duplicate-java-classes path/to/lib_dir1 /path/to/lib_dir2</p><p># 查找多个指定Class目录下的重复类。 Class目录 通过 -c 选项指定<br>show-duplicate-java-classes -c path/to/class_dir1 -c /path/to/class_dir2</p><p># 查找指定Class目录和指定目录下所有Jar中的重复类的Jar<br>show-duplicate-java-classes path/to/lib_dir1 /path/to/lib_dir2 -c path/to/class_dir1 -c path/to/class_dir2</p></blockquote><p>例如：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在war模块目录下执行，生成war文件</span>$ mvn <span class="token function">install</span><span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 解压war文件，war文件中包含了应用的依赖的Jar文件</span>$ unzip target/*.war -d target/war<span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 检查重复类</span>$ show-duplicate-java-classes -c target/war/WEB-INF/classes target/war/WEB-INF/lib<span class="token punctuation">..</span>.</code></pre><h2 id="3-2-find-in-jars"><a href="#3-2-find-in-jars" class="headerlink" title="3.2 find-in-jars"></a>3.2 find-in-jars</h2><p>在当前目录下所有jar文件里，查找类或资源文件。</p><p>用法：注意，后面Pattern是grep的 扩展正则表达式。</p><pre class=" language-bash"><code class="language-bash">find-in-jars <span class="token string">'log4j\.properties'</span>find-in-jars <span class="token string">'log4j\.xml$'</span> -d /path/to/find/directoryfind-in-jars log4j\\.xmlfind-in-jars <span class="token string">'log4j\.properties|log4j\.xml'</span></code></pre><p>示例：</p><pre class=" language-bash"><code class="language-bash">$ ./find-in-jars <span class="token string">'Service.class$'</span>./WEB-INF/libs/spring-2.5.6.SEC03.jar<span class="token operator">!</span>org/springframework/stereotype/Service.class./rpc-benchmark-0.0.1-SNAPSHOT.jar<span class="token operator">!</span>com/taobao/rpc/benchmark/service/HelloService.class</code></pre><h2 id="3-3-housemd-pid-java-home"><a href="#3-3-housemd-pid-java-home" class="headerlink" title="3.3 housemd pid [java_home]"></a>3.3 housemd pid [java_home]</h2><p>很早的时候，我们使用BTrace排查问题，在感叹BTrace的强大之余，也曾好几次将线上系统折腾挂掉。2012年淘宝的聚石写了HouseMD，将常用的几个Btrace脚本整合在一起形成一个独立风格的应用，其核心代码用的是Scala，HouseMD是基于字节码技术的诊断工具, 因此除了Java以外, 任何最终以字节码形式运行于JVM之上的语言, HouseMD都支持对它们进行诊断，如Clojure(感谢@Killme2008提供了它的使用入门), scala, Groovy, JRuby, Jython, kotlin等.</p><p>使用housemd对java程序进行运行时跟踪，支持的操作有：</p><ul><li>查看加载类</li><li>跟踪方法</li><li>查看环境变量</li><li>查看对象属性值</li><li>详细信息请参考: <a href="https://github.com/CSUG/HouseMD/wiki/UserGuideCN" target="_blank" rel="noopener">https://github.com/CSUG/HouseMD/wiki/UserGuideCN</a></li></ul><h2 id="3-4-jvm-pid"><a href="#3-4-jvm-pid" class="headerlink" title="3.4 jvm pid"></a>3.4 jvm pid</h2><p>执行jvm debug工具，包含对java栈、堆、线程、gc等状态的查看，支持的功能有：</p><pre><code>========线程相关=======1 : 查看占用cpu最高的线程情况2 : 打印所有线程3 : 打印线程数4 : 按线程状态统计线程数========GC相关=======5 : 垃圾收集统计（包含原因）可以指定间隔时间及执行次数，默认1秒, 10次6 : 显示堆中各代的空间可以指定间隔时间及执行次数，默认1秒，5次7 : 垃圾收集统计。可以指定间隔时间及执行次数，默认1秒, 10次8 : 打印perm区内存情况*会使程序暂停响应*9 : 查看directbuffer情况========堆对象相关=======10 : dump heap到文件*会使程序暂停响应*默认保存到`pwd`/dump.bin,可指定其它路径11 : 触发full gc。*会使程序暂停响应*12 : 打印jvm heap统计*会使程序暂停响应*13 : 打印jvm heap中top20的对象。*会使程序暂停响应*参数：1:按实例数量排序,2:按内存占用排序，默认为114 : 触发full gc后打印jvm heap中top20的对象。*会使程序暂停响应*参数：1:按实例数量排序,2:按内存占用排序，默认为115 : 输出所有类装载器在perm里产生的对象。可以指定间隔时间及执行次数========其它=======16 : 打印finalzer队列情况17 : 显示classloader统计18 : 显示jit编译统计19 : 死锁检测20 : 等待X秒，默认为1q : exit</code></pre><p>进入jvm工具后可以输入序号执行对应命令<br>可以一次执行多个命令，用分号”;”分隔，如：1;3;4;5;6<br>每个命令可以带参数，用冒号”:”分隔，同一命令的参数之间用逗号分隔，如：<br>Enter command queue:1;5:1000,100;10:/data1/output.bin</p><h2 id="3-5-greys-pid-IP-PORT"><a href="#3-5-greys-pid-IP-PORT" class="headerlink" title="3.5 greys pid [IP:PORT]"></a>3.5 greys pid [IP:PORT]</h2><p>PS：目前Greys仅支持Linux/Unix/Mac上的Java6+，Windows暂时无法支持</p><p>Greys是一个JVM进程执行过程中的异常诊断工具，可以在不中断程序执行的情况下轻松完成问题排查工作。和HouseMD一样，Greys-Anatomy取名同名美剧“实习医生格蕾”，目的是向前辈致敬。代码编写的时候参考了BTrace和HouseMD两个前辈的思路。</p><p>使用greys对java程序进行运行时跟踪(不传参数，需要先<code>greys -C pid</code>,再greys)。支持的操作有：</p><ul><li>查看加载类，方法信息</li><li>查看JVM当前基础信息</li><li>方法执行监控（调用量，失败率，响应时间等）</li><li>方法执行数据观测、记录与回放（参数，返回结果，异常信息等）</li><li>方法调用追踪渲染</li><li>详细信息请参考: <a href="https://github.com/oldmanpushcart/greys-anatomy/wiki" target="_blank" rel="noopener">https://github.com/oldmanpushcart/greys-anatomy/wiki</a></li></ul><h2 id="3-6-sjk-sjk-–commands-sjk-–help"><a href="#3-6-sjk-sjk-–commands-sjk-–help" class="headerlink" title="3.6 sjk   sjk –commands sjk –help "></a>3.6 sjk <cmd> <arguments> sjk –commands sjk –help <cmd></cmd></arguments></cmd></h2><p>使用sjk对Java诊断、性能排查、优化工具</p><ul><li>ttop:监控指定jvm进程的各个线程的cpu使用情况</li><li>jps: 强化版</li><li>hh: jmap -histo强化版</li><li>gc: 实时报告垃圾回收信息</li><li>更多信息请参考: <a href="https://github.com/aragozin/jvm-tools" target="_blank" rel="noopener">https://github.com/aragozin/jvm-tools</a></li></ul><h1 id="Refer："><a href="#Refer：" class="headerlink" title="Refer："></a>Refer：</h1><p>[1] oldratlee/useful-scripts</p><p><a href="https://github.com/oldratlee/useful-scripts" target="_blank" rel="noopener">https://github.com/oldratlee/useful-scripts</a></p><p>[2] awesome-scripts</p><p><a href="https://github.com/superhj1987/awesome-scripts" target="_blank" rel="noopener">https://github.com/superhj1987/awesome-scripts</a></p><p>[3] JDK自带工具之问题排查场景示例</p><p><a href="http://bit.ly/2xtukcb" target="_blank" rel="noopener">http://bit.ly/2xtukcb</a></p><p>[4] Java调优经验谈</p><p><a href="http://bit.ly/2xCIj2L" target="_blank" rel="noopener">http://bit.ly/2xCIj2L</a></p><p>[5] jvm排查工具箱jvm-tools</p><p><a href="https://segmentfault.com/a/1190000012658814" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012658814</a></p><p>[6] alibaba/arthas</p><p><a href="https://github.com/alibaba/arthas/blob/7f236219ddbd040764dd821cbcbd44899dd57c90/README.md" target="_blank" rel="noopener">https://github.com/alibaba/arthas/blob/7f236219ddbd040764dd821cbcbd44899dd57c90/README.md</a></p><blockquote><p>原文链接： <a href="https://my.oschina.net/leejun2005/blog/1524687" target="_blank" rel="noopener">https://my.oschina.net/leejun2005/blog/1524687</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 问题定位分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.磁盘IO高分析方法</title>
      <link href="posts/818cdaca.html"/>
      <url>posts/818cdaca.html</url>
      
        <content type="html"><![CDATA[<p>磁盘IO高分析方法<br>工具准备：<br>iotop: <a href="http://guichaz.free.fr/iotop/" target="_blank" rel="noopener">http://guichaz.free.fr/iotop/</a><br>pt-ioprofile:<a href="http://www.percona.com/downloads/percona-toolkit/2.2.1/" target="_blank" rel="noopener">http://www.percona.com/downloads/percona-toolkit/2.2.1/</a></p><p>io高分析方法：</p><p>1、查看磁盘使用率 df -lh<br>2、安装iostat 安装命令:yum install sysstat<br>3、iostat -d -k 2 查看IO情况，哪个磁盘的IO负载较高，接下来我们就来定位具体的负载来源</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/7a41il5prcc3yekitywrz0korn8d4aq7.png"></p><p>%util: 一秒中有百分之多少的时间用于 I/O 操作，或者说一秒中有多少时间 I/O 队列是非空的。即 delta(use)/s/1000 (因为use的单位为毫秒)<br>如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/3hb4shrbva0fgbedxywhnmhbkesoqskw.png"></p><p>4、安装iotop 命令：安装命令：yum install iotop iotop 查看哪个线程耗IO比较高、按 o 只显示有磁盘 IO 活动的进程。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/f0jcsfvdwv7pblvosgt9k5slp5ug2t07.png"></p><p>5、pt-ioprofile定位负载来源文件<br>pt-ioprofile –profile-pid=1236 –cell=sizes<br>pt-ioprofile的原理是对某个pid附加一个strace进程进行IO分析。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/c4k344ar0ihfvz6b8de07rvllz9xd7kg.png"></p><p>6、 对于定位问题更有用的是通过IO的吞吐量来进行定位。使用参数 –cell=sizes，该参数将结果已 B/s 的方式展示出来<br>pt-ioprofile –profile-pid=1236 –cell=sizes<br>从上图可以看出IO负载的主要来源是jetty。<br>并且压力主要集中在读取上。</p><blockquote><p>原文链接：<a href="https://urlify.cn/JNRVJb" target="_blank" rel="noopener">https://urlify.cn/JNRVJb</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 问题定位分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.通过jstack和jmap排查线上问题</title>
      <link href="posts/882ef194.html"/>
      <url>posts/882ef194.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、发现问题"><a href="#一、发现问题" class="headerlink" title="一、发现问题"></a>一、发现问题</h1><p> 下面是线上机器的cpu使用率，可以看到从4月8日开始，随着时间cpu使用率在逐步增高，最终使用率达到100%导致线上服务不可用，后面重启了机器后恢复。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1196330-20180514003417351-1333416698.png"></p><h1 id="二、排查思路"><a href="#二、排查思路" class="headerlink" title="二、排查思路"></a>二、排查思路</h1><p>简单分析下可能出问题的地方，分为5个方向：</p><p>1.系统本身代码问题</p><p>2.内部下游系统的问题导致的雪崩效应</p><p>3.上游系统调用量突增</p><p>4.http请求第三方的问题</p><p>5.机器本身的问题</p><h1 id="三、开始排查"><a href="#三、开始排查" class="headerlink" title="三、开始排查"></a>三、开始排查</h1><p>1.查看日志，没有发现集中的错误日志，<strong>初步排除代码逻辑处理错误。</strong></p><p>2.首先联系了内部下游系统观察了他们的监控，发现一起正常。<strong>可以排除下游系统故障对我们的影响。</strong></p><p>3.查看provider接口的调用量，对比7天没有突增，<strong>排除业务方调用量的问题。</strong></p><p>4.查看tcp监控，TCP状态正常，<strong>可以排除是http请求第三方超时带来的问题。</strong></p><p>5.查看机器监控，6台机器cpu都在上升，每个机器情况一样。<strong>排除机器故障问题。</strong></p><p> <strong>即通过上述方法没有直接定位到问题。</strong></p><h1 id="四、解决方案"><a href="#四、解决方案" class="headerlink" title="四、解决方案"></a>四、解决方案</h1><p>1.重启了6台中问题比较严重的5台机器，先恢复业务。保留一台现场，用来分析问题。</p><p>2.查看当前的tomcat线程pid</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1196330-20180514004234948-269659542.png"></p><p>3.查看该pid下线程对应的系统占用情况。top -Hp 384</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1196330-20180514100850741-1821148052.png"></p><p>4.发现pid 4430 4431 4432 4433 线程分别占用了约40%的cpu</p><p>5.将这几个pid转为16进制，分别为114e 114f 1150 1151</p><p>6.下载当前的java线程栈 sudo -u tomcat jstack -l 384&gt;/1.txt</p><p>7.查询5中对应的线程情况，发现都是gc线程导致的</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1196330-20180514100916449-1325278223.png"></p><p>8.dump java堆数据</p><p>sudo -u tomcat jmap -dump:live,format=b,file=/dump201612271310.dat 384</p><p>9.使用MAT加载堆文件，可以看到javax.crypto.JceSecurity对象占用了95%的内存空间，初步定位到问题。</p><p>MAT下载地址：<a href="http://www.eclipse.org/mat/" target="_blank" rel="noopener">http://www.eclipse.org/mat/</a></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1196330-20180514101651715-90687757.png"></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1196330-20180514101016818-56682802.png"></p><p>10.查看类的引用树，看到BouncyCastleProvider对象持有过多。即我们代码中对该对象的处理方式是错误的，定位到问题。</p><h1 id="五、代码分析"><a href="#五、代码分析" class="headerlink" title="五、代码分析"></a>五、代码分析</h1><p>我们代码中有一块是这样写的</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1196330-20180514101048185-1240846024.png"></p><p>这是加解密的功能，每次运行加解密都会new一个BouncyCastleProvider对象,放倒Cipher.getInstance()方法中。</p><p>看下Cipher.getInstance()的实现，这是jdk的底层代码实现，追踪到JceSecurity类中</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1196330-20180514101116518-700840740.png"></p><p>verifyingProviders每次put后都会remove,verificationResults只会put，不会remove.</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1196330-20180514101143847-178910545.png"></p><p>看到verificationResults是一个static的map，即属于JceSecurity类的。</p><p><strong>所以每次运行到加解密都会向这个map put一个对象，而这个map属于类的维度，所以不会被GC回收。这就导致了大量的new的对象不被回收。</strong></p><h1 id="六、代码改进"><a href="#六、代码改进" class="headerlink" title="六、代码改进"></a>六、代码改进</h1><p><strong>将有问题的对象置为static，每个类持有一个，不会多次新建。</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1196330-20180514101210937-1764782322.png"></p><h1 id="七、本文总结"><a href="#七、本文总结" class="headerlink" title="七、本文总结"></a>七、本文总结</h1><p>遇到线上问题不要慌，首先确认排查问题的思路：</p><ol><li>查看日志</li><li>查看CPU情况</li><li>查看TCP情况</li><li>查看java线程，jstack</li><li>查看java堆，jmap</li><li>通过MAT分析堆文件，寻找无法被回收的对象</li></ol><blockquote><p>原文链接：<a href="https://urlify.cn/Q3Ar6z" target="_blank" rel="noopener">https://urlify.cn/Q3Ar6z</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 问题定位分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Java基础</title>
      <link href="posts/34d499be.html"/>
      <url>posts/34d499be.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1.java%E5%9F%BA%E7%A1%80-1607265006377.png"></p>]]></content>
      
      
      <categories>
          
          <category> 思维导图 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Linux常用命令</title>
      <link href="posts/65459ec0.html"/>
      <url>posts/65459ec0.html</url>
      
        <content type="html"><![CDATA[<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><p>Linux系统的命令通常都是如下所示的格式：</p><pre class=" language-Shell"><code class="language-Shell">命令名称 [命名参数] [命令对象]</code></pre><ol><li><p>获取登录信息 - <strong>w</strong> / <strong>who</strong> / <strong>last</strong>/ <strong>lastb</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# w 23:31:16 up 12:16,  2 users,  load average: 0.00, 0.01, 0.05USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATroot     pts/0    182.139.66.250   23:03    4.00s  0.02s  0.00s wjackfrue pts/1    182.139.66.250   23:26    3:56   0.00s  0.00s -bash[root ~]# whoroot     pts/0        2018-04-12 23:03 (182.139.66.250)jackfrued pts/1        2018-04-12 23:26 (182.139.66.250)[root ~]# who am iroot     pts/0        2018-04-12 23:03 (182.139.66.250)[root ~]# who mom likesroot     pts/0        2018-04-12 23:03 (182.139.66.250)[root ~]# lastroot     pts/0        117.136.63.184   Sun May 26 18:57   still logged in   reboot   system boot  3.10.0-957.10.1. Mon May 27 02:52 - 19:10  (-7:-42)   root     pts/4        117.136.63.184   Sun May 26 18:51 - crash  (08:01)    root     pts/4        117.136.63.184   Sun May 26 18:49 - 18:49  (00:00)    root     pts/3        117.136.63.183   Sun May 26 18:35 - crash  (08:17)    root     pts/2        117.136.63.183   Sun May 26 18:34 - crash  (08:17)    root     pts/0        117.136.63.183   Sun May 26 18:10 - crash  (08:42)    </code></pre></li><li><p>查看自己使用的Shell - <strong>ps</strong>。</p><p>Shell也被称为“壳”或“壳程序”，它是用户与操作系统内核交流的翻译官，简单的说就是人与计算机交互的界面和接口。目前很多Linux系统默认的Shell都是bash（<u>B</u>ourne <u>A</u>gain <u>SH</u>ell），因为它可以使用tab键进行命令和路径补全、可以保存历史命令、可以方便的配置环境变量以及执行批处理操作。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# ps  PID TTY          TIME CMD 3531 pts/0    00:00:00 bash 3553 pts/0    00:00:00 ps</code></pre></li><li><p>查看命令的说明和位置 - <strong>whatis</strong> / <strong>which</strong> / <strong>whereis</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# whatis psps (1)        - report a snapshot of the current processes.[root ~]# whatis pythonpython (1)    - an interpreted, interactive, object-oriented programming language[root ~]# whereis psps: /usr/bin/ps /usr/share/man/man1/ps.1.gz[root ~]# whereis pythonpython: /usr/bin/python /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /etc/python /usr/include/python2.7 /usr/share/man/man1/python.1.gz[root ~]# which ps/usr/bin/ps[root ~]# which python/usr/bin/python</code></pre></li><li><p>清除屏幕上显示的内容 - <strong>clear</strong>。</p></li><li><p>查看帮助文档 - <strong>man</strong> / <strong>info</strong> / <strong>help</strong> / <strong>apropos</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# ps --helpUsage: ps [options] Try 'ps --help <simple|list|output|threads|misc|all>'  or 'ps --help <s|l|o|t|m|a>' for additional help text.For more details see ps(1).[root@izwz97tbgo9lkabnat2lo8z ~]# man psPS(1)                                User Commands                                PS(1)NAME       ps - report a snapshot of the current processes.SYNOPSIS       ps [options]DESCRIPTION...</code></pre></li><li><p>查看系统和主机名 - <strong>uname</strong> / <strong>hostname</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@izwz97tbgo9lkabnat2lo8z ~]# unameLinux[root@izwz97tbgo9lkabnat2lo8z ~]# hostnameizwz97tbgo9lkabnat2lo8z[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-releaseCentOS Linux release 7.6.1810 (Core)</code></pre><blockquote><p>说明：<code>cat</code>是连接文件内容并打印到标准输出的命令，后面会讲到该命令；<code>/etc</code>是Linux系统上的一个非常重要的目录，它保存了很多的配置文件；<code>centos-release</code>是该目录下的一个文件，因为我自己使用的Linux发行版本是CentOS 7.6，因此这里会有一个这样的文件。</p></blockquote></li><li><p>时间和日期 - <strong>date</strong> / <strong>cal</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# dateWed Jun 20 12:53:19 CST 2018[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal      June 2018Su Mo Tu We Th Fr Sa                1  2 3  4  5  6  7  8  910 11 12 13 14 15 1617 18 19 20 21 22 2324 25 26 27 28 29 30[root@iZwz97tbgo9lkabnat2lo8Z ~]# cal 5 2017      May 2017Su Mo Tu We Th Fr Sa    1  2  3  4  5  6 7  8  9 10 11 12 1314 15 16 17 18 19 2021 22 23 24 25 26 2728 29 30 31</code></pre></li><li><p>重启和关机 - <strong>reboot</strong> / <strong>shutdown</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# shutdown -h +5Shutdown scheduled for Sun 2019-05-26 19:34:27 CST, use 'shutdown -c' to cancel.[root ~]# Broadcast message from root (Sun 2019-05-26 19:29:27 CST):The system is going down for power-off at Sun 2019-05-26 19:34:27 CST![root ~]# shutdown -cBroadcast message from root (Sun 2019-05-26 19:30:22 CST):The system shutdown has been cancelled at Sun 2019-05-26 19:31:22 CST![root ~]# shutdown -r 23:58Shutdown scheduled for Sun 2019-05-26 23:58:00 CST, use 'shutdown -c' to cancel.[root ~]# shutdown -cBroadcast message from root (Sun 2019-05-26 19:31:06 CST):The system shutdown has been cancelled at Sun 2019-05-26 19:32:06 CST!</code></pre><blockquote><p>说明：在执行<code>shutdown</code>命令时会向登录系统的用户发出警告，可以在命令后面跟上警告消息来替换默认的警告消息，也可以在<code>-h</code>参数后通过<code>now</code>来表示立刻关机。</p></blockquote></li><li><p>退出登录 -  <strong>exit</strong> / <strong>logout</strong>。</p></li><li><p>查看历史命令 - <strong>history</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# history...452  ls453  cd Python-3.6.5/454  clear455  history[root@iZwz97tbgo9lkabnat2lo8Z ~]# !454</code></pre><blockquote><p>说明：查看到历史命令之后，可以用<code>!历史命令编号</code>来重新执行该命令；通过<code>history -c</code>可以清除历史命令。</p></blockquote></li></ol><h3 id="实用程序"><a href="#实用程序" class="headerlink" title="实用程序"></a>实用程序</h3><h4 id="文件和文件夹操作"><a href="#文件和文件夹操作" class="headerlink" title="文件和文件夹操作"></a>文件和文件夹操作</h4><ol><li><p>创建/删除空目录 - <strong>mkdir</strong> / <strong>rmdir</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# mkdir abc[root ~]# mkdir -p xyz/abc[root ~]# rmdir abc</code></pre></li><li><p>创建/删除文件 - <strong>touch</strong> / <strong>rm</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# touch readme.txt[root ~]# touch error.txt[root ~]# rm error.txtrm: remove regular empty file ‘error.txt’? y[root ~]# rm -rf xyz</code></pre><ul><li><code>touch</code>命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间：<ul><li>更改内容的时间 - mtime。</li><li>更改权限的时间 - ctime。</li><li>最后访问时间 - atime。</li></ul></li><li><code>rm</code>的几个重要参数：<ul><li><code>-i</code>：交互式删除，每个删除项都会进行询问。</li><li><code>-r</code>：删除目录并递归的删除目录中的文件和目录。</li><li><code>-f</code>：强制删除，忽略不存在的文件，没有任何提示。</li></ul></li></ul></li><li><p>切换和查看当前工作目录 - <strong>cd</strong> / <strong>pwd</strong>。</p><blockquote><p>说明：<code>cd</code>命令后面可以跟相对路径（以当前路径作为参照）或绝对路径（以<code>/</code>开头）来切换到指定的目录，也可以用<code>cd ..</code>来返回上一级目录。请大家想一想，如果要返回到上上一级目录应该给<code>cd</code>命令加上什么样的参数呢？</p></blockquote></li><li><p>查看目录内容 - <strong>ls</strong>。</p><ul><li><code>-l</code>：以长格式查看文件和目录。</li><li><code>-a</code>：显示以点开头的文件和目录（隐藏文件）。</li><li><code>-R</code>：遇到目录要进行递归展开（继续列出目录下面的文件和目录）。</li><li><code>-d</code>：只列出目录，不列出其他内容。</li><li><code>-S</code> / <code>-t</code>：按大小/时间排序。</li></ul></li><li><p>查看文件内容 - <strong>cat</strong> / <strong>tac</strong> / <strong>head</strong> / <strong>tail</strong> / <strong>more</strong> / <strong>less</strong> / <strong>rev</strong> / <strong>od</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# wget http://www.sohu.com/ -O sohu.html--2018-06-20 18:42:34--  http://www.sohu.com/Resolving www.sohu.com (www.sohu.com)... 14.18.240.6Connecting to www.sohu.com (www.sohu.com)|14.18.240.6|:80... connected.HTTP request sent, awaiting response... 200 OKLength: 212527 (208K) [text/html]Saving to: ‘sohu.html’100%[==================================================>] 212,527     --.-K/s   in 0.03s2018-06-20 18:42:34 (7.48 MB/s) - ‘sohu.html’ saved [212527/212527][root ~]# cat sohu.html...[root ~]# head -10 sohu.html<!DOCTYPE html><html><head><title>搜狐</title><meta name="Keywords" content="搜狐,门户网站,新媒体,网络媒体,新闻,财经,体育,娱乐,时尚,汽车,房产,科技,图片,论坛,微博,博客,视频,电影,电视剧"/><meta name="Description" content="搜狐网为用户提供24小时不间断的最新资讯，及搜索、邮件等网络服务。内容包括全球热点事件、突发新闻、时事评论、热播影视剧、体育赛事、行业动态、生活服务信息，以及论坛、博客、微博、我的搜狐等互动空间。" /><meta name="shenma-site-verification" content="1237e4d02a3d8d73e96cbd97b699e9c3_1504254750"><meta charset="utf-8"/><meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"/>[root ~]# tail -2 sohu.html</body></html>[root ~]# less sohu.html...[root ~]# cat -n sohu.html | more...</code></pre><blockquote><p>说明：上面用到了一个名为<code>wget</code>的命令，它是一个网络下载器程序，可以从指定的URL下载资源。</p></blockquote></li><li><p>拷贝/移动文件 - <strong>cp</strong> / <strong>mv</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# mkdir backup[root ~]# cp sohu.html backup/[root ~]# cd backup[root backup]# lssohu.html[root backup]# mv sohu.html sohu_index.html[root backup]# lssohu_index.html</code></pre></li><li><p>文件重命名 - <strong>rename</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# rename .htm .html *.htm</code></pre></li><li><p>查找文件和查找内容 - <strong>find</strong> / <strong>grep</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find / -name "*.html"/root/sohu.html/root/backup/sohu_index.html[root@izwz97tbgo9lkabnat2lo8z ~]# find . -atime 7 -type f -print[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -size +2k[root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -name "*.swp" -delete[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep "<script>" sohu.html -n20:<script>[root@iZwz97tbgo9lkabnat2lo8Z ~]# grep -E \<\/?script.*\> sohu.html -n20:<script>22:</script>24:<script src="//statics.itc.cn/web/v3/static/js/es5-shim-08e41cfc3e.min.js"></script>25:<script src="//statics.itc.cn/web/v3/static/js/es5-sham-1d5fa1124b.min.js"></script>26:<script src="//statics.itc.cn/web/v3/static/js/html5shiv-21fc8c2ba6.js"></script>29:<script type="text/javascript">52:</script>...</code></pre><blockquote><p>说明：<code>grep</code>在搜索字符串时可以使用正则表达式，如果需要使用正则表达式可以用<code>grep -E</code>或者直接使用<code>egrep</code>。</p></blockquote></li><li><p>创建链接和查看链接 - <strong>ln</strong> / <strong>readlink</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 1 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 2 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup2[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html-rw-r--r-- 3 root root 212131 Jun 20 19:15 sohu.html[root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /etc/centos-release sysinfo[root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sysinfolrwxrwxrwx 1 root root 19 Jun 20 19:21 sysinfo -> /etc/centos-release[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sysinfoCentOS Linux release 7.4.1708 (Core)[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-releaseCentOS Linux release 7.4.1708 (Core)</code></pre><blockquote><p>说明：链接可以分为硬链接和软链接（符号链接）。硬链接可以认为是一个指向文件数据的指针，就像Python中对象的引用计数，每添加一个硬链接，文件的对应链接数就增加1，只有当文件的链接数为0时，文件所对应的存储空间才有可能被其他文件覆盖。我们平常删除文件时其实并没有删除硬盘上的数据，我们删除的只是一个指针，或者说是数据的一条使用记录，所以类似于“文件粉碎机”之类的软件在“粉碎”文件时除了删除文件指针，还会在文件对应的存储区域填入数据来保证文件无法再恢复。软链接类似于Windows系统下的快捷方式，当软链接链接的文件被删除时，软链接也就失效了。</p></blockquote></li><li><p>压缩/解压缩和归档/解归档 - <strong>gzip</strong> / <strong>gunzip</strong> / <strong>xz</strong>。</p><p>```Shell<br>[root@iZwz97tbgo9lkabnat2lo8Z ~]# wget <a href="http://download.redis.io/releases/redis-4.0.10.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-4.0.10.tar.gz</a></p></li></ol><p>  –2018-06-20 19:29:59–  <a href="http://download.redis.io/releases/redis-4.0.10.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-4.0.10.tar.gz</a><br>  Resolving download.redis.io (download.redis.io)… 109.74.203.151<br>  Connecting to download.redis.io (download.redis.io)|109.74.203.151|:80… connected.<br>  HTTP request sent, awaiting response… 200 OK<br>  Length: 1738465 (1.7M) [application/x-gzip]<br>  Saving to: ‘redis-4.0.10.tar.gz’<br>  100%[==================================================&gt;] 1,738,465   70.1KB/s   in 74s<br>  2018-06-20 19:31:14 (22.9 KB/s) - ‘redis-4.0.10.tar.gz’ saved [1738465/1738465]<br>  [root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*<br>  redis-4.0.10.tar.gz<br>  [root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-4.0.10.tar.gz<br>  [root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis*<br>  redis-4.0.10.tar</p><pre><code>11. 归档和解归档 - **tar**。 ```Shell [root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-4.0.10.tar redis-4.0.10/ redis-4.0.10/.gitignore redis-4.0.10/00-RELEASENOTES redis-4.0.10/BUGS redis-4.0.10/CONTRIBUTING redis-4.0.10/COPYING redis-4.0.10/INSTALL redis-4.0.10/MANIFESTO redis-4.0.10/Makefile redis-4.0.10/README.md redis-4.0.10/deps/ redis-4.0.10/deps/Makefile redis-4.0.10/deps/README.md ...</code></pre><blockquote><p>说明：归档（也称为创建归档）和解归档都使用<code>tar</code>命令，通常创建归档需要<code>-cvf</code>三个参数，其中<code>c</code>表示创建（create），<code>v</code>表示显示创建归档详情（verbose），<code>f</code>表示指定归档的文件（file）；解归档需要加上<code>-xvf</code>参数，其中<code>x</code>表示抽取（extract），其他两个参数跟创建归档相同。</p></blockquote><ol start="12"><li><p>将标准输入转成命令行参数 - <strong>xargs</strong>。</p><p>下面的命令会将查找当前路径下的html文件，然后通过<code>xargs</code>将这些文件作为参数传给<code>rm</code>命令，实现查找并删除文件的操作。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# find . -type f -name "*.html" | xargs rm -f</code></pre><p>下面的命令将a.txt文件中的多行内容变成一行输出到b.txt文件中，其中<code>&lt;</code>表示从a.txt中读取输入，<code>&gt;</code>表示将命令的执行结果输出到b.txt中。</p><pre class=" language-Shell"><code class="language-Shell">[root@iZwz97tbgo9lkabnat2lo8Z ~]# xargs < a.txt > b.txt</code></pre><blockquote><p>说明：这个命令就像上面演示的那样常在管道（实现进程间通信的一种方式）和重定向（重新指定输入输出的位置）操作中用到，后面的内容中会讲到管道操作和输入输出重定向操作。</p></blockquote></li><li><p>显示文件或目录 - <strong>basename</strong> / <strong>dirname</strong>。</p></li><li><p>其他相关工具。 </p></li></ol><ul><li><p><strong>sort</strong> - 对内容排序</p></li><li><p><strong>uniq</strong> - 去掉相邻重复内容</p></li><li><p><strong>tr</strong> - 替换指定内容为新内容</p></li><li><p><strong>cut</strong> / <strong>paste</strong> - 剪切/黏贴内容</p></li><li><p><strong>split</strong> - 拆分文件</p></li><li><p><strong>file</strong> - 判断文件类型</p></li><li><p><strong>wc</strong> - 统计文件行数、单词数、字节数</p></li><li><p><strong>iconv</strong> - 编码转换</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# cat foo.txtgrapeapplepitaya[root ~]# cat bar.txt100200300400[root ~]# paste foo.txt bar.txtgrape   100apple   200pitaya  300      400[root ~]# paste foo.txt bar.txt > hello.txt[root ~]# cut -b 4-8 hello.txtpe      10le      20aya     30[root ~]# cat hello.txt | tr '\t' ','grape,100apple,200pitaya,300,400[root ~]# split -l 100 sohu.html hello[root ~]# wget https://www.baidu.com/img/bd_logo1.png[root ~]# file bd_logo1.pngbd_logo1.png: PNG image data, 540 x 258, 8-bit colormap, non-interlaced[root ~]# wc sohu.html2979   6355 212527 sohu.html[root ~]# wc -l sohu.html2979 sohu.html[root ~]# wget http://www.qq.com -O qq.html[root ~]# iconv -f gb2312 -t utf-8 qq.html</code></pre></li></ul><h4 id="管道和重定向"><a href="#管道和重定向" class="headerlink" title="管道和重定向"></a>管道和重定向</h4><ol><li><p>管道的使用 - **|**。</p><p>例子：查找当前目录下文件个数。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# find ./ | wc -l6152</code></pre><p>例子：列出当前路径下的文件和文件夹，给每一项加一个编号。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# ls | cat -n     1  dump.rdb     2  mongodb-3.6.5     3  Python-3.6.5     4  redis-3.2.11     5  redis.conf</code></pre><p>例子：查找record.log中包含AAA，但不包含BBB的记录的总数</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# cat record.log | grep AAA | grep -v BBB | wc -l</code></pre></li><li><p>输出重定向和错误重定向 - <strong>&gt;</strong> / <strong>&gt;&gt;</strong> / **2&gt;**。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# cat readme.txtbananaapplegrapeapplegrapewatermelonpearpitaya[root ~]# cat readme.txt | sort | uniq > result.txt[root ~]# cat result.txtapplebananagrapepearpitayawatermelon</code></pre></li><li><p>输入重定向 - **&lt;**。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# echo 'hello, world!' > hello.txt[root ~]# wall < hello.txt[root ~]#Broadcast message from root (Wed Jun 20 19:43:05 2018):hello, world![root ~]# echo 'I will show you some code.' >> hello.txt[root ~]# wall < hello.txt[root ~]#Broadcast message from root (Wed Jun 20 19:43:55 2018):hello, world!I will show you some code.</code></pre></li><li><p>多重定向 - <strong>tee</strong>。</p><p>下面的命令除了在终端显示命令<code>ls</code>的结果之外，还会追加输出到<code>ls.txt</code>文件中。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# ls | tee -a ls.txt</code></pre></li></ol><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><ol><li><p><strong>alias</strong></p><pre class=" language-Shell"><code class="language-Shell">[root ~]# alias ll='ls -l'[root ~]# alias frm='rm -rf'[root ~]# ll...drwxr-xr-x  2 root       root   4096 Jun 20 12:52 abc...[root ~]# frm abc</code></pre></li><li><p><strong>unalias</strong></p><pre class=" language-Shell"><code class="language-Shell">[root ~]# unalias frm[root ~]# frm sohu.html-bash: frm: command not found</code></pre></li></ol><h4 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h4><ol><li><p>字符流编辑器 - <strong>sed</strong>。</p><p>sed是操作、过滤和转换文本内容的工具。假设有一个名为fruit.txt的文件，内容如下所示。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# cat -n fruit.txt      1  banana     2  grape     3  apple     4  watermelon     5  orange</code></pre><p>接下来，我们在第2行后面添加一个pitaya。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# sed '2a pitaya' fruit.txt bananagrapepitayaapplewatermelonorange</code></pre><blockquote><p>注意：刚才的命令和之前我们讲过的很多命令一样并没有改变fruit.txt文件，而是将添加了新行的内容输出到终端中，如果想保存到fruit.txt中，可以使用输出重定向操作。</p></blockquote><p>在第2行前面插入一个waxberry。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# sed '2i waxberry' fruit.txtbananawaxberrygrapeapplewatermelonorange</code></pre><p>删除第3行。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# sed '3d' fruit.txtbananagrapewatermelonorange</code></pre><p>删除第2行到第4行。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# sed '2,4d' fruit.txtbananaorange</code></pre><p>将文本中的字符a替换为@。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# sed 's#a#@#' fruit.txt b@nanagr@pe@pplew@termelonor@nge</code></pre><p>将文本中的字符a替换为@，使用全局模式。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# sed 's#a#@#g' fruit.txt b@n@n@gr@pe@pplew@termelonor@nge</code></pre></li><li><p>模式匹配和处理语言 - <strong>awk</strong>。</p><p>awk是一种编程语言，也是Linux系统中处理文本最为强大的工具，它的作者之一和现在的维护者就是之前提到过的Brian Kernighan（ken和dmr最亲密的伙伴）。通过该命令可以从文本中提取出指定的列、用正则表达式从文本中取出我们想要的内容、显示指定的行以及进行统计和运算，总之它非常强大。</p><p>假设有一个名为fruit2.txt的文件，内容如下所示。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# cat fruit2.txt 1       banana      1202       grape       5003       apple       12304       watermelon  805       orange      400</code></pre><p>显示文件的第3行。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# awk 'NR==3' fruit2.txt 3       apple       1230</code></pre><p>显示文件的第2列。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# awk '{print $2}' fruit2.txt bananagrapeapplewatermelonorange</code></pre><p>显示文件的最后一列。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# awk '{print $NF}' fruit2.txt 120500123080400</code></pre><p>输出末尾数字大于等于300的行。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# awk '{if($3 >= 300) {print $0}}' fruit2.txt 2       grape       5003       apple       12305       orange      400</code></pre><p>上面展示的只是awk命令的冰山一角，更多的内容留给读者自己在实践中去探索。</p></li></ol><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ol><li><p>创建和删除用户 - <strong>useradd</strong> / <strong>userdel</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root home]# useradd hellokitty[root home]# userdel hellokitty</code></pre><ul><li><code>-d</code> - 创建用户时为用户指定用户主目录</li><li><code>-g</code> - 创建用户时指定用户所属的用户组</li></ul></li><li><p>创建和删除用户组 - <strong>groupadd</strong> / <strong>groupdel</strong>。</p><blockquote><p>说明：用户组主要是为了方便对一个组里面所有用户的管理。</p></blockquote></li><li><p>修改密码 - <strong>passwd</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# passwd hellokittyNew password: Retype new password: passwd: all authentication tokens updated successfully.</code></pre><blockquote><p>说明：输入密码和确认密码没有回显且必须一气呵成的输入完成（不能使用退格键），密码和确认密码需要一致。如果使用<code>passwd</code>命令时没有指定命令作用的对象，则表示要修改当前用户的密码。如果想批量修改用户密码，可以使用<code>chpasswd</code>命令。</p></blockquote><ul><li><code>-l</code> / <code>-u</code> - 锁定/解锁用户。</li><li><code>-d</code> - 清除用户密码。</li><li><code>-e</code> - 设置密码立即过期，用户登录时会强制要求修改密码。</li><li><code>-i</code> - 设置密码过期多少天以后禁用该用户。</li></ul></li><li><p>查看和修改密码有效期 - <strong>chage</strong>。</p><p>设置hellokitty用户100天后必须修改密码，过期前15天通知该用户，过期后15天禁用该用户。</p><pre class=" language-Shell"><code class="language-Shell">chage -M 100 -W 15 -I 15 hellokitty</code></pre></li><li><p>切换用户 - <strong>su</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# su hellokitty[hellokitty root]$</code></pre></li><li><p>以管理员身份执行命令 - <strong>sudo</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[hellokitty ~]$ ls /rootls: cannot open directory /root: Permission denied[hellokitty ~]$ sudo ls /root[sudo] password for hellokitty:</code></pre><blockquote><p><strong>说明</strong>：如果希望用户能够以管理员身份执行命令，用户必须要出现在sudoers名单中，sudoers文件在 <code>/etc</code>目录下，如果希望直接编辑该文件也可以使用下面的命令。</p></blockquote></li><li><p>编辑sudoers文件 - <strong>vi sudo</strong>。</p><p>这里使用的编辑器是vi，关于vi的知识在后面有讲解。该文件的部分内容如下所示：</p><pre><code>## Allow root to run any commands anywhere root    ALL=(ALL)   ALL## Allows members of the 'sys' group to run networking, software, ## service management apps and more.# %sys ALL = NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS## Allows people in group wheel to run all commands%wheel  ALL=(ALL)   ALL## Same thing without a password# %wheel    ALL=(ALL)   NOPASSWD: ALL## Allows members of the users group to mount and unmount the## cdrom as root# %users  ALL=/sbin/mount /mnt/cdrom, /sbin/umount /mnt/cdrom## Allows members of the users group to shutdown this system# %users  localhost=/sbin/shutdown -h now</code></pre></li><li><p>显示用户与用户组的信息 - <strong>id</strong>。</p></li><li><p>给其他用户发消息 -<strong>write</strong> / <strong>wall</strong>。</p><p>发送方：</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# write hellokittyDinner is on me.Call me at 6pm.</code></pre><p>接收方：</p><pre class=" language-Shell"><code class="language-Shell">[hellokitty ~]$ Message from root on pts/0 at 17:41 ...Dinner is on me.Call me at 6pm.EOF</code></pre></li><li><p>查看/设置是否接收其他用户发送的消息 - <strong>mesg</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[hellokitty ~]$ mesgis y[hellokitty ~]$ mesg n[hellokitty ~]$ mesgis n</code></pre></li></ol><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><h4 id="文件和路径"><a href="#文件和路径" class="headerlink" title="文件和路径"></a>文件和路径</h4><ol><li>命名规则：文件名的最大长度与文件系统类型有关，一般情况下，文件名不应该超过255个字符，虽然绝大多数的字符都可以用于文件名，但是最好使用英文大小写字母、数字、下划线、点这样的符号。文件名中虽然可以使用空格，但应该尽可能避免使用空格，否则在输入文件名时需要用将文件名放在双引号中或者通过<code>\</code>对空格进行转义。</li><li>扩展名：在Linux系统下文件的扩展名是可选的，但是使用扩展名有助于对文件内容的理解。有些应用程序要通过扩展名来识别文件，但是更多的应用程序并不依赖文件的扩展名，就像<code>file</code>命令在识别文件时并不是依据扩展名来判定文件的类型。</li><li>隐藏文件：以点开头的文件在Linux系统中是隐藏文件（不可见文件）。</li></ol><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><ol><li>/bin - 基本命令的二进制文件。</li><li>/boot - 引导加载程序的静态文件。</li><li>/dev - 设备文件。</li><li><strong>/etc</strong> - 配置文件。</li><li>/home - 普通用户主目录的父目录。</li><li>/lib - 共享库文件。</li><li>/lib64 - 共享64位库文件。</li><li>/lost+found - 存放未链接文件。</li><li>/media - 自动识别设备的挂载目录。</li><li>/mnt - 临时挂载文件系统的挂载点。</li><li>/opt - 可选插件软件包安装位置。</li><li>/proc -  内核和进程信息。</li><li><strong>/root</strong> - 超级管理员用户主目录。</li><li>/run - 存放系统运行时需要的东西。</li><li>/sbin - 超级用户的二进制文件。</li><li>/sys - 设备的伪文件系统。</li><li>/tmp - 临时文件夹。</li><li><strong>/usr</strong> - 用户应用目录。</li><li>/var - 变量数据目录。</li></ol><h4 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h4><ol><li><p><strong>chmod</strong> - 改变文件模式比特。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# ls -l...-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html...[root ~]# chmod g+w,o+w sohu.html[root ~]# ls -l...-rw-rw-rw-  1 root       root 211878 Jun 19 16:06 sohu.html...[root ~]# chmod 644 sohu.html[root ~]# ls -l...-rw-r--r--  1 root       root 211878 Jun 19 16:06 sohu.html...</code></pre><blockquote><p>说明：通过上面的例子可以看出，用<code>chmod</code>改变文件模式比特有两种方式：一种是字符设定法，另一种是数字设定法。除了<code>chmod</code>之外，可以通过<code>umask</code>来设定哪些权限将在新文件的默认权限中被删除。</p></blockquote><p>长格式查看目录或文件时显示结果及其对应权限的数值如下表所示。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/file-mode.png"></p></li><li><p><strong>chown</strong> - 改变文件所有者。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# ls -l...-rw-r--r--  1 root root     54 Jun 20 10:06 readme.txt...[root ~]# chown hellokitty readme.txt[root ~]# ls -l...-rw-r--r--  1 hellokitty root     54 Jun 20 10:06 readme.txt...</code></pre></li><li><p><strong>chgrp</strong> - 改变用户组。</p></li></ol><h4 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h4><ol><li><p>列出文件系统的磁盘使用状况 - <strong>df</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# df -hFilesystem      Size  Used Avail Use% Mounted on/dev/vda1        40G  5.0G   33G  14% /devtmpfs        486M     0  486M   0% /devtmpfs           497M     0  497M   0% /dev/shmtmpfs           497M  356K  496M   1% /runtmpfs           497M     0  497M   0% /sys/fs/cgrouptmpfs           100M     0  100M   0% /run/user/0</code></pre></li><li><p>磁盘分区表操作 - <strong>fdisk</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# fdisk -lDisk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x000a42f4   Device Boot      Start         End      Blocks   Id  System/dev/vda1   *        2048    83884031    41940992   83  LinuxDisk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytes</code></pre></li><li><p>磁盘分区工具 - <strong>parted</strong>。</p></li><li><p>格式化文件系统 - <strong>mkfs</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# mkfs -t ext4 -v /dev/sdb</code></pre><ul><li><code>-t</code> - 指定文件系统的类型。</li><li><code>-c</code> - 创建文件系统时检查磁盘损坏情况。</li><li><code>-v</code> - 显示详细信息。</li></ul></li><li><p>文件系统检查 - <strong>fsck</strong>。</p></li><li><p>转换或拷贝文件 - <strong>dd</strong>。</p></li><li><p>挂载/卸载 - <strong>mount</strong> / <strong>umount</strong>。</p></li><li><p>创建/激活/关闭交换分区 - <strong>mkswap</strong> / <strong>swapon</strong> / <strong>swapoff</strong>。</p></li></ol><blockquote><p>说明：执行上面这些命令会带有一定的风险，如果不清楚这些命令的用法，最好不用随意使用，在使用的过程中，最好对照参考资料进行操作，并在操作前确认是否要这么做。</p></blockquote><h3 id="编辑器-vim"><a href="#编辑器-vim" class="headerlink" title="编辑器 - vim"></a>编辑器 - vim</h3><ol><li><p>启动vim。可以通过<code>vi</code>或<code>vim</code>命令来启动vim，启动时可以指定文件名来打开一个文件，如果没有指定文件名，也可以在保存的时候指定文件名。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# vim guess.py</code></pre></li><li><p>命令模式、编辑模式和末行模式：启动vim进入的是命令模式（也称为Normal模式），在命令模式下输入英文字母<code>i</code>会进入编辑模式（Insert模式），屏幕下方出现<code>-- INSERT --</code>提示；在编辑模式下按下<code>Esc</code>会回到命令模式，此时如果输入英文<code>:</code>会进入末行模式，在末行模式下输入<code>q!</code>可以在不保存当前工作的情况下强行退出vim；在命令模式下输入<code>v</code>会进入可视模式（Visual模式），可以用光标选择一个区域再完成对应的操作。</p></li><li><p>保存和退出vim：在命令模式下输入<code>:</code> 进入末行模式，输入<code>wq</code>可以实现保存退出；如果想放弃编辑的内容输入<code>q!</code>强行退出，这一点刚才已经提到过了；在命令模式下也可以直接输入<code>ZZ</code>实现保存退出。如果只想保存文件不退出，那么可以在末行模式下输入<code>w</code>；可以在<code>w</code>后面输入空格再指定要保存的文件名。</p></li><li><p>光标操作。</p><ul><li>在命令模式下可以通过<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code>来控制光标向左、下、上、右的方向移动，可以在字母前输入数字来表示移动的距离，例如：<code>10h</code>表示向左移动10个字符。</li><li>在命令模式下可以通过<code>Ctrl+y</code>和<code>Ctrl+e</code>来实现向上、向下滚动一行文本的操作，可以通过<code>Ctrl+f</code>和<code>Ctrl+b</code>来实现向前和向后翻页的操作。</li><li>在命令模式下可以通过输入英文字母<code>G</code>将光标移到文件的末尾，可以通过<code>gg</code>将光标移到文件的开始，也可以通过在<code>G</code>前输入数字来将光标移动到指定的行。</li></ul></li><li><p>文本操作。</p><ul><li>删除：在命令模式下可以用<code>dd</code>来删除整行；可以在<code>dd</code>前加数字来指定删除的行数；可以用<code>d$</code>来实现删除从光标处删到行尾的操作，也可以通过<code>d0</code>来实现从光标处删到行首的操作；如果想删除一个单词，可以使用<code>dw</code>；如果要删除全文，可以在输入<code>:%d</code>（其中<code>:</code>用来从命令模式进入末行模式）。</li><li>复制和粘贴：在命令模式下可以用<code>yy</code>来复制整行；可以在<code>yy</code>前加数字来指定复制的行数；可以通过<code>p</code>将复制的内容粘贴到光标所在的地方。</li><li>撤销和恢复：在命令模式下输入<code>u</code>可以撤销之前的操作；通过<code>Ctrl+r</code>可以恢复被撤销的操作。</li><li>对内容进行排序：在命令模式下输入<code>%!sort</code>。</li></ul></li><li><p>查找和替换。</p><ul><li>查找操作需要输入<code>/</code>进入末行模式并提供正则表达式来匹配与之对应的内容，例如：<code>/doc.*\.</code>，输入<code>n</code>来向前搜索，也可以输入<code>N</code>来向后搜索。</li><li>替换操作需要输入<code>:</code>进入末行模式并指定搜索的范围、正则表达式以及替换后的内容和匹配选项，例如：<code>:1,$s/doc.*/hello/gice</code>，其中：<ul><li><code>g</code> - global：全局匹配。</li><li><code>i</code> - ignore case：忽略大小写匹配。</li><li><code>c</code> - confirm：替换时需要确认。</li><li><code>e</code> - error：忽略错误。</li></ul></li></ul></li><li><p>参数设定：在输入<code>:</code>进入末行模式后可以对vim进行设定。</p><ul><li><p>设置Tab键的空格数：<code>set ts=4</code></p></li><li><p>设置显示/不显示行号：<code>set nu</code> / <code>set nonu</code></p></li><li><p>设置启用/关闭高亮语法：<code>syntax on</code> / <code>syntax off</code></p></li><li><p>设置显示标尺（光标所在的行和列）： <code>set ruler</code></p></li><li><p>设置启用/关闭搜索结果高亮：<code>set hls</code> / <code>set nohls</code></p><blockquote><p>说明：如果希望上面的这些设定在每次启动vim时都能自动生效，需要将这些设定写到用户主目录下的.vimrc文件中。</p></blockquote></li></ul></li><li><p>高级技巧</p><ul><li><p>比较多个文件。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# vim -d foo.txt bar.txt</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/vim-diff.png"></p></li><li><p>打开多个文件。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# vim foo.txt bar.txt hello.txt</code></pre><p>启动vim后只有一个窗口显示的是foo.txt，可以在末行模式中输入<code>ls</code>查看到打开的三个文件，也可以在末行模式中输入<code>b &lt;num&gt;</code>来显示另一个文件，例如可以用<code>:b 2</code>将bar.txt显示出来，可以用<code>:b 3</code>将hello.txt显示出来。</p></li><li><p>拆分和切换窗口。</p><p>可以在末行模式中输入<code>sp</code>或<code>vs</code>来实现对窗口的水平或垂直拆分，这样我们就可以同时打开多个编辑窗口，通过按两次<code>Ctrl+w</code>就可以实现编辑窗口的切换，在一个窗口中执行退出操作只会关闭对应的窗口，其他的窗口继续保留。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/vim-multi-window.png"></p></li><li><p>映射快捷键：在vim下可以将一些常用操作映射为快捷键来提升工作效率。</p><ul><li><p>例子1：在命令模式下输入<code>F4</code>执行从第一行开始删除10000行代码的操作。</p><p><code>:map &lt;F4&gt; gg10000dd</code>。</p><p>例子2：在编辑模式下输入<code>__main</code>直接补全为<code>if __name__ == '__main__':</code>。</p><p><code>:inoremap __main if __name__ == '__main__':</code></p></li></ul><blockquote><p>说明：上面例子2的<code>inoremap</code>中的<code>i</code>表示映射的键在编辑模式使用， <code>nore</code>表示不要递归，这一点非常重要，否则如果键对应的内容中又出现键本身，就会引发递归（相当于进入了死循环）。如果希望映射的快捷键每次启动vim时都能生效，需要将映射写到用户主目录下的.vimrc文件中。</p></blockquote></li><li><p>录制宏。</p><ul><li><p>在命令模式下输入<code>qa</code>开始录制宏（其中<code>a</code>是寄存器的名字，也可以是其他英文字母或0-9的数字）。</p></li><li><p>执行你的操作（光标操作、编辑操作等），这些操作都会被录制下来。</p></li><li><p>如果录制的操作已经完成了，按<code>q</code>结束录制。</p></li><li><p>通过<code>@a</code>（<code>a</code>是刚才使用的寄存器的名字）播放宏，如果要多次执行宏可以在前面加数字，例如<code>100@a</code>表示将宏播放100次。</p></li><li><p>可以试一试下面的例子来体验录制宏的操作，该例子来源于<a href="https://harttle.land/tags.html#Vim" target="_blank" rel="noopener">Harttle Land网站</a>，该网站上提供了很多关于vim的使用技巧，有兴趣的可以了解一下。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/vim-macro.png"></p></li></ul></li></ul></li></ol><h3 id="软件安装和配置"><a href="#软件安装和配置" class="headerlink" title="软件安装和配置"></a>软件安装和配置</h3><h4 id="使用包管理工具"><a href="#使用包管理工具" class="headerlink" title="使用包管理工具"></a>使用包管理工具</h4><ol><li><strong>yum</strong> - Yellowdog Updater Modified。<ul><li><code>yum search</code>：搜索软件包，例如<code>yum search nginx</code>。</li><li><code>yum list installed</code>：列出已经安装的软件包，例如<code>yum list installed | grep zlib</code>。</li><li><code>yum install</code>：安装软件包，例如<code>yum install nginx</code>。</li><li><code>yum remove</code>：删除软件包，例如<code>yum remove nginx</code>。</li><li><code>yum update</code>：更新软件包，例如<code>yum update</code>可以更新所有软件包，而<code>yum update tar</code>只会更新tar。</li><li><code>yum check-update</code>：检查有哪些可以更新的软件包。</li><li><code>yum info</code>：显示软件包的相关信息，例如<code>yum info nginx</code>。</li></ul></li><li><strong>rpm</strong> - Redhat Package Manager。<ul><li>安装软件包：<code>rpm -ivh &lt;packagename&gt;.rpm</code>。</li><li>移除软件包：<code>rpm -e &lt;packagename&gt;</code>。</li><li>查询软件包：<code>rpm -qa</code>，例如可以用<code>rpm -qa | grep mysql</code>来检查是否安装了MySQL相关的软件包。</li></ul></li></ol><p>下面以Nginx为例，演示如何使用yum安装软件。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# yum -y install nginx...Installed:  nginx.x86_64 1:1.12.2-2.el7Dependency Installed:  nginx-all-modules.noarch 1:1.12.2-2.el7  nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7  nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7  nginx-mod-http-perl.x86_64 1:1.12.2-2.el7  nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7  nginx-mod-mail.x86_64 1:1.12.2-2.el7  nginx-mod-stream.x86_64 1:1.12.2-2.el7Complete![root ~]# yum info nginxLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfileInstalled PackagesName        : nginxArch        : x86_64Epoch       : 1Version     : 1.12.2Release     : 2.el7Size        : 1.5 MRepo        : installedFrom repo   : epelSummary     : A high performance web server and reverse proxy serverURL         : http://nginx.org/License     : BSDDescription : Nginx is a web server and a reverse proxy server for HTTP, SMTP, POP3 and            : IMAP protocols, with a strong focus on high concurrency, performance and low            : memory usage.[root ~]# nginx -vnginx version: nginx/1.12.2</code></pre><p>移除Nginx。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# yum -y remove nginx</code></pre><p>下面以MySQL为例，演示如何使用rpm安装软件。要安装MySQL需要先到<a href="https://www.mysql.com/" target="_blank" rel="noopener">MySQL官方网站</a>下载对应的<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">RPM文件</a>，当然要选择和你使用的Linux系统对应的版本。MySQL现在是Oracle公司旗下的产品，在MySQL被收购后，MySQL的作者重新制作了一个MySQL的分支MariaDB，可以通过yum进行安装。</p><pre class=" language-Shell"><code class="language-Shell">[root mysql]# lsmysql-community-client-5.7.22-1.el7.x86_64.rpmmysql-community-common-5.7.22-1.el7.x86_64.rpmmysql-community-libs-5.7.22-1.el7.x86_64.rpmmysql-community-server-5.7.22-1.el7.x86_64.rpm[root mysql]# yum -y remove mariadb-libs[root mysql]# yum -y install libaio[root mysql]#rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm...[root mysql]#rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm...[root mysql]#rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm...[root mysql]#rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm...</code></pre><blockquote><p>说明：由于MySQL和<a href="https://mariadb.org/" target="_blank" rel="noopener">MariaDB</a>的底层依赖库是有冲突的，所以上面我们首先用<code>yum</code>移除了名为mariadb-libs的依赖库并安装了名为libaio支持异步I/O操作的依赖库。关于MySQL和MariaDB之间的关系，可以阅读<a href="https://zh.wikipedia.org/wiki/MariaDB" target="_blank" rel="noopener">维基百科</a>上关于MariaDB的介绍。</p></blockquote><p>移除安装的MySQL。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# rpm -qa | grep mysql | xargs rpm -e</code></pre><h4 id="下载解压配置环境变量"><a href="#下载解压配置环境变量" class="headerlink" title="下载解压配置环境变量"></a>下载解压配置环境变量</h4><p>下面以安装MongoDB为例，演示这类软件应该如何安装。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz--2018-06-21 18:32:53--  https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgzResolving fastdl.mongodb.org (fastdl.mongodb.org)... 52.85.83.16, 52.85.83.228, 52.85.83.186, ...Connecting to fastdl.mongodb.org (fastdl.mongodb.org)|52.85.83.16|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 100564462 (96M) [application/x-gzip]Saving to: ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’100%[==================================================>] 100,564,462  630KB/s   in 2m 9s2018-06-21 18:35:04 (760 KB/s) - ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’ saved [100564462/100564462][root ~]# gunzip mongodb-linux-x86_64-rhel70-3.6.5.tgz[root ~]# tar -xvf mongodb-linux-x86_64-rhel70-3.6.5.tarmongodb-linux-x86_64-rhel70-3.6.5/READMEmongodb-linux-x86_64-rhel70-3.6.5/THIRD-PARTY-NOTICESmongodb-linux-x86_64-rhel70-3.6.5/MPL-2mongodb-linux-x86_64-rhel70-3.6.5/GNU-AGPL-3.0mongodb-linux-x86_64-rhel70-3.6.5/bin/mongodumpmongodb-linux-x86_64-rhel70-3.6.5/bin/mongorestoremongodb-linux-x86_64-rhel70-3.6.5/bin/mongoexportmongodb-linux-x86_64-rhel70-3.6.5/bin/mongoimportmongodb-linux-x86_64-rhel70-3.6.5/bin/mongostatmongodb-linux-x86_64-rhel70-3.6.5/bin/mongotopmongodb-linux-x86_64-rhel70-3.6.5/bin/bsondumpmongodb-linux-x86_64-rhel70-3.6.5/bin/mongofilesmongodb-linux-x86_64-rhel70-3.6.5/bin/mongoreplaymongodb-linux-x86_64-rhel70-3.6.5/bin/mongoperfmongodb-linux-x86_64-rhel70-3.6.5/bin/mongodmongodb-linux-x86_64-rhel70-3.6.5/bin/mongosmongodb-linux-x86_64-rhel70-3.6.5/bin/mongomongodb-linux-x86_64-rhel70-3.6.5/bin/install_compass[root ~]# vim .bash_profile...PATH=$PATH:$HOME/bin:$HOME/mongodb-linux-x86_64-rhel70-3.6.5/binexport PATH...[root ~]# source .bash_profile[root ~]# mongod --versiondb version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment:    distmod: rhel70    distarch: x86_64    target_arch: x86_64[root ~]# mongo --versionMongoDB shell version v3.6.5git version: a20ecd3e3a174162052ff99913bc2ca9a839d618OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013allocator: tcmallocmodules: nonebuild environment:    distmod: rhel70    distarch: x86_64    target_arch: x86_64</code></pre><blockquote><p>说明：当然也可以通过yum来安装MongoDB，具体可以参照<a href="https://docs.mongodb.com/master/administration/install-on-linux/" target="_blank" rel="noopener">官方网站</a>上给出的说明。</p></blockquote><h4 id="源代码构建安装"><a href="#源代码构建安装" class="headerlink" title="源代码构建安装"></a>源代码构建安装</h4><ol><li><p>安装Python 3.6。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# yum install gcc[root ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz[root ~]# gunzip Python-3.6.5.tgz[root ~]# tar -xvf Python-3.6.5.tar[root ~]# cd Python-3.6.5[root ~]# ./configure --prefix=/usr/local/python36 --enable-optimizations[root ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel[root ~]# make && make install...[root ~]# ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3[root ~]# python3 --versionPython 3.6.5[root ~]# python3 -m pip install -U pip[root ~]# pip3 --version</code></pre><blockquote><p>说明：上面在安装好Python之后还需要注册PATH环境变量，将Python安装路径下bin文件夹的绝对路径注册到PATH环境变量中。注册环境变量可以修改用户主目录下的.bash_profile或者/etc目录下的profile文件，二者的区别在于前者相当于是用户环境变量，而后者相当于是系统环境变量。</p></blockquote></li><li><p>安装Redis-3.2.12。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# wget http://download.redis.io/releases/redis-3.2.12.tar.gz[root ~]# gunzip redis-3.2.12.tar.gz[root ~]# tar -xvf redis-3.2.12.tar[root ~]# cd redis-3.2.12[root ~]# make && make install[root ~]# redis-server --versionRedis server v=3.2.12 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=5bc5cd3c03d6ceb6[root ~]# redis-cli --versionredis-cli 3.2.12</code></pre></li></ol><h3 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h3><p>我们可以Linux系统下安装和配置各种服务，也就是说我们可以把Linux系统打造成数据库服务器、Web服务器、缓存服务器、文件服务器、消息队列服务器等等。Linux下的大多数服务都被设置为守护进程（驻留在系统后台运行，但不会因为服务还在运行而导致Linux无法停止运行），所以我们安装的服务通常名字后面都有一个字母<code>d</code>，它是英文单词<code>daemon</code>的缩写，例如：防火墙服务叫firewalld，我们之前安装的MySQL服务叫mysqld，Apache服务器叫httpd等。在安装好服务之后，可以使用<code>systemctl</code>命令或<code>service</code>命令来完成对服务的启动、停止等操作，具体操作如下所示。</p><ol><li><p>启动防火墙服务。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# systemctl start firewalld</code></pre></li><li><p>终止防火墙服务。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# systemctl stop firewalld</code></pre></li><li><p>重启防火墙服务。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# systemctl restart firewalld</code></pre></li><li><p>查看防火墙服务状态。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# systemctl status firewalld</code></pre></li><li><p>设置/禁用防火墙服务开机自启。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# systemctl enable firewalldCreated symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service.Created symlink from /etc/systemd/system/multi-user.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service.[root ~]# systemctl disable firewalldRemoved symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</code></pre></li></ol><h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3><ol><li><p>在指定的时间执行命令。</p><ul><li><strong>at</strong> - 将任务排队，在指定的时间执行。</li><li><strong>atq</strong> - 查看待执行的任务队列。</li><li><strong>atrm</strong> - 从队列中删除待执行的任务。</li></ul><p>指定3天以后下午5点要执行的任务。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# at 5pm+3daysat> rm -f /root/*.htmlat> <EOT>job 9 at Wed Jun  5 17:00:00 2019</code></pre><p>查看待执行的任务队列。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# atq9       Wed Jun  5 17:00:00 2019 a root</code></pre><p>从队列中删除指定的任务。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]$ atrm 9</code></pre></li><li><p>计划任务表 - <strong>crontab</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# crontab -e* * * * * echo "hello, world!" >> /root/hello.txt59 23 * * * rm -f /root/*.log</code></pre><blockquote><p>说明：输入<code>crontab -e</code>命令会打开vim来编辑Cron表达式并指定触发的任务，上面我们定制了两个计划任务，一个是每分钟向/root目录下的hello.txt中追加输出<code>hello, world!</code>；另一个是每天23时59分执行删除/root目录下以log为后缀名的文件。如果不知道Cron表达式如何书写，可以参照/etc/crontab文件中的提示（下面会讲到）或者用搜索引擎找一下“Cron表达式在线生成器”来生成Cron表达式。</p></blockquote><p>和crontab相关的文件在<code>/etc</code>目录下，通过修改<code>/etc</code>目录下的crontab文件也能够定制计划任务。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# cd /etc[root etc]# ls -l | grep cron-rw-------.  1 root root      541 Aug  3  2017 anacrontabdrwxr-xr-x.  2 root root     4096 Mar 27 11:56 cron.ddrwxr-xr-x.  2 root root     4096 Mar 27 11:51 cron.daily-rw-------.  1 root root        0 Aug  3  2017 cron.denydrwxr-xr-x.  2 root root     4096 Mar 27 11:50 cron.hourlydrwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.monthly-rw-r--r--   1 root root      493 Jun 23 15:09 crontabdrwxr-xr-x.  2 root root     4096 Jun 10  2014 cron.weekly[root etc]# vim crontab  1 SHELL=/bin/bash  2 PATH=/sbin:/bin:/usr/sbin:/usr/bin  3 MAILTO=root  4  5 # For details see man 4 crontabs  6  7 # Example of job definition:  8 # .---------------- minute (0 - 59)  9 # |  .------------- hour (0 - 23) 10 # |  |  .---------- day of month (1 - 31) 11 # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ... 12 # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat 13 # |  |  |  |  | 14 # *  *  *  *  * user-name  command to be executed</code></pre></li></ol><h3 id="网络访问和管理"><a href="#网络访问和管理" class="headerlink" title="网络访问和管理"></a>网络访问和管理</h3><ol><li><p>安全远程连接 - <strong>ssh</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]$ ssh root@120.77.222.217The authenticity of host '120.77.222.217 (120.77.222.217)' can't be established.ECDSA key fingerprint is SHA256:BhUhykv+FvnIL03I9cLRpWpaCxI91m9n7zBWrcXRa8w.ECDSA key fingerprint is MD5:cc:85:e9:f0:d7:07:1a:26:41:92:77:6b:7f:a0:92:65.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '120.77.222.217' (ECDSA) to the list of known hosts.root@120.77.222.217's password: </code></pre></li><li><p>通过网络获取资源 - <strong>wget</strong>。</p><ul><li>-b 后台下载模式</li><li>-O 下载到指定的目录</li><li>-r 递归下载</li></ul></li><li><p>发送和接收邮件 - <strong>mail</strong>。</p></li><li><p>网络配置工具（旧） - <strong>ifconfig</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# ifconfig eth0eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500        inet 172.18.61.250  netmask 255.255.240.0  broadcast 172.18.63.255        ether 00:16:3e:02:b6:46  txqueuelen 1000  (Ethernet)        RX packets 1067841  bytes 1296732947 (1.2 GiB)        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 409912  bytes 43569163 (41.5 MiB)        TX errors 0  dropped 0 overruns 0  carrier 0  collisions </code></pre></li><li><p>网络配置工具（新） - <strong>ip</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# ip address1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000    link/ether 00:16:3e:02:b6:46 brd ff:ff:ff:ff:ff:ff    inet 172.18.61.250/20 brd 172.18.63.255 scope global eth0       valid_lft forever preferred_lft forever</code></pre></li><li><p>网络可达性检查 - <strong>ping</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# ping www.baidu.com -c 3PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data.64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=1 ttl=51 time=36.3 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=2 ttl=51 time=36.4 ms64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=3 ttl=51 time=36.4 ms--- www.a.shifen.com ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 2002msrtt min/avg/max/mdev = 36.392/36.406/36.427/0.156 ms</code></pre></li><li><p>显示或管理路由表 - <strong>route</strong>。</p></li><li><p>查看网络服务和端口 - <strong>netstat</strong> / <strong>ss</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# netstat -nap | grep nginx</code></pre></li><li><p>网络监听抓包 - <strong>tcpdump</strong>。</p></li><li><p>安全文件拷贝 - <strong>scp</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# scp root@1.2.3.4:/root/guido.jpg hellokitty@4.3.2.1:/home/hellokitty/pic.jpg</code></pre></li><li><p>文件同步工具 - <strong>rsync</strong>。</p><blockquote><p>说明：使用<code>rsync</code>可以实现文件的自动同步，这个对于文件服务器来说相当重要。关于这个命令的用法，我们在后面讲项目部署的时候为大家详细说明。</p></blockquote></li><li><p>安全文件传输 - <strong>sftp</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# sftp root@1.2.3.4root@1.2.3.4's password:Connected to 1.2.3.4.sftp></code></pre><ul><li><p><code>help</code>：显示帮助信息。</p></li><li><p><code>ls</code>/<code>lls</code>：显示远端/本地目录列表。</p></li><li><p><code>cd</code>/<code>lcd</code>：切换远端/本地路径。</p></li><li><p><code>mkdir</code>/<code>lmkdir</code>：创建远端/本地目录。</p></li><li><p><code>pwd</code>/<code>lpwd</code>：显示远端/本地当前工作目录。</p></li><li><p><code>get</code>：下载文件。</p></li><li><p><code>put</code>：上传文件。</p></li><li><p><code>rm</code>：删除远端文件。</p></li><li><p><code>bye</code>/<code>exit</code>/<code>quit</code>：退出sftp。</p></li></ul></li></ol><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><ol><li><p>查看进程 - <strong>ps</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# ps -efUID        PID  PPID  C STIME TTY          TIME CMDroot         1     0  0 Jun23 ?        00:00:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 21root         2     0  0 Jun23 ?        00:00:00 [kthreadd]...[root ~]# ps -ef | grep mysqldroot      4943  4581  0 22:45 pts/0    00:00:00 grep --color=auto mysqldmysql    25257     1  0 Jun25 ?        00:00:39 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</code></pre></li><li><p>显示进程状态树 - <strong>pstree</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# pstreesystemd─┬─AliYunDun───18*[{AliYunDun}]        ├─AliYunDunUpdate───3*[{AliYunDunUpdate}]        ├─2*[agetty]        ├─aliyun-service───2*[{aliyun-service}]        ├─atd        ├─auditd───{auditd}        ├─dbus-daemon        ├─dhclient        ├─irqbalance        ├─lvmetad        ├─mysqld───28*[{mysqld}]        ├─nginx───2*[nginx]        ├─ntpd        ├─polkitd───6*[{polkitd}]        ├─rsyslogd───2*[{rsyslogd}]        ├─sshd───sshd───bash───pstree        ├─systemd-journal        ├─systemd-logind        ├─systemd-udevd        └─tuned───4*[{tuned}]</code></pre></li><li><p>查找与指定条件匹配的进程 - <strong>pgrep</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]$ pgrep mysqld3584</code></pre></li><li><p>通过进程号终止进程 - <strong>kill</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]$ kill -l 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR111) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+338) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+843) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+1348) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-1253) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-758) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-263) SIGRTMAX-1  64) SIGRTMAX[root ~]# kill 1234[root ~]# kill -9 1234</code></pre><p>例子：用一条命令强制终止正在运行的Redis进程。</p><pre class=" language-Shell"><code class="language-Shell">ps -ef | grep redis | grep -v grep | awk '{print $2}' | xargs kill</code></pre></li><li><p>通过进程名终止进程 - <strong>killall</strong> / <strong>pkill</strong>。</p><p>结束名为mysqld的进程。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# pkill mysqld</code></pre><p>结束hellokitty用户的所有进程。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# pkill -u hellokitty</code></pre><blockquote><p>说明：这样的操作会让hellokitty用户和服务器断开连接。</p></blockquote></li><li><p>将进程置于后台运行。</p><ul><li><code>Ctrl+Z</code> - 快捷键，用于停止进程并置于后台。</li><li><code>&amp;</code> - 将进程置于后台运行。</li></ul><pre class=" language-Shell"><code class="language-Shell">[root ~]# mongod &[root ~]# redis-server...^Z[4]+  Stopped                 redis-server</code></pre></li><li><p>查询后台进程 - <strong>jobs</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# jobs[2]   Running                 mongod &[3]-  Stopped                 cat[4]+  Stopped                 redis-server</code></pre></li><li><p>让进程在后台继续运行 - <strong>bg</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# bg %4[4]+ redis-server &[root ~]# jobs[2]   Running                 mongod &[3]+  Stopped                 cat[4]-  Running                 redis-server &</code></pre></li><li><p>将后台进程置于前台 - <strong>fg</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# fg %4redis-server</code></pre><blockquote><p>说明：置于前台的进程可以使用<code>Ctrl+C</code>来终止它。</p></blockquote></li><li><p>调整程序/进程运行时优先级 - <strong>nice</strong> / <strong>renice</strong>。</p></li><li><p>用户登出后进程继续工作 - <strong>nohup</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# nohup ping www.baidu.com > result.txt &</code></pre></li><li><p>跟踪进程系统调用情况 - <strong>strace</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# pgrep mysqld8803[root ~]# strace -c -p 8803strace: Process 8803 attached^Cstrace: Process 8803 detached% time     seconds  usecs/call     calls    errors syscall------ ----------- ----------- --------- --------- ---------------- 99.18    0.005719        5719         1           restart_syscall  0.49    0.000028          28         1           mprotect  0.24    0.000014          14         1           clone  0.05    0.000003           3         1           mmap  0.03    0.000002           2         1           accept------ ----------- ----------- --------- --------- ----------------100.00    0.005766                     5           total</code></pre><blockquote><p>说明：这个命令的用法和参数都比较复杂，建议大家在真正用到这个命令的时候再根据实际需要进行了解。</p></blockquote></li><li><p>查看当前运行级别 - <strong>runlevel</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# runlevelN 3</code></pre></li><li><p>实时监控进程占用资源状况 - <strong>top</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# toptop - 23:04:23 up 3 days, 14:10,  1 user,  load average: 0.00, 0.01, 0.05Tasks:  65 total,   1 running,  64 sleeping,   0 stopped,   0 zombie%Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 stKiB Mem :  1016168 total,   191060 free,   324700 used,   500408 buff/cacheKiB Swap:        0 total,        0 free,        0 used.   530944 avail Mem...</code></pre><ul><li><code>-c</code> - 显示进程的整个路径。</li><li><code>-d</code> - 指定两次刷屏之间的间隔时间（秒为单位）。</li><li><code>-i</code> - 不显示闲置进程或僵尸进程。</li><li><code>-p</code> - 显示指定进程的信息。</li></ul></li></ol><h3 id="系统诊断"><a href="#系统诊断" class="headerlink" title="系统诊断"></a>系统诊断</h3><ol><li><p>系统启动异常诊断 - <strong>dmesg</strong>。</p></li><li><p>查看系统活动信息 - <strong>sar</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# sar -u -r 5 10Linux 3.10.0-957.10.1.el7.x86_64 (izwz97tbgo9lkabnat2lo8z)      06/02/2019      _x86_64_        (2 CPU)06:48:30 PM     CPU     %user     %nice   %system   %iowait    %steal     %idle06:48:35 PM     all      0.10      0.00      0.10      0.00      0.00     99.8006:48:30 PM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty06:48:35 PM   1772012   2108392     54.33    102816   1634528    784940     20.23    793328   1164704         0</code></pre><ul><li><code>-A</code> - 显示所有设备（CPU、内存、磁盘）的运行状况。</li><li><code>-u</code> - 显示所有CPU的负载情况。</li><li><code>-d</code> - 显示所有磁盘的使用情况。</li><li><code>-r</code> - 显示内存的使用情况。</li><li><code>-n</code> - 显示网络运行状态。</li></ul></li><li><p>查看内存使用情况 - <strong>free</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# free              total        used        free      shared  buff/cache   availableMem:        1016168      323924      190452         356      501792      531800Swap:             0           0           0</code></pre></li><li><p>虚拟内存统计 - <strong>vmstat</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# vmstatprocs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st 2  0      0 204020  79036 667532    0    0     5    18  101   58  1  0 99  0  0</code></pre></li><li><p>CPU信息统计 - <strong>mpstat</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# mpstatLinux 3.10.0-957.5.1.el7.x86_64 (iZ8vba0s66jjlfmo601w4xZ)       05/30/2019      _x86_64_        (1 CPU)01:51:54 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle01:51:54 AM  all    0.71    0.00    0.17    0.04    0.00    0.00    0.00    0.00    0.00   99.07</code></pre></li><li><p>查看进程使用内存状况 - <strong>pmap</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# ps  PID TTY          TIME CMD 4581 pts/0    00:00:00 bash 5664 pts/0    00:00:00 ps[root ~]# pmap 45814581:   -bash0000000000400000    884K r-x-- bash00000000006dc000      4K r---- bash00000000006dd000     36K rw--- bash00000000006e6000     24K rw---   [ anon ]0000000001de0000    400K rw---   [ anon ]00007f82fe805000     48K r-x-- libnss_files-2.17.so00007f82fe811000   2044K ----- libnss_files-2.17.so...</code></pre></li><li><p>报告设备CPU和I/O统计信息 - <strong>iostat</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# iostatLinux 3.10.0-693.11.1.el7.x86_64 (iZwz97tbgo9lkabnat2lo8Z)      06/26/2018      _x86_64_       (1 CPU)avg-cpu:  %user   %nice %system %iowait  %steal   %idle           0.79    0.00    0.20    0.04    0.00   98.97Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtnvda               0.85         6.78        21.32    2106565    6623024vdb               0.00         0.01         0.00       2088          0</code></pre></li><li><p>显示所有PCI设备 - <strong>lspci</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# lspci00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II]00:01.2 USB controller: Intel Corporation 82371SB PIIX3 USB [Natoma/Triton II] (rev 01)00:01.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 03)00:02.0 VGA compatible controller: Cirrus Logic GD 544600:03.0 Ethernet controller: Red Hat, Inc. Virtio network device00:04.0 Communication controller: Red Hat, Inc. Virtio console00:05.0 SCSI storage controller: Red Hat, Inc. Virtio block device00:06.0 SCSI storage controller: Red Hat, Inc. Virtio block device00:07.0 Unclassified device [00ff]: Red Hat, Inc. Virtio memory balloon</code></pre></li><li><p>显示进程间通信设施的状态 - <strong>ipcs</strong>。</p><pre class=" language-Shell"><code class="language-Shell">[root ~]# ipcs------ Message Queues --------key        msqid      owner      perms      used-bytes   messages    ------ Shared Memory Segments --------key        shmid      owner      perms      bytes      nattch     status      ------ Semaphore Arrays --------key        semid      owner      perms      nsems</code></pre></li></ol><h3 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h3><p>之前我们提到过，Shell是一个连接用户和操作系统的应用程序，它提供了人机交互的界面（接口），用户通过这个界面访问操作系统内核的服务。Shell脚本是一种为Shell编写的脚本程序，我们可以通过Shell脚本来进行系统管理，同时也可以通过它进行文件操作。总之，编写Shell脚本对于使用Linux系统的人来说，应该是一项标配技能。</p><p>互联网上有大量关于Shell脚本的相关知识，我不打算再此对Shell脚本做一个全面系统的讲解，我们通过下面的代码来感性的认识下Shell脚本就行了。</p><p>例子1：输入两个整数m和n，计算从m到n的整数求和的结果。</p><pre class=" language-Shell"><code class="language-Shell">#!/usr/bin/bashprintf 'm = 'read mprintf 'n = 'read na=$msum=0while [ $a -le $n ]do    sum=$[ sum + a ]    a=$[ a + 1 ]doneecho '结果: '$sum</code></pre><p>例子2：自动创建文件夹和指定数量的文件。</p><pre class=" language-Shell"><code class="language-Shell">#!/usr/bin/bashprintf '输入文件名: 'read fileprintf '输入文件数量(<1000): 'read numif [ $num -ge 1000 ]then    echo '文件数量不能超过1000'else    if [ -e $dir -a -d $dir ]    then        rm -rf $dir    else        if [ -e $dir -a -f $dir ]        then            rm -f $dir        fi    fi    mkdir -p $dir    index=1    while [ $index -le $num ]    do        if [ $index -lt 10 ]        then            pre='00'        elif [ $index -lt 100 ]        then            pre='0'        else            pre=''        fi        touch $dir'/'$file'_'$pre$index        index=$[ index + 1 ]    donefi</code></pre><p>例子3：自动安装指定版本的Redis。</p><pre class=" language-Shell"><code class="language-Shell">#!/usr/bin/bashinstall_redis() {    if ! which redis-server > /dev/null    then        cd /root        wget $1$2'.tar.gz' >> install.log        gunzip /root/$2'.tar.gz'        tar -xf /root/$2'.tar'        cd /root/$2        make >> install.log        make install >> install.log        echo '安装完成'    else        echo '已经安装过Redis'    fi}install_redis 'http://download.redis.io/releases/' $1</code></pre><h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><ol><li><p>Linux命令行常用快捷键</p><table><thead><tr><th>快捷键</th><th>功能说明</th></tr></thead><tbody><tr><td>tab</td><td>自动补全命令或路径</td></tr><tr><td>Ctrl+a</td><td>将光标移动到命令行行首</td></tr><tr><td>Ctrl+e</td><td>将光标移动到命令行行尾</td></tr><tr><td>Ctrl+f</td><td>将光标向右移动一个字符</td></tr><tr><td>Ctrl+b</td><td>将光标向左移动一个字符</td></tr><tr><td>Ctrl+k</td><td>剪切从光标到行尾的字符</td></tr><tr><td>Ctrl+u</td><td>剪切从光标到行首的字符</td></tr><tr><td>Ctrl+w</td><td>剪切光标前面的一个单词</td></tr><tr><td>Ctrl+y</td><td>复制剪切命名剪切的内容</td></tr><tr><td>Ctrl+c</td><td>中断正在执行的任务</td></tr><tr><td>Ctrl+h</td><td>删除光标前面的一个字符</td></tr><tr><td>Ctrl+d</td><td>退出当前命令行</td></tr><tr><td>Ctrl+r</td><td>搜索历史命令</td></tr><tr><td>Ctrl+g</td><td>退出历史命令搜索</td></tr><tr><td>Ctrl+l</td><td>清除屏幕上所有内容在屏幕的最上方开启一个新行</td></tr><tr><td>Ctrl+s</td><td>锁定终端使之暂时无法输入内容</td></tr><tr><td>Ctrl+q</td><td>退出终端锁定</td></tr><tr><td>Ctrl+z</td><td>将正在终端执行的任务停下来放到后台</td></tr><tr><td>!!</td><td>执行上一条命令</td></tr><tr><td>!数字</td><td>执行数字对应的历史命令</td></tr><tr><td>!字母</td><td>执行最近的以字母打头的命令</td></tr><tr><td>!$ / Esc+.</td><td>获得上一条命令最后一个参数</td></tr><tr><td>Esc+b</td><td>移动到当前单词的开头</td></tr><tr><td>Esc+f</td><td>移动到当前单词的结尾</td></tr></tbody></table></li><li><p>man查阅命令手册的内容说明</p><table><thead><tr><th>手册中的标题</th><th>功能说明</th></tr></thead><tbody><tr><td>NAME</td><td>命令的说明和介绍</td></tr><tr><td>SYNOPSIS</td><td>使用该命令的基本语法</td></tr><tr><td>DESCRIPTION</td><td>使用该命令的详细描述，各个参数的作用，有时候这些信息会出现在OPTIONS中</td></tr><tr><td>OPTIONS</td><td>命令相关参数选项的说明</td></tr><tr><td>EXAMPLES</td><td>使用该命令的参考例子</td></tr><tr><td>EXIT STATUS</td><td>命令结束的退出状态码，通常0表示成功执行</td></tr><tr><td>SEE ALSO</td><td>和命令相关的其他命令或信息</td></tr><tr><td>BUGS</td><td>和命令相关的缺陷的描述</td></tr><tr><td>AUTHOR</td><td>该命令的作者介绍</td></tr></tbody></table></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习计划</title>
      <link href="posts/5e21c553.html"/>
      <url>posts/5e21c553.html</url>
      
        <content type="html"><![CDATA[<h1 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h1><blockquote><p>markdown 中复选框实现（三种方案）</p></blockquote><pre><code>- [x] Markdown  - [ ] JavaScript + [x] Markdown  + [ ] JavaScript * [x] Markdown  * [ ] JavaScript</code></pre><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><blockquote><p>学习一到二门语言，需要手动实践</p></blockquote><ul><li><input disabled="" type="checkbox"> JavaScript <ul><li><input disabled="" type="checkbox"> 基础语法回顾</li><li><input disabled="" type="checkbox"> Vue</li><li><input disabled="" type="checkbox"> TypeScript</li></ul></li><li><input disabled="" type="checkbox"> Python<ul><li><input checked="" disabled="" type="checkbox"> 基础语法</li><li><input disabled="" type="checkbox"> 网络操作</li><li><input disabled="" type="checkbox"> 深度学习</li></ul></li><li><input disabled="" type="checkbox"> 算法<ul><li><input disabled="" type="checkbox"> 常见数据结构<ul><li><input disabled="" type="checkbox"> 链表、树、图</li></ul></li><li><input disabled="" type="checkbox"> 算法思想<ul><li><input disabled="" type="checkbox"> 贪婪法</li><li><input disabled="" type="checkbox"> 分治法</li><li><input disabled="" type="checkbox"> 穷举法</li><li><input disabled="" type="checkbox"> 动态规划法</li><li><input disabled="" type="checkbox"> 回溯法</li></ul></li><li><input disabled="" type="checkbox"> </li></ul></li><li><input disabled="" type="checkbox"> </li></ul><h2 id="看书"><a href="#看书" class="headerlink" title="看书"></a>看书</h2><blockquote><p>多看一些书籍，并记录看书笔记</p></blockquote><ul><li><input disabled="" type="checkbox"> 大型网站技术架构：核心原理与案例分析</li><li><input disabled="" type="checkbox"> 跟我学Nginx+Lua开发</li><li><input disabled="" type="checkbox"> Netty权威指南</li><li><input disabled="" type="checkbox"> 深入理解Java虚拟机</li><li><input disabled="" type="checkbox"> 代码整洁之道.(美)马丁</li><li><input disabled="" type="checkbox"> Java并发编程的艺术</li><li><input disabled="" type="checkbox"> 深入理解Kafka 核心设计与实践原理</li><li><input disabled="" type="checkbox"> HBase权威指南</li></ul><h2 id="总结归纳"><a href="#总结归纳" class="headerlink" title="总结归纳"></a>总结归纳</h2><blockquote><p>整理笔记，归纳出思维导图</p></blockquote><ul><li><input disabled="" type="checkbox"> Dubbo</li><li><input disabled="" type="checkbox"> RabbitMQ</li><li><input disabled="" type="checkbox"> RocketMQ</li><li><input disabled="" type="checkbox"> Docker</li><li><input disabled="" type="checkbox"> K8s</li></ul><h2 id="博文"><a href="#博文" class="headerlink" title="博文"></a>博文</h2><blockquote><p>思考一些问题，设计出方案并输出博文</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> 高并发下秒杀场景如何设计？</li><li><input disabled="" type="checkbox"> 扫码登录实现方案？</li><li><input disabled="" type="checkbox"> 高并发下幂等如何设计？</li><li><input disabled="" type="checkbox"> </li></ul><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><blockquote><p>思考的内容</p></blockquote><ul><li><input disabled="" type="checkbox"> 你在项目中的亮点</li><li><input disabled="" type="checkbox"> 项目中有何收获</li><li><input disabled="" type="checkbox"> 你的职业规划</li></ul><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><blockquote><p>学习并参与一些开源项目</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】-4.Hexo使用Matery主题及配置</title>
      <link href="posts/3abaf009.html"/>
      <url>posts/3abaf009.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Hexo配置"><a href="#1-Hexo配置" class="headerlink" title="1. Hexo配置"></a>1. Hexo配置</h1><p>在 <code>Hexo/_config.yml</code> 中保存了很多Hexo相关的配置，可以根据实际需要进行修改。</p><h2 id="1-1-Site"><a href="#1-1-Site" class="headerlink" title="1.1 Site"></a>1.1 Site</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">网站标题</td></tr><tr><td align="left"><code>subtitle</code></td><td align="left">网站副标题</td></tr><tr><td align="left"><code>description</code></td><td align="left">网站描述</td></tr><tr><td align="left"><code>keywords</code></td><td align="left">网站的关键词。支持多个关键词。</td></tr><tr><td align="left"><code>author</code></td><td align="left">作者</td></tr><tr><td align="left"><code>language</code></td><td align="left">网站语言。中文用户可设置成 <code>zh-CN</code>。</td></tr><tr><td align="left"><code>timezone</code></td><td align="left">网站时区。Hexo 默认使用电脑的时区。中国时区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031182934473.png"></p><h2 id="1-2-URL"><a href="#1-2-URL" class="headerlink" title="1.2 URL"></a>1.2 URL</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>url</code></td><td align="left">网址, must starts with <code>http://</code> or <code>https://</code></td><td align="left"></td></tr><tr><td align="left"><code>root</code></td><td align="left">网站根目录</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a> 格式</td><td align="left"><code>:year/:month/:day/:title/</code></td></tr><tr><td align="left"><code>permalink_defaults</code></td><td align="left">永久链接中各部分的默认值</td><td align="left"></td></tr><tr><td align="left"><code>pretty_urls</code></td><td align="left">改写 <a href="https://hexo.io/zh-cn/docs/variables" target="_blank" rel="noopener"><code>permalink</code></a> 的值来美化 URL</td><td align="left"></td></tr><tr><td align="left"><code>pretty_urls.trailing_index</code></td><td align="left">是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>pretty_urls.trailing_html</code></td><td align="left">是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td><td align="left"><code>true</code></td></tr></tbody></table><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031183051873.png"></p><blockquote><p><strong>注意：</strong></p><ol><li>如果网站路径为根目录，最后面不需要 /，root 部分为 //；这里是为了防止 search.xml 出现 404；</li><li>如果网站路径为子目录，例如 <code>http://example.com/blog</code>，<code>url</code> 需为 <code>http://example.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>；</li><li>permalink 生成的文章链接默认为时间+文章名，如：<code>http://example.com/2018/10/20/Hexo使用Matery主题及配置.html</code>，这里使用了永久链接；</li><li>abbrlink 为永久链接，下文说明。</li></ol></blockquote><h2 id="1-3-Plugin"><a href="#1-3-Plugin" class="headerlink" title="1.3 Plugin"></a>1.3 Plugin</h2><p>Hexo 可以很方便的支持插件，只需使用 npm 安装，并在 <code>_config.yml</code> 中配置即可。以下是几个实用插件</p><h3 id="1-3-1-代码高亮插件"><a href="#1-3-1-代码高亮插件" class="headerlink" title="1.3.1 代码高亮插件"></a>1.3.1 代码高亮插件</h3><p>hexo 自带的代码高亮主题不太美观，可以选择使用  <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 插件，安装插件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span class="token comment" spellcheck="true"># 同 npm install hexo-prism-plugin --save</span></code></pre><p>开启插件，</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 关闭hexo自带高亮插件</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment" spellcheck="true"># 开启prism_plugin插件</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h3 id="1-3-2-搜索插件"><a href="#1-3-2-搜索插件" class="headerlink" title="1.3.2 搜索插件"></a>1.3.2 搜索插件</h3><p>可以使用 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post  <span class="token key atrule">format</span><span class="token punctuation">:</span> html  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">10000</span></code></pre><p>插件安装完成后，执行 <code>hexo clean &amp;&amp; hexo g</code> 会在 <code>Hexo/public</code> 目录下生成 <code>search.xml</code> 文件</p><h3 id="1-3-3-RSS订阅"><a href="#1-3-3-RSS订阅" class="headerlink" title="1.3.3 RSS订阅"></a>1.3.3 RSS订阅</h3><p>可以使用 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><h3 id="1-3-4-Emoji表情"><a href="#1-3-4-Emoji表情" class="headerlink" title="1.3.4 Emoji表情"></a>1.3.4 Emoji表情</h3><p>如果要支持表情符号的渲染，可以使用  <a href="https://github.com/crimx/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 插件，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span></code></pre><h3 id="1-3-5-永久链接"><a href="#1-3-5-永久链接" class="headerlink" title="1.3.5 永久链接"></a>1.3.5 永久链接</h3><p>hexo 文章链接默认日期+标题来生成，如：<code>https://www.example.com/2019/08/12/hello-world.html</code> ，如果文章标题是中文的话，URL链接是也会是中文。</p><p>这种链接有几个缺点：</p><ul><li>如果文章标题较长，链接也会很长，不够简洁，不便于阅读；</li><li>文章的标题或日期修改，使用 <code>hexo g</code> 重写生成的文章，链接发生了变化；如果之前有引用，则会失效</li></ul><p>可以使用 <a href="https://github.com/Rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 的 Hexo 插件来生成永久链接，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save</code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>abbrlink.html  <span class="token comment" spellcheck="true"># 此处可以自己设置，也可以直接使用 :/abbrlink</span><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>    <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc32   <span class="token comment" spellcheck="true">#算法： crc16(default) and crc32</span>    <span class="token key atrule">rep</span><span class="token punctuation">:</span> hex     <span class="token comment" spellcheck="true">#进制： dec(default) and hex</span></code></pre><h1 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2. 更换主题"></a>2. 更换主题</h1><h2 id="2-1-主题下载"><a href="#2-1-主题下载" class="headerlink" title="2.1 主题下载"></a>2.1 主题下载</h2><p>默认的主题比较简陋，可以在 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题商店</a> 选择合适的主题，然后找到它的项目地址，使用Git将其下载到 <code>Hexo/themes</code> 目录下。可以使用 <code>hexo-theme-matery</code> 。</p><p>使用Git下载选中的主题</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:blinkfox/hexo-theme-matery.git</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031190539553.png"></p><h2 id="2-2-启用主题"><a href="#2-2-启用主题" class="headerlink" title="2.2 启用主题"></a>2.2 启用主题</h2><p>在 <code>_config.yml</code> 中，找到关键字 theme，修改参数为：<code>theme：hexo-theme-matery</code>，注意冒号后面有一个空格！</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031190736888.png"></p><h1 id="3-主题设置"><a href="#3-主题设置" class="headerlink" title="3.主题设置"></a>3.主题设置</h1><h2 id="3-1-站点配置"><a href="#3-1-站点配置" class="headerlink" title="3.1 站点配置"></a>3.1 站点配置</h2><p>修改 Hexo 根目录下的 <code>_config.yml</code>：</p><ul><li>由于 matery 每行显示3条记录，所以分页参数 <code>per_page</code> 可设置为 6 的倍数。一般可设为 12</li></ul><h2 id="3-2-增加页面"><a href="#3-2-增加页面" class="headerlink" title="3.2 增加页面"></a>3.2 增加页面</h2><h3 id="3-2-1-新建分类-categories-页"><a href="#3-2-1-新建分类-categories-页" class="headerlink" title="3.2.1 新建分类 categories 页"></a>3.2.1 新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h3 id="3-2-2-新建标签-tags-页"><a href="#3-2-2-新建标签-tags-页" class="headerlink" title="3.2.2 新建标签 tags 页"></a>3.2.2 新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h3 id="3-2-3-新建关于我-about-页"><a href="#3-2-3-新建关于我-about-页" class="headerlink" title="3.2.3 新建关于我 about 页"></a>3.2.3 新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h3 id="3-2-4-新建友情连接-friends-页"><a href="#3-2-4-新建友情连接-friends-页" class="headerlink" title="3.2.4 新建友情连接 friends 页"></a>3.2.4 新建友情连接 friends 页</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h2 id="3-3-主题配置"><a href="#3-3-主题配置" class="headerlink" title="3.3 主题配置"></a>3.3 主题配置</h2><p>修改 <code>Hexo/themes/hexo-theme-matery</code> 目录下的 <code>_config.yml</code></p><h3 id="3-3-1-time"><a href="#3-3-1-time" class="headerlink" title="3.3.1 time"></a>3.3.1 time</h3><p>开启站点运行时间统计，设置开始时间</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">time</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">year</span><span class="token punctuation">:</span> <span class="token number">2019 </span><span class="token comment" spellcheck="true"># 年份</span>  <span class="token key atrule">month</span><span class="token punctuation">:</span> <span class="token number">06 </span><span class="token comment" spellcheck="true"># 月份</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token number">28 </span><span class="token comment" spellcheck="true"># 日期</span>  <span class="token key atrule">hour</span><span class="token punctuation">:</span> <span class="token number">00 </span><span class="token comment" spellcheck="true"># 小时</span>  <span class="token key atrule">minute</span><span class="token punctuation">:</span> <span class="token number">00 </span><span class="token comment" spellcheck="true"># 分钟</span>  <span class="token key atrule">second</span><span class="token punctuation">:</span> <span class="token number">00 </span><span class="token comment" spellcheck="true"># 秒</span></code></pre><h3 id="3-3-2-sociallink"><a href="#3-3-2-sociallink" class="headerlink" title="3.3.2 sociallink"></a>3.3.2 sociallink</h3><p>修改社交链接</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">socialLink</span><span class="token punctuation">:</span>  <span class="token key atrule">github</span><span class="token punctuation">:</span>  https<span class="token punctuation">:</span>//github.com/blinkfox  <span class="token key atrule">email</span><span class="token punctuation">:</span> 1181062873@qq.com  <span class="token key atrule">facebook</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://www.facebook.com/xxx</span>  <span class="token key atrule">twitter</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://twitter.com/xxx</span>  <span class="token key atrule">qq</span><span class="token punctuation">:</span> <span class="token number">1181062873</span>  <span class="token key atrule">weibo</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://weibo.com/xxx</span>  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># https://www.zhihu.com/xxx</span>  <span class="token key atrule">rss</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># true、false</span></code></pre><h3 id="3-3-3-toc"><a href="#3-3-3-toc" class="headerlink" title="3.3.3 toc"></a>3.3.3 toc</h3><p>toc 可以用来显示 markdown 文章目录，默认开启 h2/h3/h4 标题</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否激活文章 TOC 功能，并配置TOC支持选中哪些标题类型，这是全局配置。</span><span class="token comment" spellcheck="true"># 可以在某篇文章的 Front-matter 中再加上`toc: false`，使该篇文章关闭TOC目录功能</span><span class="token key atrule">toc</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">heading</span><span class="token punctuation">:</span> h1<span class="token punctuation">,</span> h2<span class="token punctuation">,</span> h3<span class="token punctuation">,</span> h4  <span class="token key atrule">collapseDepth</span><span class="token punctuation">:</span> <span class="token number">0 </span><span class="token comment" spellcheck="true"># 目录默认展开层级</span>  <span class="token key atrule">showToggleBtn</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 是否显示切换TOC目录展开收缩的按钮</span></code></pre><blockquote><p>问题：将之前写的md文件发布到Hexo上时，目录一直不展示。经过分析排查后发现：TOC 从 h2 开始支持，md中最高级别是 h1，所以 TOC 无法显示；后面在 heading 中增加了 h1，目录显示正常。</p></blockquote><h3 id="3-3-4-others"><a href="#3-3-4-others" class="headerlink" title="3.3.4 others"></a>3.3.4 others</h3><p><code>hexo-theme-matery</code> 主题还支持很多配置项的修改和自定义，如：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li>favicon 和 Logo</li><li>个人信息</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li>不蒜子统计和谷歌分析（Google Analytics）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图</li></ul><h2 id="3-4-主题支持插件"><a href="#3-4-主题支持插件" class="headerlink" title="3.4 主题支持插件"></a>3.4 主题支持插件</h2><h3 id="3-4-1-文章字数统计插件"><a href="#3-4-1-文章字数统计插件" class="headerlink" title="3.4.1 文章字数统计插件"></a>3.4.1 文章字数统计插件</h3><p>如果要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 发布日期</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 更新日期</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 文章字数统计</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 站点总文章字数</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 文章阅读时长</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 文章阅读次数</span><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><h3 id="3-4-2-Valine评论插件"><a href="#3-4-2-Valine评论插件" class="headerlink" title="3.4.2 Valine评论插件"></a>3.4.2 Valine评论插件</h3><p>如果需要支持文章评论功能，可以激活  <code>Valine</code> 插件。AppId 和 appKey 需要注册 <a href="https://leancloud.app/" target="_blank" rel="noopener">Leancloud</a> 后获取并配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.</span><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">appId</span><span class="token punctuation">:</span> xxxxxxx  <span class="token key atrule">appKey</span><span class="token punctuation">:</span> xxxxxxx  <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">visitor</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> <span class="token string">'mm'</span> <span class="token comment" spellcheck="true"># Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> <span class="token string">'欢迎留言！请在这里说出你的想法！'</span> <span class="token comment" spellcheck="true"># Comment Box placeholder</span>  <span class="token key atrule">background</span><span class="token punctuation">:</span> /medias/comment_bg.png</code></pre><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h1><ol><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">hexo-theme-matery文档</a></li><li><a href="https://www.jianshu.com/p/c7de2ae59975" target="_blank" rel="noopener">Hexo-abbrlink生成唯一永久文章链接</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】-3.在Hexo博客上发布文章</title>
      <link href="posts/abd622ec.html"/>
      <url>posts/abd622ec.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-使用-hexo-new创建文章"><a href="#1-使用-hexo-new创建文章" class="headerlink" title="1. 使用 hexo new创建文章"></a>1. 使用 hexo new创建文章</h1><h2 id="1-1-文章创建"><a href="#1-1-文章创建" class="headerlink" title="1.1 文章创建"></a>1.1 文章创建</h2><p>hexo 中提供了很多命令，<code>hexo new</code> 可以用来创建  页面、文章、草稿。</p><p>它的语法如下：</p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><p>创建文章时，可以使用如下命令：</p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"文章标题"</span></code></pre><p>创建后的文章保存在 <code>Hexo/source/_posts</code> 目录下，比如执行 <code>hexo new "第一篇Hexo博文"</code></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031212912433.png"></p><p>创建后的文件是 markdown 格式，它默认包含部分 <code>Front-matter</code></p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 第一篇Hexo博文<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-10-31 21:28:38</span><span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token punctuation">---</span></code></pre><p>后续可以使用 markdown 编辑器来书写具体内容，比如 <code>Typora</code>。</p><h2 id="1-2-文章预览"><a href="#1-2-文章预览" class="headerlink" title="1.2 文章预览"></a>1.2 文章预览</h2><p>文章写好之后，要查看在Hexo博客中的展示效果，可以使用如下命令：</p><pre class=" language-bash"><code class="language-bash">$ hexo g$ hexo s</code></pre><p>之后可以访问 <code>http://localhost:4000</code> 预览文章效果，后面可将其发布到服务器</p><h2 id="1-3-文章发布"><a href="#1-3-文章发布" class="headerlink" title="1.3 文章发布"></a>1.3 文章发布</h2><p>文章写好之后，可以使用如下命令将其推送到服务器上</p><pre class=" language-bash"><code class="language-bash">$ hexo g$ hexo d</code></pre><p>或者将两个命令合二为一</p><pre class=" language-bash"><code class="language-bash">$ hexo g -d</code></pre><pre class=" language-bash"><code class="language-bash">$ hexo d -g</code></pre><h1 id="2-直接创建md文件"><a href="#2-直接创建md文件" class="headerlink" title="2. 直接创建md文件"></a>2. 直接创建md文件</h1><p>除了使用 <code>hexo new</code> 命令创建md文件，也可以直接在 <code>Hexo/source/_posts</code> 目录下创建 md 文件；</p><p>然后手动添加 Front-matter；</p><p>后面通过 <code>hexo clean &amp;&amp; hexo g</code> 命令，可以直接生成静态的页面；</p><p>Hexo 在执行 <code>hexo g</code> 命令时，会将其归档到 <code>db.json</code> 中。</p><h1 id="3-Front-matter"><a href="#3-Front-matter" class="headerlink" title="3. Front-matter"></a>3. Front-matter</h1><h2 id="3-1-参数介绍"><a href="#3-1-参数介绍" class="headerlink" title="3.1 参数介绍"></a>3.1 参数介绍</h2><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hello World<span class="token key atrule">date</span><span class="token punctuation">:</span> 2013/7/13 20<span class="token punctuation">:</span><span class="token datetime number">46:25</span><span class="token punctuation">---</span></code></pre><p>它可以包含如下参数：</p><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。建议至少填写 <code>title</code> 和 <code>date</code> 的值</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h2 id="3-2-最简示例"><a href="#3-2-最简示例" class="headerlink" title="3.2 最简示例"></a>3.2 最简示例</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h2 id="3-3-最全示例"><a href="#3-3-最全示例" class="headerlink" title="3.3 最全示例"></a>3.3 最全示例</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h1><ol><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo文档</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">hexo-theme-matery文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】-2.Hexo常用命令</title>
      <link href="posts/11995a50.html"/>
      <url>posts/11995a50.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Hexo-命令"><a href="#1-Hexo-命令" class="headerlink" title="1. Hexo 命令"></a>1. Hexo 命令</h1><p>在 Hexo 目录下打开命令行，输入 hexo 回车，可以显示 hexo 内置的所有命令</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031174009218.png"></p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><pre class=" language-bash"><code class="language-bash">$ hexo clean</code></pre><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><pre class=" language-bash"><code class="language-bash">$ hexo config</code></pre><p>查看或者修改配置（<code>config.yml</code>）</p><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 全名</span>$ hexo deploy<span class="token comment" spellcheck="true"># 简写</span>$ hexo d</code></pre><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>, <code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><pre class=" language-bash"><code class="language-bash">$ hexo generate<span class="token comment" spellcheck="true"># 简写</span>$ hexo g</code></pre><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录<br>存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的<br>效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><pre class=" language-bash"><code class="language-bash">$ hexo <span class="token function">help</span></code></pre><p>显示帮助信息</p><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><pre class=" language-bash"><code class="language-bash">$ hexo init <span class="token punctuation">[</span>folder<span class="token punctuation">]</span></code></pre><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><pre class=" language-bash"><code class="language-bash">$ hexo list <span class="token operator">&lt;</span>type<span class="token operator">></span></code></pre><p>列出网站资料。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031174854643.png"></p><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><pre class=" language-bash"><code class="language-bash">$ hexo migrate <span class="token operator">&lt;</span>type<span class="token operator">></span></code></pre><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration" target="_blank" rel="noopener">迁移内容</a>。</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031175226031.png"></p><p>新建一条记录。<code>layout</code> 支持 <strong>页面</strong>、<strong>文章</strong>、<strong>草稿</strong>，如果没有设置，使用 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替，默认为 <code>post</code>。如果标题包含空格的话，需使用 ““ 括起来。</p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"post title with whitespace"</span></code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 创建的文章保存在 <code>Hexo/source/_post</code> 目录下；创建的草稿保存在 <code>Hexo/source/_drafts</code> 目录下；对于页面，Hexo 会创建单独的目录，并在目录中放置一个 <code>index.md</code> 文件，如执行 <code>hexo new page test</code> 会创建 <code>Hexo/source/test</code> 目录，并在该目录下创建 <code>index.md</code> 文件。</p><p>可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建一个 `source/about/me.md` 文件，同时 Front Matter 中的 title 为 `"About me"`</span>$ hexo new page --path about/me <span class="token string">"About me"</span></code></pre><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><pre class=" language-bash"><code class="language-bash">$ hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span></code></pre><p>发表草稿。对于尚未完成的内容，可以先通过 <code>hexo new draft &lt;filename&gt;</code> 创建草稿，完成后通过 <code>publish</code> 命令进行发布。</p><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><pre class=" language-bash"><code class="language-bash">$ hexo render <span class="token operator">&lt;</span>file1<span class="token operator">></span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.</code></pre><p>渲染文件。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031180312062.png"></p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><pre class=" language-bash"><code class="language-bash">$ hexo server<span class="token comment" spellcheck="true"># 简写</span>$ hexo s</code></pre><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><pre class=" language-bash"><code class="language-bash">$ hexo version</code></pre><p>显示 Hexo 版本。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】-1.使用Github Pages和Hexo搭建博客</title>
      <link href="posts/aaa69aff.html"/>
      <url>posts/aaa69aff.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是-Hexo"><a href="#1-什么是-Hexo" class="headerlink" title="1.什么是 Hexo"></a>1.什么是 Hexo</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h1><ol><li>安装NodeJs（NodeJs可以使用解压安装的方式）</li><li>创建Github账号</li><li>在本地安装Git</li><li>在GitHub配置本地SSH公钥</li></ol><h1 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h1><h2 id="3-1-下载Hexo"><a href="#3-1-下载Hexo" class="headerlink" title="3.1 下载Hexo"></a>3.1 下载Hexo</h2><p>在磁盘上创建文件夹，如 <code>E:\笔记\博客\GiteePages</code> ，将博客相关文件保存到该目录下，在该目录下打开Git命令行，使用下面两条命令进行安装。两条命令的含义分别是：</p><ul><li>npm 全局安装 hexo-cli</li><li>npm 全局安装 hexo-deployer-git，使用git来发布hexo</li></ul><pre class=" language-shell"><code class="language-shell">npm install hexo-cli -g  npm install hexo-deployer-git --save  </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031165008970.png"></p><h2 id="3-2-Hexo-初始化"><a href="#3-2-Hexo-初始化" class="headerlink" title="3.2 Hexo 初始化"></a>3.2 Hexo 初始化</h2><p>在当前目录下新建 Hexo 文件夹，即 <code>E:\笔记\博客\GiteePages\Hexo</code>，并进入该文件夹，执行如下命令初始化 hexo，hexo 的初始化需要在一个干净的目录下</p><pre class=" language-shell"><code class="language-shell">hexo init</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031170105600.png"></p><p>Hexo 安装完成后，当前目录下新建所需要的文件，Hexo 文件夹内容如下：<br><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031170239901.png"></p><h2 id="3-3-本地查看效果"><a href="#3-3-本地查看效果" class="headerlink" title="3.3 本地查看效果"></a>3.3 本地查看效果</h2><p>在 Hexo 目录下打开命令行，使用如下命令生成静态资源文件，并启动 hexo server。然后可以通过 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a> 进行访问</p><pre class=" language-shell"><code class="language-shell">hexo generate  hexo server  </code></pre><p>hexo server 启动成功后，会显示如下信息</p><pre class=" language-powershell"><code class="language-powershell">E:\笔记\博客\GithubPages\Hexo>hexo serverINFO  Validating configINFO  <span class="token function">Start</span> processingINFO  Hexo is running at http:<span class="token operator">/</span><span class="token operator">/</span>localhost:4000 <span class="token punctuation">.</span> Press Ctrl<span class="token operator">+</span>C to stop<span class="token punctuation">.</span></code></pre><p>访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看效果：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031170519350.png"></p><h1 id="4-在-Github-Pages-上部署-Hexo"><a href="#4-在-Github-Pages-上部署-Hexo" class="headerlink" title="4. 在 Github Pages 上部署 Hexo"></a>4. 在 Github Pages 上部署 Hexo</h1><p>本地的 Hexo 博客已经安装成功了，如果需要让博客被其他人访问到，可以部署到 Github Pages 或者 云服务器上。这里先将它部署到 Github Pages。</p><h2 id="4-1-在Github创建仓库"><a href="#4-1-在Github创建仓库" class="headerlink" title="4.1 在Github创建仓库"></a>4.1 在Github创建仓库</h2><p>在 Github 上创建仓库，在创建时按照如下步骤，需要指定仓库名并勾选 readme 初始化</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031171607156.png"></p><h2 id="4-2-将Hexo推送到Github仓库"><a href="#4-2-将Hexo推送到Github仓库" class="headerlink" title="4.2 将Hexo推送到Github仓库"></a>4.2 将Hexo推送到Github仓库</h2><ol><li><p>复制仓库地址，使用SSH协议</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031172348649.png"></p></li><li><p>将仓库地址配置到Hexo中</p><p>在 Hexo 目录下，有一个 <code>_config.yml</code> 的配置文件，里面保存了 Hexo 相关的配置信息。</p><p>找了 deploy 配置项，按照如下方式进行配置</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20201031172754942.png"></p></li><li><p>推送Hexo文件到Github</p><p>使用如下命令生成 hexo 文件，并推送到 Github</p><pre class=" language-shell"><code class="language-shell">hexo g  hexo d</code></pre><p>或者直接执行</p><pre class=" language-shell"><code class="language-shell">hexo g -d</code></pre></li><li><p>访问博客</p><p>推送成功后，可以通过 https://&lt;username&gt;.github.io 进行访问，比如： <a href="https://soulballad.github.io/">https://soulballad.github.io/</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/4a17b156.html"/>
      <url>posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Python】-12.Python网络编程</title>
      <link href="posts/ac4faf38.html"/>
      <url>posts/ac4faf38.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Python底层网络模块"><a href="#1-Python底层网络模块" class="headerlink" title="1. Python底层网络模块"></a>1. Python底层网络模块</h1><h2 id="1-1-socket-简介"><a href="#1-1-socket-简介" class="headerlink" title="1.1 socket 简介"></a>1.1 socket 简介</h2><p>计算机网络编程都离不开一个基本的组件：套接字（Socket）。</p><p>套接字接口以IP地址及通信端口组成套接字地址。远程的套接字地址和本地的套接字地址完成连接后，再加上使用的协议，这个五元组（Five-element Truple，来源IP、目的IP、来源端口、目的端口和协议）作为套接字对就可以彼此之间交换数据了。</p><p>套接字本质上是操作系统提供的一种进程间的通信机制，使主机间或者一台计算机上的进程间可以通信。在Python中，大多数网络模块都隐藏了socket模块的基本细节，用户在调用网络库的时候可以不直接和套接字交换。但是Python官方库还是提供了socket模块来允许用户操作许多底层的套接字接口。</p><h2 id="1-2-socket模块"><a href="#1-2-socket模块" class="headerlink" title="1.2 socket模块"></a>1.2 socket模块</h2><p>套接字格式：socket(family, type, protocal)。使用给定的套接字族、套接字类型、协议编号（默认为0）来创建套接字。</p><ul><li><p>family 指定应用程序使用的通信协议的协议族，对于TCP/IP协议族，该参数为AF_INET，以下为该参数的一些常用选项；</p><table><thead><tr><th>Family参数</th><th>描述</th></tr></thead><tbody><tr><td>socket.AF_UNIX</td><td>只能够用于单一的Unix系统进程间通信</td></tr><tr><td>socket.AF_INET</td><td>服务器之间网络通信</td></tr><tr><td>socket.AF_INET6</td><td>IPv6</td></tr><tr><td>socket.AF_UNSPEC</td><td>适合任何协议族的地址，可能是IPv4也可能是IPv6</td></tr></tbody></table></li><li><p>type 是要创建套接字的类型，以下为该参数的一些常用选项；</p><table><thead><tr><th>Type参数</th><th>描述</th></tr></thead><tbody><tr><td>socket.SOCK_STREAM</td><td>流式socket , 当使用TCP时选择此参数</td></tr><tr><td>socket.SOCK_DGRAM</td><td>数据包式socket ,当使用UDP时选择此参数</td></tr><tr><td>socket.SOCK_RAW</td><td>原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次，SOCK_RAW也可以处理特殊的IPv4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头。</td></tr></tbody></table></li><li><p>protocol 指明所要接收的协议类型，通常为0或者不填。</p><table><thead><tr><th>Type参数</th><th>描述</th></tr></thead><tbody><tr><td>socket.IPPROTO_RAW</td><td>相当于protocol=255，此时socket只能用来发送IP包，而不能接收任何的数据。发送的数据需要自己填充IP包头，并且自己计算校验和</td></tr><tr><td>socket.IPPROTO_IP</td><td>相当于protocol=0，此时用于接收任何的IP数据包。其中的校验和和协议分析由程序自己完成。</td></tr></tbody></table></li></ul><p>使用例子：</p><ul><li><p>创建TCP Socket：</p><pre class=" language-python"><code class="language-python">s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span></code></pre></li><li><p>创建UDP Socket：</p><pre class=" language-python"><code class="language-python">s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span></code></pre></li></ul><h2 id="1-3-socket对象方法"><a href="#1-3-socket对象方法" class="headerlink" title="1.3 socket对象方法"></a>1.3 socket对象方法</h2><p><strong>服务器端套接字</strong></p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">服务器端套接字</td><td align="left"></td></tr><tr><td align="left">s.bind()</td><td align="left">绑定地址（host,port）到套接字， 在AF_INET下，以元组（host,port）的形式表示地址。</td></tr><tr><td align="left">s.listen()</td><td align="left">开始TCP监听。backlog指定在拒绝连接之前，操作系统可以挂起的最大连接数量。该值至少为1，大部分应用程序设为5就可以了。</td></tr><tr><td align="left">s.accept()</td><td align="left">被动接受TCP客户端连接,(阻塞式)等待连接的到来</td></tr></tbody></table><p><strong>客户端套接字</strong></p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">s.connect()</td><td align="left">主动初始化TCP服务器连接，。一般address的格式为元组（hostname,port），如果连接出错，返回socket.error错误。</td></tr><tr><td align="left">s.connect_ex()</td><td align="left">connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</td></tr></tbody></table><p><strong>公共用途的套接字函数</strong></p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">s.recv()</td><td align="left">接收TCP数据，数据以字符串形式返回，bufsize指定要接收的最大数据量。flag提供有关消息的其他信息，通常可以忽略。</td></tr><tr><td align="left">s.send()</td><td align="left">发送TCP数据，将string中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于string的字节大小。</td></tr><tr><td align="left">s.sendall()</td><td align="left">完整发送TCP数据，完整发送TCP数据。将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。</td></tr><tr><td align="left">s.recvfrom()</td><td align="left">接收UDP数据，与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址。</td></tr><tr><td align="left">s.sendto()</td><td align="left">发送UDP数据，将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。</td></tr><tr><td align="left">s.close()</td><td align="left">关闭套接字</td></tr><tr><td align="left">s.getpeername()</td><td align="left">返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</td></tr><tr><td align="left">s.getsockname()</td><td align="left">返回套接字自己的地址。通常是一个元组(ipaddr,port)</td></tr><tr><td align="left">s.setsockopt(level,optname,value)</td><td align="left">设置给定套接字选项的值。</td></tr><tr><td align="left">s.getsockopt(level,optname[.buflen])</td><td align="left">返回套接字选项的值。</td></tr><tr><td align="left">s.settimeout(timeout)</td><td align="left">设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如connect()）</td></tr><tr><td align="left">s.gettimeout()</td><td align="left">返回当前超时期的值，单位是秒，如果没有设置超时期，则返回None。</td></tr><tr><td align="left">s.fileno()</td><td align="left">返回套接字的文件描述符。</td></tr><tr><td align="left">s.setblocking(flag)</td><td align="left">如果flag为0，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常。</td></tr><tr><td align="left">s.makefile()</td><td align="left">创建一个与该套接字相关连的文件</td></tr></tbody></table><h1 id="2-TCP编程"><a href="#2-TCP编程" class="headerlink" title="2. TCP编程"></a>2. TCP编程</h1><h2 id="2-1-客户端"><a href="#2-1-客户端" class="headerlink" title="2.1 客户端"></a>2.1 客户端</h2><p>客户端连接</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment" spellcheck="true"># 指定使用IPv4和TCP</span>socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># connect 连接百度</span>socket<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'wwww.baidu.com'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># send 发送数据</span>socket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">'GET / HTTP/1.1\r\nHOST: www.baidu.com\r\nConnection: close\r\n\r\n'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用recv方法接收数据</span>buffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> socket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> content<span class="token punctuation">:</span>        buffer<span class="token punctuation">.</span>append<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>web_content <span class="token operator">=</span> b<span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>web_content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将请求结果保存到文件中</span><span class="token comment" spellcheck="true"># 分割http协议头，保存的html文件不包含http协议头</span>http_header<span class="token punctuation">,</span> http_content <span class="token operator">=</span> web_content<span class="token punctuation">.</span>split<span class="token punctuation">(</span>b<span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"baidu.html"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>http_content<span class="token punctuation">)</span></code></pre><h2 id="2-2-服务端"><a href="#2-2-服务端" class="headerlink" title="2.2 服务端"></a>2.2 服务端</h2><p>服务端监听</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token comment" spellcheck="true"># 创建socket对象，使用IPv4和tcp</span>socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绑定要监听的ip和端口</span><span class="token comment" spellcheck="true"># 0.0.0.0 监听本机所有ip地址</span>socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开始监听,5表示支持同时连入5个客户端</span>socket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><h2 id="2-3-Demo"><a href="#2-3-Demo" class="headerlink" title="2.3 Demo"></a>2.3 Demo</h2><p>服务端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">echo_server</span><span class="token punctuation">(</span>client<span class="token punctuation">:</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">,</span> address<span class="token punctuation">:</span> tuple<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"欢迎来自{}:{}的客户端"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>address<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> address<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"Welcome from {}:{}\r\n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>address<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> address<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        content <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> content <span class="token operator">==</span> b<span class="token string">"exit"</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">elif</span> content<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"客户端退出了"</span><span class="token punctuation">)</span>    client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">)</span>socket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Server start! Listening 0.0.0.0:2018"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    client<span class="token punctuation">,</span> address <span class="token operator">=</span> socket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>echo_server<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>客户端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketclient <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>client<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"I'm a Client!"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server_content <span class="token operator">=</span> client<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>server_content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>send<span class="token punctuation">(</span>b<span class="token string">"exit"</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="3-UDP编程"><a href="#3-UDP编程" class="headerlink" title="3. UDP编程"></a>3. UDP编程</h1><p>不可靠的的协议，无需创建连接，速度快</p><h2 id="3-1-服务端"><a href="#3-1-服务端" class="headerlink" title="3.1 服务端"></a>3.1 服务端</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketsocket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    data<span class="token punctuation">,</span> address <span class="token operator">=</span> socket<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"收到来自{}:{}的信息"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>address<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> address<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="3-2-客户端"><a href="#3-2-客户端" class="headerlink" title="3.2 客户端"></a>3.2 客户端</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socketsocket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span>server <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">2019</span><span class="token punctuation">)</span>socket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span><span class="token string">"Python从入门到放弃"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> server<span class="token punctuation">)</span>socket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="4-urllib模块"><a href="#4-urllib模块" class="headerlink" title="4. urllib模块"></a>4. urllib模块</h1><p>urllib模块是Python标准库中提供的一个用于处理Http请求的模块，它的功能十分强大，不仅包含HTTP网络通信的功能，还拥有很多和HTTP协议相关的数据处理函数。通过urllib模块可以很方便的实现一个HTTP客户端。</p><p>这里以GET和POST为例，说明urllib模块的功能</p><h2 id="4-1-GET请求"><a href="#4-1-GET请求" class="headerlink" title="4.1 GET请求"></a>4.1 GET请求</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token comment" spellcheck="true"># 抓取百度</span><span class="token keyword">def</span> <span class="token function">fetch_baidu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    http_client <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> http_client<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"HTTP Status: {}, {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>http_client<span class="token punctuation">.</span>status<span class="token punctuation">,</span> http_client<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> http_client<span class="token punctuation">.</span>getheaders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} : {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 也可以使用 request.urlopen("http://www.baidu.com") as f 的表达式省略close</span>    http_client<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 收到的数据解码</span>    <span class="token keyword">return</span> content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">save_page</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"baidu.html"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> fetch_baidu<span class="token punctuation">(</span><span class="token punctuation">)</span>    save_page<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="4-2-POST请求"><a href="#4-2-POST请求" class="headerlink" title="4.2 POST请求"></a>4.2 POST请求</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> pprint<span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token punctuation">,</span> parse<span class="token keyword">def</span> <span class="token function">fetch_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> <span class="token string">"01kuaixue"</span>    password <span class="token operator">=</span> <span class="token string">"01kuaixue"</span>    <span class="token comment" spellcheck="true"># 参数需要进行url转码</span>    post_data <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构造Request对象</span>    http_request <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">)</span>    http_request<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">"Refer"</span><span class="token punctuation">,</span> <span class="token string">"01kuaixue"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># data参数必须是bytes对象</span>    http_request<span class="token punctuation">.</span>data <span class="token operator">=</span> post_data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>http_request<span class="token punctuation">)</span> <span class="token keyword">as</span> http_response<span class="token punctuation">:</span>        content <span class="token operator">=</span> http_response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    fetch_page<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="5-requests模块"><a href="#5-requests模块" class="headerlink" title="5. requests模块"></a>5. requests模块</h1><h2 id="5-1-requests模块介绍"><a href="#5-1-requests模块介绍" class="headerlink" title="5.1 requests模块介绍"></a>5.1 requests模块介绍</h2><p>虽然Python提供了和HTTP相关urllib模块，但是由于HTTP协议本身十分负责，而且Web技术日新月异，更新快捷，所以要更新一个标准库已经不是一件十分容易的事。这时候我们就可以使用requests模块。</p><p>requests是一个第三方模块，在在使用之前需要进行安装，不需要用户手动为URL添加查询字串，也不需要对POST数据进行表单编码。Keep-Alive和HTTP连接池的功能是100%自动化的。</p><p>requests能完全满足目前Web的需求，功能特性如下:</p><ul><li>Keep-Alive&amp;连接池。</li><li>国际化域名和URL。</li><li>带持久Cookie的会话。</li><li>浏览器式的SSL认证。</li><li>自动内容解码。</li><li>基本/摘要式的身份认证。</li><li>优雅的key/value Cookie。</li><li>自动解压。</li><li>Unicode响应体。 </li><li>HITP(S)代理支持。</li><li>文件分块上传。</li><li>流下载。</li><li>连接超时。</li><li>分块请求。</li><li>支持.netrc。</li></ul><p>requests安装：</p><pre class=" language-bash"><code class="language-bash">conda <span class="token function">install</span> requestspip3 <span class="token function">install</span> requests</code></pre><h2 id="5-2-requests模块简单使用"><a href="#5-2-requests模块简单使用" class="headerlink" title="5.2 requests模块简单使用"></a>5.2 requests模块简单使用</h2><p>使用requests发送网络请求比较简单，一开始要导入requests模块，然后尝试获取某个网页，如GET、POST、PUT、DELETE、HEAD和OPTION等。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsr <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># POST参数只需要传递字典即可，不需要手动执行urlencode</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/put'</span><span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'value'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/delete"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/delete"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>options<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/delete"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】-11.Python正则表达式</title>
      <link href="posts/ecd0efa4.html"/>
      <url>posts/ecd0efa4.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-正则表达式语法"><a href="#1-正则表达式语法" class="headerlink" title="1. 正则表达式语法"></a>1. 正则表达式语法</h1><h2 id="1-1-普通字符"><a href="#1-1-普通字符" class="headerlink" title="1.1 普通字符"></a>1.1 普通字符</h2><p>普通字符是正则表达式中最基本的结构之一，要理解正则表达式自然也要从普通字符开始。</p><p>普通字符包括没有显示指定为元字符的所有可打印和不可打印字符，包括所有大写字母和小写字母、所有数字、所有标点符号和一些其他符号。</p><p>例如：</p><blockquote><p>[0-9]      匹配所有数字</p><p>[a-z]      匹配所有小写字母</p><p>[yY]es   匹配 yes或Yes</p></blockquote><h2 id="1-2-字符转义"><a href="#1-2-字符转义" class="headerlink" title="1.2 字符转义"></a>1.2 字符转义</h2><p>有些字符拥有特殊的含义，匹配该类字符时需要对其进行转义，转义使用 “\”。</p><p>例如：</p><blockquote><p>[ \[ ]      匹配 [</p><p>[0\-9]    匹配 0、-、9 三个字符</p></blockquote><h2 id="1-3-元字符"><a href="#1-3-元字符" class="headerlink" title="1.3 元字符"></a>1.3 元字符</h2><p>元字符就是正则表达式中拥有特殊意义的字符</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “" 而 “(“ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td align="left">?</td><td align="left">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”<strong>(.|\n)</strong>“的模式。</td></tr><tr><td align="left">(pattern)</td><td align="left">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td align="left">(?:pattern)</td><td align="left">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td align="left">(?=pattern)</td><td align="left">正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?=95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?!pattern)</td><td align="left">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?&lt;=pattern)</td><td align="left">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”`(?&lt;=95</td></tr><tr><td align="left">(?&lt;!pattern)</td><td align="left">反向否定预查，与正向否定预查类似，只是方向相反。例如”`(?&lt;!95</td></tr><tr><td align="left">x|y</td><td align="left">匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td align="left">[xyz]</td><td align="left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td align="left">[^xyz]</td><td align="left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td align="left">[a-z]</td><td align="left">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td align="left">[^a-z]</td><td align="left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td align="left">\cx</td><td align="left">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\d</td><td align="left">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td align="left">\D</td><td align="left">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td align="left">\w</td><td align="left">匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td align="left">\W</td><td align="left">匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td align="left">\xn</td><td align="left">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td align="left">\num</td><td align="left">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td align="left">\n</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td align="left">\nm</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td align="left">\nml</td><td align="left">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td align="left">\un</td><td align="left">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h2 id="1-4-限定符"><a href="#1-4-限定符" class="headerlink" title="1.4 限定符"></a>1.4 限定符</h2><p>限定符指定输入中必须存在字符、组或字符类的多少个实例才能找到匹配项。上面的 “*”、“+”、“?”、“{n}”、“{n,}” 和 “{n,m}” 都是限定符。</p><p>例如：</p><blockquote><p>y{5} -&gt; 匹配 yyyyy，3{2} -&gt; 匹配 33，\w{3} -&gt; 匹配三个字母<br>y{3,} -&gt; 匹配 yyy,yyyy,yyyy…，[0-9]{3,} -&gt; 匹配3位以上的数字<br>y{2,4} -&gt; 匹配 yy,yyy,yyyy，[0-9]{8,11} -&gt; 匹配 8-11 为数字</p></blockquote><h2 id="1-5-定位符"><a href="#1-5-定位符" class="headerlink" title="1.5 定位符"></a>1.5 定位符</h2><p>定位符能够将正则表达式固定到行首或行尾，它们还能够创建这样的正则表达式：正则表达式将出现在一个单词内、一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界， “^” 和 “$” 分别指定字符串的开始和结束，“\b” 描述单词的前边界或后边界， “\B” 表示非单词的边界。以下是正则表达式的定位符：</p><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr></tbody></table><h2 id="1-6-分组构造"><a href="#1-6-分组构造" class="headerlink" title="1.6 分组构造"></a>1.6 分组构造</h2><p>分组构造描述了正则表达式的子表达式，用于捕获输入字符串的子字符串。</p><h2 id="1-7-匹配模式"><a href="#1-7-匹配模式" class="headerlink" title="1.7 匹配模式"></a>1.7 匹配模式</h2><p>匹配模式是指匹配的时候使用的规则。以下几种常见的匹配模式：</p><ul><li>不区分大小写模式：指定单词匹配时正则表达式不区分字符串中的大小写。</li><li>单行模式（或者叫点号通配）：改变元字符的匹配方式，用于匹配任意字符。</li><li>多行模式：改变 “^” 和 “$” 的匹配模式，匹配字符串中一部分。</li></ul><h1 id="2-re模块"><a href="#2-re模块" class="headerlink" title="2. re模块"></a>2. re模块</h1><h2 id="2-1-re模块介绍"><a href="#2-1-re模块介绍" class="headerlink" title="2.1 re模块介绍"></a>2.1 re模块介绍</h2><p>Python标准库中提供了与Perl类似的正则表达式匹配操作re模块。</p><p>正则表达式中的许多元字符使用 “\” 开头，这与Python在字符串中相同的字符使用冲突。极端情况下，想要匹配 文字”\“ ，正则表达式需要写成 ”\\\\“ 。</p><p>有一种常见的解决方案是在定义字符串时使用 “r” 前缀。例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\\\'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出\\</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出\</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'\\'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出\\</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出一个换行符</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出\n字符</span></code></pre><h2 id="2-2-compile函数"><a href="#2-2-compile函数" class="headerlink" title="2.2 compile函数"></a>2.2 compile函数</h2><p>compile函数用于编译正则表达式，生成Pattern对象。后面可以使用这个Pattern对象进行正则匹配</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\w+'</span><span class="token punctuation">)</span></code></pre><h2 id="2-3-match函数"><a href="#2-3-match函数" class="headerlink" title="2.3 match函数"></a>2.3 match函数</h2><p>match方法用于查找字符串指定位置正则匹配。它只匹配一次，而不会匹配所有的结果。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 匹配至少一个数字</span>m1 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'one123'</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 默认匹配整个字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span>                                       <span class="token comment" spellcheck="true"># None</span>m2 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'one123'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 匹配位置从3到5的字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span>                                       <span class="token comment" spellcheck="true"># 匹配到则返回Match对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true"># 12</span>m3 <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span> <span class="token string">'one123'</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 不使用compile直接匹配，匹配整个字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span>                                       <span class="token comment" spellcheck="true"># None</span>m4 <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">'[a-z]+'</span><span class="token punctuation">,</span> <span class="token string">'Abcde'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 使用忽略大小写模式</span><span class="token keyword">print</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span>                                       <span class="token comment" spellcheck="true"># 返回Match对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>m4<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true"># Abcde</span></code></pre><h2 id="2-4-re-search"><a href="#2-4-re-search" class="headerlink" title="2.4 re.search"></a>2.4 re.search</h2><p>search方法用于查找字符串指定位置正则匹配。它只匹配一次，不返回所有结果。</p><p>search函数与match的区别：match函数需要完全满足正则表达式才返回，而search函数只需要字符串中包含匹配正则表达式的子串就认为匹配。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 匹配至少一个数字</span>m1 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'one123'</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># 默认匹配整个字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span>                                       <span class="token comment" spellcheck="true"># 123</span>m2 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'one123'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 匹配位置从3到5的字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span>                                       <span class="token comment" spellcheck="true"># 匹配到则返回Match对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true"># 12</span>m3 <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span> <span class="token string">'one123'</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 不使用compile直接匹配，匹配整个字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span>                                       <span class="token keyword">print</span><span class="token punctuation">(</span>m3<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true"># 123</span>m4 <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">'[a-z]+'</span><span class="token punctuation">,</span> <span class="token string">'Abcde'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 使用忽略大小写模式</span><span class="token keyword">print</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span>                                       <span class="token comment" spellcheck="true"># 返回Match对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>m4<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true"># Abcde</span></code></pre><h2 id="2-5-re-findall"><a href="#2-5-re-findall" class="headerlink" title="2.5 re.findall"></a>2.5 re.findall</h2><p>match和serach函数都是只匹配一次。在很多情况下，会需要搜索整个字符串，获取全部匹配结果，可以使用findall函数。</p><p>findall函数使用方法与match和search类似，但返回结果不同：无论是否匹配到都会返回一个list对象。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\d{2}'</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 匹配2个数字</span>m1 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'one1234'</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 默认匹配整个字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span>                                       <span class="token comment" spellcheck="true"># ['12', '34']</span>m2 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'one123'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 匹配位置从3到5的字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span>                                       <span class="token comment" spellcheck="true"># []</span>m3 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span> <span class="token string">'one123'</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 不使用compile直接匹配，匹配整个字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span>                                       <span class="token comment" spellcheck="true"># ['123']</span>m4 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'[a-z]'</span><span class="token punctuation">,</span> <span class="token string">'123Abcde'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 使用忽略大小写模式</span><span class="token keyword">print</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span>                                       <span class="token comment" spellcheck="true"># ['A', 'b', 'c', 'd', 'e']</span></code></pre><h2 id="2-6-re-split"><a href="#2-6-re-split" class="headerlink" title="2.6 re.split"></a>2.6 re.split</h2><p>字符串也有split方法，但是字符串只能完全匹配相同的字符。re模块中的split方法可以用正则表达式丰富分隔字符串的规则。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'[\s\, \;]+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 匹配空格,和;</span>m1 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'a,b;; c   d'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span>                                   <span class="token comment" spellcheck="true"># ['a', 'b', 'c', 'd']#</span>m2<span class="token operator">=</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>r<span class="token string">'[\s\,\;]+'</span><span class="token punctuation">,</span> <span class="token string">'a,b;; c   d'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span>                                   <span class="token comment" spellcheck="true"># ['a', 'b', 'c', 'd']#</span></code></pre><h2 id="2-7-re-sub"><a href="#2-7-re-sub" class="headerlink" title="2.7 re.sub"></a>2.7 re.sub</h2><p>同样，re模块也提供了使用正则表达式来替换字符串的方法————sub方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> res <span class="token operator">=</span> <span class="token string">'hello 123 world 456'</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'(\w+) (\w+)'</span><span class="token punctuation">)</span>m1 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用 'hello world' 替换 'hello 123' 和 'world 456'</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># hello world hello world</span>m2 <span class="token operator">=</span> pattern<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 只替换一次</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># hello world world 456</span>m3 <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">'(\w+) (\w+)'</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># hello world world 456</span></code></pre><h1 id="3-扩展知识"><a href="#3-扩展知识" class="headerlink" title="3. 扩展知识"></a>3. 扩展知识</h1><h2 id="3-1-re的分组分配"><a href="#3-1-re的分组分配" class="headerlink" title="3.1 re的分组分配"></a>3.1 re的分组分配</h2><p>正则表达式可以分组，不同的组使用一对圆括号 “()” 来隔离。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> rep1 <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'\d-\d-\d'</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 不分组</span>m1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'1-2-3'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># ()</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 1-2-3</span>p2 <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'(\d)-(\d)-(\d)'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 分组</span>m2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'1-2-3'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># ('1', '2', '3')</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 1-2-3</span>m3 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'(\d)-(\d)-(\d)'</span><span class="token punctuation">,</span> <span class="token string">'1-2-3-4-5-6'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># [('1', '2', '3'), ('4', '5', '6')]</span></code></pre><h2 id="3-2-贪婪与非贪婪匹配"><a href="#3-2-贪婪与非贪婪匹配" class="headerlink" title="3.2 贪婪与非贪婪匹配"></a>3.2 贪婪与非贪婪匹配</h2><p>贪婪与非贪婪模式指的是限定符操作时尽可能多地匹配字符串还是尽可能少地匹配字符串。</p><p>贪婪匹配指的是限定符尽可能多地匹配字符串。默认情况下限定符都是贪婪匹配。</p><p>非贪婪匹配指的则是限定符尽可能少地匹配字符串。在限定符后加上 “?” 表示非贪婪匹配。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> rem1 <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">'.+'</span><span class="token punctuation">,</span> <span class="token string">'Are you ok? No, I amd not ok.'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 贪婪</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># Are you ok? No, I amd not ok.</span>m2 <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">'.+?'</span><span class="token punctuation">,</span> <span class="token string">'Are you ok? No, I amd not ok.'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 非贪婪</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># A</span>m3 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;.+>'</span><span class="token punctuation">,</span> r<span class="token string">'&lt;this>&lt;is>&lt;an>&lt;example>'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 贪婪</span><span class="token keyword">print</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># ['&lt;this>&lt;is>&lt;an>&lt;example>']</span>m4 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'&lt;.+?>'</span><span class="token punctuation">,</span> r<span class="token string">'&lt;this>&lt;is>&lt;an>&lt;example>'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 非贪婪</span><span class="token keyword">print</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># ['&lt;this>', '&lt;is>', '&lt;an>', '&lt;example>']</span></code></pre><h2 id="3-3-零宽断言"><a href="#3-3-零宽断言" class="headerlink" title="3.3 零宽断言"></a>3.3 零宽断言</h2><p>零宽断言正如它的名字一样，是一种零宽度的匹配，它匹配到的内容不会保存到匹配结果中去，最终匹配结果只是一个位置而已。</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>(?=exp)</td><td>匹配exp后面的位置</td></tr><tr><td>(?&lt;=exp)</td><td>匹配exp前面的位置</td></tr><tr><td>(?!exp)</td><td>匹配后面跟的不是exp的位置</td></tr><tr><td>(?&lt;!exp)</td><td>匹配前面不是exp的位置</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> res <span class="token operator">=</span> r<span class="token string">'eating apple seeing paper watching movie'</span>m1 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'(\b\w+?)ing'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># ['eat', 'see', 'watch']</span>m2 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'(.+?)(?=ing)'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># ['eat', 'ing apple see', 'ing paper watch']</span>m3 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'(.+?)(?&lt;=ing)'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># ['eating', ' apple seeing', ' paper watching']</span>s <span class="token operator">=</span> <span class="token string">'unite one unethical ethics use unite ultimate'</span>m4 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\b(?!un)\w+\b'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m4<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># ['one', 'ethics', 'use', 'ultimate']</span>m5 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'(?&lt;![a-z])\d{3,}'</span><span class="token punctuation">,</span> <span class="token string">'abc123, 123, 4567'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m5<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># ['123', '4567']</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】-10.Python线程和进程</title>
      <link href="posts/eb520850.html"/>
      <url>posts/eb520850.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-线程"><a href="#1-线程" class="headerlink" title="1. 线程"></a>1. 线程</h1><p>Python中关于线程的主要是 _thread 和 threading 模块</p><h2 id="1-1-thread-模块"><a href="#1-1-thread-模块" class="headerlink" title="1.1 _thread 模块"></a>1.1 _thread 模块</h2><h3 id="1-1-1-创建线程"><a href="#1-1-1-创建线程" class="headerlink" title="1.1.1 创建线程"></a>1.1.1 创建线程</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> datetime<span class="token keyword">import</span> _threaddate_time_format <span class="token operator">=</span> <span class="token string">"%H:%M:%S"</span><span class="token keyword">def</span> <span class="token function">get_time_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>now<span class="token punctuation">,</span> date_time_format<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">thread_function</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t start at %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t sleep"</span> <span class="token operator">%</span> thread_id<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t finish at %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main thread start at %s"</span> <span class="token operator">%</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 启动新线程，接收一个 元组 作为参数，返回一个标识符</span>        _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>thread_function<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main thread finish at %s"</span> <span class="token operator">%</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="1-1-2-使用锁"><a href="#1-1-2-使用锁" class="headerlink" title="1.1.2 使用锁"></a>1.1.2 使用锁</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> datetime<span class="token keyword">import</span> _threaddate_time_format <span class="token operator">=</span> <span class="token string">"%H:%M:%S"</span><span class="token keyword">def</span> <span class="token function">get_time_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>now<span class="token punctuation">,</span> date_time_format<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">thread_function</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t start at %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t sleep"</span> <span class="token operator">%</span> thread_id<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t finish at %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main Thread start at %s"</span> <span class="token operator">%</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    locks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        lock <span class="token operator">=</span> _thread<span class="token punctuation">.</span>allocate_lock<span class="token punctuation">(</span><span class="token punctuation">)</span>        lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        locks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>lock<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        _thread<span class="token punctuation">.</span>start_new_thread<span class="token punctuation">(</span>thread_function<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> locks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> locks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>locked<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main Thread finish at %s"</span> <span class="token operator">%</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="1-2-threading-模块"><a href="#1-2-threading-模块" class="headerlink" title="1.2 threading 模块"></a>1.2 threading 模块</h2><h3 id="1-2-1-创建线程"><a href="#1-2-1-创建线程" class="headerlink" title="1.2.1 创建线程"></a>1.2.1 创建线程</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> datetime<span class="token keyword">import</span> threadingdate_time_format <span class="token operator">=</span> <span class="token string">"%H:%M:%S"</span><span class="token keyword">def</span> <span class="token function">get_time_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>now<span class="token punctuation">,</span> date_time_format<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">thread_function</span><span class="token punctuation">(</span>thread_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t start at %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t sleep"</span> <span class="token operator">%</span> thread_id<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t finish at %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>thread_id<span class="token punctuation">,</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main Thread start at %s"</span> <span class="token operator">%</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 创建线程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>thread_function<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 启动线程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待线程执行完毕</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main Thread finish at %s"</span> <span class="token operator">%</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="1-2-2-通过子类创建线程"><a href="#1-2-2-通过子类创建线程" class="headerlink" title="1.2.2 通过子类创建线程"></a>1.2.2 通过子类创建线程</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> datetime<span class="token keyword">import</span> threadingdate_time_format <span class="token operator">=</span> <span class="token string">"%H:%M:%S"</span><span class="token keyword">def</span> <span class="token function">get_time_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span>now<span class="token punctuation">,</span> date_time_format<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> thread_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyThread<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>thread_id <span class="token operator">=</span> thread_id    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t start at %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>thread_id<span class="token punctuation">,</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t sleep"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>thread_id<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t finish at %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>thread_id<span class="token punctuation">,</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main Thread start at %s"</span> <span class="token operator">%</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 创建线程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        thread <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 启动线程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待线程执行完毕</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main Thread finish at %s"</span> <span class="token operator">%</span> get_time_str<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="1-3-线程同步"><a href="#1-3-线程同步" class="headerlink" title="1.3 线程同步"></a>1.3 线程同步</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threadingthread_lock <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> thread_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyThread<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>thread_id <span class="token operator">=</span> thread_id    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 锁定</span>        thread_lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t printing! times:%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>thread_id<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 释放</span>        thread_lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 锁定</span>        thread_lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thread %d\t printing! times:%d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>thread_id<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 释放</span>        thread_lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main Thread start"</span><span class="token punctuation">)</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 创建线程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        thread <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>thread<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 启动线程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待线程执行完毕</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main Thread finish"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取锁</span>    thread_lock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="1-4-队列"><a href="#1-4-队列" class="headerlink" title="1.4 队列"></a>1.4 队列</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1. 队列使用</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------------------------- 1 ---------------------------------------'</span><span class="token punctuation">)</span><span class="token keyword">from</span> queue <span class="token keyword">import</span> Queueq <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token operator">not</span> q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 2. 队列结合线程使用</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------------------------- 2 ---------------------------------------'</span><span class="token punctuation">)</span><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token keyword">import</span> queue<span class="token comment" spellcheck="true"># 创建工作队列并且限制队列的最大元素个数为 10</span>work_queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建结果队列并且限制队列的最大元素个数为 10</span>result_queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">WorkThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> thread_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>WorkThread<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>thread_id <span class="token operator">=</span> thread_id    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token operator">not</span> work_queue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 从工作队列中获取数据</span>            work <span class="token operator">=</span> work_queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 模拟工作耗时3秒</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            out <span class="token operator">=</span> <span class="token string">"Thread %d\t received %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>thread_id<span class="token punctuation">,</span> work<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 把结果放入结果队列</span>            result_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 工作队列放入数据</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        work_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"message id %d"</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开启两个工作线程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        thread <span class="token operator">=</span> WorkThread<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出10个结果</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> result_queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="2-进程"><a href="#2-进程" class="headerlink" title="2. 进程"></a>2. 进程</h1><h2 id="2-1-os-模块"><a href="#2-1-os-模块" class="headerlink" title="2.1 os 模块"></a>2.1 os 模块</h2><h3 id="2-1-1-system-函数"><a href="#2-1-1-system-函数" class="headerlink" title="2.1.1 system 函数"></a>2.1.1 system 函数</h3><p>system 函数是最简单的创建进程的方式，函数只有一个参数，就是要执行的命令</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 判断是否是 windows</span><span class="token keyword">if</span> os<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'nt'</span><span class="token punctuation">:</span>    return_code <span class="token operator">=</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"dir"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    return_code <span class="token operator">=</span> os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 判断命令返回值是否是0，0代表执行成功</span><span class="token keyword">if</span> return_code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Run success!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Something wrong!"</span><span class="token punctuation">)</span></code></pre><h3 id="2-1-2-fork"><a href="#2-1-2-fork" class="headerlink" title="2.1.2 fork"></a>2.1.2 fork</h3><p>fork 调用系统 API 创建子进程。但是 fork 函数在 windows 上并不存在，在 linux和mac上可以使用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Main Process ID (%s)"</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pid <span class="token operator">=</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is child process(%s) and main process is %s."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Created a child process (%s)."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="2-2-subprocess-模块"><a href="#2-2-subprocess-模块" class="headerlink" title="2.2 subprocess 模块"></a>2.2 subprocess 模块</h2><h3 id="2-2-1-call"><a href="#2-2-1-call" class="headerlink" title="2.2.1 call"></a>2.2.1 call</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> subprocess<span class="token comment" spellcheck="true"># 判断是否是 windows</span><span class="token keyword">if</span> os<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'nt'</span><span class="token punctuation">:</span>    return_code <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"cmd"</span><span class="token punctuation">,</span> <span class="token string">"/c"</span><span class="token punctuation">,</span> <span class="token string">"dir"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    return_code <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token string">"-l"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 判断命令返回值是否是0，0代表执行成功</span><span class="token keyword">if</span> return_code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Run success!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Something wrong!"</span><span class="token punctuation">)</span></code></pre><h3 id="2-2-2-Popen"><a href="#2-2-2-Popen" class="headerlink" title="2.2.2 Popen"></a>2.2.2 Popen</h3><p>使用 Popen 调用外部命令</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> subprocess<span class="token keyword">if</span> os<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'nt'</span><span class="token punctuation">:</span>    ping <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">"ping -n 5 www.baidu.com"</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    ping <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">"pint -c 5 www.baidu.com"</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 等待命令执行完毕</span>ping<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 答应外部命令的进程id</span><span class="token keyword">print</span><span class="token punctuation">(</span>ping<span class="token punctuation">.</span>pid<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 答应外部命令的返回码</span><span class="token keyword">print</span><span class="token punctuation">(</span>ping<span class="token punctuation">.</span>returncode<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印外部命令的输出内容</span>out <span class="token operator">=</span> ping<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span></code></pre><h2 id="2-3-multiprocessing-Process"><a href="#2-3-multiprocessing-Process" class="headerlink" title="2.3 multiprocessing Process"></a>2.3 multiprocessing Process</h2><h3 id="2-3-1-创建进程"><a href="#2-3-1-创建进程" class="headerlink" title="2.3.1 创建进程"></a>2.3.1 创建进程</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">info</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'module name:'</span><span class="token punctuation">,</span> __name__<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'parent process:'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'process id:'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    info<span class="token punctuation">(</span><span class="token string">'function f'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    info<span class="token punctuation">(</span><span class="token string">'main line'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-3-2-使用子类创建子进程"><a href="#2-3-2-使用子类创建子进程" class="headerlink" title="2.3.2 使用子类创建子进程"></a>2.3.2 使用子类创建子进程</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">MyProcess</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyProcess<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'module name:'</span><span class="token punctuation">,</span> __name__<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'parent process:'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'process id:'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    processes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 创建进程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        processes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>MyProcess<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 启动进程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        processes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待进程结束</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        processes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-3-3-multiprocessing-Queue"><a href="#2-3-3-multiprocessing-Queue" class="headerlink" title="2.3.3 multiprocessing.Queue"></a>2.3.3 multiprocessing.Queue</h3><p>使用 multiprocessing.Queue 实现进程同步</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Queue<span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 创建队列</span>result_queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyProcess</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MyProcess<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取队列</span>        self<span class="token punctuation">.</span>q <span class="token operator">=</span> q    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> <span class="token string">'module name %s\n'</span> <span class="token operator">%</span> __name__        output <span class="token operator">+=</span> <span class="token string">'parent process: %d\n'</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span>        output <span class="token operator">+=</span> <span class="token string">'process id: %d\n'</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    processes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 创建进程并把队列传给进程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        processes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>MyProcess<span class="token punctuation">(</span>result_queue<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 启动进程</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        processes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待进程结束</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        processes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token operator">not</span> result_queue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> result_queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="3-进程池"><a href="#3-进程池" class="headerlink" title="3. 进程池"></a>3. 进程池</h1><h2 id="3-1-multiprocessing-Pool"><a href="#3-1-multiprocessing-Pool" class="headerlink" title="3.1  multiprocessing.Pool"></a>3.1  multiprocessing.Pool</h2><p>使用 multiprocessing 的 Pool 管理进程</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token punctuation">.</span>pool<span class="token keyword">def</span> <span class="token function">process_func</span><span class="token punctuation">(</span>process_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"process id %d start"</span> <span class="token operator">%</span> process_id<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"process id %d end"</span> <span class="token operator">%</span> process_id<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 向进程池中添加要执行的任务</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>process_func<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 先调用close关闭进程池，不能再有新任务加入进程池中</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># join函数等待所有子进程结束</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="3-2-使用-Pool-的map函数"><a href="#3-2-使用-Pool-的map函数" class="headerlink" title="3.2 使用 Pool 的map函数"></a>3.2 使用 Pool 的map函数</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token punctuation">.</span>pool<span class="token keyword">def</span> <span class="token function">process_func</span><span class="token punctuation">(</span>process_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"process id %d start"</span> <span class="token operator">%</span> process_id<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"process id %d end"</span> <span class="token operator">%</span> process_id<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>process_func<span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 先调用close关闭进程池，不能再有新任务加入进程池中</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># join函数等待所有子进程结束</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="4-线程池"><a href="#4-线程池" class="headerlink" title="4. 线程池"></a>4. 线程池</h1><h2 id="4-1-multiprocessing-dummy"><a href="#4-1-multiprocessing-dummy" class="headerlink" title="4.1 multiprocessing.dummy"></a>4.1 multiprocessing.dummy</h2><p>使用 multiprocessing 的 dummy 管理线程</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token punctuation">.</span>dummy<span class="token keyword">def</span> <span class="token function">process_func</span><span class="token punctuation">(</span>process_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"process id %d start"</span> <span class="token operator">%</span> process_id<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"process id %d end"</span> <span class="token operator">%</span> process_id<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>dummy<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 向进程池中添加要执行的任务</span>        pool<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>process_func<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 先调用close关闭进程池，不能再有新任务加入进程池中</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># join函数等待所有子进程结束</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="4-2-使用-dummy-Pool-的map函数"><a href="#4-2-使用-dummy-Pool-的map函数" class="headerlink" title="4.2 使用 dummy.Pool 的map函数"></a>4.2 使用 dummy.Pool 的map函数</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">process_func</span><span class="token punctuation">(</span>process_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"process id %d start"</span> <span class="token operator">%</span> process_id<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"process id %d end"</span> <span class="token operator">%</span> process_id<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>dummy<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>process_func<span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 先调用close关闭进程池，不能再有新任务加入进程池中</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># join函数等待所有子进程结束</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】-9.Python日期和时间</title>
      <link href="posts/6bf2810c.html"/>
      <url>posts/6bf2810c.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h1><h2 id="1-1-时间戳"><a href="#1-1-时间戳" class="headerlink" title="1.1 时间戳"></a>1.1 时间戳</h2><p>时间戳是指格林尼治时间1970年01月01日00时00分00秒（即北京时间1970年01月01日08时00分00秒）到现在的总秒数。</p><h2 id="1-2-时间日期格式化符号"><a href="#1-2-时间日期格式化符号" class="headerlink" title="1.2 时间日期格式化符号"></a>1.2 时间日期格式化符号</h2><p>在Python中会使用到一些特殊的符号来格式化时间日期，类似于字符串格式化中的 “%s” “%d” 等。</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>%y</td><td>两位数的年份表示（00-99）</td></tr><tr><td>%Y</td><td>四位数的年份表示（000-9999）</td></tr><tr><td>%m</td><td>月份（01-12）</td></tr><tr><td>%d</td><td>月内中的一天（0-31）</td></tr><tr><td>%H</td><td>24小时制小时数（0-23）</td></tr><tr><td>%I</td><td>12小时制小时数（01-12）</td></tr><tr><td>%M</td><td>分钟数（00=59）</td></tr><tr><td>%S</td><td>秒（00-59）</td></tr><tr><td>%a</td><td>本地简化星期名称</td></tr><tr><td>%A</td><td>本地完整星期名称</td></tr><tr><td>%b</td><td>本地简化的月份名称</td></tr><tr><td>%B</td><td>本地完整的月份名称</td></tr><tr><td>%c</td><td>本地相应的日期表示和时间表示</td></tr><tr><td>%j</td><td>年内的一天（001-366）</td></tr><tr><td>%p</td><td>本地A.M.或P.M.的等价符</td></tr><tr><td>%U</td><td>一年中的星期数（00-53）星期天为星期的开始</td></tr><tr><td>%w</td><td>星期（0-6），星期天为星期的开始</td></tr><tr><td>%W</td><td>一年中的星期数（00-53）星期一为星期的开始</td></tr><tr><td>%x</td><td>本地相应的日期表示</td></tr><tr><td>%X</td><td>本地相应的时间表示</td></tr><tr><td>%Z</td><td>当前时区的名称</td></tr><tr><td>%%</td><td>%号本身</td></tr></tbody></table><h2 id="1-3-时间元组"><a href="#1-3-时间元组" class="headerlink" title="1.3 时间元组"></a>1.3 时间元组</h2><p>很多Python函数用一个元组装起来的9组数字处理时间:</p><table><thead><tr><th align="left">序号</th><th align="left">字段</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">4位数年</td><td align="left">2008</td></tr><tr><td align="left">1</td><td align="left">月</td><td align="left">1 到 12</td></tr><tr><td align="left">2</td><td align="left">日</td><td align="left">1到31</td></tr><tr><td align="left">3</td><td align="left">小时</td><td align="left">0到23</td></tr><tr><td align="left">4</td><td align="left">分钟</td><td align="left">0到59</td></tr><tr><td align="left">5</td><td align="left">秒</td><td align="left">0到61 (60或61 是闰秒)</td></tr><tr><td align="left">6</td><td align="left">一周的第几日</td><td align="left">0到6 (0是周一)</td></tr><tr><td align="left">7</td><td align="left">一年的第几日</td><td align="left">1到366 (儒略历)</td></tr><tr><td align="left">8</td><td align="left">夏令时</td><td align="left">-1, 0, 1, -1是决定是否为夏令时的旗帜</td></tr></tbody></table><p>上述也就是struct_time元组。这种结构具有如下属性：</p><table><thead><tr><th align="left">序号</th><th align="left">属性</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">tm_year</td><td align="left">2008</td></tr><tr><td align="left">1</td><td align="left">tm_mon</td><td align="left">1 到 12</td></tr><tr><td align="left">2</td><td align="left">tm_mday</td><td align="left">1 到 31</td></tr><tr><td align="left">3</td><td align="left">tm_hour</td><td align="left">0 到 23</td></tr><tr><td align="left">4</td><td align="left">tm_min</td><td align="left">0 到 59</td></tr><tr><td align="left">5</td><td align="left">tm_sec</td><td align="left">0 到 61 (60或61 是闰秒)</td></tr><tr><td align="left">6</td><td align="left">tm_wday</td><td align="left">0到6 (0是周一)</td></tr><tr><td align="left">7</td><td align="left">tm_yday</td><td align="left">1 到 366(儒略历)</td></tr><tr><td align="left">8</td><td align="left">tm_isdst</td><td align="left">-1, 0, 1, -1是决定是否为夏令时的旗帜</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timelocaltime <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"本地时间为 :"</span><span class="token punctuation">,</span> localtime<span class="token comment" spellcheck="true"># 本地时间为 : time.struct_time(tm_year=2016, tm_mon=4, tm_mday=7, tm_hour=10, tm_min=3, tm_sec=27, tm_wday=3, tm_yday=98, tm_isdst=0)</span></code></pre><h1 id="2-time模块"><a href="#2-time模块" class="headerlink" title="2. time模块"></a>2. time模块</h1><h2 id="2-1-time-函数"><a href="#2-1-time-函数" class="headerlink" title="2.1 time 函数"></a>2.1 time 函数</h2><p>time 函数用于返回当前时间的时间戳</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timenow <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前的时间戳是：%f"</span> <span class="token operator">%</span> now<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 当前的时间戳是：1605946614.739190</span></code></pre><h2 id="2-2-localtime-函数"><a href="#2-2-localtime-函数" class="headerlink" title="2.2 localtime 函数"></a>2.2 localtime 函数</h2><p>localtime 函数用于将时间戳转化为本地时间的 struct_time</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前时间"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前时间戳对应的时间"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 当前时间 time.struct_time(tm_year=2020, tm_mon=11, tm_mday=21, tm_hour=16, tm_min=16, tm_sec=54, tm_wday=5, tm_yday=326, tm_isdst=0)</span><span class="token comment" spellcheck="true"># 当前时间戳对应的时间 time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=8, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)</span></code></pre><h2 id="2-3-mktime-函数"><a href="#2-3-mktime-函数" class="headerlink" title="2.3 mktime 函数"></a>2.3 mktime 函数</h2><p>mktime 将 struct_time 对象转化为用秒表示时间的浮点数。mktime 的参数可以是结构化的时间，也可以是完整的 9 位元组元素</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>secs <span class="token operator">=</span> time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time.mktime(t) : %f"</span> <span class="token operator">%</span> secs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time.mktime(time.localtime(secs): %f "</span> <span class="token operator">%</span> time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>secs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># time.mktime(t) : 1531818181.000000</span><span class="token comment" spellcheck="true"># time.mktime(time.localtime(secs): 1531818181.000000 </span></code></pre><h2 id="2-4-gmtime-函数"><a href="#2-4-gmtime-函数" class="headerlink" title="2.4. gmtime 函数"></a>2.4. gmtime 函数</h2><p>gmtime 将时间戳转化为 UTC 时间的 struct_time</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time.gmtime(): "</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time.gmtime(0): "</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># time.gmtime():  time.struct_time(tm_year=2020, tm_mon=11, tm_mday=21, tm_hour=8, tm_min=16, tm_sec=54, tm_wday=5, tm_yday=326, tm_isdst=0)</span><span class="token comment" spellcheck="true"># time.gmtime(0):  time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)</span></code></pre><h2 id="2-5-asctime-函数"><a href="#2-5-asctime-函数" class="headerlink" title="2.5. asctime 函数"></a>2.5. asctime 函数</h2><p>asctime 将时间元组转化为字符串，格式为 “Tue Jul 17 17:03:01 2018”</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time.asctime(t)"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time.asctime(time.localtime())"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># time.asctime(t) Tue Jul 17 17:03:01 2018</span><span class="token comment" spellcheck="true"># time.asctime(time.localtime()) Sat Nov 21 16:16:54 2020</span></code></pre><h2 id="2-6-ctime-函数"><a href="#2-6-ctime-函数" class="headerlink" title="2.6. ctime 函数"></a>2.6. ctime 函数</h2><p>ctime 将一个时间戳转化为 time.asctime() 的格式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time.ctime(): %s "</span> <span class="token operator">%</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time.ctime(): %s "</span> <span class="token operator">%</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># time.ctime(): Sat Nov 21 16:16:54 2020 </span><span class="token comment" spellcheck="true"># time.ctime(): Thu Jan  1 08:00:00 1970 </span></code></pre><h2 id="2-7-sleep-函数"><a href="#2-7-sleep-函数" class="headerlink" title="2.7. sleep 函数"></a>2.7. sleep 函数</h2><p>sleep 推迟调用线程的运行，可通过参数 secs 指定秒数，表示进程挂起的时间</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Start : %s"</span> <span class="token operator">%</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"End : %s"</span> <span class="token operator">%</span> time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Start : Sat Nov 21 16:24:19 2020</span><span class="token comment" spellcheck="true"># End : Sat Nov 21 16:24:28 2020</span></code></pre><h2 id="2-8-strftime-函数"><a href="#2-8-strftime-函数" class="headerlink" title="2.8. strftime 函数"></a>2.8. strftime 函数</h2><p>strftime 接收时间元组，并返回可读字符串表示的当地时间，格式由参数 format 决定</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timet <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>t <span class="token operator">=</span> time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%b %d %Y %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>gmtime<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Jul 17 2018 09:03:01</span></code></pre><h2 id="2-9-strptime-函数"><a href="#2-9-strptime-函数" class="headerlink" title="2.9. strptime 函数"></a>2.9. strptime 函数</h2><p>strptime 能够根据指定的时间格式，将时间字符串转化为时间元组</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> timestruct_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">"Jul 17 2018 09:03:01"</span><span class="token punctuation">,</span> <span class="token string">"%b %d %Y %H:%M:%S"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"返回的元组： "</span><span class="token punctuation">,</span> struct_time<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 返回的元组：  time.struct_time(tm_year=2018, tm_mon=7, tm_mday=17, tm_hour=9, tm_min=3, tm_sec=1, tm_wday=1, tm_yday=198, tm_isdst=-1)</span></code></pre><h1 id="3-datetime模块"><a href="#3-datetime模块" class="headerlink" title="3. datetime模块"></a>3. datetime模块</h1><p>datetime 模块包含了日期和时间的所有信息，它的功能十分强大，支持从0001到99999年之间的日期</p><p>datetime 模块内定义了两个常量： datetime.MINYEAY 和 date.MAXYEAR；这两个常量分别表示 1 和 99999</p><h2 id="3-1-date-对象"><a href="#3-1-date-对象" class="headerlink" title="3.1. date 对象"></a>3.1. date 对象</h2><h3 id="3-1-1-date"><a href="#3-1-1-date" class="headerlink" title="3.1.1 date"></a>3.1.1 date</h3><p>date 对象表示日历中的一个日期。date 对象的构造函数需要传入三个参数： year、month、day</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimedate <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2018-07-01</span></code></pre><h3 id="3-1-2-today"><a href="#3-1-2-today" class="headerlink" title="3.1.2 today"></a>3.1.2 today</h3><p>today 返回当前日期</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimedate <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-11-21</span></code></pre><h3 id="3-1-3-weekday"><a href="#3-1-3-weekday" class="headerlink" title="3.1.3 weekday"></a>3.1.3 weekday</h3><p>weekday 返回当前星期几，星期一返回0，星期二返回1，以此类推</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimetoday <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span>weekday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span></code></pre><h3 id="3-1-4-isoweekday"><a href="#3-1-4-isoweekday" class="headerlink" title="3.1.4 isoweekday"></a>3.1.4 isoweekday</h3><p>isoweekday 返回当前星期几，星期一返回1，星期二返回2，以此类推</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimetoday <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span>isoweekday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span></code></pre><h3 id="3-1-5-isoformat"><a href="#3-1-5-isoformat" class="headerlink" title="3.1.5 isoformat"></a>3.1.5 isoformat</h3><p>isoformat 返回日期为 ISO 格式的字符串，即 “YY-MM-DD”；直接输出date对象就是调用的 isoformat 方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimetoday <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>today<span class="token punctuation">.</span>isoformat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-11-21</span></code></pre><h3 id="3-1-6-strftime"><a href="#3-1-6-strftime" class="headerlink" title="3.1.6 strftime"></a>3.1.6 strftime</h3><p>strftime 格式化输出日期</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimedate <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2018-07-17</span><span class="token keyword">print</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%y-%b-%d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 18-Jul-17</span></code></pre><h2 id="3-2-time-对象"><a href="#3-2-time-对象" class="headerlink" title="3.2. time 对象"></a>3.2. time 对象</h2><h3 id="3-2-1-time"><a href="#3-2-1-time" class="headerlink" title="3.2.1 time"></a>3.2.1 time</h3><p>time 对象表示一天中的时间。time 对象的构造函数接收 时、分、秒、微秒、时区和信息等参数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimetime1 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 00:00:00</span>time2 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span>hour<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 08:00:07</span></code></pre><h3 id="3-2-2-time-中的常量"><a href="#3-2-2-time-中的常量" class="headerlink" title="3.2.2 time 中的常量"></a>3.2.2 time 中的常量</h3><p>time 对象有两个常量 min 和 max，分别对应time能表示的最小值和最大值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>time<span class="token punctuation">.</span>min<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 00:00:00</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>time<span class="token punctuation">.</span>max<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 23:59:59.999999</span><span class="token keyword">print</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>time<span class="token punctuation">.</span>resolution<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0:00:00.000001，resolution 表示一微秒，是常量</span></code></pre><h3 id="3-2-3-isoformat"><a href="#3-2-3-isoformat" class="headerlink" title="3.2.3 isoformat"></a>3.2.3 isoformat</h3><p>isoformat 返回 ISO 格式的字符串，“HH:MM:SS”</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimet1 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span>hour<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>isoformat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 08:00:07</span></code></pre><h3 id="3-2-4-strftime"><a href="#3-2-4-strftime" class="headerlink" title="3.2.4 strftime"></a>3.2.4 strftime</h3><p>strftime 格式化输出时间</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimet1 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span>hour<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> microsecond<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 08:00:07</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%p %I:%M:%S:%f"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># AM 08:00:07:000123</span></code></pre><h2 id="3-3-datetime-对象"><a href="#3-3-datetime-对象" class="headerlink" title="3.3. datetime 对象"></a>3.3. datetime 对象</h2><h3 id="3-3-1-datetime初始化"><a href="#3-3-1-datetime初始化" class="headerlink" title="3.3.1 datetime初始化"></a>3.3.1 datetime初始化</h3><p>datetime 对象是 date 与 time 的结合体，包括 date 与 time 的所有信息</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimedt <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2018</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">17</span><span class="token punctuation">,</span> hour<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2018-07-17 15:00:10</span></code></pre><h3 id="3-3-2-today"><a href="#3-3-2-today" class="headerlink" title="3.3.2 today"></a>3.3.2 today</h3><p>today 返回一个表示当前本地时间的 datetime 对象</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimetoday <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>today<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-11-21 16:26:54.388715</span></code></pre><h3 id="3-3-3-now"><a href="#3-3-3-now" class="headerlink" title="3.3.3 now"></a>3.3.3 now</h3><p>now 返回一个表示当前本地时间的 datetime 对象</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimenow <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-11-21 16:26:54.388715</span></code></pre><h3 id="3-3-4-utcnow"><a href="#3-3-4-utcnow" class="headerlink" title="3.3.4 utcnow"></a>3.3.4 utcnow</h3><p>utcnow 返回一个表示当前 UTC 时间的 datetime 对象</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimenow <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-11-21 08:26:54.388715</span></code></pre><h3 id="3-3-5-fromtimestamp"><a href="#3-3-5-fromtimestamp" class="headerlink" title="3.3.5 fromtimestamp"></a>3.3.5 fromtimestamp</h3><p>fromtimestamp 根据时间戳创建一个 datetime 对象</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> datetimet1 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">86400</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-11-20 16:26:54.388715</span></code></pre><h3 id="3-3-6-date-time"><a href="#3-3-6-date-time" class="headerlink" title="3.3.6 date+time"></a>3.3.6 date+time</h3><p>date 方法获取date对象，time方法获取time对象</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> datetimenow <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-11-21</span><span class="token keyword">print</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 16:26:54.388715</span></code></pre><h3 id="3-3-7-combine"><a href="#3-3-7-combine" class="headerlink" title="3.3.7 combine"></a>3.3.7 combine</h3><p>combine 根据 date 和 time 组建一个 datetime 对象</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimedate <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span>time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>dt <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>combine<span class="token punctuation">(</span>date<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2018-07-17 08:15:10</span></code></pre><h3 id="3-3-8-strftime"><a href="#3-3-8-strftime" class="headerlink" title="3.3.8 strftime"></a>3.3.8 strftime</h3><p>strftime 格式化输出的日期和时间</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimedate <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span>time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>dt <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>combine<span class="token punctuation">(</span>date<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2018-07-17 08:15:10</span><span class="token keyword">print</span><span class="token punctuation">(</span>dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%y-%m-%d %a %I:%M:%S"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 18-07-17 Tue 08:15:10</span></code></pre><h2 id="3-4-timedelta"><a href="#3-4-timedelta" class="headerlink" title="3.4. timedelta"></a>3.4. timedelta</h2><p>timedelta 表示的是两个日期或时间的差，属性包含： 日期、秒、微秒、毫秒、分、小时和星期</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimedt1 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>dt2 <span class="token operator">=</span> dt1 <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>weeks<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dt1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2018-07-01 16:15:10</span><span class="token keyword">print</span><span class="token punctuation">(</span>dt2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2018-06-17 16:15:10</span><span class="token keyword">print</span><span class="token punctuation">(</span>dt1 <span class="token operator">-</span> dt2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 14 days, 0:00:00</span><span class="token keyword">print</span><span class="token punctuation">(</span>dt2 <span class="token operator">-</span> dt1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># -14 days, 0:00:00</span></code></pre><h2 id="3-5-tzinfo-对象"><a href="#3-5-tzinfo-对象" class="headerlink" title="3.5. tzinfo 对象"></a>3.5. tzinfo 对象</h2><h3 id="3-5-1-datetime-timezone-utc"><a href="#3-5-1-datetime-timezone-utc" class="headerlink" title="3.5.1 datetime.timezone.utc"></a>3.5.1 datetime.timezone.utc</h3><p>tzinfo 是时区对象的一个抽象类。tzinfo 不能直接使用，但是可以使用 datetime.timezone 生成。datetime.timezone.utc 实现了 UTC 时区的 tzinfo 实例</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimeutc_now1 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>timezone<span class="token punctuation">.</span>utc<span class="token punctuation">)</span>utc_now2 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>utc_now1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-11-21 08:26:54.388715+00:00</span><span class="token keyword">print</span><span class="token punctuation">(</span>utc_now2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-11-21 08:26:54.388715</span></code></pre><h3 id="3-5-2-自定义时区"><a href="#3-5-2-自定义时区" class="headerlink" title="3.5.2 自定义时区"></a>3.5.2 自定义时区</h3><p>datetime.timezone 是 tzinfo 的子类，使用 datetime.timezone 来自定义时区</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimechina_timezone <span class="token operator">=</span> datetime<span class="token punctuation">.</span>timezone<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>utc_timezone <span class="token operator">=</span> datetime<span class="token punctuation">.</span>timezone<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>china_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span>china_timezone<span class="token punctuation">)</span>utc_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span>utc_timezone<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>china_time<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-11-21 16:26:54.388715+08:00</span><span class="token keyword">print</span><span class="token punctuation">(</span>utc_time<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-11-21 08:26:54.388715+00:00</span></code></pre><h1 id="4-calendar模块"><a href="#4-calendar模块" class="headerlink" title="4. calendar模块"></a>4. calendar模块</h1><p>calendar 模块是一个和日历相关的模块，该模块主要用于输出某月的字符月历。</p><h2 id="4-1-isleap"><a href="#4-1-isleap" class="headerlink" title="4.1 isleap"></a>4.1 isleap</h2><p>isleap 判断是否为闰年，如果是返回 True，否则返回 False</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> calendar<span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>isleap<span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>isleap<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span></code></pre><h2 id="4-2-leapdays"><a href="#4-2-leapdays" class="headerlink" title="4.2 leapdays"></a>4.2 leapdays</h2><p>leapdays 返回两个年份之间的闰年总数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> calendar<span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>leapdays<span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 7</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>leapdays<span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span></code></pre><h2 id="4-3-month"><a href="#4-3-month" class="headerlink" title="4.3 month"></a>4.3 month</h2><p>month 返回一个月的日志</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> calendar<span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>month<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>month<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> w<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>month<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> l<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="4-4-monthclendar"><a href="#4-4-monthclendar" class="headerlink" title="4.4 monthclendar"></a>4.4 monthclendar</h2><p>monthclendar 返回一个整数的单层嵌套列表，每个子列表装载一个星期。该月之外的日期都为0</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> calendar<span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>monthcalendar<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [[0, 0, 0, 0, 0, 0, 1], [2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21, 22], [23, 24, 25, 26, 27, 28, 29], [30, 31, 0, 0, 0, 0, 0]]</span></code></pre><h2 id="4-5-monthrange"><a href="#4-5-monthrange" class="headerlink" title="4.5 monthrange"></a>4.5 monthrange</h2><p>monthrange 返回两个整数组成的元组： 第一个整数表示该月的第一天是星期几，第二个整数表示该月的天数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> calendar<span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>monthrange<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (6, 31)</span></code></pre><h2 id="4-6-weekday"><a href="#4-6-weekday" class="headerlink" title="4.6 weekday"></a>4.6 weekday</h2><p>weekday 返回给定日期是星期几对应的数字，从 0（星期一）到6（星期日）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> calendar<span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>weekday<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span></code></pre><h2 id="4-7-calendar"><a href="#4-7-calendar" class="headerlink" title="4.7 calendar"></a>4.7 calendar</h2><p>calendar 返回一年的日历</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> calendar<span class="token keyword">print</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span>calendar<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="5-dateutil"><a href="#5-dateutil" class="headerlink" title="5. dateutil"></a>5. dateutil</h1><p>dateutil 库为 Python 内置的 datetime 模块提供了强大的扩展：包括但不限于：</p><ol><li>计算日期差值</li><li>计算两个date或datetime对象的差值</li><li>计算更灵活的时间规则</li><li>解析几乎任何字符串格式的日期</li><li>根据系统信息自动分析时区信息</li></ol><p>dateutil 需要手动安装，使用如下命令：</p><blockquote><p>pip install python-dateutil<br>conda install python-dateutil</p></blockquote><p>dateutil 库有两个比较常用的模块： parse模块、rrule模块</p><h2 id="5-1-parser-模块"><a href="#5-1-parser-模块" class="headerlink" title="5.1. parser 模块"></a>5.1. parser 模块</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> dateutil<span class="token punctuation">.</span>parser <span class="token keyword">import</span> parse<span class="token keyword">print</span><span class="token punctuation">(</span>parse<span class="token punctuation">(</span><span class="token string">"Sat Oct 11 17:13:46 UTC 2003"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2003-10-11 17:13:46+00:00</span><span class="token keyword">print</span><span class="token punctuation">(</span>parse<span class="token punctuation">(</span><span class="token string">"2018-08-20"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2018-08-20 00:00:00</span><span class="token keyword">print</span><span class="token punctuation">(</span>parse<span class="token punctuation">(</span><span class="token string">"20180820"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2018-08-20 00:00:00</span><span class="token keyword">print</span><span class="token punctuation">(</span>parse<span class="token punctuation">(</span><span class="token string">"12:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-11-21 12:00:00</span><span class="token comment" spellcheck="true"># fuzzy 开启模糊匹配，过滤掉无法识别的时间日期字符</span><span class="token comment" spellcheck="true"># print(parse("this is the wonderful moment 12:00:00, I feel good", fuzzy=True)) # 2020-11-21 12:00:00</span></code></pre><p>parse 其他参数，例如时区，默认起始时间等</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> dateutil<span class="token punctuation">.</span>parser <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> dateutil<span class="token punctuation">.</span>tz <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> <span class="token operator">*</span>TZOFFSETS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"BRST"</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">10800</span><span class="token punctuation">}</span>BRSTTZ <span class="token operator">=</span> tzoffset<span class="token punctuation">(</span><span class="token string">"BRST"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10800</span><span class="token punctuation">)</span>DEFAULT <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2003</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># t = parse("The sep 25 10:36:28 BRST 2003", tzinfo = TZOFFSETS)</span><span class="token comment" spellcheck="true"># print(t)</span></code></pre><h2 id="5-2-rrule-模块"><a href="#5-2-rrule-模块" class="headerlink" title="5.2. rrule 模块"></a>5.2. rrule 模块</h2><p>rrule 模块用于计算并生成一些重复的时间规则</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pprint<span class="token keyword">from</span> dateutil<span class="token punctuation">.</span>rrule <span class="token keyword">import</span> rrule<span class="token punctuation">,</span> MONTHLY<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimestart_date <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token number">2014</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span>l <span class="token operator">=</span> list<span class="token punctuation">(</span>rrule<span class="token punctuation">(</span>freq<span class="token operator">=</span>MONTHLY<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> dtstart<span class="token operator">=</span>start_date<span class="token punctuation">)</span><span class="token punctuation">)</span>pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [datetime.datetime(2014, 12, 13, 0, 0),</span><span class="token comment" spellcheck="true">#  datetime.datetime(2015, 1, 13, 0, 0),</span><span class="token comment" spellcheck="true">#  datetime.datetime(2015, 2, 13, 0, 0),</span><span class="token comment" spellcheck="true">#  datetime.datetime(2015, 3, 13, 0, 0)]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】-8.Python文件与IO</title>
      <link href="posts/afdbecf1.html"/>
      <url>posts/afdbecf1.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-打开文件"><a href="#1-打开文件" class="headerlink" title="1. 打开文件"></a>1. 打开文件</h1><blockquote><p>在Python中无论是从文件中读取内容还是把内容写到文件，都需要先打开文件。打开文件使用内置函数 open</p></blockquote><p>open 函数有许多参数，它的定义如下：</p><blockquote><p>def open(file, mode=’r’, buffering=None, encoding=None, errors=None, newline=None, closefd=True)</p></blockquote><p>open 只有file参数是必传的，其他参数都由默认值。</p><pre class=" language-python"><code class="language-python">file_name <span class="token operator">=</span> <span class="token string">"1.打开文件.py"</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span></code></pre><h2 id="1-1-文件模式"><a href="#1-1-文件模式" class="headerlink" title="1.1 文件模式"></a>1.1 文件模式</h2><p>open的mode参数十分重要，它指明了要以何种方式打开文件。使用不同的方式打开文件，即使操作相同，产生的效果也会不同。</p><p>默认模式是 “r”，即以只读的方式打开文件，文件只能读但不能写。</p><p>文件模式：r、rb、r+、rb+、w、wb、w+、wb+、a、ab、a+、ab+</p><table><thead><tr><th align="left">访问模式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="left">w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="left">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="left">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>Python 读写文件时会区分二进制和文本两种方式。如果以二进制方式打开文件，内容将作为字节对象返回，不会对文本内容进行任何编码；如果以文本方式打开文件，内容将作为字符串对象返回，文件内容会根据平台相关的编码或指定了的 “encoding” 参数的编码进行解码。</p><h2 id="1-2-文件编码"><a href="#1-2-文件编码" class="headerlink" title="1.2 文件编码"></a>1.2 文件编码</h2><p>在文本方式下，如果没有指定编码，Python解释器会根据不同的系统使用不同的编码来解码文件。默认情况下，Python会调用标准库locale的getpreferredencoding方法来获取系统的默认编码，以作为文本方式解码文件内容的编码。</p><p>一般情况下，为了防止乱码，使用 UTF-8作为默认编码。</p><h2 id="1-3-文件缓冲"><a href="#1-3-文件缓冲" class="headerlink" title="1.3 文件缓冲"></a>1.3 文件缓冲</h2><p>缓冲的目的是减少系统 IO 的调用，只有在复合一定条件之后系统才调用 IO 写入磁盘<br>缓冲参数 buffering  使用用友设置缓冲策略的可选参数。</p><p>缓冲参数取值：</p><ul><li>0 — 关闭缓冲； </li><li>1 — 选择行缓冲； </li><li>大于1 — 指定缓冲区大小（以字节为单位）；</li></ul><p>如果没有指定缓冲参数，则以默认缓冲策略的方式工作。缓冲取的大小为 io.DEFAULT_BUFFER_SIZE 字节，一般为 4096 或者 8192</p><h1 id="2-文件基本操作"><a href="#2-文件基本操作" class="headerlink" title="2. 文件基本操作"></a>2. 文件基本操作</h1><h2 id="2-1-读文件"><a href="#2-1-读文件" class="headerlink" title="2.1 读文件"></a>2.1 读文件</h2><p>readme.txt</p><pre class=" language-tex"><code class="language-tex">写入文件</code></pre><h3 id="2-1-1-使用read读取文件内容"><a href="#2-1-1-使用read读取文件内容" class="headerlink" title="2.1.1 使用read读取文件内容"></a>2.1.1 使用read读取文件内容</h3><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"readme.txt"</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 写入文件</span></code></pre><h3 id="2-1-2-read读取指定长度"><a href="#2-1-2-read读取指定长度" class="headerlink" title="2.1.2 read读取指定长度"></a>2.1.2 read读取指定长度</h3><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"readme.txt"</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2.读取20个字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 写入文件</span></code></pre><h2 id="2-2-写文件"><a href="#2-2-写文件" class="headerlink" title="2.2 写文件"></a>2.2 写文件</h2><h3 id="2-2-1-使用-“w”-模式写入文件"><a href="#2-2-1-使用-“w”-模式写入文件" class="headerlink" title="2.2.1 使用 “w” 模式写入文件"></a>2.2.1 使用 “w” 模式写入文件</h3><p> write 方法返回写入文件的字符串的长度</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"readme.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> <span class="token string">"写入文件"</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span></code></pre><h3 id="2-2-2-使用-“a”-模式追加文件"><a href="#2-2-2-使用-“a”-模式追加文件" class="headerlink" title="2.2.2 使用 “a” 模式追加文件"></a>2.2.2 使用 “a” 模式追加文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimef <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"append.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>now <span class="token operator">=</span> str<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 27</span></code></pre><h2 id="2-3-按行读文件"><a href="#2-3-按行读文件" class="headerlink" title="2.3 按行读文件"></a>2.3 按行读文件</h2><h3 id="2-3-1-使用readline按行读取"><a href="#2-3-1-使用readline按行读取" class="headerlink" title="2.3.1 使用readline按行读取"></a>2.3.1 使用readline按行读取</h3><p>文件很大、文件内容很多的时候，可以使用按行读取 readline</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"append.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-08-02 14:40:48.575777</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2020-08-02 14:40:59.191706</span></code></pre><h3 id="2-3-2-使用-readlines-读取所有行"><a href="#2-3-2-使用-readlines-读取所有行" class="headerlink" title="2.3.2 使用 readlines 读取所有行"></a>2.3.2 使用 readlines 读取所有行</h3><p>readlines 读取整个文件，返回一个列表</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"append.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2020-08-02 14:40:48.575777</span><span class="token comment" spellcheck="true"># 2020-08-02 14:40:59.191706</span><span class="token comment" spellcheck="true"># 2020-08-02 14:42:11.297548</span><span class="token comment" spellcheck="true"># 2020-11-21 15:36:30.757284</span></code></pre><h3 id="2-3-3-迭代文件对象"><a href="#2-3-3-迭代文件对象" class="headerlink" title="2.3.3 迭代文件对象"></a>2.3.3 迭代文件对象</h3><p>迭代文件对象是一种 “惰性” 的读取方式，只有迭代到需要读取的一行，才会真正执行读取操作</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"append.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2020-08-02 14:40:48.575777</span><span class="token comment" spellcheck="true"># 2020-08-02 14:40:59.191706</span><span class="token comment" spellcheck="true"># 2020-08-02 14:42:11.297548</span><span class="token comment" spellcheck="true"># 2020-11-21 15:36:30.757284</span></code></pre><h2 id="2-4-按行写文件"><a href="#2-4-按行写文件" class="headerlink" title="2.4. 按行写文件"></a>2.4. 按行写文件</h2><h3 id="2-4-1-使用-writelines-方法按行写入文件"><a href="#2-4-1-使用-writelines-方法按行写入文件" class="headerlink" title="2.4.1 使用 writelines 方法按行写入文件"></a>2.4.1 使用 writelines 方法按行写入文件</h3><p>使用 writelines 方法按行写入文件，writelines 接收一个列表对象，同时不会添加换行符</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"writelines.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lines<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>lines<span class="token punctuation">)</span></code></pre><p>writelines.txt</p><pre class=" language-tex"><code class="language-tex">0123456789</code></pre><h2 id="2-5-关闭文件"><a href="#2-5-关闭文件" class="headerlink" title="2.5 关闭文件"></a>2.5 关闭文件</h2><h3 id="2-5-1-使用-close-关闭"><a href="#2-5-1-使用-close-关闭" class="headerlink" title="2.5.1 使用 close 关闭"></a>2.5.1 使用 close 关闭</h3><p>文件读写完毕，或者出现异常时需要关闭。使用 close 方法</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"writelines.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-5-2-在-finally-中关闭"><a href="#2-5-2-在-finally-中关闭" class="headerlink" title="2.5.2 在 finally 中关闭"></a>2.5.2 在 finally 中关闭</h3><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> None<span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"readme.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 写入文件</span><span class="token keyword">except</span> IOError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-5-3-使用-with-自动关闭"><a href="#2-5-3-使用-with-自动关闭" class="headerlink" title="2.5.3 使用 with 自动关闭"></a>2.5.3 使用 with 自动关闭</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"readme.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 写入文件</span></code></pre><h1 id="3-StringIO和BytesIO"><a href="#3-StringIO和BytesIO" class="headerlink" title="3. StringIO和BytesIO"></a>3. StringIO和BytesIO</h1><p>Python 对应文件的读取和写入，有时并不需要真正写入文件中，只需要在内存中做读写即可。</p><p>Python 的 IO 模块提供给了操作 str 的 StringIO 函数</p><h2 id="3-1-StringIO"><a href="#3-1-StringIO" class="headerlink" title="3.1 StringIO"></a>3.1 StringIO</h2><h3 id="3-1-1-创建-StringIO-对象"><a href="#3-1-1-创建-StringIO-对象" class="headerlink" title="3.1.1 创建 StringIO 对象"></a>3.1.1 创建 StringIO 对象</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIOf <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hello world</span></code></pre><h3 id="3-1-2-使用字符串初始化-StringIO"><a href="#3-1-2-使用字符串初始化-StringIO" class="headerlink" title="3.1.2 使用字符串初始化 StringIO"></a>3.1.2 使用字符串初始化 StringIO</h3><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token string">"Hello!\nWorld!\nWelcome!"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Hello!</span><span class="token comment" spellcheck="true"># World!</span><span class="token comment" spellcheck="true"># Welcome!</span></code></pre><h2 id="3-2-BytesIO"><a href="#3-2-BytesIO" class="headerlink" title="3.2 BytesIO"></a>3.2 BytesIO</h2><h3 id="3-2-1-BytesIO-实现了内存中读写-bytes"><a href="#3-2-1-BytesIO-实现了内存中读写-bytes" class="headerlink" title="3.2.1 BytesIO 实现了内存中读写 bytes"></a>3.2.1 BytesIO 实现了内存中读写 bytes</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIOf <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"您好"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># b'\xe6\x82\xa8\xe5\xa5\xbd'</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 您好</span></code></pre><h3 id="3-2-2-使用bytes初始化-BytesIO"><a href="#3-2-2-使用bytes初始化-BytesIO" class="headerlink" title="3.2.2 使用bytes初始化 BytesIO"></a>3.2.2 使用bytes初始化 BytesIO</h3><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span>b<span class="token string">'\xe6\x82\xa8\xe5\xa5\xbd'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 您好</span></code></pre><h1 id="4-序列化与反序列化"><a href="#4-序列化与反序列化" class="headerlink" title="4. 序列化与反序列化"></a>4. 序列化与反序列化</h1><p>序列化就是将数据结构或者对象转换成二进制串，反序列化就是将二进制串转回成数据结构或者对象</p><h2 id="4-1-pickle-模块"><a href="#4-1-pickle-模块" class="headerlink" title="4.1 pickle 模块"></a>4.1 pickle 模块</h2><h3 id="4-1-1-pickle序列化"><a href="#4-1-1-pickle序列化" class="headerlink" title="4.1.1 pickle序列化"></a>4.1.1 pickle序列化</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>gender <span class="token operator">=</span> genderstudent1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># b'\x80\x04\x95G\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x07Student\x94\x93\x94)\x81\x94}\x94(\x8c\x04name\x94\x8c\x06\xe5\xb0\x8f\xe6\x98\x8e\x94\x8c\x03age\x94K\x0f\x8c\x06gender\x94\x8c\x03\xe7\x94\xb7\x94ub.'</span></code></pre><h3 id="4-1-2-将序列化的结果保存到文件"><a href="#4-1-2-将序列化的结果保存到文件" class="headerlink" title="4.1.2 将序列化的结果保存到文件"></a>4.1.2 将序列化的结果保存到文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>gender <span class="token operator">=</span> genderstudent1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"student1.data"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>student1<span class="token punctuation">,</span> f<span class="token punctuation">)</span></code></pre><h3 id="4-1-3-反序列化"><a href="#4-1-3-反序列化" class="headerlink" title="4.1.3 反序列化"></a>4.1.3 反序列化</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>gender <span class="token operator">=</span>genderf <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"student1.data"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">,</span> student1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 姓名 小红</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"年龄"</span><span class="token punctuation">,</span> student1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 年龄 18</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"性别"</span><span class="token punctuation">,</span> student1<span class="token punctuation">.</span>gender<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 性别 女</span></code></pre><h3 id="4-1-4-读取文件反序列化"><a href="#4-1-4-读取文件反序列化" class="headerlink" title="4.1.4 读取文件反序列化"></a>4.1.4 读取文件反序列化</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"student1.data"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    student1 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">,</span> student1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 姓名 小红</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"年龄"</span><span class="token punctuation">,</span> student1<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 年龄 18</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"性别"</span><span class="token punctuation">,</span> student1<span class="token punctuation">.</span>gender<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 性别 女</span></code></pre><h2 id="4-2-JSON-序列化和反序列化"><a href="#4-2-JSON-序列化和反序列化" class="headerlink" title="4.2. JSON 序列化和反序列化"></a>4.2. JSON 序列化和反序列化</h2><p>json 模块的序列化使用方法和 pickle 一样，但是 pickle 可以序列化任意 Python 对象，而 json 模块只能序列化部分类型</p><p>json 可以序列化的类型： dict、list、str、int、float、True、False、None</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jsonstudent1 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">,</span>    <span class="token string">"gender"</span><span class="token punctuation">:</span><span class="token string">"男"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>student1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {"name": "\u5c0f\u660e", "age": 15, "gender": "\u7537"}</span></code></pre><h3 id="4-2-1-json-序列化结果写入文件"><a href="#4-2-1-json-序列化结果写入文件" class="headerlink" title="4.2.1 json 序列化结果写入文件"></a>4.2.1 json 序列化结果写入文件</h3><pre class=" language-python"><code class="language-python">student1 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"小明"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">,</span>    <span class="token string">"gender"</span><span class="token punctuation">:</span><span class="token string">"男"</span><span class="token punctuation">}</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"student1.json"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>student1<span class="token punctuation">,</span> f<span class="token punctuation">)</span></code></pre><h3 id="4-2-2-json-反序列化"><a href="#4-2-2-json-反序列化" class="headerlink" title="4.2.2 json 反序列化"></a>4.2.2 json 反序列化</h3><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"student1.json"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'name': '小明', 'age': 15, 'gender': '男'}</span></code></pre><h3 id="4-2-3-json-读取文件反序列化"><a href="#4-2-3-json-读取文件反序列化" class="headerlink" title="4.2.3 json 读取文件反序列化"></a>4.2.3 json 读取文件反序列化</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"student1.json"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    student1 <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>student1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'name': '小明', 'age': 15, 'gender': '男'}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】-7.Python中的模块</title>
      <link href="posts/eff54974.html"/>
      <url>posts/eff54974.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-模块"><a href="#1-模块" class="headerlink" title="1. 模块"></a>1. 模块</h1><h2 id="1-1-模块介绍"><a href="#1-1-模块介绍" class="headerlink" title="1.1 模块介绍"></a>1.1 模块介绍</h2><blockquote><p>模块是一个包含了Python定义和声明的 “.py” 文件。模块可以被别的程序引入，以使用该模块中的函数等功能。这也是使用 python 标准库的方法。</p></blockquote><p>定义 fibs.py 模块</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># fibs.py</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> b <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fib2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> b <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b    <span class="token keyword">return</span> result</code></pre><p><strong>import 导入模块</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> fibs<span class="token keyword">print</span><span class="token punctuation">(</span>fibs<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;module 'fibs' from 'E:\\Develop\\xxxx\\fibs.py'></span></code></pre><h2 id="1-2-name-变量"><a href="#1-2-name-变量" class="headerlink" title="1.2 __name__变量"></a>1.2 __name__变量</h2><blockquote><p>模块的名字可以通过全局变量 __name__ 获取</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> fibs<span class="token keyword">print</span><span class="token punctuation">(</span>fibs<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fibs</span><span class="token keyword">print</span><span class="token punctuation">(</span>__name__<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># __main__</span></code></pre><h2 id="1-3-dir函数"><a href="#1-3-dir函数" class="headerlink" title="1.3 dir函数"></a>1.3 dir函数</h2><blockquote><p>dir函数可以列出对象的模块标识符，标识符有 函数、类和对象</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> fibs<span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span>fibs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'fib', 'fib2']</span></code></pre><h2 id="1-4-使用模块"><a href="#1-4-使用模块" class="headerlink" title="1.4 使用模块"></a>1.4 使用模块</h2><h3 id="1-4-1-调用模块方法"><a href="#1-4-1-调用模块方法" class="headerlink" title="1.4.1 调用模块方法"></a>1.4.1 调用模块方法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> fibsfibs<span class="token punctuation">.</span>fib<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1 1 2 3 5 8 </span></code></pre><h3 id="1-4-2-导入部分模块"><a href="#1-4-2-导入部分模块" class="headerlink" title="1.4.2 导入部分模块"></a>1.4.2 导入部分模块</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fibs <span class="token keyword">import</span> fib<span class="token punctuation">,</span> fib2fib<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1 1 2 3 5 8 </span><span class="token keyword">print</span><span class="token punctuation">(</span>fib2<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 1, 2, 3]</span></code></pre><h1 id="2-包"><a href="#2-包" class="headerlink" title="2. 包"></a>2. 包</h1><p>Python通过模块来组织代码，模块即一个python文件，是通过包来加以组织的，而包则是一个包含 __init__.py 的文件夹。代码、模块和包它们三者的关系是：包 包含模块且至少包含一个 __init__.py ，模块包含代码。</p><p>包的结构如下：</p><blockquote><p>package test<br>|–  __init__.py<br>|–  fun1.py<br>|–  fun2.py</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># test/__init__.py</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"作为主程序运行"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"package 初始化"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># test/fun1.py</span><span class="token keyword">def</span> <span class="token function">print1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"fun1"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># test/fun2.py</span><span class="token keyword">def</span> <span class="token function">print2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"fun2"</span><span class="token punctuation">)</span></code></pre><h2 id="2-1-使用包"><a href="#2-1-使用包" class="headerlink" title="2.1 使用包"></a>2.1 使用包</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> test<span class="token punctuation">.</span>fun1 <span class="token keyword">import</span> print1<span class="token keyword">from</span> test<span class="token punctuation">.</span>fun2 <span class="token keyword">import</span> print2print1<span class="token punctuation">(</span><span class="token punctuation">)</span>print2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># package 初始化</span><span class="token comment" spellcheck="true"># fun1</span><span class="token comment" spellcheck="true"># fun2</span></code></pre><h1 id="3-标准库"><a href="#3-标准库" class="headerlink" title="3. 标准库"></a>3. 标准库</h1><blockquote><p>Python官方提供了很多包和模块，称之为标准库</p></blockquote><h2 id="3-1-sys"><a href="#3-1-sys" class="headerlink" title="3.1 sys"></a>3.1 sys</h2><h3 id="3-1-1-识别操作系统"><a href="#3-1-1-识别操作系统" class="headerlink" title="3.1.1 识别操作系统"></a>3.1.1 识别操作系统</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>platform<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># win32</span></code></pre><h3 id="3-1-2-处理命令行参数"><a href="#3-1-2-处理命令行参数" class="headerlink" title="3.1.2 处理命令行参数"></a>3.1.2 处理命令行参数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['E:/Develop/xxxx/3.标准库.py']</span></code></pre><h3 id="3-1-3-退出程序"><a href="#3-1-3-退出程序" class="headerlink" title="3.1.3 退出程序"></a>3.1.3 退出程序</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"缺少参数"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 缺少参数</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3-1-4-获取模块搜索路径"><a href="#3-1-4-获取模块搜索路径" class="headerlink" title="3.1.4 获取模块搜索路径"></a>3.1.4 获取模块搜索路径</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">for</span> path <span class="token keyword">in</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># E:\Develop\xxxx\Anaconda3\envs\xxxx\python38.zip</span><span class="token comment" spellcheck="true"># E:\Develop\xxxx\Anaconda3\envs\xxxx\DLLs</span><span class="token comment" spellcheck="true"># E:\Develop\xxxx\Anaconda3\envs\xxxx\lib</span><span class="token comment" spellcheck="true"># E:\Develop\xxxx\Anaconda3\envs\xxxx\lib\site-packages</span><span class="token comment" spellcheck="true"># ...</span></code></pre><p><strong>增加模块搜索路径</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">print_path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> path <span class="token keyword">in</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---修改前---"</span><span class="token punctuation">)</span>print_path<span class="token punctuation">(</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"C:\\"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---修改后---"</span><span class="token punctuation">)</span>print_path<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ---修改前---</span><span class="token comment" spellcheck="true"># E:\Develop\xxxx\Anaconda3\envs\xxxx\python38.zip</span><span class="token comment" spellcheck="true"># E:\Develop\xxxx\Anaconda3\envs\xxxx\DLLs</span><span class="token comment" spellcheck="true"># E:\Develop\xxxx\Anaconda3\envs\xxxx\lib</span><span class="token comment" spellcheck="true"># E:\Develop\xxxx\Anaconda3\envs\xxxx\lib\site-packages</span><span class="token comment" spellcheck="true"># ...</span><span class="token comment" spellcheck="true"># ---修改后---</span><span class="token comment" spellcheck="true"># E:\Develop\xxxx\Anaconda3\envs\xxxx\python38.zip</span><span class="token comment" spellcheck="true"># E:\Develop\xxxx\Anaconda3\envs\xxxx\DLLs</span><span class="token comment" spellcheck="true"># E:\Develop\xxxx\Anaconda3\envs\xxxx\lib</span><span class="token comment" spellcheck="true"># E:\Develop\xxxx\Anaconda3\envs\xxxx\lib\site-packages</span><span class="token comment" spellcheck="true"># ...</span><span class="token comment" spellcheck="true"># C:\</span></code></pre><h3 id="3-1-5-查找已导入的模块"><a href="#3-1-5-查找已导入的模块" class="headerlink" title="3.1.5 查找已导入的模块"></a>3.1.5 查找已导入的模块</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">"os"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 太多，略</span></code></pre><h2 id="3-2-os"><a href="#3-2-os" class="headerlink" title="3.2 os"></a>3.2 os</h2><h3 id="3-2-1-获取当前文件所在目录"><a href="#3-2-1-获取当前文件所在目录" class="headerlink" title="3.2.1 获取当前文件所在目录"></a>3.2.1 获取当前文件所在目录</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># E:/Develop/xxxxxxxx/chapter07/3.标准库.py</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># E:/Develop/xxxxxxxx/chapter07</span></code></pre><h3 id="3-2-2-获取当前路径及切换路径"><a href="#3-2-2-获取当前路径及切换路径" class="headerlink" title="3.2.2 获取当前路径及切换路径"></a>3.2.2 获取当前路径及切换路径</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># E:/Develop/xxxxxxxx/chapter07</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span><span class="token string">"C:\\"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 切换路径</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取当前文件路径</span></code></pre><h3 id="3-2-3-重命名文件"><a href="#3-2-3-重命名文件" class="headerlink" title="3.2.3 重命名文件"></a>3.2.3 重命名文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">,</span> <span class="token string">"a.txt"</span><span class="token punctuation">)</span></code></pre><h3 id="3-2-4-查看路径是否存在"><a href="#3-2-4-查看路径是否存在" class="headerlink" title="3.2.4 查看路径是否存在"></a>3.2.4 查看路径是否存在</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osfolder <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">"c:\Windows"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>folder<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span></code></pre><h3 id="3-2-5-判断路径是否为文件"><a href="#3-2-5-判断路径是否为文件" class="headerlink" title="3.2.5 判断路径是否为文件"></a>3.2.5 判断路径是否为文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osisfile <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">"c:\\windows\\System32"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isfile<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span></code></pre><h3 id="3-2-6-判断路径是否为目录"><a href="#3-2-6-判断路径是否为目录" class="headerlink" title="3.2.6 判断路径是否为目录"></a>3.2.6 判断路径是否为目录</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osisdir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">"c:\\windows\\System32"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isdir<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span></code></pre><h3 id="3-2-8-获取系统环境变量"><a href="#3-2-8-获取系统环境变量" class="headerlink" title="3.2.8 获取系统环境变量"></a>3.2.8 获取系统环境变量</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">"=>"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 太多，略</span></code></pre><h3 id="3-2-9-创建多层目录"><a href="#3-2-9-创建多层目录" class="headerlink" title="3.2.9 创建多层目录"></a>3.2.9 创建多层目录</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">"e:\\p1\\python1\\python2\\python3"</span><span class="token punctuation">)</span></code></pre><h2 id="3-3-math"><a href="#3-3-math" class="headerlink" title="3.3 math"></a>3.3 math</h2><h3 id="3-3-1-math库中的两个常量"><a href="#3-3-1-math库中的两个常量" class="headerlink" title="3.3.1 math库中的两个常量"></a>3.3.1 math库中的两个常量</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"圆周率："</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 圆周率： 3.141592653589793</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"自然常量："</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 自然常量： 2.718281828459045</span></code></pre><h3 id="3-3-2-math库的运算函数"><a href="#3-3-2-math库的运算函数" class="headerlink" title="3.3.2 math库的运算函数"></a>3.3.2 math库的运算函数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> math<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------------------------- 1 ---------------------------------------'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 向上取整</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.7向上取整："</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">1.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1.7向上取整： 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0.3向上取整："</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0.3向上取整： 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-1.7向上取整："</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># -1.7向上取整： -1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-0.3向上取整："</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># -0.3向上取整： 0</span><span class="token comment" spellcheck="true"># 向下取整</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------------------------- 2 ---------------------------------------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.7向下取整："</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">1.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1.7向下取整： 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"0.3向下取整："</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0.3向下取整： 0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-1.7向下取整："</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># -1.7向下取整： -2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-0.3向下取整："</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># -0.3向下取整： -1</span><span class="token comment" spellcheck="true"># 指数运算</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------------------------- 3 ---------------------------------------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"15^3"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 15^3 3375.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"29^-1"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>pow<span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 29^-1 0.034482758620689655</span><span class="token comment" spellcheck="true"># 对数计算</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------------------------- 4 ---------------------------------------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"log(3)"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># log(3) 1.0986122886681098</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"log(100, 10)"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># log(100, 10) 2.0</span><span class="token comment" spellcheck="true"># 平方根计算</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------------------------- 5 ---------------------------------------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sqrt(4)"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># sqrt(4) 2.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sqrt(128)"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># sqrt(128) 11.313708498984761</span><span class="token comment" spellcheck="true"># 三角函数计算</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------------------------- 6 ---------------------------------------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sin(pi/2)"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># sin(pi/2) 1.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cos(pi)"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># cos(pi) -1.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"tan(0)"</span><span class="token punctuation">,</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># tan(0) 0.0</span><span class="token comment" spellcheck="true"># 角度和弧度转换</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------------------------- 7 ---------------------------------------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>degrees<span class="token punctuation">(</span>math<span class="token punctuation">.</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 180.0</span><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>radians<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1.5707963267948966</span></code></pre><h2 id="3-4-random"><a href="#3-4-random" class="headerlink" title="3.4 random"></a>3.4 random</h2><blockquote><p>random 包含了需要和随机数相关的方法</p></blockquote><h3 id="3-4-1-生成-0-1-之间的随机数"><a href="#3-4-1-生成-0-1-之间的随机数" class="headerlink" title="3.4.1 生成 0-1 之间的随机数"></a>3.4.1 生成 0-1 之间的随机数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0.19076654911060498</span></code></pre><h3 id="3-4-2-生成指定范围内的随机浮点数"><a href="#3-4-2-生成指定范围内的随机浮点数" class="headerlink" title="3.4.2 生成指定范围内的随机浮点数"></a>3.4.2 生成指定范围内的随机浮点数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 100.27340910357168</span></code></pre><h3 id="3-4-3-生成指定范围内的随机整数"><a href="#3-4-3-生成指定范围内的随机整数" class="headerlink" title="3.4.3  生成指定范围内的随机整数"></a>3.4.3  生成指定范围内的随机整数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 16</span></code></pre><h3 id="3-4-4-从序列中随机获取一个元素"><a href="#3-4-4-从序列中随机获取一个元素" class="headerlink" title="3.4.4 从序列中随机获取一个元素"></a>3.4.4 从序列中随机获取一个元素</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randomseq1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>seq2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"星期日"</span><span class="token punctuation">,</span> <span class="token string">"星期一"</span><span class="token punctuation">,</span> <span class="token string">"星期二"</span><span class="token punctuation">,</span> <span class="token string">"星期三"</span><span class="token punctuation">,</span> <span class="token string">"星期四"</span><span class="token punctuation">,</span> <span class="token string">"星期五"</span><span class="token punctuation">,</span> <span class="token string">"星期六"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>seq1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 22</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>seq2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 星期二</span></code></pre><h3 id="3-4-5-将列表中的元素打乱"><a href="#3-4-5-将列表中的元素打乱" class="headerlink" title="3.4.5 将列表中的元素打乱"></a>3.4.5 将列表中的元素打乱</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> randomseq1 <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>seq2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"星期日"</span><span class="token punctuation">,</span> <span class="token string">"星期一"</span><span class="token punctuation">,</span> <span class="token string">"星期二"</span><span class="token punctuation">,</span> <span class="token string">"星期三"</span><span class="token punctuation">,</span> <span class="token string">"星期四"</span><span class="token punctuation">,</span> <span class="token string">"星期五"</span><span class="token punctuation">,</span> <span class="token string">"星期六"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------- 打乱前 ---------"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>seq1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>seq2<span class="token punctuation">)</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>seq1<span class="token punctuation">)</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>seq2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------- 打乱后 ---------"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>seq1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>seq2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># --------- 打乱前 ---------</span><span class="token comment" spellcheck="true"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><span class="token comment" spellcheck="true"># ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六']</span><span class="token comment" spellcheck="true"># --------- 打乱后 ---------</span><span class="token comment" spellcheck="true"># [5, 8, 6, 1, 4, 3, 9, 2, 7]</span><span class="token comment" spellcheck="true"># ['星期五', '星期二', '星期一', '星期六', '星期日', '星期三', '星期四']</span></code></pre><h1 id="4-安装第三方库"><a href="#4-安装第三方库" class="headerlink" title="4. 安装第三方库"></a>4. 安装第三方库</h1><h2 id="4-1-使用pip管理包"><a href="#4-1-使用pip管理包" class="headerlink" title="4.1 使用pip管理包"></a>4.1 使用pip管理包</h2><h3 id="4-1-1-查看版本"><a href="#4-1-1-查看版本" class="headerlink" title="4.1.1 查看版本"></a>4.1.1 查看版本</h3><pre class=" language-bash"><code class="language-bash">pip --version</code></pre><h3 id="4-1-2-搜索包"><a href="#4-1-2-搜索包" class="headerlink" title="4.1.2 搜索包"></a>4.1.2 搜索包</h3><pre class=" language-bash"><code class="language-bash">pip search 关键字</code></pre><h3 id="4-1-3-安装包"><a href="#4-1-3-安装包" class="headerlink" title="4.1.3 安装包"></a>4.1.3 安装包</h3><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> 软件包名</code></pre><h3 id="4-1-4-安装指定版本的包"><a href="#4-1-4-安装指定版本的包" class="headerlink" title="4.1.4 安装指定版本的包"></a>4.1.4 安装指定版本的包</h3><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> 软件包名<span class="token operator">==</span>版本号eg： pip <span class="token function">install</span> django<span class="token operator">==</span>2.0.6</code></pre><h3 id="4-1-5-卸载包"><a href="#4-1-5-卸载包" class="headerlink" title="4.1.5 卸载包"></a>4.1.5 卸载包</h3><pre class=" language-bash"><code class="language-bash">pip uninstall 软件包名eg： pip uninstall django</code></pre><h3 id="4-1-6-根据-requirements-txt-导入包"><a href="#4-1-6-根据-requirements-txt-导入包" class="headerlink" title="4.1.6 根据 requirements.txt 导入包"></a>4.1.6 根据 requirements.txt 导入包</h3><pre class=" language-bash"><code class="language-bash">pip <span class="token function">install</span> -r requirements.txt</code></pre><h3 id="4-1-7-列出已安装的包"><a href="#4-1-7-列出已安装的包" class="headerlink" title="4.1.7 列出已安装的包"></a>4.1.7 列出已安装的包</h3><pre class=" language-bash"><code class="language-bash">pip list</code></pre><h2 id="4-2-使用Anaconda管理包"><a href="#4-2-使用Anaconda管理包" class="headerlink" title="4.2 使用Anaconda管理包"></a>4.2 使用Anaconda管理包</h2><h3 id="4-2-1-搜索包"><a href="#4-2-1-搜索包" class="headerlink" title="4.2.1 搜索包"></a>4.2.1 搜索包</h3><pre class=" language-bash"><code class="language-bash">conda search 关键字</code></pre><h3 id="4-2-2-安装包"><a href="#4-2-2-安装包" class="headerlink" title="4.2.2 安装包"></a>4.2.2 安装包</h3><pre class=" language-bash"><code class="language-bash">conda <span class="token function">install</span> 软件包名</code></pre><h3 id="4-2-3-安装指定版本的包"><a href="#4-2-3-安装指定版本的包" class="headerlink" title="4.2.3 安装指定版本的包"></a>4.2.3 安装指定版本的包</h3><pre class=" language-bash"><code class="language-bash">conda <span class="token function">install</span> 软件包名<span class="token operator">==</span>版本号eg： conda <span class="token function">install</span> django<span class="token operator">==</span>2.0.6</code></pre><h3 id="4-2-4-卸载包"><a href="#4-2-4-卸载包" class="headerlink" title="4.2.4 卸载包"></a>4.2.4 卸载包</h3><pre class=" language-bash"><code class="language-bash">conda uninstall 软件包名eg： conda uninstall django</code></pre><h1 id="5-globals和locals函数"><a href="#5-globals和locals函数" class="headerlink" title="5. globals和locals函数"></a>5. globals和locals函数</h1><blockquote><p>Python 内置了两个函数 globals 和 locals，提供了基于字典的访问 全局和局部变量的方式</p></blockquote><p>首先，是关于名字空间的一个名词解释。Python使用叫做名字空间的东西来记录变量的轨迹。名字空间只是一个字典，它的键就是变量名，字典的值就是那些变量的值。实际上，名字空间可以象Python的字典一样进行访问，一会我们就会看到。</p><p>在一个Python程序中的任何一个地方，都存在几个可用的名字空间。</p><p>每个函数都有着自已的名字空间，叫做局部名字空间，它记录了函数的变量，包括 函数的参数和局部定义的变量。每个模块拥有它自已的名字空间，叫做全局名字空间，它记录了模块的变量，包括函数、类、其它导入的模块、模块级的变量和常量。还有就是内置名字空间，任何模块均可访问它，它存放着内置的函数和异常。</p><p>当一行代码要使用变量 x 的值时，Python会到所有可用的名字空间去查找变量，按照如下顺序：</p><ol><li>局部名字空间 - 特指当前函数或类的方法。如果函数定义了一个局部变量 x，Python将使用这个变量，然后停止搜索。</li><li>全局名字空间 - 特指当前的模块。如果模块定义了一个名为 x 的变量，函数或类，Python将使用这个变量然后停止搜索。<ol start="3"><li>内置名字空间 - 对每个模块都是全局的。作为最后的尝试，Python将假设 x 是内置函数或变量。</li></ol></li></ol><p>如果Python在这些名字空间找不到 x，它将放弃查找并引发一个 NameError 的异常，同时传 递 There is no variable named ‘x’ 这样一条信息。</p><p>像 Python 中的许多事情一样，名字空间在运行时直接可以访问。特别地，局部名字空间可以通过内置的 locals 函数来访问。全局（模块级别）名字空间可以通过 globals 函数来访问</p><h2 id="5-1-locals"><a href="#5-1-locals" class="headerlink" title="5.1 locals"></a>5.1 locals</h2><h3 id="5-1-1-返回内置本地变量"><a href="#5-1-1-返回内置本地变量" class="headerlink" title="5.1.1 返回内置本地变量"></a>5.1.1 返回内置本地变量</h3><pre class=" language-python"><code class="language-python">local_var <span class="token operator">=</span> locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> local_var<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">"=>"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span></code></pre><h3 id="5-1-2-返回内置本地变量-自定义本地变量、函数"><a href="#5-1-2-返回内置本地变量-自定义本地变量、函数" class="headerlink" title="5.1.2 返回内置本地变量+自定义本地变量、函数"></a>5.1.2 返回内置本地变量+自定义本地变量、函数</h3><pre class=" language-python"><code class="language-python">a_string <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token keyword">def</span> <span class="token function">a_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>local_var <span class="token operator">=</span> locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> local_var<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">"=>"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span></code></pre><h2 id="5-2-globals"><a href="#5-2-globals" class="headerlink" title="5.2 globals"></a>5.2 globals</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 返回所有模块的变量、函数</span><span class="token keyword">from</span> math <span class="token keyword">import</span> <span class="token operator">*</span>global_vars <span class="token operator">=</span> globals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> global_vars<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">"=>"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】-6.Python中的错误和异常</title>
      <link href="posts/1248c87a.html"/>
      <url>posts/1248c87a.html</url>
      
        <content type="html"><![CDATA[<p>作为 Python 初学者，在学习 Python 编程时，经常会看到一些报错信息，在前面我们没有提及，这章节我们会专门介绍。</p><p>Python 有两种错误很容易辨认：语法错误和异常。</p><h1 id="1-语法错误"><a href="#1-语法错误" class="headerlink" title="1. 语法错误"></a>1. 语法错误</h1><p>Python 的语法错误或者称之为解析错，一般以 Synatax Error 开头</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span> <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>      <span class="token operator">^</span><span class="token comment" spellcheck="true"># SyntaxError: Missing parentheses in call to 'print'. Did you mean print(while True:)</span></code></pre><h1 id="2-异常"><a href="#2-异常" class="headerlink" title="2. 异常"></a>2. 异常</h1><p>运行时检测到的错误被称为异常，有些错误可能不是致命的，但如果程序对大多数异常都不做处理，Python解释器会输出异常信息到屏幕上并终止程序</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 错误： ZeroDivisionError: division by zero</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>其他常见异常</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># TypeError: can only concatenate str (not "int") to str</span><span class="token string">"1"</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># KeyError: 'world'</span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>d<span class="token punctuation">[</span><span class="token string">"world"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># IndexError: list index out of range</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>l<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span></code></pre><h1 id="3-处理异常"><a href="#3-处理异常" class="headerlink" title="3. 处理异常"></a>3. 处理异常</h1><p>有如下程序</p><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    number <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入一个数字："</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>如果输入的是数字，可以正常运行；但如果输入的不是数字，会出现错误： ValueError: invalid literal for int() with base 10: ‘a’</p><h2 id="3-1-使用try…except处理异常"><a href="#3-1-使用try…except处理异常" class="headerlink" title="3.1 使用try…except处理异常"></a>3.1 使用try…except处理异常</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        number <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入一个数字："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"您输入的恐怕不是一个有效数字！请重试！"</span><span class="token punctuation">)</span></code></pre><h2 id="3-2-except接收多种异常"><a href="#3-2-except接收多种异常" class="headerlink" title="3.2 except接收多种异常"></a>3.2 except接收多种异常</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        number <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入一个数字："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> number <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"KeyError"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ValueError"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"用户终止，退出程序"</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"未知错误"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span></code></pre><h1 id="4-抛出异常"><a href="#4-抛出异常" class="headerlink" title="4. 抛出异常"></a>4. 抛出异常</h1><blockquote><p>在Python中可以抛出异常，使用 raise 关键字</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">raise</span> Exception<span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"这是错误信息"</span><span class="token punctuation">)</span></code></pre><h1 id="5-finally子句"><a href="#5-finally子句" class="headerlink" title="5. finally子句"></a>5. finally子句</h1><blockquote><p>Python 的finally需要和try一起使用，finally子句在异常中的作用是：无论是否异常或捕获了异常，finally子句都会保证执行</p></blockquote><h2 id="5-1-except捕获异常"><a href="#5-1-except捕获异常" class="headerlink" title="5.1 except捕获异常"></a>5.1 except捕获异常</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"除零错误"</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finally子句"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 除零错误</span><span class="token comment" spellcheck="true"># finally子句</span></code></pre><h2 id="5-2-except无法捕获异常"><a href="#5-2-except无法捕获异常" class="headerlink" title="5.2 except无法捕获异常"></a>5.2 except无法捕获异常</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"除零错误"</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"finally子句"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># finally子句</span></code></pre><h1 id="6-自定义异常"><a href="#6-自定义异常" class="headerlink" title="6. 自定义异常"></a>6. 自定义异常</h1><blockquote><p>自定义异常直接或间接继承自 Exception 类</p></blockquote><h2 id="6-1-抛出自定义异常"><a href="#6-1-抛出自定义异常" class="headerlink" title="6.1 抛出自定义异常"></a>6.1 抛出自定义异常</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"这是一个自定义异常"</span><span class="token keyword">def</span> <span class="token function">raise_customer_exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> MyException<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="6-2-捕获自定义异常"><a href="#6-2-捕获自定义异常" class="headerlink" title="6.2 捕获自定义异常"></a>6.2 捕获自定义异常</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    raise_customer_exception<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> MyException <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error!"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Error! 这是一个自定义异常</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】-5.Python面向对象</title>
      <link href="posts/68ce7d83.html"/>
      <url>posts/68ce7d83.html</url>
      
        <content type="html"><![CDATA[<p>Python是一门面向对象的语言，所以在Python中需要创建类和对象</p><h1 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1. 面向对象"></a>1. 面向对象</h1><h2 id="1-1-类的创建"><a href="#1-1-类的创建" class="headerlink" title="1.1 类的创建"></a>1.1 类的创建</h2><p>类的定义：</p><blockquote><p>class [类名]:<br>    [语法块]</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">EmptyClass</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><h2 id="1-2-类的使用"><a href="#1-2-类的使用" class="headerlink" title="1.2 类的使用"></a>1.2 类的使用</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">EmptyClass</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>empty <span class="token operator">=</span> EmptyClass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># &lt;class '__main__.EmptyClass'></span></code></pre><h2 id="1-3-类的构造方法"><a href="#1-3-类的构造方法" class="headerlink" title="1.3 类的构造方法"></a>1.3 类的构造方法</h2><blockquote><p>在Python中，构造方法就是类的 __init__ 方法，类在实例化时会自动调用 __init__ 方法，用于创建类的实例</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"汪汪汪！"</span><span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 汪汪汪！</span></code></pre><h2 id="1-4-类的属性"><a href="#1-4-类的属性" class="headerlink" title="1.4 类的属性"></a>1.4 类的属性</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 旺财</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span></code></pre><blockquote><p><strong>注意</strong>：属性必须使用 “self” 加上点的方式赋值，不能直接定义变量。直接定义的变量生命周期只在函数内，函数执行完变量就会被销毁。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        age <span class="token operator">=</span> <span class="token number">3</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 旺财</span><span class="token comment" spellcheck="true"># Dog 没有age这个属性，出现错误： AttributeError: 'Dog' object has no attribute 'age'</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>age<span class="token punctuation">)</span></code></pre><h2 id="1-5-类的方法"><a href="#1-5-类的方法" class="headerlink" title="1.5 类的方法"></a>1.5 类的方法</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"汪汪汪！我是"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 汪汪汪！我是 旺财</span></code></pre><h2 id="1-6-私有属性"><a href="#1-6-私有属性" class="headerlink" title="1.6 私有属性"></a>1.6 私有属性</h2><blockquote><p>为了防止实例随意修改属性，需要用到私有属性。私有属性使用 “__” 作为开头</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"汪汪汪！我是"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>__name<span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 汪汪汪！我是 旺财</span><span class="token comment" spellcheck="true"># 私有属性对外不可见，出现错误： AttributeError: 'Dog' object has no attribute '__name'</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>__name<span class="token punctuation">)</span></code></pre><p><strong>提供 set 方法修改私有属性</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> None        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">,</span> <span class="token string">"生成成功"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">set_age</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>age<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的年龄必须是数字！"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> age <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的年龄必须大于0！"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"汪汪汪！我今年"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>__age<span class="token punctuation">,</span> <span class="token string">"岁"</span><span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 旺财 生成成功</span>dog<span class="token punctuation">.</span>set_age<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输入的年龄必须是数字！</span>dog<span class="token punctuation">.</span>set_age<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输入的年龄必须大于0！</span>dog<span class="token punctuation">.</span>set_age<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 汪汪汪！我今年 3 岁</span></code></pre><h2 id="1-7-私有方法"><a href="#1-7-私有方法" class="headerlink" title="1.7 私有方法"></a>1.7 私有方法</h2><blockquote><p>私有方法只能在内部被调用，实例不能直接调用</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__say</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__say<span class="token punctuation">(</span><span class="token string">"汪汪汪"</span><span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 汪汪汪</span><span class="token comment" spellcheck="true"># 私有方法不能被实例调用，出现错误： AttributeError: 'Dog' object has no attribute '__say'</span>dog<span class="token punctuation">.</span>__say<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="2-继承和多态"><a href="#2-继承和多态" class="headerlink" title="2. 继承和多态"></a>2. 继承和多态</h1><blockquote><p>面向对象有三大特性： 封装、继承、多态</p></blockquote><h2 id="2-1-继承"><a href="#2-1-继承" class="headerlink" title="2.1 继承"></a>2.1 继承</h2><blockquote><p><strong>注意</strong>： Python 支持多重继承，一个类可以有多个父类。</p></blockquote><p>子类的定义如下：</p><blockquote><p>class SubClass(BaseClass1, BaseClass2):<br>    [语法块]</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 继承</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 我是 旺财</span></code></pre><p>继承有两点需要注意：</p><ol><li>在继承中，如果子类定义了构造方法，则父类的构造方法 __init__ 不会被自动调用，需要在子类中手动调用。</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>       self<span class="token punctuation">.</span>name <span class="token operator">=</span> name   <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 父类的构造方法没有被执行，</span><span class="token comment" spellcheck="true"># 出现错误： TypeError: __init__() missing 1 required positional argument: 'name'</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># AttributeError: 'Dog' object has no attribute 'name'</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><p>   正确方式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Dog<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 我是 旺财</span></code></pre><ol start="2"><li>子类不能继承父类中的私有方法，也不能调用父类的私有方法。</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>       self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name   <span class="token keyword">def</span> <span class="token function">__play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Animal, __play"</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Animal, play"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       self<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>       self<span class="token punctuation">.</span>__play<span class="token punctuation">(</span><span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Animal, play</span><span class="token comment" spellcheck="true"># AttributeError: 'Dog' object has no attribute '_Dog__play'</span></code></pre><h2 id="2-2-多态"><a href="#2-2-多态" class="headerlink" title="2.2 多态"></a>2.2 多态</h2><blockquote><p>继承可以帮助我们重复使用代码，但是有时候子类的行为不一定完全和父类一样</p></blockquote><h3 id="2-2-1-子类使用父类实现"><a href="#2-2-1-子类使用父类实现" class="headerlink" title="2.2.1 子类使用父类实现"></a>2.2.1 子类使用父类实现</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Animal"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Animal</span>cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Animal</span></code></pre><h3 id="2-2-2-子类自定义方法实现"><a href="#2-2-2-子类自定义方法实现" class="headerlink" title="2.2.2 子类自定义方法实现"></a>2.2.2 子类自定义方法实现</h3><blockquote><p>当子类和父类存在相同的方法时，子类的方法会覆盖父类的方法，这样代码在运行时总是会调用子类的方法</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Animal"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Dog"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Dog</span>cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Cat</span></code></pre><h3 id="2-2-3-判断类的实例"><a href="#2-2-3-判断类的实例" class="headerlink" title="2.2.3 判断类的实例"></a>2.2.3 判断类的实例</h3><pre class=" language-python"><code class="language-python">使用内置函数 isinstance<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------------------------- 2.3 ---------------------------------------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>dog<span class="token punctuation">,</span> Dog<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>dog<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>cat<span class="token punctuation">,</span> Cat<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>cat<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span></code></pre><h3 id="2-2-4-接收子对象的方法"><a href="#2-2-4-接收子对象的方法" class="headerlink" title="2.2.4 接收子对象的方法"></a>2.2.4 接收子对象的方法</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Animal"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Dog"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">animal_say</span><span class="token punctuation">(</span>animal<span class="token punctuation">:</span> Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>animal_say<span class="token punctuation">(</span>dog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Dog</span>animal_say<span class="token punctuation">(</span>cat<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Cat</span></code></pre><h2 id="2-3-鸭子类型"><a href="#2-3-鸭子类型" class="headerlink" title="2.3 鸭子类型"></a>2.3 鸭子类型</h2><blockquote><p>在程序设计中，鸭子类型（Ducking Type） 是动态类型的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口决定的，而是由当前方法和属性的集合决定的</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Dog"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">animal_say</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>animal_say<span class="token punctuation">(</span>dog<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Dog</span>animal_say<span class="token punctuation">(</span>cat<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Cat</span></code></pre><h1 id="3-类变量和实例变量"><a href="#3-类变量和实例变量" class="headerlink" title="3. 类变量和实例变量"></a>3. 类变量和实例变量</h1><h2 id="3-1-类变量"><a href="#3-1-类变量" class="headerlink" title="3.1 类变量"></a>3.1 类变量</h2><blockquote><p>类变量：不需要实例化就能直接使用，相当于绑定在类上</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"动物"</span><span class="token keyword">print</span><span class="token punctuation">(</span>Animal<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 动物</span></code></pre><h2 id="3-2-实例调用类变量"><a href="#3-2-实例调用类变量" class="headerlink" title="3.2 实例调用类变量"></a>3.2 实例调用类变量</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"动物"</span>dog <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span>cat <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 动物</span><span class="token keyword">print</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 动物</span>Animal<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"哺乳类动物"</span><span class="token keyword">print</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 哺乳类动物</span><span class="token keyword">print</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 哺乳类动物</span></code></pre><h1 id="4-静态方法和类方法"><a href="#4-静态方法和类方法" class="headerlink" title="4. 静态方法和类方法"></a>4. 静态方法和类方法</h1><h2 id="4-1-静态方法"><a href="#4-1-静态方法" class="headerlink" title="4.1 静态方法"></a>4.1 静态方法</h2><blockquote><p>静态方法： 使用 “@staticmethod” 进行装饰。不需要默认参数 “self”，不能调用成员变量和成员方法。和类变量一样，可以直接使用</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"动物"</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"playing"</span><span class="token punctuation">)</span>Animal<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># playing</span></code></pre><h2 id="4-2-类方法"><a href="#4-2-类方法" class="headerlink" title="4.2 类方法"></a>4.2 类方法</h2><blockquote><p>类方法： 使用 “@classmethod” 进行装饰。需要一个初始参数cls指向类本身，可以读取和修改类变量</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">"动物"</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"playing"</span><span class="token punctuation">)</span>Animal<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 动物 playing</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】-4.Python中的函数</title>
      <link href="posts/f003a7d8.html"/>
      <url>posts/f003a7d8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在编程中，我们经常要调用相同或者类似的操作，这些相同或者类似的操作是由同一段代码完成的，而函数的出现，可以帮助我们避免重复编写这些代码。函数的作用就是把相对独立的某个功能抽象出来，使之成为一个独立的实体。</p><p>例如，我们开发一个支持人与人之间对话的社交网站，“对话”这个功能实现起来比较复杂，我们可以将它封装为一个函数，每次调用函数就可以发起对话。大型网站都有日志功能，所有重要操作都会记录日志，而日志处理需要由多行Python文件操作的相关代码组成，将这些代码组装为函数，每次写日志调用此函数即可。</p></blockquote><h1 id="1-函数的定义"><a href="#1-函数的定义" class="headerlink" title="1. 函数的定义"></a>1. 函数的定义</h1><p>定义一个函数以 def 开头</p><blockquote><p>def function_name(arg1, arg2):<br>    function body<br>    return value</p></blockquote><ul><li><p>函数名（function_name）： 和Python中其他标识符命名规则相同，有效的函数名以字母或下划线开头，后面可以跟字母、数字或下划线，函数名应该能反映函数的功能。</p><p> <strong>注意</strong>： Python 中函数名区分大小写，字母相同但是大小写不同的函数视为两个不同的函数</p></li><li><p>函数参数（arg1, arg2）： 调用一个函数时可以传递的参数，参数可以有一个或多个，也可以没有参数</p></li><li><p>函数内容（function body）： 任何有效的代码都可以出现在函数内部。函数内容和 def 缩进 4 个空格</p></li><li><p>函数返回值（return value）： 函数执行完成后返回的值。也可以不返回任何内容，不返回内容可视为返回 “None”</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">introduce</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>introduce<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Hello world</span>introduce<span class="token punctuation">(</span><span class="token string">"soulballad"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Hello soulballad</span></code></pre><h1 id="2-函数的参数"><a href="#2-函数的参数" class="headerlink" title="2. 函数的参数"></a>2. 函数的参数</h1><blockquote><p>在创建函数时，可以设置参数，也可以不设置参数。对于设置参数的函数，调用时需要向函数内传递参数，被传入的参数称为实参，函数定义时的参数为形参。</p><p>Python 中的参数可以分为以下几种类型：</p><ul><li>❤ 1. 必须参数</li><li>❤ 2. 关键字参数</li><li>❤ 3. 默认参数</li><li>❤ 4. 可变参数</li><li>❤ 5. 组合参数</li></ul></blockquote><h2 id="2-1-必须参数"><a href="#2-1-必须参数" class="headerlink" title="2.1 必须参数"></a>2.1 必须参数</h2><blockquote><p>必须参数：顾名思义就是函数调用时必须传入，并且在调用时数量和顺序必须和定义时参数保持一致</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a + b ="</span><span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># a + b = 3</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 如果只传入一个参数，出现错误： TypeError: add() missing 1 required positional argument: 'b'</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 如果多传入一个参数，出现错误： TypeError: add() takes 2 positional arguments but 3 were given</span></code></pre><h2 id="2-2-关键字参数"><a href="#2-2-关键字参数" class="headerlink" title="2.2 关键字参数"></a>2.2 关键字参数</h2><blockquote><p>使用关键字参数可以不按函数定义时的参数顺序来调用函数，Python解释器能够根据函数定义时的参数名字来匹配参数</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"姓名："</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"年龄："</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按顺序传递参数</span>hello<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"零一"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 姓名： 零一</span><span class="token comment" spellcheck="true"># 年龄： 18</span><span class="token comment" spellcheck="true"># 不按顺序传递参数</span>hello<span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 姓名： 小明</span><span class="token comment" spellcheck="true"># 年龄： 3</span>hello<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>gender<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 传入没有定义的参数，出现错误： TypeError: hello() got an unexpected keyword argument 'gender'</span></code></pre><h2 id="2-3-默认参数"><a href="#2-3-默认参数" class="headerlink" title="2.3 默认参数"></a>2.3 默认参数</h2><blockquote><p>在定义函数时可以给函数添加默认值，如果调用函数时没有传入参数，函数就会使用默认值，并且不会像必传参数那样报错</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">default_value</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我的名字是："</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我今年："</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token string">"岁"</span><span class="token punctuation">)</span>default_value<span class="token punctuation">(</span><span class="token string">"零一"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 我的名字是： 零一</span><span class="token comment" spellcheck="true"># 我今年： 18 岁</span></code></pre><blockquote><p><strong>注意： 默认参数必须定义在最后，而且在默认参数之后定义必须参数会报错</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">default_value</span><span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我的名字是："</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我今年："</span><span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token string">"岁"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># SyntaxError: non-default argument follows default argument</span></code></pre></blockquote><p>默认参数用法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">student_score</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> location<span class="token operator">=</span><span class="token string">"Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"姓名："</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"成绩："</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"地区："</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------- 传入所有参数 ----------"</span><span class="token punctuation">)</span>student_score<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"Beijing"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------- 不传最后一个参数 ----------"</span><span class="token punctuation">)</span>student_score<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------- 不传中间参数 ----------"</span><span class="token punctuation">)</span>student_score<span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span> location<span class="token operator">=</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------- 只传必须参数 ----------"</span><span class="token punctuation">)</span>student_score<span class="token punctuation">(</span><span class="token string">"胖虎"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------- 只传关键字参数 ----------"</span><span class="token punctuation">)</span>student_score<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"元太"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ---------- 传入所有参数 ----------</span><span class="token comment" spellcheck="true"># 姓名： 张三</span><span class="token comment" spellcheck="true"># 成绩： 100</span><span class="token comment" spellcheck="true"># 地区： Beijing</span><span class="token comment" spellcheck="true"># ---------- 不传最后一个参数 ----------</span><span class="token comment" spellcheck="true"># 姓名： 小明</span><span class="token comment" spellcheck="true"># 成绩： 80</span><span class="token comment" spellcheck="true"># 地区： Shanghai</span><span class="token comment" spellcheck="true"># ---------- 不传中间参数 ----------</span><span class="token comment" spellcheck="true"># 姓名： 小红</span><span class="token comment" spellcheck="true"># 成绩： 60</span><span class="token comment" spellcheck="true"># 地区： 广州</span><span class="token comment" spellcheck="true"># ---------- 只传必须参数 ----------</span><span class="token comment" spellcheck="true"># 姓名： 胖虎</span><span class="token comment" spellcheck="true"># 成绩： 60</span><span class="token comment" spellcheck="true"># 地区： Shanghai</span><span class="token comment" spellcheck="true"># ---------- 只传关键字参数 ----------</span><span class="token comment" spellcheck="true"># 姓名： 元太</span><span class="token comment" spellcheck="true"># 成绩： 60</span><span class="token comment" spellcheck="true"># 地区： Shanghai</span></code></pre><h2 id="2-4-可变参数"><a href="#2-4-可变参数" class="headerlink" title="2.4 可变参数"></a>2.4 可变参数</h2><blockquote><p>在某些情况下，不能再定义时就确定参数的数量和内容，这时就可以使用可变参数</p></blockquote><h3 id="2-4-1-语法"><a href="#2-4-1-语法" class="headerlink" title="2.4.1  语法"></a>2.4.1  语法</h3><p>可变参数语法如下：</p><blockquote><p>some_func(*args, **kwargs)</p><ul><li>some_func 为函数名</li><li>*args 和 **kwargs 为可变参数</li></ul></blockquote><h3 id="2-4-2-args可变参数"><a href="#2-4-2-args可变参数" class="headerlink" title="2.4.2 *args可变参数"></a>2.4.2 *args可变参数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"function"</span><span class="token punctuation">,</span> <span class="token string">"parameters"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ()</span><span class="token comment" spellcheck="true"># (1, 2)</span><span class="token comment" spellcheck="true"># ('Python', 'function', 'parameters')</span></code></pre><h3 id="2-4-3-kwargs可变参数"><a href="#2-4-3-kwargs可变参数" class="headerlink" title="2.4.3 **kwargs可变参数"></a>2.4.3 **kwargs可变参数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span>foo<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"python study"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {}</span><span class="token comment" spellcheck="true"># {'name': 'python study'}</span></code></pre><h3 id="2-4-4-混合参数"><a href="#2-4-4-混合参数" class="headerlink" title="2.4.4 混合参数"></a>2.4.4 混合参数</h3><blockquote><p>从上面例子可以看出： <strong>*args 参数获取到的是一个元组</strong>， <strong>**kwargs 参数获取到的是一个字典</strong>。在日常使用中，*args 和 **kwargs 经常出现，用于解决一些未知问题</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calculate_sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> args<span class="token punctuation">:</span>        s <span class="token operator">+=</span> i    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的数字之和是："</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>calculate_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"python"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输入的数字之和是： 15</span><span class="token comment" spellcheck="true"># name python</span></code></pre><h3 id="2-4-5-可变参数传递未知参数"><a href="#2-4-5-可变参数传递未知参数" class="headerlink" title="2.4.5 可变参数传递未知参数"></a>2.4.5 可变参数传递未知参数</h3><blockquote><p>使用可变参数的方式来传递未知参数</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"参数1"</span><span class="token punctuation">:</span> <span class="token string">"arg1"</span><span class="token punctuation">,</span> <span class="token string">"参数2"</span><span class="token punctuation">:</span> <span class="token string">"arg2"</span><span class="token punctuation">}</span>exp<span class="token punctuation">(</span>l<span class="token punctuation">,</span> d<span class="token punctuation">)</span>exp<span class="token punctuation">(</span><span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token operator">**</span>d<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ((1, 2, 3, 4), {'参数1': 'arg1', '参数2': 'arg2'})</span><span class="token comment" spellcheck="true"># {}</span><span class="token comment" spellcheck="true"># (1, 2, 3, 4)</span><span class="token comment" spellcheck="true"># {'参数1': 'arg1', '参数2': 'arg2'}</span></code></pre><h1 id="3-变量作用域"><a href="#3-变量作用域" class="headerlink" title="3. 变量作用域"></a>3. 变量作用域</h1><blockquote><p>Python 中有两种最基本的变量作用域：局部变量和全局变量</p></blockquote><h2 id="3-1-局部变量"><a href="#3-1-局部变量" class="headerlink" title="3.1 局部变量"></a>3.1 局部变量</h2><blockquote><p>一般情况下，在函数内赋值的变量，不做特殊声明的变量都是局部变量</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hello</span></code></pre><h2 id="3-2-全局变量"><a href="#3-2-全局变量" class="headerlink" title="3.2 全局变量"></a>3.2 全局变量</h2><blockquote><p>在函数外赋值的变量就是全局变量，全局变量可以在整个程序范围内被访问</p></blockquote><h3 id="3-2-1-全局变量使用"><a href="#3-2-1-全局变量使用" class="headerlink" title="3.2.1 全局变量使用"></a>3.2.1 全局变量使用</h3><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hello</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hello</span></code></pre><h3 id="3-2-2-重写全局变量"><a href="#3-2-2-重写全局变量" class="headerlink" title="3.2.2 重写全局变量"></a>3.2.2 重写全局变量</h3><blockquote><p>函数体内重写赋值的同名变量，不会改变函数体外的全局变量</p></blockquote><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token string">"函数体外"</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">"函数体内"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 函数体内</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 函数体外</span></code></pre><h3 id="3-2-3-修改全局变量"><a href="#3-2-3-修改全局变量" class="headerlink" title="3.2.3 修改全局变量"></a>3.2.3 修改全局变量</h3><blockquote><p>使用 global 关键字在函数体内对函数体外的全局变量进行修改</p></blockquote><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token string">"函数体外"</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> x    x <span class="token operator">=</span> <span class="token string">"函数体内"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 函数体内</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 函数体内</span></code></pre><h1 id="4-函数返回值"><a href="#4-函数返回值" class="headerlink" title="4. 函数返回值"></a>4. 函数返回值</h1><blockquote><p>如果想要获取函数中的局部变量，可以使用 “return” 关键字进行返回</p></blockquote><h2 id="4-1-有返回值"><a href="#4-1-有返回值" class="headerlink" title="4.1 有返回值"></a>4.1 有返回值</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">"局部变量"</span>    <span class="token keyword">return</span> xresult <span class="token operator">=</span> foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 局部变量</span></code></pre><h2 id="4-2-无返回值"><a href="#4-2-无返回值" class="headerlink" title="4.2 无返回值"></a>4.2 无返回值</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">no_return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有return"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">no_return_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"有return没有返回值"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">has_return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token string">"局部变量"</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"有return有返回值"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> xresult1 <span class="token operator">=</span> no_return<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 没有return</span><span class="token comment" spellcheck="true"># None</span>result2 <span class="token operator">=</span> no_return_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 有return没有返回值</span><span class="token comment" spellcheck="true"># None</span>result3 <span class="token operator">=</span> has_return<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 有return有返回值</span><span class="token comment" spellcheck="true"># 局部变量</span></code></pre><h2 id="4-3-多个返回值"><a href="#4-3-多个返回值" class="headerlink" title="4.3 多个返回值"></a>4.3 多个返回值</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">multi_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r1 <span class="token operator">=</span> <span class="token string">"第一个返回值"</span>    r2 <span class="token operator">=</span> <span class="token string">"第二个返回值"</span>    r3 <span class="token operator">=</span> <span class="token string">"第三个返回值"</span>    r4 <span class="token operator">=</span> <span class="token string">"第四个返回值"</span>    r5 <span class="token operator">=</span> <span class="token string">"第五个返回值"</span>    <span class="token keyword">return</span> r1<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> r3<span class="token punctuation">,</span> r4<span class="token punctuation">,</span> r5s <span class="token operator">=</span> multi_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ('第一个返回值', '第二个返回值', '第三个返回值', '第四个返回值', '第五个返回值')</span></code></pre><blockquote><p>从执行结果来看，有多个返回结果时，Python 会返回一个元组；当Python返回了元祖时，就可以赋值给多个变量了</p></blockquote><h2 id="4-4-获取多个返回值"><a href="#4-4-获取多个返回值" class="headerlink" title="4.4 获取多个返回值"></a>4.4 获取多个返回值</h2><pre class=" language-python"><code class="language-python">    <span class="token keyword">return</span> <span class="token string">"第一个返回值"</span><span class="token punctuation">,</span> <span class="token string">"第二个返回值"</span>r1<span class="token punctuation">,</span> r2 <span class="token operator">=</span> two_value<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 第一个返回值</span><span class="token keyword">print</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 第二个返回值</span></code></pre><h1 id="5-Lambda表达式"><a href="#5-Lambda表达式" class="headerlink" title="5. Lambda表达式"></a>5. Lambda表达式</h1><blockquote><p>Lambda 表达式也称作匿名函数。</p></blockquote><h2 id="5-1-Lambda-定义"><a href="#5-1-Lambda-定义" class="headerlink" title="5.1 Lambda 定义"></a>5.1 Lambda 定义</h2><blockquote><p>以 “lambda” 开头，就表示是 lambda 表达式。它由 “:” 分为两部分，左边的是函数的参数，右边的是要返回的值。</p><p>lambda 表达式不需要用 return 关键字返回内容，函数默认会返回 “:” 右边的值</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span> x<span class="token operator">+</span>y</code></pre><h2 id="5-2-Lambda-使用场景"><a href="#5-2-Lambda-使用场景" class="headerlink" title="5.2 Lambda 使用场景"></a>5.2 Lambda 使用场景</h2><blockquote><p>lambda 表达式一般有两种使用情况：</p><ol><li>程序只执行一次，不需要定义函数，使用 lambda 表达式方便定义，且节省了内存中变量的定义</li><li>在某些函数中必须以函数作为参数，但是函数本身十分简单且在一处使用</li></ol></blockquote><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>yz <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># &lt;function &lt;lambda> at 0x000001D1DC518B80></span><span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span></code></pre><h2 id="5-3-filter过滤"><a href="#5-3-filter过滤" class="headerlink" title="5.3 filter过滤"></a>5.3 filter过滤</h2><blockquote><p>filter 是 Python的内置函数，用于过滤序列，过滤掉不符合条件的元素。</p><p>filter 函数的第一个参赛需要传入另一个函数，传入的函数用来作为筛选条件，满足条件的返回 “True”，否则返回 “False”。</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> <span class="token punctuation">[</span>item <span class="token keyword">for</span> item <span class="token keyword">in</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">></span><span class="token number">5</span><span class="token punctuation">,</span> l1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [6, 7, 8]</span></code></pre><h1 id="6-扩展知识"><a href="#6-扩展知识" class="headerlink" title="6. 扩展知识"></a>6. 扩展知识</h1><h2 id="6-1-文档字符串"><a href="#6-1-文档字符串" class="headerlink" title="6.1 文档字符串"></a>6.1 文档字符串</h2><blockquote><p>使用 def 定义的函数，第一行可以是字符串，这个字符串就是文档字符串</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    返回参数x和y的两数之和    :param x: int 第一个参数    :param y: int 第二个参数    :return: 返回 x+y    """</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># 可以使用 __doc__ 方式获取文档字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#   返回参数x和y的两数之和</span><span class="token comment" spellcheck="true">#   :param x: int 第一个参数</span><span class="token comment" spellcheck="true">#   :param y: int 第二个参数</span><span class="token comment" spellcheck="true">#   :return: 返回 x+y</span></code></pre><h2 id="6-2-内置函数"><a href="#6-2-内置函数" class="headerlink" title="6.2 内置函数"></a>6.2 内置函数</h2><blockquote><p>Python 解释器内置了很多不同功能和类型的函数，可以直接使用</p></blockquote><p>截取自菜鸟教程：<a href="https://www.runoob.com/python/python-built-in-functions.html" target="_blank" rel="noopener">Python 内置函数</a></p><table><thead><tr><th><a href="https://www.runoob.com/python/func-number-abs.html" target="_blank" rel="noopener">abs()</a></th><th><a href="https://www.runoob.com/python/python-func-divmod.html" target="_blank" rel="noopener">divmod()</a></th><th><a href="https://www.runoob.com/python/python-func-input.html" target="_blank" rel="noopener">input()</a></th><th><a href="https://www.runoob.com/python/python-func-open.html" target="_blank" rel="noopener">open()</a></th><th><a href="https://www.runoob.com/python/python-func-staticmethod.html" target="_blank" rel="noopener">staticmethod()</a></th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/python/python-func-all.html" target="_blank" rel="noopener">all()</a></td><td><a href="https://www.runoob.com/python/python-func-enumerate.html" target="_blank" rel="noopener">enumerate()</a></td><td><a href="https://www.runoob.com/python/python-func-int.html" target="_blank" rel="noopener">int()</a></td><td><a href="https://www.runoob.com/python/python-func-ord.html" target="_blank" rel="noopener">ord()</a></td><td><a href="https://www.runoob.com/python/python-func-str.html" target="_blank" rel="noopener">str()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-any.html" target="_blank" rel="noopener">any()</a></td><td><a href="https://www.runoob.com/python/python-func-eval.html" target="_blank" rel="noopener">eval()</a></td><td><a href="https://www.runoob.com/python/python-func-isinstance.html" target="_blank" rel="noopener">isinstance()</a></td><td><a href="https://www.runoob.com/python/func-number-pow.html" target="_blank" rel="noopener">pow()</a></td><td><a href="https://www.runoob.com/python/python-func-sum.html" target="_blank" rel="noopener">sum()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-basestring.html" target="_blank" rel="noopener">basestring()</a></td><td><a href="https://www.runoob.com/python/python-func-execfile.html" target="_blank" rel="noopener">execfile()</a></td><td><a href="https://www.runoob.com/python/python-func-issubclass.html" target="_blank" rel="noopener">issubclass()</a></td><td><a href="https://www.runoob.com/python/python-func-print.html" target="_blank" rel="noopener">print()</a></td><td><a href="https://www.runoob.com/python/python-func-super.html" target="_blank" rel="noopener">super()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-bin.html" target="_blank" rel="noopener">bin()</a></td><td><a href="https://www.runoob.com/python/python-func-file.html" target="_blank" rel="noopener">file()</a></td><td><a href="https://www.runoob.com/python/python-func-iter.html" target="_blank" rel="noopener">iter()</a></td><td><a href="https://www.runoob.com/python/python-func-property.html" target="_blank" rel="noopener">property()</a></td><td><a href="https://www.runoob.com/python/att-tuple-tuple.html" target="_blank" rel="noopener">tuple()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-bool.html" target="_blank" rel="noopener">bool()</a></td><td><a href="https://www.runoob.com/python/python-func-filter.html" target="_blank" rel="noopener">filter()</a></td><td><a href="https://www.runoob.com/python/att-string-len.html" target="_blank" rel="noopener">len()</a></td><td><a href="https://www.runoob.com/python/python-func-range.html" target="_blank" rel="noopener">range()</a></td><td><a href="https://www.runoob.com/python/python-func-type.html" target="_blank" rel="noopener">type()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-bytearray.html" target="_blank" rel="noopener">bytearray()</a></td><td><a href="https://www.runoob.com/python/python-func-float.html" target="_blank" rel="noopener">float()</a></td><td><a href="https://www.runoob.com/python/att-list-list.html" target="_blank" rel="noopener">list()</a></td><td><a href="https://www.runoob.com/python/python-func-raw_input.html" target="_blank" rel="noopener">raw_input()</a></td><td><a href="https://www.runoob.com/python/python-func-unichr.html" target="_blank" rel="noopener">unichr()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-callable.html" target="_blank" rel="noopener">callable()</a></td><td><a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">format()</a></td><td><a href="https://www.runoob.com/python/python-func-locals.html" target="_blank" rel="noopener">locals()</a></td><td><a href="https://www.runoob.com/python/python-func-reduce.html" target="_blank" rel="noopener">reduce()</a></td><td>unicode()</td></tr><tr><td><a href="https://www.runoob.com/python/python-func-chr.html" target="_blank" rel="noopener">chr()</a></td><td><a href="https://www.runoob.com/python/python-func-frozenset.html" target="_blank" rel="noopener">frozenset()</a></td><td><a href="https://www.runoob.com/python/python-func-long.html" target="_blank" rel="noopener">long()</a></td><td><a href="https://www.runoob.com/python/python-func-reload.html" target="_blank" rel="noopener">reload()</a></td><td><a href="https://www.runoob.com/python/python-func-vars.html" target="_blank" rel="noopener">vars()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-classmethod.html" target="_blank" rel="noopener">classmethod()</a></td><td><a href="https://www.runoob.com/python/python-func-getattr.html" target="_blank" rel="noopener">getattr()</a></td><td><a href="https://www.runoob.com/python/python-func-map.html" target="_blank" rel="noopener">map()</a></td><td><a href="https://www.runoob.com/python/python-func-repr.html" target="_blank" rel="noopener">repr()</a></td><td><a href="https://www.runoob.com/python/python-func-xrange.html" target="_blank" rel="noopener">xrange()</a></td></tr><tr><td><a href="https://www.runoob.com/python/func-number-cmp.html" target="_blank" rel="noopener">cmp()</a></td><td><a href="https://www.runoob.com/python/python-func-globals.html" target="_blank" rel="noopener">globals()</a></td><td><a href="https://www.runoob.com/python/func-number-max.html" target="_blank" rel="noopener">max()</a></td><td><a href="https://www.runoob.com/python/att-list-reverse.html" target="_blank" rel="noopener">reverse()</a></td><td><a href="https://www.runoob.com/python/python-func-zip.html" target="_blank" rel="noopener">zip()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-compile.html" target="_blank" rel="noopener">compile()</a></td><td><a href="https://www.runoob.com/python/python-func-hasattr.html" target="_blank" rel="noopener">hasattr()</a></td><td><a href="https://www.runoob.com/python/python-func-memoryview.html" target="_blank" rel="noopener">memoryview()</a></td><td><a href="https://www.runoob.com/python/func-number-round.html" target="_blank" rel="noopener">round()</a></td><td><a href="https://www.runoob.com/python/python-func-__import__.html" target="_blank" rel="noopener"><strong>import</strong>()</a></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-complex.html" target="_blank" rel="noopener">complex()</a></td><td><a href="https://www.runoob.com/python/python-func-hash.html" target="_blank" rel="noopener">hash()</a></td><td><a href="https://www.runoob.com/python/func-number-min.html" target="_blank" rel="noopener">min()</a></td><td><a href="https://www.runoob.com/python/python-func-set.html" target="_blank" rel="noopener">set()</a></td><td></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-delattr.html" target="_blank" rel="noopener">delattr()</a></td><td><a href="https://www.runoob.com/python/python-func-help.html" target="_blank" rel="noopener">help()</a></td><td><a href="https://www.runoob.com/python/python-func-next.html" target="_blank" rel="noopener">next()</a></td><td><a href="https://www.runoob.com/python/python-func-setattr.html" target="_blank" rel="noopener">setattr()</a></td><td></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-dict.html" target="_blank" rel="noopener">dict()</a></td><td><a href="https://www.runoob.com/python/python-func-hex.html" target="_blank" rel="noopener">hex()</a></td><td>object()</td><td><a href="https://www.runoob.com/python/python-func-slice.html" target="_blank" rel="noopener">slice()</a></td><td></td></tr><tr><td><a href="https://www.runoob.com/python/python-func-dir.html" target="_blank" rel="noopener">dir()</a></td><td><a href="https://www.runoob.com/python/python-func-id.html" target="_blank" rel="noopener">id()</a></td><td><a href="https://www.runoob.com/python/python-func-oct.html" target="_blank" rel="noopener">oct()</a></td><td><a href="https://www.runoob.com/python/python-func-sorted.html" target="_blank" rel="noopener">sorted()</a></td><td><a href="https://www.runoob.com/python/python-func-exec.html" target="_blank" rel="noopener">exec 内置表达式</a></td></tr></tbody></table><h2 id="6-3-函数注释"><a href="#6-3-函数注释" class="headerlink" title="6.3 函数注释"></a>6.3 函数注释</h2><blockquote><p>函数注释是一个可选功能，它允许在函数参数和返回值中添加任意的元数据</p></blockquote><p>函数注释定义如下：</p><blockquote><p>def function_name(a:expression, b:expression) -&gt; expression:<br>    function body<br>    return value</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">compile</span><span class="token punctuation">(</span>source<span class="token punctuation">:</span> <span class="token string">"something compilable"</span><span class="token punctuation">,</span>            filename<span class="token punctuation">:</span> <span class="token string">"where the compilable thing comes from"</span><span class="token punctuation">,</span>            mode<span class="token punctuation">:</span> <span class="token string">"is this a single statement or a suite?"</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>compile<span class="token punctuation">.</span>__annotations__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># {'source': 'something compilable', 'filename': 'where the compilable thing comes from', 'mode': 'is this a single statement or a suite?', 'return': &lt;class 'bool'>}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】-3.Python中的流程控制</title>
      <link href="posts/449cfbc2.html"/>
      <url>posts/449cfbc2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>所有编程语言在编写时都要遵循语言结构和流程控制，它们控制了整个程序运行的步骤。流程控制包括顺序控制、条件控制和循环控制。所谓控制顺序，就是按照正常的代码执行顺序，从上到下、从文件头到文件尾依次指定每条语句。</p></blockquote><h1 id="1-if判断"><a href="#1-if判断" class="headerlink" title="1. if判断"></a>1. if判断</h1><h2 id="1-1-if语句"><a href="#1-1-if语句" class="headerlink" title="1.1 if语句"></a>1.1 if语句</h2><h3 id="1-1-1-if语法"><a href="#1-1-1-if语法" class="headerlink" title="1.1.1 if语法"></a>1.1.1 if语法</h3><p><strong>语法</strong>：</p><blockquote><p>if 表达式：<br>    语句1（4个空格）<br>    语句2</p></blockquote><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">if</span> x<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It's True"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># It's True</span></code></pre><h3 id="1-1-2-条件是数字"><a href="#1-1-2-条件是数字" class="headerlink" title="1.1.2 条件是数字"></a>1.1.2 条件是数字</h3><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">if</span> x<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x is: "</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># x is:  18</span><span class="token comment" spellcheck="true"># 只有数字为0时是False</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> x<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x is not zero"</span><span class="token punctuation">)</span></code></pre><h3 id="1-1-3-条件是字符串"><a href="#1-1-3-条件是字符串" class="headerlink" title="1.1.3 条件是字符串"></a>1.1.3 条件是字符串</h3><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token keyword">if</span> x<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x is: "</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># x is:  Hello</span><span class="token comment" spellcheck="true"># 只有字符串为空时是False</span>x <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">if</span> x<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x is: "</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span></code></pre><h3 id="1-1-4-条件是列表、元组、字典"><a href="#1-1-4-条件是列表、元组、字典" class="headerlink" title="1.1.4 条件是列表、元组、字典"></a>1.1.4 条件是列表、元组、字典</h3><blockquote><p>列表、元组、字典类型的数据，当他们不包含任何元素时，条件测试结果是 “False”；含有任意元素时，条件测试结果是 “True”</p></blockquote><pre class=" language-python"><code class="language-python">x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>x2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">if</span> x1<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x1"</span><span class="token punctuation">)</span><span class="token keyword">if</span> x2<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x2"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># x2</span>x3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>x4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> x3<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x3"</span><span class="token punctuation">)</span><span class="token keyword">if</span> x4<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x4"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># x4</span>x5 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>x6 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Hello"</span><span class="token punctuation">:</span> <span class="token string">"World"</span><span class="token punctuation">}</span><span class="token keyword">if</span> x5<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x5"</span><span class="token punctuation">)</span><span class="token keyword">if</span> x6<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x6"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># x6</span></code></pre><h2 id="1-2-else语句"><a href="#1-2-else语句" class="headerlink" title="1.2 else语句"></a>1.2 else语句</h2><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> x<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x is not zero"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x is zero"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># x is zero</span></code></pre><h2 id="1-3-elif语句"><a href="#1-3-elif语句" class="headerlink" title="1.3 elif语句"></a>1.3 elif语句</h2><blockquote><p>有的时候可能需要多个条件，这时可以使用 elif</p></blockquote><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">89</span><span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"优"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> x <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"良"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> x <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 良</span>x <span class="token operator">=</span> <span class="token number">49</span><span class="token keyword">if</span> x <span class="token operator">></span> <span class="token number">90</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"优"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> x <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"良"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> x <span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 不及格</span></code></pre><h1 id="2-循环"><a href="#2-循环" class="headerlink" title="2. 循环"></a>2. 循环</h1><blockquote><p>Python中主要有两种循环结构：while循环和for循环</p></blockquote><h2 id="2-1-while循环"><a href="#2-1-while循环" class="headerlink" title="2.1 while循环"></a>2.1 while循环</h2><p><strong>语法</strong>：</p><blockquote><p>while 语法：<br>  while 表达式:<br>     语句1<br>      语句2</p></blockquote><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> x <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    x <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># ...</span><span class="token comment" spellcheck="true"># 10</span></code></pre><h2 id="2-2-for循环"><a href="#2-2-for循环" class="headerlink" title="2.2 for循环"></a>2.2 for循环</h2><h3 id="2-2-1-语法"><a href="#2-2-1-语法" class="headerlink" title="2.2.1 语法"></a>2.2.1 语法</h3><blockquote><p>for 语法：<br>  for 变量 in 序列:<br>      语句1<br>      语句2</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># ...</span><span class="token comment" spellcheck="true"># 10</span></code></pre><h3 id="2-2-2-range"><a href="#2-2-2-range" class="headerlink" title="2.2.2 range"></a>2.2.2 range</h3><p>rang 函数作为迭代条件</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># ...</span><span class="token comment" spellcheck="true"># 9</span></code></pre><p>rang 定义开始和结尾：不包含结尾</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># ...</span><span class="token comment" spellcheck="true"># 9</span></code></pre><p>range 定义步长</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># 5</span><span class="token comment" spellcheck="true"># 7</span><span class="token comment" spellcheck="true"># 9</span></code></pre><h2 id="2-3-break和continue"><a href="#2-3-break和continue" class="headerlink" title="2.3 break和continue"></a>2.3 break和continue</h2><blockquote><p>break 的作用是立即退出循环</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># 4</span><span class="token comment" spellcheck="true"># 5</span></code></pre><blockquote><p>continue 作用是跳过当前循环体，执行下次循环</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># 4</span><span class="token comment" spellcheck="true"># 6</span><span class="token comment" spellcheck="true"># 7</span><span class="token comment" spellcheck="true"># 8</span><span class="token comment" spellcheck="true"># 9</span></code></pre><h1 id="3-pass语句"><a href="#3-pass语句" class="headerlink" title="3. pass语句"></a>3. pass语句</h1><blockquote><p>在Python中的pass语句是空语句，其作用是保持结构的完整性。pass不做任何操作，一般用作占位语句</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0</span><span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># 4</span><span class="token comment" spellcheck="true"># 6</span><span class="token comment" spellcheck="true"># 7</span><span class="token comment" spellcheck="true"># 8</span><span class="token comment" spellcheck="true"># 9        </span>x <span class="token operator">=</span> <span class="token number">35</span><span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">35</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># TODO</span>    <span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x 不是 35"</span><span class="token punctuation">)</span></code></pre><h1 id="4-循环中的else"><a href="#4-循环中的else" class="headerlink" title="4. 循环中的else"></a>4. 循环中的else</h1><blockquote><p>在Python中，不只if可以和else组合，while和for也可以和else组合出现</p></blockquote><h2 id="4-1-while-else"><a href="#4-1-while-else" class="headerlink" title="4.1 while+else"></a>4.1 while+else</h2><pre class=" language-python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">" is less than 5"</span><span class="token punctuation">)</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">" is not less than 5"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0  is less than 5</span><span class="token comment" spellcheck="true"># 1  is less than 5</span><span class="token comment" spellcheck="true"># 2  is less than 5</span><span class="token comment" spellcheck="true"># 3  is less than 5</span><span class="token comment" spellcheck="true"># 4  is less than 5</span><span class="token comment" spellcheck="true"># 5  is not less than 5</span></code></pre><h2 id="4-2-while-else-break"><a href="#4-2-while-else-break" class="headerlink" title="4.2 while+else+break"></a>4.2 while+else+break</h2><blockquote><p>如果中途break退出while循环，不会执行else后的代码块</p></blockquote><pre class=" language-python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">" is less than 5"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">"is not less than 5"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0  is less than 5</span><span class="token comment" spellcheck="true"># 1  is less than 5</span><span class="token comment" spellcheck="true"># 2  is less than 5</span><span class="token comment" spellcheck="true"># 3  is less than 5</span></code></pre><h2 id="4-3-for-else"><a href="#4-3-for-else" class="headerlink" title="4.3 for+else"></a>4.3 for+else</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> count <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">" in for segment"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">" in else segment"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0  in for segment</span><span class="token comment" spellcheck="true"># 1  in for segment</span><span class="token comment" spellcheck="true"># 2  in for segment</span><span class="token comment" spellcheck="true"># 3  in for segment</span><span class="token comment" spellcheck="true"># 4  in for segment</span><span class="token comment" spellcheck="true"># 4  in else segment</span></code></pre><h2 id="4-4-for-else-break"><a href="#4-4-for-else-break" class="headerlink" title="4.4 for+else+break"></a>4.4 for+else+break</h2><blockquote><p>如果中途break退出for循环，不会执行else后的代码块</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> count <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">" in for segment"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token string">" in else segment"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0  in for segment</span><span class="token comment" spellcheck="true"># 1  in for segment</span><span class="token comment" spellcheck="true"># 2  in for segment</span><span class="token comment" spellcheck="true"># 3  in for segment</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】-2.Python中数据结构</title>
      <link href="posts/d132869e.html"/>
      <url>posts/d132869e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-序列的通用操作"><a href="#1-序列的通用操作" class="headerlink" title="1. 序列的通用操作"></a>1. 序列的通用操作</h1><blockquote><p>Python中有六种内置序列（列表、元组、字符串、Unicode字符串、buffer对象和 xrange 对象），可以对它们进行一些通用的操作。其中有三种序列比较常见：列表、元组、字符串。</p><p>通用序列操作：索引、切片、序列相加、乘法、成员资格、长度、最小值和最大值</p></blockquote><h2 id="1-1-索引"><a href="#1-1-索引" class="headerlink" title="1.1 索引"></a>1.1 索引</h2><h3 id="1-1-1-从左往右检索"><a href="#1-1-1-从左往右检索" class="headerlink" title="1.1.1 从左往右检索"></a>1.1.1 从左往右检索</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 元组</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span></code></pre><h3 id="1-1-2-从右往左编号检索"><a href="#1-1-2-从右往左编号检索" class="headerlink" title="1.1.2 从右往左编号检索"></a>1.1.2 从右往左编号检索</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span><span class="token comment" spellcheck="true"># 元组</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span></code></pre><h2 id="1-2-切片"><a href="#1-2-切片" class="headerlink" title="1.2 切片"></a>1.2 切片</h2><h3 id="1-2-1-从左往右切片"><a href="#1-2-1-从左往右切片" class="headerlink" title="1.2.1 从左往右切片"></a>1.2.1 从左往右切片</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [3]</span><span class="token comment" spellcheck="true"># 元组</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (1, 2, 3)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (3,)</span><span class="token comment" spellcheck="true"># 字符串</span>x3 <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 123</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span></code></pre><h3 id="1-2-2-从右往左进行切片"><a href="#1-2-2-从右往左进行切片" class="headerlink" title="1.2.2 从右往左进行切片"></a>1.2.2 从右往左进行切片</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2, 3]</span><span class="token comment" spellcheck="true"># 元组</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (2, 3)</span><span class="token comment" spellcheck="true"># 字符串</span>x3 <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 23</span></code></pre><blockquote><p><strong>切片原理</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#  +---+---+---+---+</span><span class="token comment" spellcheck="true">#  | 1 | 2 | 3 | 4 |</span><span class="token comment" spellcheck="true">#  +---+---+---+---+</span><span class="token comment" spellcheck="true">#    0   1   2   3</span><span class="token comment" spellcheck="true">#   -4  -3  -2  -1</span></code></pre></blockquote><h3 id="1-2-3-切片索引越界"><a href="#1-2-3-切片索引越界" class="headerlink" title="1.2.3 切片索引越界"></a>1.2.3 切片索引越界</h3><blockquote><p>切片时，索引下标超出真实长度</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [4]</span><span class="token comment" spellcheck="true"># 元组</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (4,)</span><span class="token comment" spellcheck="true"># 字符串</span>x3 <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span></code></pre><h3 id="1-2-4-切片索引选填"><a href="#1-2-4-切片索引选填" class="headerlink" title="1.2.4 切片索引选填"></a>1.2.4 切片索引选填</h3><blockquote><p>切片时，两个索引参数选填</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [4]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 4]</span><span class="token comment" spellcheck="true"># 元组</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (4,)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (1, 2, 3)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (1, 2, 3, 4)</span><span class="token comment" spellcheck="true"># 字符串</span>x3 <span class="token operator">=</span> <span class="token string">"1234"</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 123</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1234</span></code></pre><h3 id="1-2-5-切片后的不连续序列"><a href="#1-2-5-切片后的不连续序列" class="headerlink" title="1.2.5 切片后的不连续序列"></a>1.2.5 切片后的不连续序列</h3><blockquote><p>在进行切片时，我们可以根据需求提供起始位置和结束位置来获取任意序列，不过这种方式获取到的序列是连续的。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 如果要获取不连续的序列，需要用到第三个参数：步长。步长默认情况下为 “1”</span><span class="token comment" spellcheck="true"># 列表</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2, 3, 4, 5]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2, 3, 4, 5]</span><span class="token comment" spellcheck="true"># 元组</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (2, 3, 4, 5)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (2, 3, 4, 5)</span><span class="token comment" spellcheck="true"># 字符串</span>x3 <span class="token operator">=</span> <span class="token string">"1234567"</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2345</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2345</span></code></pre><h3 id="1-2-6-切片的步长大于1"><a href="#1-2-6-切片的步长大于1" class="headerlink" title="1.2.6 切片的步长大于1"></a>1.2.6 切片的步长大于1</h3><blockquote><p>切片的步长设置为 2、3</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 第二个参数为空，表示取到序列的末尾</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2, 4, 6]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2, 5]</span><span class="token comment" spellcheck="true"># 元组</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (2, 4, 6)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (2, 5)</span><span class="token comment" spellcheck="true"># 字符串</span>x3 <span class="token operator">=</span> <span class="token string">"1234567"</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 246</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 25</span></code></pre><h3 id="1-2-7-切片的步长为-0"><a href="#1-2-7-切片的步长为-0" class="headerlink" title="1.2.7 切片的步长为 0"></a>1.2.7 切片的步长为 0</h3><blockquote><p><strong>步长不能为 0，否则出现 “ValueError: slice step cannot be zero” 错误</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ValueError: slice step cannot be zero</span><span class="token comment" spellcheck="true"># 元组</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ValueError: slice step cannot be zero</span><span class="token comment" spellcheck="true"># 字符串</span>x3 <span class="token operator">=</span> <span class="token string">"1234567"</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ValueError: slice step cannot be zero</span></code></pre><h3 id="1-2-8-切片的步长为负数"><a href="#1-2-8-切片的步长为负数" class="headerlink" title="1.2.8 切片的步长为负数"></a>1.2.8 切片的步长为负数</h3><blockquote><p>当负数作为步长时，Python 会从序列的尾部开始向左取元素，直到第一个元素为止。正数的步长则是从序列的头部开始从左往右获取元素，负数正好相反。</p><p>所以<strong>正数的步长开始点必须小于结束点，负数的步长开始点必须大于结束点</strong>。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [6, 5, 4, 3, 2, 1]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [6, 4, 2]</span><span class="token comment" spellcheck="true"># 元组</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (6, 5, 4, 3, 2, 1)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (6, 4, 2)</span><span class="token comment" spellcheck="true"># 字符串</span>x3 <span class="token operator">=</span> <span class="token string">"1234567"</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 654321</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 642</span></code></pre><h2 id="1-3-序列相加"><a href="#1-3-序列相加" class="headerlink" title="1.3 序列相加"></a>1.3 序列相加</h2><h3 id="1-3-1-相同类型序列相加"><a href="#1-3-1-相同类型序列相加" class="headerlink" title="1.3.1 相同类型序列相加"></a>1.3.1 相同类型序列相加</h3><blockquote><p>序列之间可以使用 “+”（加号） 进行连接操作</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 4, 5, 6, 7]</span><span class="token comment" spellcheck="true"># 元组</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (1, 2, 3, 4, 5, 6, 7)</span><span class="token comment" spellcheck="true"># 字符串</span>x3 <span class="token operator">=</span> <span class="token string">"123"</span> <span class="token operator">+</span> <span class="token string">"4567"</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1234567</span></code></pre><h3 id="1-3-2-不同类型序列相加"><a href="#1-3-2-不同类型序列相加" class="headerlink" title="1.3.2 不同类型序列相加"></a>1.3.2 不同类型序列相加</h3><blockquote><p>序列和序列之间通过加号进行连接，连接后的结果还是相同类型的序列。但是不同类型的序列不能相互连接</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 不同类型不能相加： </span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># TypeError: can only concatenate list (not "tuple") to list</span>x2 <span class="token operator">=</span> <span class="token string">"123"</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># # TypeError: can only concatenate str (not "list") to str</span></code></pre><h2 id="1-4-序列重复"><a href="#1-4-序列重复" class="headerlink" title="1.4 序列重复"></a>1.4 序列重复</h2><blockquote><p>*<em>使用 * 对序列做 “乘法” 操作*</em></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]</span><span class="token comment" spellcheck="true"># 元组</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3)</span><span class="token comment" spellcheck="true"># 字符串</span>x3 <span class="token operator">=</span> <span class="token string">"123"</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 123123123123123</span></code></pre><h2 id="1-5-成员资格"><a href="#1-5-成员资格" class="headerlink" title="1.5 成员资格"></a>1.5 成员资格</h2><blockquote><p>判断一个元素是否包含在序列中，Python 中使用 “in” 来判断。“in” 运算符会判断左边的元素是否包含在右边的序列中，如果包含返回 True，否则返回 False</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hi"</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span><span class="token comment" spellcheck="true"># 元组</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hi"</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span><span class="token comment" spellcheck="true"># 字符串</span><span class="token comment" spellcheck="true"># 注意这里的 5 是字符串类型，上面都是数字类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"5"</span> <span class="token keyword">in</span> <span class="token string">"1234567"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hi"</span> <span class="token keyword">in</span> <span class="token string">"1234567"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span></code></pre><blockquote><p><strong>注意：只有当元素的类型和序列的类型完全一致时，才算包含在序列中。如果是两个不同的类型，会出现错误</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># TypeError: 'in &lt;string>' requires string as left operand, not int</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token keyword">in</span> <span class="token string">"1234567"</span><span class="token punctuation">)</span> </code></pre></blockquote><h2 id="1-6-长度、最大值、最小值、求和"><a href="#1-6-长度、最大值、最小值、求和" class="headerlink" title="1.6 长度、最大值、最小值、求和"></a>1.6 长度、最大值、最小值、求和</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 列表</span>x1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表的长度："</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 列表的长度： 7</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表的最小值："</span><span class="token punctuation">,</span> min<span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 列表的最小值： 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表的最大值："</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 列表的最大值： 7</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表求和："</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 列表求和： 28</span><span class="token comment" spellcheck="true"># 元组</span>x2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"元组的长度："</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 元组的长度： 7</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"元组的最小值："</span><span class="token punctuation">,</span> min<span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 元组的最小值： 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"元组的最大值："</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 元组的最大值： 7</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"元组求和："</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 元组求和： 28</span><span class="token comment" spellcheck="true"># 字符串</span>x3 <span class="token operator">=</span> <span class="token string">"1234567"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"字符串的长度："</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>x3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 字符串的长度： 7</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"字符串的最小值："</span><span class="token punctuation">,</span> min<span class="token punctuation">(</span>x3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 字符串的最小值： 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"字符串的最大值："</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>x3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 字符串的最大值： 7</span></code></pre><h1 id="2-列表"><a href="#2-列表" class="headerlink" title="2. 列表"></a>2. 列表</h1><h2 id="2-1-列表更新"><a href="#2-1-列表更新" class="headerlink" title="2.1 列表更新"></a>2.1 列表更新</h2><h3 id="2-1-1-通过索引更新"><a href="#2-1-1-通过索引更新" class="headerlink" title="2.1.1 通过索引更新"></a>2.1.1 通过索引更新</h3><blockquote><p>列表可以通过索引获取其中的单个元素，也可以通过索引更新其中的元素，使用方法和变量赋值一样</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span>l1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 'Hello', 4, 5]</span></code></pre><h3 id="2-1-2-更新索引越界"><a href="#2-1-2-更新索引越界" class="headerlink" title="2.1.2 更新索引越界"></a>2.1.2 更新索引越界</h3><blockquote><p>列表可以存储不同类型的数据，修改的新元素也不需要和原来的元素类型一致。但是要注意，更新列表的索引必须是已存在的索引，不能超出列表的长度</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 出现错误： IndexError: list assignment index out of range</span>l1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span></code></pre><h2 id="2-2-增加元素"><a href="#2-2-增加元素" class="headerlink" title="2.2 增加元素"></a>2.2 增加元素</h2><h3 id="2-2-1-追加单个元素"><a href="#2-2-1-追加单个元素" class="headerlink" title="2.2.1 追加单个元素"></a>2.2.1 追加单个元素</h3><blockquote><p>列表不能通过索引来增加元素，索引只能更新现有的元素。如果想要添加新元素，可以使用 append 方法在列表的末尾追加元素</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>l1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 4, 5, 'Hello']</span></code></pre><h3 id="2-2-2-追加多个元素"><a href="#2-2-2-追加多个元素" class="headerlink" title="2.2.2 追加多个元素"></a>2.2.2 追加多个元素</h3><blockquote><p>append 每次只能新增一个元素，如果想新增多个元素要使用 extend 方法</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>l1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>l2<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 4, 5, [6, 7]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 4, 5, 6, 7]</span></code></pre><h3 id="2-2-3-插入元素"><a href="#2-2-3-插入元素" class="headerlink" title="2.2.3 插入元素"></a>2.2.3 插入元素</h3><blockquote><p>append 和 extend 都是在列表的最后追加元素，如果要在中间插入元素，使用 insert 方法</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 4, 5]</span>l1<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 'Hello', 3, 4, 5]</span></code></pre><h2 id="2-3-删除元素"><a href="#2-3-删除元素" class="headerlink" title="2.3 删除元素"></a>2.3 删除元素</h2><h3 id="2-3-1-根据位置删除"><a href="#2-3-1-根据位置删除" class="headerlink" title="2.3.1 根据位置删除"></a>2.3.1 根据位置删除</h3><blockquote><p>pop 函数可以删除列表中指定位置的元素，并且把这个元素作为返回值返回，如果不指定位置则默认选择最后一个元素。</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 4]</span>l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span><span class="token keyword">print</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 4, 5]</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># &lt;class 'list'></span></code></pre><h3 id="2-3-2-根据内容删除"><a href="#2-3-2-根据内容删除" class="headerlink" title="2.3.2 根据内容删除"></a>2.3.2 根据内容删除</h3><blockquote><p>remove 不但可以根据位置来删除元素，还可以根据元素内容来进行删除。remove 删除查找到的一个元素，没有返回值</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Baidu"</span><span class="token punctuation">,</span> <span class="token string">"QQ"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['Hello', 'Google', 'Baidu', 'QQ']</span>l1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"Baidu"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['Hello', 'Google', 'QQ']</span></code></pre><h3 id="2-3-3-使用关键字删除"><a href="#2-3-3-使用关键字删除" class="headerlink" title="2.3.3 使用关键字删除"></a>2.3.3 使用关键字删除</h3><blockquote><p>不但可以用列表自带的方法对列表元素进行删除，也可以使用关键字 “del” 来删除列表元素</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Baidu"</span><span class="token punctuation">,</span> <span class="token string">"QQ"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['Hello', 'Google', 'Baidu', 'QQ']</span><span class="token keyword">del</span> l1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['Hello', 'Google', 'QQ']</span></code></pre><h2 id="2-4-查找元素"><a href="#2-4-查找元素" class="headerlink" title="2.4 查找元素"></a>2.4 查找元素</h2><blockquote><p>Python 中提供了 index 方法用于查找元素在列表中的索引位置</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Baidu"</span><span class="token punctuation">,</span> <span class="token string">"QQ"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Baidu index is: "</span><span class="token punctuation">,</span> l1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"Baidu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Baidu index is:  2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"QQ index is: "</span><span class="token punctuation">,</span> l1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"QQ"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># QQ index is:  3</span></code></pre><blockquote><p><strong>要注意，如果元素不在列表中，Python 解释器会输出错误信息</strong></p><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Baidu"</span><span class="token punctuation">,</span> <span class="token string">"QQ"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ValueError: 'Taobao' is not in list</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Taobao index is: "</span><span class="token punctuation">,</span> l1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></blockquote><h2 id="2-5-其他操作"><a href="#2-5-其他操作" class="headerlink" title="2.5 其他操作"></a>2.5 其他操作</h2><h3 id="2-5-1-反转"><a href="#2-5-1-反转" class="headerlink" title="2.5.1 反转"></a>2.5.1 反转</h3><blockquote><p>reverse 方法可以反转队列，和 “[::-1]” 类似，但是 reverse 方法修改的是原来的队列，并且没有返回值</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 3, 4, 5]</span>l1<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [5, 4, 3, 2, 1]</span></code></pre><h3 id="2-5-2-计数"><a href="#2-5-2-计数" class="headerlink" title="2.5.2 计数"></a>2.5.2 计数</h3><blockquote><p>count 方法用于统计某个元素在列表中出现的次数</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Baidu"</span><span class="token punctuation">,</span> <span class="token string">"QQ"</span><span class="token punctuation">,</span> <span class="token string">"01"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['Hello', 'Google', 'Baidu', 'QQ', '01', 'Hello']</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span></code></pre><h3 id="2-5-3-排序"><a href="#2-5-3-排序" class="headerlink" title="2.5.3 排序"></a>2.5.3 排序</h3><blockquote><p>sort 方法用于对列表进行排序，还可以自定义排序方式。sort 会修改原有列表的排序，没有返回值</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 100, 74, 16, 3]</span>l1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 3, 16, 74, 100]</span></code></pre><h1 id="3-元组"><a href="#3-元组" class="headerlink" title="3. 元组"></a>3. 元组</h1><p>元组与列表十分相似，大部分方法都通用，但是元组与列表最大的区别是：<strong>列表可以修改、读取、删除元素，而元组创建之后不能修改，不能删除单个元素，但是可以删除整个元组</strong></p><h2 id="3-1-定义元组"><a href="#3-1-定义元组" class="headerlink" title="3.1 定义元组"></a>3.1 定义元组</h2><blockquote><p>元组定义和列表类似，定义元组时只需要用 “（” 和 “）” 把元素括起来，并且用 “,” 把元素隔开就可以了</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># (1, 2, 3)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># &lt;class 'tuple'></span></code></pre><p><strong>注意</strong>： 如果元组只有一个元素，则这个元素后面必须要有 “,”，否则元素就还是器原来的类型</p><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> type<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1 &lt;class 'int'></span>l2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> type<span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1 &lt;class 'tuple'></span>l3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l3<span class="token punctuation">,</span> type<span class="token punctuation">(</span>l3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Hello &lt;class 'str'></span>l4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l4<span class="token punctuation">,</span> type<span class="token punctuation">(</span>l4<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ('Hello',) &lt;class 'tuple'></span></code></pre><h2 id="3-2-删除元组"><a href="#3-2-删除元组" class="headerlink" title="3.2 删除元组"></a>3.2 删除元组</h2><blockquote><p>由于元组不能修改，所以元组不能单独删除部分元素，要删除只能删除整个元组。</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">del</span> l1<span class="token comment" spellcheck="true"># 已删除，无法输出： NameError: name 'l1' is not defined</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span></code></pre><h2 id="3-3-其他操作"><a href="#3-3-其他操作" class="headerlink" title="3.3 其他操作"></a>3.3 其他操作</h2><h3 id="3-3-1-计数"><a href="#3-3-1-计数" class="headerlink" title="3.3.1 计数"></a>3.3.1 计数</h3><blockquote><p>count 方法用于统计某个元素在元组中出现的次数</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Baidu"</span><span class="token punctuation">,</span> <span class="token string">"QQ"</span><span class="token punctuation">,</span> <span class="token string">"01"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ('Hello', 'Google', 'Baidu', 'QQ', '01', 'Hello')</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"Taobao"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span></code></pre><h3 id="3-3-2-查找"><a href="#3-3-2-查找" class="headerlink" title="3.3.2 查找"></a>3.3.2 查找</h3><blockquote><p>index 方法用于查找元组中元素的位置</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"Google"</span><span class="token punctuation">,</span> <span class="token string">"Baidu"</span><span class="token punctuation">,</span> <span class="token string">"QQ"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Baidu index is: "</span><span class="token punctuation">,</span> l1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"Baidu"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Baidu index is:  2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"QQ index is: "</span><span class="token punctuation">,</span> l1<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"QQ"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># QQ index is:  3</span></code></pre><h1 id="4-字典"><a href="#4-字典" class="headerlink" title="4. 字典"></a>4. 字典</h1><blockquote><p>字典（dict）类型就和它的名字一样，可以像查字典一样去查找。其他语言也有类似的类型，如PHP中Array，Java中HashMap。</p></blockquote><h2 id="4-1-定义字典"><a href="#4-1-定义字典" class="headerlink" title="4.1 定义字典"></a>4.1 定义字典</h2><pre class=" language-python"><code class="language-python">english <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"we"</span><span class="token punctuation">:</span> <span class="token string">"我们"</span><span class="token punctuation">,</span>    <span class="token string">"world"</span><span class="token punctuation">:</span> <span class="token string">"世界"</span><span class="token punctuation">,</span>    <span class="token string">"company"</span><span class="token punctuation">:</span> <span class="token string">"公司"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># {'we': '我们', 'world': '世界', 'company': '公司'} &lt;class 'dict'></span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">,</span> type<span class="token punctuation">(</span>english<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><strong>字典中元素都是成对出现，每个元素都由键值构成，元素之间用 “,” 分隔。字典中 键 必须是唯一的，空字典直接用 “{}” 表示</strong></p><pre class=" language-python"><code class="language-python">empty <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>empty<span class="token punctuation">,</span> type<span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {} &lt;class 'dict'></span></code></pre><h2 id="4-2-使用字典"><a href="#4-2-使用字典" class="headerlink" title="4.2 使用字典"></a>4.2 使用字典</h2><h3 id="4-2-1-访问元素"><a href="#4-2-1-访问元素" class="headerlink" title="4.2.1 访问元素"></a>4.2.1 访问元素</h3><pre class=" language-python"><code class="language-python">english <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"we"</span><span class="token punctuation">:</span> <span class="token string">"我们"</span><span class="token punctuation">,</span>    <span class="token string">"world"</span><span class="token punctuation">:</span> <span class="token string">"世界"</span><span class="token punctuation">,</span>    <span class="token string">"company"</span><span class="token punctuation">:</span> <span class="token string">"公司"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">,</span> english<span class="token punctuation">[</span><span class="token string">"world"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># world 世界</span></code></pre><blockquote><p><strong>注意</strong>：上面这种方式只能获取已存在的键值对，如果尝试访问不存在的键，Python 将会显示错误信息。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 访问不存在的键 city： KeyError: 'city'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span> english<span class="token punctuation">[</span><span class="token string">"city"</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="4-2-2-修改元素"><a href="#4-2-2-修改元素" class="headerlink" title="4.2.2 修改元素"></a>4.2.2 修改元素</h3><blockquote><p>字典修改元素： 字典和列表一样，都是可修改的结构。修改的方式类似</p></blockquote><pre class=" language-python"><code class="language-python">english <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"we"</span><span class="token punctuation">:</span> <span class="token string">"我们"</span><span class="token punctuation">,</span>    <span class="token string">"world"</span><span class="token punctuation">:</span> <span class="token string">"城市"</span><span class="token punctuation">,</span>    <span class="token string">"company"</span><span class="token punctuation">:</span> <span class="token string">"公司"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'we': '我们', 'world': '城市', 'company': '公司'}</span>english<span class="token punctuation">[</span><span class="token string">"world"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"世界"</span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'we': '我们', 'world': '世界', 'company': '公司'}</span></code></pre><h3 id="4-2-3-新增元素"><a href="#4-2-3-新增元素" class="headerlink" title="4.2.3 新增元素"></a>4.2.3 新增元素</h3><blockquote><p>字典新增元素： 字典新增元素和修改元素的方法是一样的</p></blockquote><pre class=" language-python"><code class="language-python">english <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {}</span>english<span class="token punctuation">[</span><span class="token string">"city"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"城市"</span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'city': '城市'}</span></code></pre><h3 id="4-2-4-删除元素"><a href="#4-2-4-删除元素" class="headerlink" title="4.2.4 删除元素"></a>4.2.4 删除元素</h3><blockquote><p>字典删除元素： 字典和列表一样，都是可修改的结构。所以字典中元素也可以被删除</p></blockquote><pre class=" language-python"><code class="language-python">english <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"we"</span><span class="token punctuation">:</span> <span class="token string">"我们"</span><span class="token punctuation">,</span>    <span class="token string">"world"</span><span class="token punctuation">:</span> <span class="token string">"世界"</span><span class="token punctuation">,</span>    <span class="token string">"company"</span><span class="token punctuation">:</span> <span class="token string">"公司"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'we': '我们', 'world': '世界', 'company': '公司'}</span><span class="token keyword">del</span> english<span class="token punctuation">[</span><span class="token string">"world"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'we': '我们', 'company': '公司'}</span></code></pre><h2 id="4-3-其他操作"><a href="#4-3-其他操作" class="headerlink" title="4.3 其他操作"></a>4.3 其他操作</h2><h3 id="4-3-1-清空字典"><a href="#4-3-1-清空字典" class="headerlink" title="4.3.1 清空字典"></a>4.3.1 清空字典</h3><blockquote><p>clear 方法可以用于清空字典，使字典变成空字典</p></blockquote><pre class=" language-python"><code class="language-python">english <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"we"</span><span class="token punctuation">:</span> <span class="token string">"我们"</span><span class="token punctuation">,</span>    <span class="token string">"world"</span><span class="token punctuation">:</span> <span class="token string">"世界"</span><span class="token punctuation">,</span>    <span class="token string">"company"</span><span class="token punctuation">:</span> <span class="token string">"公司"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'we': '我们', 'world': '世界', 'company': '公司'}</span>english<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {}</span></code></pre><h3 id="4-3-2-拷贝字典"><a href="#4-3-2-拷贝字典" class="headerlink" title="4.3.2 拷贝字典"></a>4.3.2 拷贝字典</h3><blockquote><p>copy 方法可以返回一个拥有相同键值对的新字典。</p><p>字典和列表一样，如果只是赋值的话只是引用了之前的内容，如果做修改就会改变原先的字典。copy 方法类似于列表的 “[:]”语法，相当于完整地复制了一份新的副本</p></blockquote><pre class=" language-python"><code class="language-python">english1 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"we"</span><span class="token punctuation">:</span> <span class="token string">"我们"</span><span class="token punctuation">,</span>    <span class="token string">"world"</span><span class="token punctuation">:</span> <span class="token string">"世界"</span><span class="token punctuation">,</span>    <span class="token string">"company"</span><span class="token punctuation">:</span> <span class="token string">"公司"</span><span class="token punctuation">}</span>english2 <span class="token operator">=</span> english1english3 <span class="token operator">=</span> english1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"english1"</span><span class="token punctuation">,</span> english1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># english1 {'we': '我们', 'world': '世界', 'company': '公司'}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"english2"</span><span class="token punctuation">,</span> english2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># english2 {'we': '我们', 'world': '世界', 'company': '公司'}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"english3"</span><span class="token punctuation">,</span> english3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># english3 {'we': '我们', 'world': '世界', 'company': '公司'}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------------------------- dict changed 1 -------------------------------"</span><span class="token punctuation">)</span>english2<span class="token punctuation">[</span><span class="token string">"city"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"城市"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"english1"</span><span class="token punctuation">,</span> english1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># english1 {'we': '我们', 'world': '世界', 'company': '公司', 'city': '城市'}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"english2"</span><span class="token punctuation">,</span> english2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># english2 {'we': '我们', 'world': '世界', 'company': '公司', 'city': '城市'}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"english3"</span><span class="token punctuation">,</span> english3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># english3 {'we': '我们', 'world': '世界', 'company': '公司'}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------------------------- dict changed 2 -------------------------------"</span><span class="token punctuation">)</span>english3<span class="token punctuation">[</span><span class="token string">"school"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"学校"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"english1"</span><span class="token punctuation">,</span> english1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># english1 {'we': '我们', 'world': '世界', 'company': '公司', 'city': '城市'}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"english2"</span><span class="token punctuation">,</span> english2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># english2 {'we': '我们', 'world': '世界', 'company': '公司', 'city': '城市'}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"english3"</span><span class="token punctuation">,</span> english3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># english3 {'we': '我们', 'world': '世界', 'company': '公司', 'school': '学校'}</span></code></pre><h3 id="4-3-3-使用键创建新字典"><a href="#4-3-3-使用键创建新字典" class="headerlink" title="4.3.3 使用键创建新字典"></a>4.3.3 使用键创建新字典</h3><blockquote><p>fromkeys 方法用于创建一个新的字典，用序列号中的元素作为字典的键，第二个参数为字典中所有参数对应的初始值</p></blockquote><pre class=" language-python"><code class="language-python">seq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"class"</span><span class="token punctuation">)</span>student1 <span class="token operator">=</span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不指定初始值："</span><span class="token punctuation">,</span> student1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 不指定初始值： {'name': None, 'age': None, 'class': None}</span>student2 <span class="token operator">=</span> dict<span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>seq<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"指定初始值："</span><span class="token punctuation">,</span> student2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 指定初始值： {'name': 15, 'age': 15, 'class': 15}</span></code></pre><h3 id="4-3-4-获取指定键的值"><a href="#4-3-4-获取指定键的值" class="headerlink" title="4.3.4 获取指定键的值"></a>4.3.4 获取指定键的值</h3><blockquote><p>get 方法可以返回键对应的值，如果字典不存在对应的键则返回默认值</p></blockquote><pre class=" language-python"><code class="language-python">english <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"we"</span><span class="token punctuation">:</span> <span class="token string">"我们"</span><span class="token punctuation">,</span>    <span class="token string">"world"</span><span class="token punctuation">:</span> <span class="token string">"世界"</span><span class="token punctuation">,</span>    <span class="token string">"company"</span><span class="token punctuation">:</span> <span class="token string">"公司"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"world: "</span><span class="token punctuation">,</span> english<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># world:  世界</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"city: "</span><span class="token punctuation">,</span> english<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># city:  None</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"city: "</span><span class="token punctuation">,</span> english<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span> <span class="token string">"未知"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># city:  未知</span></code></pre><h3 id="4-3-5-获取所有键"><a href="#4-3-5-获取所有键" class="headerlink" title="4.3.5 获取所有键"></a>4.3.5 获取所有键</h3><blockquote><p>keys 方法返回一个列表，里面包含了字典的所有键</p></blockquote><pre class=" language-python"><code class="language-python">english <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"we"</span><span class="token punctuation">:</span> <span class="token string">"我们"</span><span class="token punctuation">,</span>    <span class="token string">"world"</span><span class="token punctuation">:</span> <span class="token string">"世界"</span><span class="token punctuation">,</span>    <span class="token string">"company"</span><span class="token punctuation">:</span> <span class="token string">"公司"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># dict_keys(['we', 'world', 'company'])</span><span class="token comment" spellcheck="true"># keys 方法常用语判断一个键是否存在于列表中，可以与 “in” 组合使用</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"是否存在 world："</span><span class="token punctuation">,</span> <span class="token string">"world"</span> <span class="token keyword">in</span> english<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 是否存在 world： True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"是否存在 city："</span><span class="token punctuation">,</span> <span class="token string">"city"</span> <span class="token keyword">in</span> english<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 是否存在 city： False</span></code></pre><h3 id="4-3-6-获取所有值"><a href="#4-3-6-获取所有值" class="headerlink" title="4.3.6 获取所有值"></a>4.3.6 获取所有值</h3><blockquote><p>values 方法返回一个列表，里面包含了字典的所有值</p></blockquote><pre class=" language-python"><code class="language-python">english <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"we"</span><span class="token punctuation">:</span> <span class="token string">"我们"</span><span class="token punctuation">,</span>    <span class="token string">"world"</span><span class="token punctuation">:</span> <span class="token string">"世界"</span><span class="token punctuation">,</span>    <span class="token string">"company"</span><span class="token punctuation">:</span> <span class="token string">"公司"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"english 中的值："</span><span class="token punctuation">,</span> english<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># english 中的值： dict_values(['我们', '世界', '公司'])</span></code></pre><h3 id="4-3-7-获取所有键值"><a href="#4-3-7-获取所有键值" class="headerlink" title="4.3.7 获取所有键值"></a>4.3.7 获取所有键值</h3><blockquote><p>items 方法返回一个列表，里面包含了键的列表和所有值的列表</p></blockquote><pre class=" language-python"><code class="language-python">english <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"we"</span><span class="token punctuation">:</span> <span class="token string">"我们"</span><span class="token punctuation">,</span>    <span class="token string">"world"</span><span class="token punctuation">:</span> <span class="token string">"世界"</span><span class="token punctuation">,</span>    <span class="token string">"company"</span><span class="token punctuation">:</span> <span class="token string">"公司"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>english<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># dict_items([('we', '我们'), ('world', '世界'), ('company', '公司')])</span><span class="token comment" spellcheck="true"># 由于字典不能直接应用于 for 循环中，可以使用 items 类遍历字典</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> english<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">"=>"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># we => 我们</span><span class="token comment" spellcheck="true"># world => 世界</span><span class="token comment" spellcheck="true"># company => 公司</span></code></pre><h1 id="5-集合"><a href="#5-集合" class="headerlink" title="5. 集合"></a>5. 集合</h1><blockquote><p>Python 中有一种内置类型叫做集合（Set），它与列表类似，唯一区别在于<strong>集合不包含重复的值</strong></p></blockquote><h2 id="5-1-定义集合"><a href="#5-1-定义集合" class="headerlink" title="5.1 定义集合"></a>5.1 定义集合</h2><pre class=" language-python"><code class="language-python">empty <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 注意空集合不能使用 {} 定义</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"空集合"</span><span class="token punctuation">,</span> empty<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 空集合 set()</span>number <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数字集合"</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 数字集合 {1, 2, 3}</span>mix <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"您好"</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"混合类型的集合"</span><span class="token punctuation">,</span> mix<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 混合类型的集合 {3.14, 1, '您好'}</span></code></pre><h2 id="5-2-添加元素"><a href="#5-2-添加元素" class="headerlink" title="5.2 添加元素"></a>5.2 添加元素</h2><pre class=" language-python"><code class="language-python">number <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {1, 2, 3}</span>number<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {1, 2, 3, 5}</span><span class="token comment" spellcheck="true"># 不能存放重复的元素</span>number<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {1, 2, 3, 5}</span></code></pre><h2 id="5-3-删除元素"><a href="#5-3-删除元素" class="headerlink" title="5.3 删除元素"></a>5.3 删除元素</h2><pre class=" language-python"><code class="language-python">number <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {1, 2, 3, 4, 5}</span>number<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {1, 2, 4, 5}</span>number<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {1, 2, 4}</span></code></pre><blockquote><p>如果删除不存在的元素，将会报错</p><pre class=" language-python"><code class="language-python">number<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># KeyError: 6</span></code></pre></blockquote><h2 id="5-4-集合操作"><a href="#5-4-集合操作" class="headerlink" title="5.4 集合操作"></a>5.4 集合操作</h2><blockquote><p>集合操作（交集、并集、差集、对称差集）</p></blockquote><pre class=" language-python"><code class="language-python">n1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>n2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n1"</span><span class="token punctuation">,</span> n1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># n1 {1, 3, 5}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n2"</span><span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># n2 {1, 2, 3, 7}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"交集"</span><span class="token punctuation">,</span> n1 <span class="token operator">&amp;</span> n2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 交集 {1, 3}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"并集"</span><span class="token punctuation">,</span> n1 <span class="token operator">|</span> n2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 并集 {1, 2, 3, 5, 7}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"差集"</span><span class="token punctuation">,</span> n1 <span class="token operator">-</span> n2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 差集 {5}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"对称差集"</span><span class="token punctuation">,</span> n1 <span class="token operator">^</span> n2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 对称差集 {2, 5, 7}</span></code></pre><h1 id="6-推导式"><a href="#6-推导式" class="headerlink" title="6. 推导式"></a>6. 推导式</h1><blockquote><p>Python 支持三种推导式（或者称为解析式），分别对应 列表、字典和集合。它能够以非常自然、简单的方式构建列表、字典和集合</p></blockquote><h2 id="6-1-列表推导式"><a href="#6-1-列表推导式" class="headerlink" title="6.1 列表推导式"></a>6.1 列表推导式</h2><blockquote><p><strong>列表推导式的语法</strong>： 用中括号括起来，中间使用for预计，后面跟着if语句作判断，满足条件的传到for语句前面用作构建的列表。</p></blockquote><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [0, 1, 2, 3, 4]</span>odd <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 3, 5, 7, 9]</span></code></pre><p><strong>列表推导式可以用于对整个列表做相同的操作，然后得到一个新列表</strong></p><h2 id="6-2-字典推导式"><a href="#6-2-字典推导式" class="headerlink" title="6.2 字典推导式"></a>6.2 字典推导式</h2><blockquote><p>字典推导式和列表推导式类似，字典的元素是成对出现的，所以推导式定义的回收也是成对生成键值对</p></blockquote><pre class=" language-python"><code class="language-python">d1 <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token punctuation">:</span> n <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}</span>d2 <span class="token operator">=</span> <span class="token punctuation">{</span>v<span class="token punctuation">:</span> k <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> d1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {0: 0, 1: 1, 4: 2, 9: 3, 16: 4}</span></code></pre><h2 id="6-3-集合推导式"><a href="#6-3-集合推导式" class="headerlink" title="6.3 集合推导式"></a>6.3 集合推导式</h2><blockquote><p>集合推导式和列表推导式基本没什么区别，但是集合推导式会帮我们去除重复的元素，并且不适用中括号，而是使用花括号</p></blockquote><pre class=" language-python"><code class="language-python">s1 <span class="token operator">=</span> <span class="token punctuation">{</span>i <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {1, 4, 25}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】-1.Python数据类型及运算符</title>
      <link href="posts/7debbd00.html"/>
      <url>posts/7debbd00.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-常见类型"><a href="#1-常见类型" class="headerlink" title="1. 常见类型"></a>1. 常见类型</h1><h2 id="1-1-数字"><a href="#1-1-数字" class="headerlink" title="1.1 数字"></a>1.1 数字</h2><p>在Python中最数字是一种常见的类型。</p><h3 id="1-1-1加减乘除运算"><a href="#1-1-1加减乘除运算" class="headerlink" title="1.1.1加减乘除运算"></a>1.1.1加减乘除运算</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">17</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3.0</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1.6</span></code></pre><blockquote><p><strong>注意</strong>，在python3中，”<strong>/</strong>“ 永远返回浮点类型的数；如果要返回整型，使用 “<strong>//</strong>“，但 “//“ 不会四舍五入，只去掉小数点后的数字</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2.3333333333333335</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span></code></pre><h3 id="1-1-2-指数运算"><a href="#1-1-2-指数运算" class="headerlink" title="1.1.2 指数运算"></a>1.1.2 指数运算</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用 “**” 来计算指数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 25</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 128</span></code></pre><h3 id="1-1-3-变量赋值计算"><a href="#1-1-3-变量赋值计算" class="headerlink" title="1.1.3 变量赋值计算"></a>1.1.3 变量赋值计算</h3><pre class=" language-python"><code class="language-python">width <span class="token operator">=</span> <span class="token number">100</span>height <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token keyword">print</span><span class="token punctuation">(</span>width <span class="token operator">*</span> height<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2100</span></code></pre><blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>square<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># NameError: name 'square' is not defined</span></code></pre><p>如果一个变量未被定义过就被使用，会出现错误： NameError: name ‘square’ is not defined</p></blockquote><h3 id="1-1-4-复合运算"><a href="#1-1-4-复合运算" class="headerlink" title="1.1.4 复合运算"></a>1.1.4 复合运算</h3><blockquote><p>先统一类型再计算</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">7.1</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 38.5</span></code></pre><h2 id="1-2-字符串"><a href="#1-2-字符串" class="headerlink" title="1.2 字符串"></a>1.2 字符串</h2><p>除了数字，Python还可以处理字符串。</p><blockquote><p>在Python中，’’ 或 “ ” 都可以表示字符串，\ 可以用来转义</p></blockquote><h3 id="1-2-1-常见字符串操作"><a href="#1-2-1-常见字符串操作" class="headerlink" title="1.2.1 常见字符串操作"></a>1.2.1 常见字符串操作</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'How are you'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># How are you</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I\'m fine'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># I'm fine</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm fine"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># I'm fine</span></code></pre><blockquote><p>如果不需要 ”\“ 被转义，在引号前面加上一个 r</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">"C:windows\system32"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># C:windows\system32</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'C:windows\system32'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># C:windows\system32</span></code></pre><p><strong>如果要表示多行字符串，可以使用三个引号把字符串括起来，如 “”” … “”” 或 ‘’’ … ‘’’</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''\How are you? I'm fine!'''</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">How are you? I'm fine!</code></pre><h3 id="1-2-2-字符串拼接"><a href="#1-2-2-字符串拼接" class="headerlink" title="1.2.2 字符串拼接"></a>1.2.2 字符串拼接</h3><blockquote><p>python 可以使用 “+” 来连接两个字符串，使用 “*” 来重复字符串</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token string">"am"</span> <span class="token operator">+</span> <span class="token string">"fine"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># amamamfine</span></code></pre><p>两个或多个字符串相邻，会自动合并</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Py'</span> <span class="token string">'thon'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Python</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'today'</span> <span class="token string">'is'</span> <span class="token string">'a'</span> <span class="token string">'nice'</span> <span class="token string">'day'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># todayisaniceday</span>text <span class="token operator">=</span> <span class="token string">'Follow live text commentary from day two of Masters at Augusta National'</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Follow live text commentary from day two of Masters at Augusta National</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token string">'am'</span> <span class="token string">'fine'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># amfineamfineamfine</span></code></pre><h3 id="1-2-3-字符串索引"><a href="#1-2-3-字符串索引" class="headerlink" title="1.2.3 字符串索引"></a>1.2.3 字符串索引</h3><blockquote><p>python 可以方便使用 “索引” 的方式获取字符串中的字符；索引从0开始</p></blockquote><pre class=" language-python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'Python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># P</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># n</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 超过边界出错：IndexError: string index out of range</span></code></pre><p><strong>如果索引是负数，从右向左计算（注意：0和-0都表示第一个字符）</strong></p><pre class=" language-python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'Python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># P</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># n</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># o</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># P</span></code></pre><h3 id="1-2-4-字符串切片"><a href="#1-2-4-字符串切片" class="headerlink" title="1.2.4 字符串切片"></a>1.2.4 字符串切片</h3><blockquote><p>截取字符串中的一段，使用 “切片” 操作，“:” 左边数字表示起始位置，“:” 右边数字表示结束位置；含头不含尾</p></blockquote><pre class=" language-python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'Python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Py</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># tho</span></code></pre><p><strong>如果省略 “:” 左边的数字，默认从头开始取； 如果省略 “:” 右边的数字，默认取到末尾</strong></p><pre class=" language-python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'Python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  Py</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  thon</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> word<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  Python</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  Python</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  on</span></code></pre><blockquote><p><strong>注意</strong>：切片的工作原理是将索引视为字符间的指向，第一个字符的左边缘编号为 0</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#  +---+---+---+---+---+---+</span><span class="token comment" spellcheck="true">#  | P | y | t | h | o | n |</span><span class="token comment" spellcheck="true">#  +---+---+---+---+---+---+</span><span class="token comment" spellcheck="true">#  0   1   2   3   4   5   6</span><span class="token comment" spellcheck="true">#     -6  -5  -4  -3  -2  -1</span></code></pre></blockquote><blockquote><p><strong>使用索引时，如果索引值超出了边界，会报错；但如果使用的是 切片 的方式，解释器会自动忽略这个错误。</strong></p></blockquote><pre class=" language-python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'Python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># IndexError: string index out of range</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># thon</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><blockquote><p><strong>在 python 中，字符串是不能被改变的，无论是索引还是切片都只能获取字符串而不能被赋值</strong></p></blockquote><pre class=" language-python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'Python'</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'a'</span> <span class="token comment" spellcheck="true"># TypeError: 'str' object does not support item assignment</span>word<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"abcd"</span> <span class="token comment" spellcheck="true"># TypeError: 'str' object does not support item assignment</span><span class="token comment" spellcheck="true"># 如果想要一个和原来不一样的字符串，只能创建一个新的</span>word_new <span class="token operator">=</span> <span class="token string">'J'</span> <span class="token operator">+</span> word<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>word_new<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Jython</span></code></pre><blockquote><p>python 内置函数 “len()” 可以返回字符串的长度</p></blockquote><pre class=" language-python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'Python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 6</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2</span></code></pre><h2 id="1-3-列表"><a href="#1-3-列表" class="headerlink" title="1.3 列表"></a>1.3 列表</h2><p>Python中可以将许多数据组合在一起，最常用的结构就是列表。在列表中可以存放不同类型的数据，但通常还是存放的相同类型。</p><h3 id="1-3-1-列表的创建"><a href="#1-3-1-列表的创建" class="headerlink" title="1.3.1 列表的创建"></a>1.3.1 列表的创建</h3><pre class=" language-python"><code class="language-python">squares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 1, 2, 3, 5, 8]</span></code></pre><blockquote><p>列表也能像字符串一样，使用索引和切片来获取部分元素</p></blockquote><pre class=" language-python"><code class="language-python">squares <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 5</span><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [2, 3, 5]</span><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 超出范围出错：IndexError: list index out of range</span></code></pre><blockquote><p><strong>使用负数作为索引</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 8</span><span class="token keyword">print</span><span class="token punctuation">(</span>squares<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [3, 5, 8]</span></code></pre><h3 id="1-3-2-列表的赋值"><a href="#1-3-2-列表的赋值" class="headerlink" title="1.3.2 列表的赋值"></a>1.3.2 列表的赋值</h3><blockquote><p>一个列表赋值给另一个变量，只会拷贝变量的地址，不会拷贝里面的内容；改变其中一个变量的内容，另一个也会跟着改变</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [3, 2]</span></code></pre><h3 id="1-3-3-列表的切片"><a href="#1-3-3-列表的切片" class="headerlink" title="1.3.3 列表的切片"></a>1.3.3 列表的切片</h3><blockquote><p>所有的切片操作都会返回一个<strong>新的列表</strong>，所以可以使用切片复制列表</p></blockquote><pre class=" language-python"><code class="language-python">c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>d <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2]</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [3, 2]</span></code></pre><h1 id="2-其他类型"><a href="#2-其他类型" class="headerlink" title="2. 其他类型"></a>2. 其他类型</h1><h2 id="2-1-布尔"><a href="#2-1-布尔" class="headerlink" title="2.1 布尔"></a>2.1 布尔</h2><blockquote><p>布尔类型是最简单的数据类型，只有两个值：False（假）和 True（真）</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">False</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span></code></pre><h2 id="2-2-常量"><a href="#2-2-常量" class="headerlink" title="2.2 常量"></a>2.2 常量</h2><p>常量就是不能变的变量，比如常用的数字 π 就是一个常量。Python 在语法上并没有定义常量，大多数编程语言常常使用全大写的变量名表示常量，所以一般约定：<strong>如果名字全大写的变量就不要进行修改</strong>。</p><h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3. 运算符"></a>3. 运算符</h1><h2 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h2><blockquote><p>主要包含： +、-、*、/、%、**、//</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">20</span>c <span class="token operator">=</span> <span class="token number">7</span>d <span class="token operator">=</span> <span class="token number">25</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 30</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># -10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b <span class="token operator">-</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># -17</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 200</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0.5</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b <span class="token operator">/</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0.07142857142857142</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">**</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 10000000</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0</span><span class="token keyword">print</span><span class="token punctuation">(</span>d <span class="token operator">//</span> c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3</span></code></pre><h2 id="3-2-比较运算符"><a href="#3-2-比较运算符" class="headerlink" title="3.2 比较运算符"></a>3.2 比较运算符</h2><blockquote><p>比较运算符，返回 True（真）或者 False（假）</p><p>主要包含：==、!=、&gt;、&lt;、&gt;=、&lt;=</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">123</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span></code></pre><h2 id="3-3-赋值运算符"><a href="#3-3-赋值运算符" class="headerlink" title="3.3 赋值运算符"></a>3.3 赋值运算符</h2><blockquote><p>赋值运算符，把右边的结果赋值给左边的变量</p><p>主要包含：=、+=、-=、*=、/=、%=、**=、//=</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">100</span>a <span class="token operator">+=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 110</span>a <span class="token operator">-=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 100</span>a <span class="token operator">*=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1000</span>a <span class="token operator">/=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 100.0</span>a <span class="token operator">%=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0.0</span>a <span class="token operator">=</span> <span class="token number">100</span>a <span class="token operator">**=</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 10000</span>a <span class="token operator">//=</span> <span class="token number">9</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1111</span></code></pre><h2 id="3-4-位运算符"><a href="#3-4-位运算符" class="headerlink" title="3.4 位运算符"></a>3.4 位运算符</h2><blockquote><p>位运算符，对二进制进行位运算</p><p>主要包含：&amp;(与运算)、|(或运算)、^(异或，相同取0，不同取1)、~(取反)、&lt;&lt;(左移)、&gt;&gt;(右移)</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">9</span>  <span class="token comment" spellcheck="true"># 0000 1001</span>b <span class="token operator">=</span> <span class="token number">13</span>  <span class="token comment" spellcheck="true"># 0000 1101</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1001  9</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1101  13</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 0100  4</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">~</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 最高位取反，变成了负数  -10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 9*2*2  36</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 9/2/2  2</span></code></pre><h2 id="3-5-逻辑运算符"><a href="#3-5-逻辑运算符" class="headerlink" title="3.5 逻辑运算符"></a>3.5 逻辑运算符</h2><blockquote><p>逻辑运算符，用于逻辑判断<br>主要包含：and、or、not</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">and</span> <span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">and</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token boolean">True</span> <span class="token operator">or</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">not</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span></code></pre><h2 id="3-6-关键字in和is"><a href="#3-6-关键字in和is" class="headerlink" title="3.6 关键字in和is"></a>3.6 关键字in和is</h2><blockquote><ul><li>in： 用于判断是否包含于指定的序列中</li><li>is： 用于判断两个标识符是否引用同一个对象</li></ul></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># in</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span><span class="token comment" spellcheck="true"># is</span><span class="token comment" spellcheck="true"># 注意：is 和 == 的区别，is 用于判断两个变量引用对象是否为同一个，== 用于判断引用变量的值是否相等</span>a <span class="token operator">=</span> <span class="token number">20</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># True</span>b <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># False</span></code></pre><h2 id="3-7-运算符优先级"><a href="#3-7-运算符优先级" class="headerlink" title="3.7 运算符优先级"></a>3.7 运算符优先级</h2><p>从低到高的顺序</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">lambda</td><td align="left">Lambda表达式</td></tr><tr><td align="left">or</td><td align="left">布尔“或”</td></tr><tr><td align="left">and</td><td align="left">布尔“与”</td></tr><tr><td align="left">not x</td><td align="left">布尔“非”</td></tr><tr><td align="left">in，not in</td><td align="left">成员测试</td></tr><tr><td align="left">is，is not</td><td align="left">同一性测试</td></tr><tr><td align="left">&lt;，&lt;=，&gt;，&gt;=，!=，==</td><td align="left">比较</td></tr><tr><td align="left">|</td><td align="left">按位或</td></tr><tr><td align="left">^</td><td align="left">按位异或</td></tr><tr><td align="left">&amp;</td><td align="left">按位与</td></tr><tr><td align="left">&lt;&lt;，&gt;&gt;</td><td align="left">移位</td></tr><tr><td align="left">+，-</td><td align="left">加法与减法</td></tr><tr><td align="left">*，/，%</td><td align="left">乘法、除法与取余</td></tr><tr><td align="left">+x，-x</td><td align="left">正负号</td></tr><tr><td align="left">~x</td><td align="left">按位翻转</td></tr><tr><td align="left">**</td><td align="left">指数</td></tr><tr><td align="left">x.attribute</td><td align="left">属性参考</td></tr><tr><td align="left">x[index]</td><td align="left">下标</td></tr><tr><td align="left">x[index:index]</td><td align="left">寻址段</td></tr><tr><td align="left">f(arguments…)</td><td align="left">函数调用</td></tr><tr><td align="left">(experession,…)</td><td align="left">绑定或元组显示</td></tr><tr><td align="left">[expression,…]</td><td align="left">列表显示</td></tr><tr><td align="left">{key:datum,…}</td><td align="left">字典显示</td></tr><tr><td align="left">‘expression,…’</td><td align="left">字符串转换</td></tr></tbody></table><h1 id="4-表达式"><a href="#4-表达式" class="headerlink" title="4. 表达式"></a>4. 表达式</h1><p>表达式是Python最重要、最基础的组成元素。在Python中，绝大部分代码都是表达式。</p><p>下面的代码由两个表达式组成：</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Python'</span>language <span class="token operator">=</span> <span class="token string">"Python"</span><span class="token comment" spellcheck="true"># 对于变量值相同的情况，Python支持连续赋值</span>name <span class="token operator">=</span> language <span class="token operator">=</span> <span class="token string">'Python'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Cloud学习】-6.Spring Cloud Bus 消息总线</title>
      <link href="posts/f2301729.html"/>
      <url>posts/f2301729.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring Cloud Bus links nodes of a distributed system with a lightweight message broker. This can then be used to broadcast state changes (e.g. configuration changes) or other management instructions. AMQP and Kafka broker implementations are included with the project. Alternatively, any <a href="https://spring.io/projects/spring-cloud-stream" target="_blank" rel="noopener">Spring Cloud Stream</a> binder found on the classpath will work out of the box as a transport.</p></blockquote><p>Spring Cloud Bus将轻量级消息代理程序链接到分布式系统的节点。然后可以将其用于广播状态更改（例如配置更改）或其他管理指令。该项目包括AMQP和Kafka broker 实现。另外，在类路径上找到的任何Spring Cloud Stream绑定程序都可以作为传输工具使用。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><p>spring cloud bus 使用消息队列来作为分布式环境中信息沟通的工具，通常用于广播状态变更或配置更改等。</p><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE、Spring Cloud Hoxton.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li><li>Kafka 2.11-2.0.0</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200823102848138.png"></p><p>总体结构说明：</p><ul><li>config-repo： 配置文件仓库</li><li>ofc-bus-eureka： 注册中心，config-server 和 config-client 都注册到配置中心上</li><li>ofc-bus-config-server： 集成了 spring-cloud-bus 实现的 config-server</li><li>ofc-bus-config-client： 集成了 spring-cloud-bus 实现的 config-client</li></ul><h2 id="3-1-config-repo"><a href="#3-1-config-repo" class="headerlink" title="3.1 config-repo"></a>3.1 config-repo</h2><p>管理配置文件，内部包含四个配置文件，分别是：soulballad.properties、soulballad-dev.properties、soulballad-prod.properties、soulballad-test.properties</p><p>内容如下：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># soulballad.properties</span><span class="token attr-name">my.name</span><span class="token punctuation">=</span><span class="token attr-value">soulballad</span><span class="token comment" spellcheck="true"># soulballad-dev.properties</span><span class="token attr-name">my.name</span><span class="token punctuation">=</span><span class="token attr-value">soulballad-dev</span><span class="token comment" spellcheck="true"># soulballad-prod.properties</span><span class="token attr-name">my.name</span><span class="token punctuation">=</span><span class="token attr-value">soulballad-pro</span><span class="token comment" spellcheck="true"># soulballad-test.properties</span><span class="token attr-name">my.name</span><span class="token punctuation">=</span><span class="token attr-value">soulballad-test</span></code></pre><h2 id="3-2-ofc-bus-eureka"><a href="#3-2-ofc-bus-eureka" class="headerlink" title="3.2 ofc-bus-eureka"></a>3.2 ofc-bus-eureka</h2><p><strong>3.2.1 代码说明</strong></p><p>eureka-server 服务端，提供 config-server 和 config-client 注册服务。</p><p><strong>3.2.2 maven 依赖</strong></p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.2.3 配置文件</strong></p><p>application.yml</p><pre class=" language-yml"><code class="language-yml">server:  port: 11070spring:  application:    name: ofc-bus-eurekaeureka:  instance:    hostname: localhost # 主机名    prefer-ip-address: true # 优先使用ip    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port} # 实例id  client:    register-with-eureka: false # eureka自我注册    fetch-registry: false # 是否从注册中心获取注册信息    service-url:      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/ # 注册中心地址</code></pre><p><strong>3.2.4 java代码</strong></p><p>OfcBusEurekaApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfcBusEurekaApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OfcBusEurekaApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-ofc-bus-config-server"><a href="#3-3-ofc-bus-config-server" class="headerlink" title="3.3 ofc-bus-config-server"></a>3.3 ofc-bus-config-server</h2><p><strong>3.3.1 代码说明</strong></p><p>config-server 服务端，注册到 eureka 上。配置 spring-cloud-bus，使用 kafka 作为消息队列。</p><p><strong>3.3.2 maven 依赖</strong></p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.3.3 配置文件</strong></p><p>application.yml</p><pre class=" language-yml"><code class="language-yml">server:  port: 11072spring:  application:    name: ofc-bus-config-server  cloud:    config:      server:        git:          # 仓库地址          uri: https://gitee.com/soulballad/spring-usage-examples.git          # 对应 {label} 部分，即 Git 的分支          default-label: master          # 仓库文件夹名称，多个以逗号分隔          search-paths: spring-cloud/spring-cloud-03-official/spring-cloud-ofc-07-bus/config-repo          # git 仓库用户名（公开库可以不用填写）          username:          # git 仓库密码（公开库可以不用填写）          password:    bus:      # 开启消息跟踪      enabled: true      trace:        enabled: true      refresh:        enabled: true  kafka:    consumer:      # 指定默认消费者 group id      # 如果不设置，将会使用 commons 工程中的 group-id，那时调用 /actuator/bus-refresh 接口只会刷新其中一个 client      # 因为在同一个组中的 Consumer，同一个主题只会被一个 Consumer 接收      group-id: ofc-bus-config-server-consumer-groupeureka:  instance:    hostname: localhost    prefer-ip-address: true    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port}  server:    port: 11070  client:    service-url:      defaultZone: http://${eureka.instance.hostname}:${eureka.server.port}/eureka/management:  endpoints:    web:      exposure:        # 开启 endpoint        include: bus-refresh</code></pre><p>kafka.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># kafka 配置</span><span class="token comment" spellcheck="true">## kafka 服务地址</span><span class="token attr-name">spring.kafka.bootstrap-servers</span><span class="token punctuation">=</span><span class="token attr-value">172.16.11.125:9092</span><span class="token comment" spellcheck="true">## producer 提供者</span><span class="token comment" spellcheck="true">### 如果该值大于零时，表示启用重试失败的发送次数</span><span class="token attr-name">spring.kafka.producer.retries</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true">### 每次批量发送消息的数量</span><span class="token attr-name">spring.kafka.producer.batch-size</span><span class="token punctuation">=</span><span class="token attr-value">16384</span><span class="token attr-name">spring.kafka.producer.buffer-memory</span><span class="token punctuation">=</span><span class="token attr-value">33554432</span><span class="token comment" spellcheck="true">### 指定消息 key 和消息体的编解码方式</span><span class="token attr-name">spring.kafka.producer.key-serializer</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.kafka.common.serialization.StringSerializer</span><span class="token attr-name">spring.kafka.producer.value-serializer</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.kafka.common.serialization.StringSerializer</span><span class="token comment" spellcheck="true">## consumer 消费者</span><span class="token comment" spellcheck="true">### 指定默认消费者 group id</span><span class="token attr-name">spring.kafka.consumer.group-id</span><span class="token punctuation">=</span><span class="token attr-value">springcloud-config-bus-group</span><span class="token comment" spellcheck="true">### 当 Kafka 中没有初始偏移量或者服务器上不再存在当前偏移量时该怎么办，默认值为 latest，表示自动将偏移重置为最新的偏移量,可选的值为 latest, earliest, none</span><span class="token attr-name">spring.kafka.consumer.auto-offset-reset</span><span class="token punctuation">=</span><span class="token attr-value">earliest</span><span class="token comment" spellcheck="true">### 如果为 true，则消费者的偏移量将在后台定期提交，默认值为 true</span><span class="token attr-name">spring.kafka.consumer.enable-auto-commit</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment" spellcheck="true">### 如果 'enable.auto.commit'为true，则消费者偏移自动提交给 Kafka 的频率（以毫秒为单位），默认值为 5000</span><span class="token attr-name">spring.kafka.consumer.auto-commit-interval</span><span class="token punctuation">=</span><span class="token attr-value">100</span><span class="token comment" spellcheck="true">### 指定消息 key 和消息体的编解码方式</span><span class="token attr-name">spring.kafka.consumer.key-deserializer</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.kafka.common.serialization.StringDeserializer</span><span class="token attr-name">spring.kafka.consumer.value-deserializer</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.kafka.common.serialization.StringDeserializer</span></code></pre><p><strong>3.3.4 java代码</strong></p><p>OfcBusConfigServerApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableConfigServer</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:kafka.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfcBusConfigServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OfcBusConfigServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-4-ofc-bus-config-client"><a href="#3-4-ofc-bus-config-client" class="headerlink" title="3.4 ofc-bus-config-client"></a>3.4 ofc-bus-config-client</h2><p><strong>3.4.1 代码说明</strong></p><p>config-client 客户端，注册到 eureka 上。配置 spring-cloud-bus，使用 kafka 作为消息队列。</p><p><strong>3.4.2 maven 依赖</strong></p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- web和actuator同时存在时，web需放在前面，否则不生效 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.4.3 配置文件</strong></p><p>bootstrap.yml</p><pre class=" language-yml"><code class="language-yml">spring:  cloud:    config:      # 对应 {label} 部分，即 Git 的分支      label: master      # 对应 config-repo 中文件名前缀      name: soulballad      # 对应 {profile} 部分      profile: dev      discovery:        # 开启 Config 服务发现与注册        enabled: true        # 指定 config-server        service-id: ofc-bus-config-server    bus:      # 开启消息跟踪      enabled: true      trace:        enabled: true      refresh:        enabled: true  kafka:    consumer:      # 指定默认消费者 group id      # 如果不设置，将会使用 commons 工程中的 group-id，那时调用 /actuator/bus-refresh 接口只会刷新其中一个 client      # 因为在同一个组中的 Consumer，同一个主题只会被一个 Consumer 接收      group-id: ofc-bus-config-client-consumer-groupeureka:  instance:    hostname: localhost    prefer-ip-address: true    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port}  server:    port: 11070  client:    service-url:      defaultZone: http://${eureka.instance.hostname}:${eureka.server.port}/eureka/management:  # 开启 endpoint  endpoints:    web:      exposure:        include: bus-refresh</code></pre><p>application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">11073</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> ofc<span class="token punctuation">-</span>bus<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client</code></pre><p>kafka.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># kafka 配置</span><span class="token comment" spellcheck="true">## kafka 服务地址</span><span class="token attr-name">spring.kafka.bootstrap-servers</span><span class="token punctuation">=</span><span class="token attr-value">172.16.11.125:9092</span><span class="token comment" spellcheck="true">## producer 提供者</span><span class="token comment" spellcheck="true">### 如果该值大于零时，表示启用重试失败的发送次数</span><span class="token attr-name">spring.kafka.producer.retries</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true">### 每次批量发送消息的数量</span><span class="token attr-name">spring.kafka.producer.batch-size</span><span class="token punctuation">=</span><span class="token attr-value">16384</span><span class="token attr-name">spring.kafka.producer.buffer-memory</span><span class="token punctuation">=</span><span class="token attr-value">33554432</span><span class="token comment" spellcheck="true">### 指定消息 key 和消息体的编解码方式</span><span class="token attr-name">spring.kafka.producer.key-serializer</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.kafka.common.serialization.StringSerializer</span><span class="token attr-name">spring.kafka.producer.value-serializer</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.kafka.common.serialization.StringSerializer</span><span class="token comment" spellcheck="true">## consumer 消费者</span><span class="token comment" spellcheck="true">### 指定默认消费者 group id</span><span class="token attr-name">spring.kafka.consumer.group-id</span><span class="token punctuation">=</span><span class="token attr-value">springcloud-config-bus-group</span><span class="token comment" spellcheck="true">### 当 Kafka 中没有初始偏移量或者服务器上不再存在当前偏移量时该怎么办，默认值为 latest，表示自动将偏移重置为最新的偏移量,可选的值为 latest, earliest, none</span><span class="token attr-name">spring.kafka.consumer.auto-offset-reset</span><span class="token punctuation">=</span><span class="token attr-value">earliest</span><span class="token comment" spellcheck="true">### 如果为 true，则消费者的偏移量将在后台定期提交，默认值为 true</span><span class="token attr-name">spring.kafka.consumer.enable-auto-commit</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment" spellcheck="true">### 如果 'enable.auto.commit'为true，则消费者偏移自动提交给 Kafka 的频率（以毫秒为单位），默认值为 5000</span><span class="token attr-name">spring.kafka.consumer.auto-commit-interval</span><span class="token punctuation">=</span><span class="token attr-value">100</span><span class="token comment" spellcheck="true">### 指定消息 key 和消息体的编解码方式</span><span class="token attr-name">spring.kafka.consumer.key-deserializer</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.kafka.common.serialization.StringDeserializer</span><span class="token attr-name">spring.kafka.consumer.value-deserializer</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.kafka.common.serialization.StringDeserializer</span></code></pre><p><strong>3.4.4 java代码</strong></p><p>OfcBusConfigController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RefreshScope</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfcBusConfigController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${my.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>OfcBusConfigClientApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:kafka.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfcBusConfigClientApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OfcBusConfigClientApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-5-git-地址"><a href="#3-5-git-地址" class="headerlink" title="3.5 git 地址"></a>3.5 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-cloud/spring-cloud-03-official/spring-cloud-ofc-07-bus" target="_blank" rel="noopener">spring-cloud-ofc-07-bus</a>: Spring Cloud 官方提供的消息总线方案</p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>依次启动 ofc-bus-eureka、ofc-bus-config-server、ofc-bus-config-client，它们分别使用 11070、11072、11073 端口</p><h2 id="4-1-ofc-bus-eureka"><a href="#4-1-ofc-bus-eureka" class="headerlink" title="4.1 ofc-bus-eureka"></a>4.1 ofc-bus-eureka</h2><p>访问 eureka 管理台，查看 config-server 和 config-client 注册信息</p><pre class=" language-http"><code class="language-http">### GETGET http://localhost:11070/</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200823113209334.png"></p><h2 id="4-2-ofc-bus-config-server"><a href="#4-2-ofc-bus-config-server" class="headerlink" title="4.2 ofc-bus-config-server"></a>4.2 ofc-bus-config-server</h2><p>访问 <code>spring-cloud-ofc-bus.http</code> 中 ofc-bus-config-server 对应部分，查看输出的配置信息</p><p><strong>查看profile=test的配置信息</strong></p><pre class=" language-http"><code class="language-http">### GET /soulballad/{profile} 获取配置信息<span class="token header-name keyword">http:</span>//localhost:11072/soulballad/test</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200823114217360.png"></p><p><strong>查看配置文件内容</strong></p><pre class=" language-http"><code class="language-http">### GET /soulballad-{profile}.properties 获取指定文件内容<span class="token header-name keyword">http:</span>//localhost:11072/soulballad-test.properties</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200823114312436.png"></p><p><strong>其他方式查看配置文件内容</strong></p><pre class=" language-http"><code class="language-http">### 接口访问支持以下几种格式### /{application}/{profile}[/{label}]GET http://localhost:11072/soulballad/dev/master### /{application}-{profile}.ymlGET http://localhost:11072/soulballad-dev.yml### /{label}/{application}-{profile}.ymlGET http://localhost:11072/master/soulballad-dev.yml### /{application}-{profile}.propertiesGET http://localhost:11072/soulballad-dev.properties### /{label}/{application}-{profile}.propertiesGET http://localhost:11072/master/soulballad-dev.properties</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200823114415741.png"></p><h2 id="4-3-ofc-bus-config-client"><a href="#4-3-ofc-bus-config-client" class="headerlink" title="4.3 ofc-bus-config-client"></a>4.3 ofc-bus-config-client</h2><p>访问 <code>spring-cloud-ofc-bus.http</code>  中如下请求，查看输出的配置信息</p><p><strong>使用http请求访问配置</strong></p><pre class=" language-http"><code class="language-http">### GET /nameGET http://localhost:11073/name</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200823114441336.png"></p><h2 id="4-4-配置变更"><a href="#4-4-配置变更" class="headerlink" title="4.4 配置变更"></a>4.4 配置变更</h2><p>修改 server 上 soulballad-dev.properties 内容：soulballad-dev -&gt; soulballad-dev…changed</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">my.name</span><span class="token punctuation">=</span><span class="token attr-value">soulballad-dev...changed</span></code></pre><p>在服务端访问，查看修改是否生效</p><pre class=" language-http"><code class="language-http">### /{application}-{profile}.ymlGET http://localhost:11072/soulballad-dev.yml</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200823114702284.png"></p><p>在客户端访问 <code>/name</code>，还是获取到修改前的值： soulballad-dev</p><pre class=" language-http"><code class="language-http">### GET /nameGET http://localhost:11073/name</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200823114730896.png"></p><p>调用 <code>/actuator/bus-refresh</code> 进行刷新</p><pre class=" language-http"><code class="language-http">### POST /actuator/bus-refreshPOST http://localhost:11072/actuator/bus-refresh</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200823114813568.png"></p><p>再次访问 /name，获取到 soulballad-dev…changed</p><pre class=" language-http"><code class="language-http">### GET /nameGET http://localhost:11073/name</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200823114840761.png"></p><p>当有多个 config-client 时，也可以只刷新单个 config-client 的取值，使用如下方式</p><pre class=" language-http"><code class="language-http">### POST http://localhost:11072/actuator/bus-refresh/${spring.application.name}:{server.port}，### spring.application.name 和 server.port都是要刷新client的POST http://localhost:11072/actuator/bus-refresh/ofc-bus-config-client:11073</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200823114933216.png"></p><p><strong>如果要想在配置文件提交 git 后自动刷新配置，可以使用 <code>Webhook</code></strong></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-bus/2.2.2.RELEASE/reference/html/" target="_blank" rel="noopener">官方文档–Spring-Cloud-Bus</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Bus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Cloud学习】-5.Spring Cloud Config 配置中心</title>
      <link href="posts/9d886b0b.html"/>
      <url>posts/9d886b0b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring Cloud Config provides server and client-side support for externalized configuration in a distributed system. With the Config Server you have a central place to manage external properties for applications across all environments. The concepts on both client and server map identically to the Spring <code>Environment</code> and <code>PropertySource</code> abstractions, so they fit very well with Spring applications, but can be used with any application running in any language. As an application moves through the deployment pipeline from dev to test and into production you can manage the configuration between those environments and be certain that applications have everything they need to run when they migrate. The default implementation of the server storage backend uses git so it easily supports labelled versions of configuration environments, as well as being accessible to a wide range of tooling for managing the content. It is easy to add alternative implementations and plug them in with Spring configuration.</p></blockquote><p>Spring Cloud Config 为分布式系统中的外部化配置提供服务器和客户端支持。使用Config Server，您可以集中管理所有环境中应用程序的外部属性。客户端和服务器上的概念与Spring Environment和PropertySource抽象完全相同，因此它们非常适合Spring应用程序，但可以与以任何语言运行的任何应用程序一起使用。当应用程序从开发人员迁移到测试人员并进入生产过程时，您可以管理这些环境之间的配置，并确保应用程序具有迁移时所需的一切。服务器存储后端的默认实现使用git，因此它可以轻松支持配置环境的标记版本，并且可以通过各种工具来访问这些内容来管理内容。添加替代实现并将其插入Spring配置很容易。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ul><li><p>HTTP, resource-based API for external configuration (name-value pairs, or equivalent YAML content): HTTP, 用于外部配置的基于资源的API（键值对，或等效的YAML内容）</p></li><li><p>Encrypt and decrypt property values (symmetric or asymmetric): 加密和解密属性值（对称或非对称）</p></li><li><p>Embeddable easily in a Spring Boot application using <code>@EnableConfigServer</code> Config Client features (for Spring applications): 使用 <code>@EnableConfigServer</code> Config Client功能（适用于Spring应用程序），可轻松集成到Spring Boot应用程序中</p></li><li><p>Bind to the Config Server and initialize Spring <code>Environment</code> with remote property sources: 绑定到Config Server并使用远程属性源初始化Spring `Environment</p></li></ul><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE、Spring Cloud Hoxton.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200822214521079.png"></p><p>总体结构说明：spring cloud config 简单使用</p><ul><li>ofc-config-server： config 服务端，负责配置管理</li><li>ofc-config-client： config 客户端，获取服务端配置</li></ul><h2 id="3-1-ofc-config-server"><a href="#3-1-ofc-config-server" class="headerlink" title="3.1 ofc-config-server"></a>3.1 ofc-config-server</h2><p><strong>3.1.1 代码说明</strong></p><p>使用 spring-cloud-starter-config-server 开启配置管理服务端</p><p><strong>3.1.2 maven 依赖</strong></p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.1.3 配置文件</strong></p><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">ofc-config-server</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">11000</span><span class="token comment" spellcheck="true"># 本地仓库的git url配置</span><span class="token attr-name">spring.cloud.config.server.git.uri</span><span class="token punctuation">=</span><span class="token attr-value">file:///E:/GitRepository/gitee/config-server-test</span></code></pre><p>config-server-test 目录下包含4个配置文件</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200822215657217.png"></p><p>里面的内容如下</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># soulballad.properties</span><span class="token attr-name">my.name</span><span class="token punctuation">=</span><span class="token attr-value">soulballad</span><span class="token comment" spellcheck="true"># soulballad-dev.properties</span><span class="token attr-name">my.name</span><span class="token punctuation">=</span><span class="token attr-value">soulballad-dev</span><span class="token comment" spellcheck="true"># soulballad-prod.properties</span><span class="token attr-name">my.name</span><span class="token punctuation">=</span><span class="token attr-value">soulballad-pro</span><span class="token comment" spellcheck="true"># soulballad-test.properties</span><span class="token attr-name">my.name</span><span class="token punctuation">=</span><span class="token attr-value">soulballad-test</span></code></pre><p><strong>3.1.4 java代码</strong></p><p>OfcConfigServerApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableConfigServer</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfcConfigServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OfcConfigServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-ofc-config-client"><a href="#3-2-ofc-config-client" class="headerlink" title="3.2 ofc-config-client"></a>3.2 ofc-config-client</h2><p><strong>3.2.1 代码说明</strong></p><p>使用 spring-cloud-starter-config-client 调用服务端管理的配置</p><p><strong>3.2.2 maven 依赖</strong></p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.2.3 配置文件</strong></p><p>bootstrap.properties</p><p>bootstrap 中配置服务启动依赖的配置</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 配置服务端url</span><span class="token attr-name">spring.cloud.config.uri</span><span class="token punctuation">=</span><span class="token attr-value">http://localhost:11000</span><span class="token comment" spellcheck="true"># 客户端应用名称，对应配置文件名称前缀（soulballad、soulballad-dev、soulballad-test、soulballad-prod）</span><span class="token attr-name">spring.cloud.config.name</span><span class="token punctuation">=</span><span class="token attr-value">soulballad</span><span class="token comment" spellcheck="true"># profile：激活的配置</span><span class="token attr-name">spring.cloud.config.profile</span><span class="token punctuation">=</span><span class="token attr-value">dev</span><span class="token comment" spellcheck="true"># label：在git中的分支名称</span><span class="token attr-name">spring.cloud.config.label</span><span class="token punctuation">=</span><span class="token attr-value">master</span></code></pre><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">ofc-config-client</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">11010</span><span class="token comment" spellcheck="true">#management.endpoint.health.show-details=always</span><span class="token attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token attr-value">*</span><span class="token attr-name">management.endpoint.refresh.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">management.endpoint.beans.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">management.endpoint.health.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><p><strong>3.2.4 java代码</strong></p><p>OfcConfigController.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1. 需要开启actuator端点，然后调用刷新接口才能生效； </span><span class="token comment" spellcheck="true">// 2. 多节点的情况下，只有调用了刷新接口的节点生效，其他节点未变；</span><span class="token annotation punctuation">@RefreshScope</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfcConfigController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${my.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>OfcConfigClientApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfcConfigClientApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OfcConfigClientApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-git-地址"><a href="#3-3-git-地址" class="headerlink" title="3.3 git 地址"></a>3.3 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-cloud/spring-cloud-03-official/spring-cloud-ofc-01-config" target="_blank" rel="noopener">spring-cloud-ofc-01-config</a>: Spring Cloud 官方提供的分布式配置中心方案</p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>依次启动 ofc-config-server、ofc-config-client，它们分别监听在 11000、11010 端口。</p><h2 id="4-1-ofc-config-server"><a href="#4-1-ofc-config-server" class="headerlink" title="4.1 ofc-config-server"></a>4.1 ofc-config-server</h2><p>在 <code>ofc-config-server.http</code> 访问下列地址，观察输出的配置信息。</p><p><strong>默认配置</strong></p><pre class=" language-http"><code class="language-http">### GET soulballad-default 默认配置GET http://localhost:11000/soulballad-default.properties</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200822220049149.png"></p><p><strong>dev配置</strong></p><pre class=" language-http"><code class="language-http">### GET soulballad-dev dev环境配置GET http://localhost:11000/soulballad-dev.properties</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200822220302029.png"></p><p><strong>test配置</strong></p><pre class=" language-http"><code class="language-http">### GET soulballad-test test环境配置GET http://localhost:11000/soulballad-test.properties</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200822220327296.png"></p><p><strong>prod配置</strong></p><pre class=" language-http"><code class="language-http">### GET soulballad-prod prod环境配置GET http://localhost:11000/soulballad-prod.properties</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200822220350930.png"></p><h2 id="4-2-ofc-config-client"><a href="#4-2-ofc-config-client" class="headerlink" title="4.2 ofc-config-client"></a>4.2 ofc-config-client</h2><p>在 <code>ofc-config-client.http</code> 访问下列地址，观察输出的配置信息。</p><pre class=" language-http"><code class="language-http">### 通过url获取配置结果### GET /nameGET http://localhost:11010/name</code></pre><p>由于在 <code>bootstrap.properties</code> 中激活的配置是 dev，所以获取到 <code>soulballad-dev.properties</code> 中配置信息</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200822220647113.png"></p><h2 id="4-3-配置变更"><a href="#4-3-配置变更" class="headerlink" title="4.3 配置变更"></a>4.3 配置变更</h2><p>在实际环境中，配置中心管理的配置信息会有变动，并且希望能够在不重启的情况下使修改后的配置生效。这里模拟着个场景。</p><p>修改本地 soulballad-dev.properties 中配置信息，内容如下：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">my.name</span><span class="token punctuation">=</span><span class="token attr-value">soulballad-dev1234</span></code></pre><p>查看服务端修改是否生效，发现服务端输出的已经是修改后的配置</p><pre class=" language-http"><code class="language-http">### GET soulballad-dev dev环境配置GET http://localhost:11000/soulballad-dev.properties</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200822221056875.png"></p><p>查看客户端是否获取到最新配置，发现客户端获取的还是修改前的配置</p><pre class=" language-http"><code class="language-http">### GET /nameGET http://localhost:11010/name</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200822221203583.png"></p><p><strong>这是因为客户端缓存了服务端的配置，修改了配置文件只有服务端生效了，客户端没有生效</strong>。</p><p><strong>在开启 actuator 的情况下，可以手动调用客户端接口，刷新客户端配置</strong></p><pre class=" language-http"><code class="language-http">### GET /actuator/refresh 手动触发配置刷新POST http://localhost:11010/actuator/refresh</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200822221415532.png"></p><p>刷新完成后，再次在客户端访问配置信息，发现配置已经更新。</p><pre class=" language-http"><code class="language-http">### GET /nameGET http://localhost:11010/name</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200822221531607.png"></p><p><strong>在分布式环境下，如果 config-client 有多个节点，那么只有调用了 <code>/actuator/refresh</code> 接口的节点，配置才能被刷新，未调用接口的节点，配置不会更新。</strong></p><p><strong>针对这个问题，Spring Cloud 提供了另外一冲解决方案 <code>Spring-Cloud-Bus</code></strong></p><p>且看下一篇  <a href="f2301729"><strong>【Spring Cloud学习】-6.Spring Cloud Bus 消息总线</strong></a></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://spring.io/projects/spring-cloud-config" target="_blank" rel="noopener">官方文档-Spring-Cloud-Config</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring-Cloud】-4.Spring Cloud Feign 实现原理</title>
      <link href="posts/632bf22a.html"/>
      <url>posts/632bf22a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Cloud Feign：<a href="95f7c0a4">【Spring Cloud学习】-4.Spring Cloud Feign 服务调用</a></p></blockquote><h2 id="1-Feign-是如何调用服务的？"><a href="#1-Feign-是如何调用服务的？" class="headerlink" title="1.Feign 是如何调用服务的？"></a>1.Feign 是如何调用服务的？</h2><p>当调用 <code>/user/list</code> 时，可以看到这时的 UserService 是一个代理对象，它被 jdk 动态代理。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200821172827151.png"></p><p>继续执行会调用 ReflectiveFeign.FeignInvocationHandler#invoke 方法，调用路径如下</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/4-1.Feign%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8%E6%9C%8D%E5%8A%A1.jpg"></p><h2 id="2-代理对象是如何创建的？"><a href="#2-代理对象是如何创建的？" class="headerlink" title="2.代理对象是如何创建的？"></a>2.代理对象是如何创建的？</h2><p>在 OfcFeignUserClientApplication 上添加了 @EnableFeignClients 注解，启用了 feign 功能，@EnableFeignClients 中通过 @Import 引入了 @FeignClientsRegistrar</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>FeignClientsRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableFeignClients</span> <span class="token punctuation">{</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackageClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">defaultConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">clients</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>@FeignClientsRegistrar 实现了 ImportBeanDefinitionRegistrar 接口，可以动态装载 bean</p><p>的定义</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span>                                    BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注册默认配置</span>    <span class="token function">registerDefaultConfiguration</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册 FeignClient</span>    <span class="token function">registerFeignClients</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>registerFeignClients 扫描所有加了 @FeignClient 的类，然后再调用 registerFeignClient 方法进行注册</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerFeignClients</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span>                                 BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取一个scanner扫描对象</span>    ClassPathScanningCandidateComponentProvider scanner <span class="token operator">=</span> <span class="token function">getScanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 资源加载器，当前应用上下文</span>    scanner<span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> basePackages<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 @EnableFeignClients 的属性</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attrs <span class="token operator">=</span> metadata        <span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>EnableFeignClients<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AnnotationTypeFilter annotationTypeFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span>        FeignClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否配置了 clients 属性</span>    <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> clients <span class="token operator">=</span> attrs <span class="token operator">==</span> null <span class="token operator">?</span> null        <span class="token operator">:</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> attrs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"clients"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clients <span class="token operator">==</span> null <span class="token operator">||</span> clients<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果没有配置，获取 basePackage</span>        scanner<span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span>annotationTypeFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        basePackages <span class="token operator">=</span> <span class="token function">getBasePackages</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 否则只扫描 clients 中类所在路径</span>        <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> clientClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        basePackages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">:</span> clients<span class="token punctuation">)</span> <span class="token punctuation">{</span>            basePackages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            clientClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        AbstractClassTestingTypeFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbstractClassTestingTypeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">match</span><span class="token punctuation">(</span>ClassMetadata metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String cleaned <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"\\$"</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> clientClasses<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cleaned<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">AllTypeFilter</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span> annotationTypeFilter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 遍历 basePackages</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String basePackage <span class="token operator">:</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> candidateComponents <span class="token operator">=</span> scanner            <span class="token punctuation">.</span><span class="token function">findCandidateComponents</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinition candidateComponent <span class="token operator">:</span> candidateComponents<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>candidateComponent <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// verify annotated class is an interface</span>                AnnotatedBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span>AnnotatedBeanDefinition<span class="token punctuation">)</span> candidateComponent<span class="token punctuation">;</span>                AnnotationMetadata annotationMetadata <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Assert<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                              <span class="token string">"@FeignClient can only be specified on an interface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attributes <span class="token operator">=</span> annotationMetadata                    <span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>                    FeignClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> <span class="token function">getClientName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 注册 FeignClient 上的 configuration 配置</span>                <span class="token function">registerClientConfiguration</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> name<span class="token punctuation">,</span>                                            attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"configuration"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 注册 FeignClient</span>                <span class="token function">registerFeignClient</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>registerFeignClient() 中通过 genericBeanDefinition 来构建一个 BeanDefinitionBuilder 对象，它传入一个 FeignClientFactoryBean 参数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerFeignClient</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">,</span>                                 AnnotationMetadata annotationMetadata<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String className <span class="token operator">=</span> annotationMetadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过 FeignClientFactoryBean 生成一个 BeanDefinitionBuilder 对象</span>    BeanDefinitionBuilder definition <span class="token operator">=</span> BeanDefinitionBuilder        <span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>FeignClientFactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">validate</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置一些属性</span>    definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token function">getUrl</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">,</span> <span class="token function">getPath</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    String contextId <span class="token operator">=</span> <span class="token function">getContextId</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"contextId"</span><span class="token punctuation">,</span> contextId<span class="token punctuation">)</span><span class="token punctuation">;</span>    definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>    definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"decode404"</span><span class="token punctuation">,</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"decode404"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"fallback"</span><span class="token punctuation">,</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"fallback"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    definition<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"fallbackFactory"</span><span class="token punctuation">,</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"fallbackFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    definition<span class="token punctuation">.</span><span class="token function">setAutowireMode</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_BY_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>    String alias <span class="token operator">=</span> contextId <span class="token operator">+</span> <span class="token string">"FeignClient"</span><span class="token punctuation">;</span>    AbstractBeanDefinition beanDefinition <span class="token operator">=</span> definition<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> primary <span class="token operator">=</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> attributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// has a default, won't be</span>    <span class="token comment" spellcheck="true">// null</span>    beanDefinition<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span>primary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否有别名</span>    String qualifier <span class="token operator">=</span> <span class="token function">getQualifier</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        alias <span class="token operator">=</span> qualifier<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用 BeanDefinitionHolder 进行包装</span>    BeanDefinitionHolder holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> className<span class="token punctuation">,</span>                                                           <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> alias <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册到 registry 中</span>    BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>holder<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> FeignClientFactoryBean 是一个工厂 bean，它实现了 FactoryBean 接口，重写 getObject 方法，自定义 bean 的初始化</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>getTarget 判断是否有指定url，如果指定了url，直接调用；否则使用负载均衡选择一个服务提供者。这里没有指定，所以调用 loadBalance</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从应用上下文中获取 FeignContext</span>    FeignContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>FeignContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化 Feign.Builder</span>    Feign<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token function">feign</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果没有指定url，使用负载均衡选择一个服务提供者</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">+=</span> <span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 负载均衡调用</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token function">loadBalance</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> context<span class="token punctuation">,</span>                               <span class="token keyword">new</span> <span class="token class-name">HardCodedTarget</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果指定了url，直接调用对应的服务</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">"http://"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Client client <span class="token operator">=</span> <span class="token function">getOptional</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Client<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>client <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>client <span class="token keyword">instanceof</span> <span class="token class-name">LoadBalancerFeignClient</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// not load balancing because we have a url,</span>            <span class="token comment" spellcheck="true">// but ribbon is on the classpath, so unwrap</span>            client <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>LoadBalancerFeignClient<span class="token punctuation">)</span> client<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        builder<span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Targeter targeter <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Targeter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> targeter<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> builder<span class="token punctuation">,</span> context<span class="token punctuation">,</span>                               <span class="token keyword">new</span> <span class="token class-name">HardCodedTarget</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>loadBalance 通过 targeter.target 进行代理</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">loadBalance</span><span class="token punctuation">(</span>Feign<span class="token punctuation">.</span>Builder builder<span class="token punctuation">,</span> FeignContext context<span class="token punctuation">,</span>                            HardCodedTarget<span class="token operator">&lt;</span>T<span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取一个 Client 的实例</span>    Client client <span class="token operator">=</span> <span class="token function">getOptional</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Client<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>client <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>        Targeter targeter <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Targeter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 代理</span>        <span class="token keyword">return</span> targeter<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> builder<span class="token punctuation">,</span> context<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>        <span class="token string">"No Feign Client for loadBalancing defined. Did you forget to include spring-cloud-starter-netflix-ribbon?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>target 方法中，通过 build() 创建 ReflectiveFeign 对象，然后调用它的 newInstance 方法，生成代理对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">target</span><span class="token punctuation">(</span>FeignClientFactoryBean factory<span class="token punctuation">,</span> Feign<span class="token punctuation">.</span>Builder feign<span class="token punctuation">,</span>      FeignContext context<span class="token punctuation">,</span> Target<span class="token punctuation">.</span>HardCodedTarget<span class="token operator">&lt;</span>T<span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> feign<span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">target</span><span class="token punctuation">(</span>Target<span class="token operator">&lt;</span>T<span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用 newInstance 生成代理对象</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Feign <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建工厂类</span>    Factory synchronousMethodHandlerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Factory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>client<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>retryer<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestInterceptors<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>logLevel<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>decode404<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>closeAfterDecode<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propagationPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>    ParseHandlersByName handlersByName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParseHandlersByName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>contract<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>encoder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>decoder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queryMapEncoder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>errorDecoder<span class="token punctuation">,</span> synchronousMethodHandlerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建 ReflectiveFeign 对象</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReflectiveFeign</span><span class="token punctuation">(</span>handlersByName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>invocationHandlerFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queryMapEncoder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>调用 ReflectiveFeign#newInstance，生成 jdk 代理对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">newInstance</span><span class="token punctuation">(</span>Target<span class="token operator">&lt;</span>T<span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span> nameToHandler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetToHandlersByName<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> MethodHandler<span class="token operator">></span> methodToHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>DefaultMethodHandler<span class="token operator">></span> defaultMethodHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Method<span class="token punctuation">[</span><span class="token punctuation">]</span> var5 <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> var6 <span class="token operator">=</span> var5<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var7 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var7 <span class="token operator">&lt;</span> var6<span class="token punctuation">;</span> <span class="token operator">++</span>var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Method method <span class="token operator">=</span> var5<span class="token punctuation">[</span>var7<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Util<span class="token punctuation">.</span><span class="token function">isDefault</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                DefaultMethodHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMethodHandler</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>                defaultMethodHandlers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>                methodToHandler<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                methodToHandler<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> nameToHandler<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Feign<span class="token punctuation">.</span><span class="token function">configKey</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建 InvocationHandler</span>    InvocationHandler handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> methodToHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生成代理对象</span>    T proxy <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>target<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator var12 <span class="token operator">=</span> defaultMethodHandlers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>var12<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultMethodHandler defaultMethodHandler <span class="token operator">=</span> <span class="token punctuation">(</span>DefaultMethodHandler<span class="token punctuation">)</span>var12<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultMethodHandler<span class="token punctuation">.</span><span class="token function">bindTo</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> proxy<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的 factory 为 InvocationHandlerFactory，调用其 create 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> InvocationHandler <span class="token function">create</span><span class="token punctuation">(</span>Target target<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> InvocationHandlerFactory<span class="token punctuation">.</span>MethodHandler<span class="token operator">></span> dispatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FeignInvocationHandler</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> dispatch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以最终生成的代理对象为 FeignInvocationHandler</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Cloud学习】-4.Spring Cloud Feign 服务调用</title>
      <link href="posts/95f7c0a4.html"/>
      <url>posts/95f7c0a4.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p><a href="https://github.com/OpenFeign/feign" target="_blank" rel="noopener">Feign</a> is a declarative web service client. It makes writing web service clients easier. To use Feign create an interface and annotate it. It has pluggable annotation support including Feign annotations and JAX-RS annotations. Feign also supports pluggable encoders and decoders. Spring Cloud adds support for Spring MVC annotations and for using the same <code>HttpMessageConverters</code> used by default in Spring Web. Spring Cloud integrates Ribbon and Eureka, as well as Spring Cloud LoadBalancer to provide a load-balanced http client when using Feign.</p></blockquote><p>Feign是声明性Web服务客户端。它使编写Web服务客户端更加容易。要使用Feign，请创建一个接口并对其进行注释。它具有可插入注释支持，包括Feign注释和JAX-RS注释。 Feign还支持可插拔编码器和解码器。 Spring Cloud添加了对Spring MVC注释的支持，并支持使用Spring Web中默认使用的相同HttpMessageConverters。 Spring Cloud集成了Ribbon和Eureka以及Spring Cloud LoadBalancer，以在使用Feign时提供负载平衡的http客户端。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><p>在一般的场景中，如果要发送 http 请求，需要根据服务提供方的 ip、端口、url 进行调用，openfeign 提供了一种基于接口的调用方式。</p><ul><li>原始的调用方法： client.request(“<a href="http://ip:port/service&quot;)；">http://ip:port/service")；</a></li><li>openfeign 调用方法：service.request(args);  openfeign 根据服务名进行调用，调用方配置服务提供方的服务名 spring.application.name ；</li></ul><p>使用 openfeign 调用远程服务就像 java 代码中接口调用方法一样，不用再编写复杂的 http 请求逻辑；如果集成了 eureka 等注册中心，甚至不用配置服务提供方的 url，只需配置 eureka 即可。</p><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE、Spring Cloud Hoxton.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200821164346658.png"></p><p>Feign+Eureka+Hystrix 的混合运用</p><p>总体结构说明：</p><ul><li>ofc-feign-eureka-server： eureka 服务端，提供服务注册功能；</li><li>ofc-feign-user-api： 公共 api，定义模型和接口，fallback；</li><li>ofc-feign-user-client： 服务调用方，使用 feign 调用接口，注册到 eureka server；</li><li>ofc-feign-user-server： 服务提供方，实现 api 中定义的接口，注册到 eureka server。</li></ul><h2 id="3-1-ofc-feign-eureka-server"><a href="#3-1-ofc-feign-eureka-server" class="headerlink" title="3.1 ofc-feign-eureka-server"></a>3.1 ofc-feign-eureka-server</h2><p><strong>3.1.1 代码说明</strong></p><p>eureka 服务端，提供服务注册功能。</p><p><strong>3.1.2 maven 依赖</strong></p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.1.3 配置文件</strong></p><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">ofc-feign-eureka-server</span><span class="token comment" spellcheck="true"># 应用服务web访问端口</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">11040</span><span class="token comment" spellcheck="true"># 服务注册中心主机名</span><span class="token attr-name">eureka.instance.hostname</span><span class="token punctuation">=</span><span class="token attr-value">localhost</span><span class="token comment" spellcheck="true"># 是否注册自己</span><span class="token attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 是否检索服务</span><span class="token attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment" spellcheck="true"># eureka server 地址</span><span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://${eureka.instance.hostname}:${server.port}/eureka/</span></code></pre><p><strong>3.1.4 java代码</strong></p><p>OfcFeignEurekaApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 开启 eureka server</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfcFeignEurekaApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OfcFeignEurekaApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-ofc-feign-user-api"><a href="#3-2-ofc-feign-user-api" class="headerlink" title="3.2 ofc-feign-user-api"></a>3.2 ofc-feign-user-api</h2><p><strong>3.2.1 代码说明</strong></p><p>公共 api，定义了实体模型，公共接口以及 fallback 类。</p><p><strong>3.2.2 maven 依赖</strong></p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.2.3 配置文件</strong></p><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">ofc-feign-user-api</span><span class="token comment" spellcheck="true"># 应用服务web访问端口</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span></code></pre><p><strong>3.2.4 java代码</strong></p><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Long <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span>String birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"UserModel{"</span> <span class="token operator">+</span> <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", birthday='"</span> <span class="token operator">+</span> birthday <span class="token operator">+</span> <span class="token string">'\''</span>                <span class="token operator">+</span> <span class="token string">", address='"</span> <span class="token operator">+</span> address <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">", phone='"</span> <span class="token operator">+</span> phone <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserService.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// value 中定义服务提供者名称，fallback-降级</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"ofc-feign-user-server"</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> UserServiceFallback<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/list"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/save"</span><span class="token punctuation">)</span>    UserModel <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserServiceFallback.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceFallback</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">save</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>OfcUserApiApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfcUserApiApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OfcUserApiApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-ofc-feign-user-server"><a href="#3-3-ofc-feign-user-server" class="headerlink" title="3.3 ofc-feign-user-server"></a>3.3 ofc-feign-user-server</h2><p><strong>3.3.1 代码说明</strong></p><p>实现 api 中定义的接口，对外提供服务，注册到 eureka server。</p><p>集成 hystrix，实现服务降级。</p><p><strong>3.3.2 maven 依赖</strong></p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.soulballad.usage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ofc-feign-user-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.3.3 配置文件</strong></p><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">ofc-feign-user-server</span><span class="token comment" spellcheck="true"># 应用服务web访问端口</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">11041</span><span class="token attr-name">eureka.server.host</span><span class="token punctuation">=</span><span class="token attr-value">localhost</span><span class="token attr-name">eureka.server.port</span><span class="token punctuation">=</span><span class="token attr-value">11040</span><span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://${eureka.server.host}:${eureka.server.port}/eureka/</span></code></pre><p><strong>3.3.4 java代码</strong></p><p>UserServerController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServerController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> UserModel<span class="token operator">></span> USER_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicLong ID_GENERATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserServerController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/list"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"fallBackList"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"100"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">int</span> seconds <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"user server controller list sleep for {} seconds!"</span><span class="token punctuation">,</span> seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>USER_MAP<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> id <span class="token operator">=</span> ID_GENERATOR<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">fallBackList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"user server controller list fallback!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化2条数据</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"2000-01-01"</span><span class="token punctuation">,</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span> <span class="token string">"13888888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"1999-01-01"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"13777777777"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>OfcFeignUserServerApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableHystrix</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfcFeignUserServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OfcFeignUserServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-4-ofc-feign-user-client"><a href="#3-4-ofc-feign-user-client" class="headerlink" title="3.4 ofc-feign-user-client"></a>3.4 ofc-feign-user-client</h2><p><strong>3.4.1 代码说明</strong></p><p>根据 api 中的 UserService 接口调用服务，同时也需要注册到 eureka server。</p><p><strong>3.4.2 maven 依赖</strong></p><p>pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.soulballad.usage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ofc-feign-user-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.2.3 配置文件</strong></p><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">ofc-feign-user-client</span><span class="token comment" spellcheck="true"># 应用服务web访问端口</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">11042</span><span class="token attr-name">eureka.server.host</span><span class="token punctuation">=</span><span class="token attr-value">localhost</span><span class="token attr-name">eureka.server.port</span><span class="token punctuation">=</span><span class="token attr-value">11040</span><span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://${eureka.server.host}:${eureka.server.port}/eureka/</span><span class="token comment" spellcheck="true"># 设置超时时间和日志级别</span><span class="token attr-name">feign.client.config.default.connect-timeout</span><span class="token punctuation">=</span><span class="token attr-value">5000</span><span class="token attr-name">feign.client.config.default.read-timeout</span><span class="token punctuation">=</span><span class="token attr-value">5000</span><span class="token attr-name">feign.client.config.default.logger-level</span><span class="token punctuation">=</span><span class="token attr-value">full</span><span class="token attr-name">logging.level.com.soulballad.usage.springcloud</span><span class="token punctuation">=</span><span class="token attr-value">debug</span></code></pre><p><strong>3.2.4 java代码</strong></p><p>UserClientController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserClientController</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">UserClientController</span><span class="token punctuation">(</span>UserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserService.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 启用feign，接口为UserService；如果不配置默认扫描所有@FeignClient注解修改的类</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>clients <span class="token operator">=</span> UserService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfcFeignUserClientApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OfcFeignUserClientApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-5-git-地址"><a href="#3-5-git-地址" class="headerlink" title="3.5 git 地址"></a>3.5 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-cloud/spring-cloud-03-official/spring-cloud-ofc-04-feign" target="_blank" rel="noopener">spring-cloud-ofc-04-feign</a>: Spring Cloud 官方提供的分布式服务调用方案</p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBoot03WebApplication.main 方法，在 spring-boot-03-webmvc.http 访问下列地址，观察输出信息是否符合预期。</p><p>依次启动 ofc-feign-eureka-server、ofc-feign-user-server、ofc-feign-user-client 服务；</p><p>它们分别监听在 11040、11041、11042 端口，启动完成后可在 eureka 管理台上看到：</p><pre class=" language-http"><code class="language-http">### GET eurekaGET http://localhost:11040/</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200821170927581.png"></p><p>在 <code>spring-cloud-ofc-feign.http</code> 中访问如下地址，查看请求结果是否符合预期</p><h2 id="4-1-ofc-feign-user-server"><a href="#4-1-ofc-feign-user-server" class="headerlink" title="4.1 ofc-feign-user-server"></a>4.1 ofc-feign-user-server</h2><p><strong>查询用户列表</strong></p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:11041/user/list</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200821171304738.png"></p><p><strong>新增用户</strong></p><pre class=" language-http"><code class="language-http">### POST /user/savePOST http://localhost:11041/user/save<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1980-03-01"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"guangzhou"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13666666666"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200821171358047.png"></p><h2 id="4-2-ofc-feign-user-client"><a href="#4-2-ofc-feign-user-client" class="headerlink" title="4.2 ofc-feign-user-client"></a>4.2 ofc-feign-user-client</h2><p><strong>查询用户列表</strong></p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:11042/user/list</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200821172224478.png"></p><p><strong>新增用户</strong></p><pre class=" language-http"><code class="language-http">### POST /user/savePOST http://localhost:11042/user/save<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"zhaoliu"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1970-04-02"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"wuhan"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13555555555"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200821172301295.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-cloud-openfeign/docs/2.2.4.RELEASE/reference/html/#spring-cloud-feign" target="_blank" rel="noopener">官方文档-Spring Cloud OpenFeign</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring-Cloud】-3.Spring Cloud Hystrix 实现原理</title>
      <link href="posts/ff0798d5.html"/>
      <url>posts/ff0798d5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Cloud Hystrix：<a href="d1dde1f">【Spring Cloud学习】-3.Spring Cloud Hystrix 服务降级</a></p></blockquote><h2 id="1-Hystrix-如何触发熔断？"><a href="#1-Hystrix-如何触发熔断？" class="headerlink" title="1.Hystrix 如何触发熔断？"></a>1.Hystrix 如何触发熔断？</h2><p>hystrix 熔断的注解 @HystrixCommand，是通过 HystrixCommandAspect 切面来处理的。</p><p>切入点定义如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hystrixCommandAnnotationPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>它在 methodsAnnotatedWithHystrixCommand 上触发调用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Object <span class="token function">methodsAnnotatedWithHystrixCommand</span><span class="token punctuation">(</span><span class="token keyword">final</span> ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取目标方法</span>    Method method <span class="token operator">=</span> <span class="token function">getMethodFromTarget</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>    Validate<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"failed to get method from joinPoint: %s"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断方法上是否存在 @HystrixCommand 注解</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>HystrixCommand<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>HystrixCollapser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"method cannot be annotated with HystrixCommand and HystrixCollapser "</span> <span class="token operator">+</span> <span class="token string">"annotations at the same time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    MetaHolderFactory metaHolderFactory <span class="token operator">=</span> META_HOLDER_FACTORY_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>HystrixPointcutType<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MetaHolder metaHolder <span class="token operator">=</span> metaHolderFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果是异步，则创建GenericObservableCommand， 否则创建GenericCommand</span>    HystrixInvokable invokable <span class="token operator">=</span> HystrixCommandFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>    ExecutionType executionType <span class="token operator">=</span> metaHolder<span class="token punctuation">.</span><span class="token function">isCollapserAnnotationPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span>        metaHolder<span class="token punctuation">.</span><span class="token function">getCollapserExecutionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> metaHolder<span class="token punctuation">.</span><span class="token function">getExecutionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object result<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 是否响应式，默认为非响应式</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>metaHolder<span class="token punctuation">.</span><span class="token function">isObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> CommandExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>invokable<span class="token punctuation">,</span> executionType<span class="token punctuation">,</span> metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token function">executeObservable</span><span class="token punctuation">(</span>invokable<span class="token punctuation">,</span> executionType<span class="token punctuation">,</span> metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HystrixBadRequestException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HystrixRuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token function">hystrixRuntimeExceptionToThrowable</span><span class="token punctuation">(</span>metaHolder<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/3-1.Hystrix%E5%A6%82%E4%BD%95%E8%A7%A6%E5%8F%91%E7%86%94%E6%96%AD.jpg"></p><p>CommandExecutor.execute 实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">execute</span><span class="token punctuation">(</span>HystrixInvokable invokable<span class="token punctuation">,</span> ExecutionType executionType<span class="token punctuation">,</span> MetaHolder metaHolder<span class="token punctuation">)</span> <span class="token keyword">throws</span> RuntimeException <span class="token punctuation">{</span>    Validate<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>invokable<span class="token punctuation">)</span><span class="token punctuation">;</span>    Validate<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>executionType<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> SYNCHRONOUS<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 同步</span>            <span class="token keyword">return</span> <span class="token function">castToExecutable</span><span class="token punctuation">(</span>invokable<span class="token punctuation">,</span> executionType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> ASYNCHRONOUS<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 异步</span>            HystrixExecutable executable <span class="token operator">=</span> <span class="token function">castToExecutable</span><span class="token punctuation">(</span>invokable<span class="token punctuation">,</span> executionType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>metaHolder<span class="token punctuation">.</span><span class="token function">hasFallbackMethodCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> ExecutionType<span class="token punctuation">.</span>ASYNCHRONOUS <span class="token operator">==</span> metaHolder<span class="token punctuation">.</span><span class="token function">getFallbackExecutionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FutureDecorator</span><span class="token punctuation">(</span>executable<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> executable<span class="token punctuation">.</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> OBSERVABLE<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 响应式</span>            HystrixObservable observable <span class="token operator">=</span> <span class="token function">castToObservable</span><span class="token punctuation">(</span>invokable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ObservableExecutionMode<span class="token punctuation">.</span>EAGER <span class="token operator">==</span> metaHolder<span class="token punctuation">.</span><span class="token function">getObservableExecutionMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> observable<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> observable<span class="token punctuation">.</span><span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"unsupported execution type: "</span> <span class="token operator">+</span> executionType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由于是同步调用，所以到 HystrixCommand.execute，这里通过 queue() 返回一个 future 对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> R <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> Exceptions<span class="token punctuation">.</span><span class="token function">sneakyThrow</span><span class="token punctuation">(</span><span class="token function">decomposeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>queue() 这个方法，返回了一个Future对象，这个future的实际处理委派给 f 实现，f是匿名内部类，当调用queue().get()方法时，最终调用 delegate.get 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Future<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*      * The Future returned by Observable.toBlocking().toFuture() does not implement the      * interruption of the execution thread when the "mayInterrupt" flag of Future.cancel(boolean) is set to true;      * thus, to comply with the contract of Future, we must wrap around it.      */</span>    <span class="token comment" spellcheck="true">// 创建一个委派对象</span>    <span class="token keyword">final</span> Future<span class="token operator">&lt;</span>R<span class="token operator">></span> delegate <span class="token operator">=</span> <span class="token function">toObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBlocking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> Future<span class="token operator">&lt;</span>R<span class="token operator">></span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Future</span><span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> mayInterruptIfRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>HystrixCommand<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executionIsolationThreadInterruptOnFutureCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/*                  * The only valid transition here is false -> true. If there are two futures, say f1 and f2, created by this command                  * (which is super-weird, but has never been prohibited), and calls to f1.cancel(true) and to f2.cancel(false) are                  * issued by different threads, it's unclear about what value would be used by the time mayInterruptOnCancel is checked.                  * The most consistent way to deal with this scenario is to say that if *any* cancellation is invoked with interruption,                  * than that interruption request cannot be taken back.                  */</span>                interruptOnFutureCancel<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> mayInterruptIfRunning<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> res <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span>interruptOnFutureCancel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isExecutionComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> interruptOnFutureCancel<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> Thread t <span class="token operator">=</span> executionThread<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> R <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException <span class="token punctuation">{</span>            <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> R <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>            <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* special handling of error states that throw immediately */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> f<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Throwable t <span class="token operator">=</span> <span class="token function">decomposeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">HystrixBadRequestException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> f<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">HystrixRuntimeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                HystrixRuntimeException hre <span class="token operator">=</span> <span class="token punctuation">(</span>HystrixRuntimeException<span class="token punctuation">)</span> t<span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>hre<span class="token punctuation">.</span><span class="token function">getFailureType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> COMMAND_EXCEPTION<span class="token operator">:</span>                    <span class="token keyword">case</span> TIMEOUT<span class="token operator">:</span>                        <span class="token comment" spellcheck="true">// we don't throw these types from queue() only from queue().get() as they are execution errors</span>                        <span class="token keyword">return</span> f<span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        <span class="token comment" spellcheck="true">// these are errors we throw from queue() as they as rejection type errors</span>                        <span class="token keyword">throw</span> hre<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> Exceptions<span class="token punctuation">.</span><span class="token function">sneakyThrow</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>delegate 对象由 toObservable() 创建，toObservable() 中调用了 applyHystrixSemantics() 方法</p><pre class=" language-java"><code class="language-java">Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> hystrixObservable <span class="token operator">=</span>        Observable<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span>applyHystrixSemantics<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>wrapWithAllOnNextHooks<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 applyHystrixSemantics 中先通过 circuitBreaker.allowRequest() 判断是否允许当前请求，如果允许执行后续逻辑；否则 调用 handleShortCircuitViaFallback 执行 fallback 方法。</p><p>handleShortCircuitViaFallback 的调用路劲为：handleShortCircuitViaFallback() -&gt; getFallbackOrThrowException() -&gt; getFallbackObservable() -&gt; HystrixCommand.getFallbackObservable() -&gt; getFallback() -&gt; GenericCommand.getFallback()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Observable<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">applyHystrixSemantics</span><span class="token punctuation">(</span><span class="token keyword">final</span> AbstractCommand<span class="token operator">&lt;</span>R<span class="token operator">></span> _cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// mark that we're starting execution on the ExecutionHook</span>    <span class="token comment" spellcheck="true">// if this hook throws an exception, then a fast-fail occurs with no fallback.  No state is left inconsistent</span>    executionHook<span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* determine if we're allowed to execute */</span>    <span class="token comment" spellcheck="true">// 判断是否允许当前请求</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>circuitBreaker<span class="token punctuation">.</span><span class="token function">allowRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> TryableSemaphore executionSemaphore <span class="token operator">=</span> <span class="token function">getExecutionSemaphore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> AtomicBoolean semaphoreHasBeenReleased <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Action0 singleSemaphoreRelease <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>semaphoreHasBeenReleased<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    executionSemaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Action1<span class="token operator">&lt;</span>Throwable<span class="token operator">></span> markExceptionThrown <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Action1</span><span class="token operator">&lt;</span>Throwable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                eventNotifier<span class="token punctuation">.</span><span class="token function">markEvent</span><span class="token punctuation">(</span>HystrixEventType<span class="token punctuation">.</span>EXCEPTION_THROWN<span class="token punctuation">,</span> commandKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取信号量，获取到执行 executeCommandAndObserve 方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>executionSemaphore<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* used to track userThreadExecutionTime */</span>                executionResult <span class="token operator">=</span> executionResult<span class="token punctuation">.</span><span class="token function">setInvocationStartTime</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">executeCommandAndObserve</span><span class="token punctuation">(</span>_cmd<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">doOnError</span><span class="token punctuation">(</span>markExceptionThrown<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">doOnTerminate</span><span class="token punctuation">(</span>singleSemaphoreRelease<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">doOnUnsubscribe</span><span class="token punctuation">(</span>singleSemaphoreRelease<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Observable<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 拒绝，执行fallback方法</span>            <span class="token keyword">return</span> <span class="token function">handleSemaphoreRejectionViaFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 不允许执行，直接调用fallback</span>        <span class="token keyword">return</span> <span class="token function">handleShortCircuitViaFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过以上多次调用后，最终到 GenericCommand.run()</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> Object <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"execute command: {}"</span><span class="token punctuation">,</span> <span class="token function">getCommandKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>Object <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">getCommandAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token function">getExecutionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Cloud学习】-3.Spring Cloud Hystrix 服务降级</title>
      <link href="posts/d1dde1f.html"/>
      <url>posts/d1dde1f.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>In a distributed environment, inevitably some of the many service dependencies will fail. Hystrix is a library that helps you control the interactions between these distributed services by adding latency tolerance and fault tolerance logic. Hystrix does this by isolating points of access between the services, stopping cascading failures across them, and providing fallback options, all of which improve your system’s overall resiliency.</p></blockquote><p>在分布式环境中，不可避免地会有许多服务依赖项中的某些失败。 Hystrix是一个库，可通过添加等待时间容限和容错逻辑来帮助您控制这些分布式服务之间的交互。 Hystrix通过隔离服务之间的访问点，停止服务之间的级联故障并提供后备选项来实现此目的，所有这些都可以提高系统的整体弹性。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ul><li>Preventing any single dependency from using up all container (such as Tomcat) user threads:  防止任何单个依赖项耗尽所有容器（例如Tomcat）用户线程</li><li>Shedding load and failing fast instead of queueing: 减少负载并快速失败，而不是排队</li><li>Providing fallbacks wherever feasible to protect users from failure: 在可行的情况下提供备用，以保护用户免受故障的影响</li><li>Using isolation techniques (such as bulkhead, swimlane, and circuit breaker patterns) to limit the impact of any one dependency: 使用隔离技术（如bulkhead，swimlane和 circuit breaker patterns）来限制任何一种依赖关系的影响</li><li>Optimizing for time-to-discovery through near real-time metrics, monitoring, and alerting: 提供实时监控、报警等手段</li><li>Optimizing for time-to-recovery by means of low latency propagation of configuration changes and support for dynamic property changes in most aspects of Hystrix, which allows you to make real-time operational modifications with low latency feedback loops: 支持动态属性更改，这使您可以通过低延迟反馈回路进行实时操作修改</li><li>Protecting against failures in the entire dependency client execution, not just in the network traffic: 防止整个依赖客户端执行失败，而不仅仅是网络流请求的客户端</li></ul><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE、Spring Cloud Hoxton.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><p>总体结构说明：</p><ul><li>hystrix-demo： hystrix 的简单使用例子</li></ul><h2 id="3-1-hystrix-demo"><a href="#3-1-hystrix-demo" class="headerlink" title="3.1 hystrix-demo"></a>3.1 hystrix-demo</h2><p><strong>3.1.1 代码说明</strong></p><p>hystrix 使用的例子</p><p><strong>3.1.2 maven 依赖</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>3.1.3 配置文件</strong></p><p>无</p><p><strong>3.1.4 java代码</strong></p><p>DemoController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 设置线程的超时时间是100ms，默认值为50ms     * 如果超时触发降级之后，执行 fallbackMethod 中的 timeoutMethod 方法     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/demo"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">"timeoutMethod"</span><span class="token punctuation">,</span> commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"execution.isolation.thread.timeoutInMilliseconds"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">demo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"time"</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">"50"</span><span class="token punctuation">)</span> String value<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">long</span> timeout <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hystrix demo"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">timeoutMethod</span><span class="token punctuation">(</span>String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"the request cost "</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">" ms, timeout!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用自定义的 HelloCommand 定义降级策略     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HelloCommand.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloCommand</span> <span class="token keyword">extends</span> <span class="token class-name">HystrixCommand</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 继承自 HystrixCommand，定义要支持降级的方法     */</span>    <span class="token keyword">public</span> <span class="token function">HelloCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>HystrixCommandGroupKey<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">asKey</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 正常情况下执行     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> String <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello hystrix command!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 被降级后的执行     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> String <span class="token function">getFallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hystrix command request timeout"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>NetflixHystrixDemoApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableHystrix</span> <span class="token comment" spellcheck="true">// 启用 hystrix</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NetflixHystrixDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NetflixHystrixDemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-git-地址"><a href="#3-2-git-地址" class="headerlink" title="3.2 git 地址"></a>3.2 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-cloud/spring-cloud-01-netflix/spring-cloud-nfx-03-hystrix/hystrix-demo" target="_blank" rel="noopener">spring-cloud-nfx-03-hystrix/hystrix-demo</a>: Spring Cloud 整合 Hystrix 实现的分布式服务降级方案</p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 NetflixHystrixDemoApplication.main 方法，在 netflix-hystrix-demo.http 访问下列地址，观察输出信息是否符合预期。</p><pre class=" language-http"><code class="language-http">### GET /demo?time={value}GET http://localhost:8080/demo?time=120</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200820210921446.png"></p><pre class=" language-http"><code class="language-http">### GET /helloGET http://localhost:8080/hello</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200820210956027.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://github.com/Netflix/hystrix/wiki" target="_blank" rel="noopener">hystrix-wiki</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Hystrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring-Cloud】-2.Spring Cloud Eureka 注册中心原理</title>
      <link href="posts/3d633558.html"/>
      <url>posts/3d633558.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Cloud Eureka：<a href="b857daf6">【Spring Cloud学习】-2.Spring Cloud Eureka 服务注册中心</a></p></blockquote><h2 id="1-EurekaServer-如何启动？"><a href="#1-EurekaServer-如何启动？" class="headerlink" title="1.EurekaServer 如何启动？"></a>1.EurekaServer 如何启动？</h2><p>在使用 @EnableEurekaServer 时，激活了 EurekaServerMarkerConfiguration 配置类，在 EurekaServer 的自动装配类 EurekaServerAutoConfiguration 中，通过构造函数声明了 EurekaController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"eureka.dashboard"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"enabled"</span><span class="token punctuation">,</span>                       matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> EurekaController <span class="token function">eurekaController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EurekaController</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationInfoManager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个 EurekaController 实际上就是访问 <a href="http://localhost:9090/" target="_blank" rel="noopener">http://localhost:9090/</a> 时对应的 eureka 管理后台，它使用spring-mvc 来进行实现。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"${eureka.dashboard.path:/}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${eureka.dashboard.path:/}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String dashboardPath <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ApplicationInfoManager applicationInfoManager<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">EurekaController</span><span class="token punctuation">(</span>ApplicationInfoManager applicationInfoManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationInfoManager <span class="token operator">=</span> applicationInfoManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">status</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">populateBase</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">populateApps</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>        StatusInfo statusInfo<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            statusInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatusResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            statusInfo <span class="token operator">=</span> StatusInfo<span class="token punctuation">.</span>Builder<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isHealthy</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        model<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"statusInfo"</span><span class="token punctuation">,</span> statusInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">populateInstanceInfo</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> statusInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">filterReplicas</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> statusInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"eureka/status"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到 spring-cloud-starter-netflix-eureka-server 的依赖关系如下</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200816165825716.png"></p><h2 id="2-EurekaClient如何注册？"><a href="#2-EurekaClient如何注册？" class="headerlink" title="2.EurekaClient如何注册？"></a>2.EurekaClient如何注册？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/2-1.Eureka%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C.jpg"></p><p>服务启动的时候，会在刷新上下文的时候启动 Lifecycle，EurekaAutoServiceRegistration 是 Lifecycle 的一个实现类，所以会调用它的 start 方法，在 start 方法中通过调用 serviceRegistry.register 方法来进行注册。</p><p>这里的 serviceRegistry 是 EurekaServiceRegistry，EurekaServiceRegistry 实现了 ServiceRegistry 接口，ServiceRegistry 在 spring-cloud-common 中进行定义，它是一个通用的接口，根据实现方案的不同，它还可以是 ConsulServiceRegistry、NacosServiceRegistry、ZookeeperServiceRegistry 等。</p><p>EurekaServiceRegistry#register</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>EurekaRegistration reg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">maybeInitializeClient</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Registering application "</span>                 <span class="token operator">+</span> reg<span class="token punctuation">.</span><span class="token function">getApplicationInfoManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token operator">+</span> <span class="token string">" with eureka with status "</span>                 <span class="token operator">+</span> reg<span class="token punctuation">.</span><span class="token function">getInstanceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInitialStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置实例状态</span>    reg<span class="token punctuation">.</span><span class="token function">getApplicationInfoManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setInstanceStatus</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">getInstanceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInitialStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 健康检查</span>    reg<span class="token punctuation">.</span><span class="token function">getHealthCheckHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifAvailable</span><span class="token punctuation">(</span>healthCheckHandler <span class="token operator">-</span><span class="token operator">></span> reg                                            <span class="token punctuation">.</span><span class="token function">getEurekaClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerHealthCheck</span><span class="token punctuation">(</span>healthCheckHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 setInstanceStatus 中调用 listener.notify 进行通知</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setInstanceStatus</span><span class="token punctuation">(</span>InstanceStatus status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    InstanceStatus next <span class="token operator">=</span> instanceStatusMapper<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    InstanceStatus prev <span class="token operator">=</span> instanceInfo<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>StatusChangeListener listener <span class="token operator">:</span> listeners<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                listener<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatusChangeEvent</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"failed to notify listener: {}"</span><span class="token punctuation">,</span> listener<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的 listeners 通过 registerStatusChangeListener 方法进行注册</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStatusChangeListener</span><span class="token punctuation">(</span>StatusChangeListener listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    listeners<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>listener<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个方法在 DiscoveryClient 中进行调用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> ApplicationInfoManager<span class="token punctuation">.</span>StatusChangeListener statusChangeListener<span class="token punctuation">;</span>statusChangeListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationInfoManager<span class="token punctuation">.</span>StatusChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"statusChangeListener"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span>StatusChangeEvent statusChangeEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>InstanceStatus<span class="token punctuation">.</span>DOWN <span class="token operator">==</span> statusChangeEvent<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>            InstanceStatus<span class="token punctuation">.</span>DOWN <span class="token operator">==</span> statusChangeEvent<span class="token punctuation">.</span><span class="token function">getPreviousStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// log at warn level if DOWN was involved</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Saw local status change event {}"</span><span class="token punctuation">,</span> statusChangeEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Saw local status change event {}"</span><span class="token punctuation">,</span> statusChangeEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        instanceInfoReplicator<span class="token punctuation">.</span><span class="token function">onDemandUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>clientConfig<span class="token punctuation">.</span><span class="token function">shouldOnDemandUpdateStatusChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    applicationInfoManager<span class="token punctuation">.</span><span class="token function">registerStatusChangeListener</span><span class="token punctuation">(</span>statusChangeListener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的 listener 为 ApplicationInfoManager.StatusChangeListener，所以调用到它的 notify 方法；然后调用到 </p><p>instanceInfoReplicator.onDemandUpdate()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onDemandUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rateLimiter<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span>burstSize<span class="token punctuation">,</span> allowedRatePerMinute<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>scheduler<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 开启一个任务</span>            scheduler<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Executing on-demand update of local InstanceInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Future latestPeriodic <span class="token operator">=</span> scheduledPeriodicRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>latestPeriodic <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>latestPeriodic<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Canceling the latest scheduled update, it will be rescheduled at the end of on demand update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        latestPeriodic<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    InstanceInfoReplicator<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Ignoring onDemand update due to stopped scheduler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Ignoring onDemand update due to rate limiter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终调用到 InstanceInfoReplicator.this.run()，通过 discoveryClient.register 进行注册</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 刷新实例信息</span>        discoveryClient<span class="token punctuation">.</span><span class="token function">refreshInstanceInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long dirtyTimestamp <span class="token operator">=</span> instanceInfo<span class="token punctuation">.</span><span class="token function">isDirtyWithTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dirtyTimestamp <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注册</span>            discoveryClient<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            instanceInfo<span class="token punctuation">.</span><span class="token function">unsetIsDirty</span><span class="token punctuation">(</span>dirtyTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"There was a problem with the instance info replicator"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        Future next <span class="token operator">=</span> scheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> replicationIntervalSeconds<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduledPeriodicRef<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>PREFIX <span class="token operator">+</span> <span class="token string">"{}: registering service..."</span><span class="token punctuation">,</span> appPathIdentifier<span class="token punctuation">)</span><span class="token punctuation">;</span>    EurekaHttpResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> httpResponse<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        httpResponse <span class="token operator">=</span> eurekaTransport<span class="token punctuation">.</span>registrationClient<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>instanceInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>PREFIX <span class="token operator">+</span> <span class="token string">"{} - registration failed {}"</span><span class="token punctuation">,</span> appPathIdentifier<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>PREFIX <span class="token operator">+</span> <span class="token string">"{} - registration status: {}"</span><span class="token punctuation">,</span> appPathIdentifier<span class="token punctuation">,</span> httpResponse<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> httpResponse<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Status<span class="token punctuation">.</span>NO_CONTENT<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里使用 jersey 进行了 http 调用，发送 post 请求</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> EurekaHttpResponse<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">register</span><span class="token punctuation">(</span>InstanceInfo info<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 请求路径为 apps/EUREKA-CLIENT-PROVIDER 或 apps/EUREKA-CLIENT-CONSUMER</span>    String urlPath <span class="token operator">=</span> <span class="token string">"apps/"</span> <span class="token operator">+</span> info<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ClientResponse response <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Builder resourceBuilder <span class="token operator">=</span> jerseyClient<span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>serviceUrl<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span>urlPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequestBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addExtraHeaders</span><span class="token punctuation">(</span>resourceBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Post 请求，媒体类型是 json</span>        response <span class="token operator">=</span> resourceBuilder            <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Accept-Encoding"</span><span class="token punctuation">,</span> <span class="token string">"gzip"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_TYPE<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>ClientResponse<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">anEurekaHttpResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token function">headersOf</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Jersey HTTP POST {}/{} with instance {}; statusCode={}"</span><span class="token punctuation">,</span> serviceUrl<span class="token punctuation">,</span> urlPath<span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                         response <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"N/A"</span> <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-EurekaServer处理注册请求"><a href="#3-EurekaServer处理注册请求" class="headerlink" title="3.EurekaServer处理注册请求"></a>3.EurekaServer处理注册请求</h2><p>client 端发送请求后到达 ApplicationResource#addInstance</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@POST</span><span class="token annotation punctuation">@Consumes</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"application/json"</span><span class="token punctuation">,</span> <span class="token string">"application/xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> Response <span class="token function">addInstance</span><span class="token punctuation">(</span>InstanceInfo info<span class="token punctuation">,</span>                            <span class="token annotation punctuation">@HeaderParam</span><span class="token punctuation">(</span>PeerEurekaNode<span class="token punctuation">.</span>HEADER_REPLICATION<span class="token punctuation">)</span> String isReplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Registering instance {} (replication={})"</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isReplication<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// validate that the instanceinfo contains all the necessary required fields</span>    <span class="token comment" spellcheck="true">// 参数校验</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBlank</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token string">"Missing instanceId"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBlank</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getHostName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token string">"Missing hostname"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBlank</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getIPAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token string">"Missing ip address"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBlank</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token string">"Missing appName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>appName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token string">"Mismatched appName, expecting "</span> <span class="token operator">+</span> appName <span class="token operator">+</span> <span class="token string">" but was "</span> <span class="token operator">+</span> info<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getDataCenterInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token string">"Missing dataCenterInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getDataCenterInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token string">"Missing dataCenterInfo Name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// handle cases where clients may be registering with bad DataCenterInfo with missing data</span>    DataCenterInfo dataCenterInfo <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getDataCenterInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dataCenterInfo <span class="token keyword">instanceof</span> <span class="token class-name">UniqueIdentifier</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String dataCenterInfoId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>UniqueIdentifier<span class="token punctuation">)</span> dataCenterInfo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBlank</span><span class="token punctuation">(</span>dataCenterInfoId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> experimental <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>serverConfig<span class="token punctuation">.</span><span class="token function">getExperimental</span><span class="token punctuation">(</span><span class="token string">"registration.validation.dataCenterInfoId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>experimental<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String entity <span class="token operator">=</span> <span class="token string">"DataCenterInfo of type "</span> <span class="token operator">+</span> dataCenterInfo<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" must contain a valid id"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dataCenterInfo <span class="token keyword">instanceof</span> <span class="token class-name">AmazonInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                AmazonInfo amazonInfo <span class="token operator">=</span> <span class="token punctuation">(</span>AmazonInfo<span class="token punctuation">)</span> dataCenterInfo<span class="token punctuation">;</span>                String effectiveId <span class="token operator">=</span> amazonInfo<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>AmazonInfo<span class="token punctuation">.</span>MetaDataKey<span class="token punctuation">.</span>instanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>effectiveId <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    amazonInfo<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>AmazonInfo<span class="token punctuation">.</span>MetaDataKey<span class="token punctuation">.</span>instanceId<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Registering DataCenterInfo of type {} without an appropriate id"</span><span class="token punctuation">,</span> dataCenterInfo<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注册</span>    registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>isReplication<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">204</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 204 to be backwards compatible</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/2-2.EurekaServer%E6%8E%A5%E6%94%B6%E6%B3%A8%E5%86%8C%E8%AF%B7%E6%B1%82.jpg"></p><p>这里的 registry 是 PeerAwareInstanceRegistry，它的类图如下</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200816181121049.png"></p><p>最终调用的 register 方法在 AbstractInstanceRegistry 中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>InstanceInfo registrant<span class="token punctuation">,</span> <span class="token keyword">int</span> leaseDuration<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isReplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        read<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从registry中获取当前app的实例信息map</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Lease<span class="token operator">&lt;</span>InstanceInfo<span class="token operator">>></span> gMap <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 增加注册次数</span>        REGISTER<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>isReplication<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果是第一次注册，初始化一个ConcurrentHashMap</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>gMap <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> ConcurrentHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Lease<span class="token operator">&lt;</span>InstanceInfo<span class="token operator">>></span> gNewMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Lease<span class="token operator">&lt;</span>InstanceInfo<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            gMap <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> gNewMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>gMap <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                gMap <span class="token operator">=</span> gNewMap<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从gMap中获取存在的Lease信息</span>        Lease<span class="token operator">&lt;</span>InstanceInfo<span class="token operator">></span> existingLease <span class="token operator">=</span> gMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Retain the last dirty timestamp without overwriting it, if there is already a lease</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>existingLease <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>existingLease<span class="token punctuation">.</span><span class="token function">getHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Long existingLastDirtyTimestamp <span class="token operator">=</span> existingLease<span class="token punctuation">.</span><span class="token function">getHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLastDirtyTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Long registrationLastDirtyTimestamp <span class="token operator">=</span> registrant<span class="token punctuation">.</span><span class="token function">getLastDirtyTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Existing lease found (existing={}, provided={}"</span><span class="token punctuation">,</span> existingLastDirtyTimestamp<span class="token punctuation">,</span> registrationLastDirtyTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// this is a > instead of a >= because if the timestamps are equal, we still take the remote transmitted</span>            <span class="token comment" spellcheck="true">// InstanceInfo instead of the server local copy.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>existingLastDirtyTimestamp <span class="token operator">></span> registrationLastDirtyTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"There is an existing lease and the existing lease's dirty timestamp {} is greater"</span> <span class="token operator">+</span>                            <span class="token string">" than the one that is being registered {}"</span><span class="token punctuation">,</span> existingLastDirtyTimestamp<span class="token punctuation">,</span> registrationLastDirtyTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Using the existing instanceInfo instead of the new instanceInfo as the registrant"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registrant <span class="token operator">=</span> existingLease<span class="token punctuation">.</span><span class="token function">getHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// The lease does not exist and hence it is a new registration</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>expectedNumberOfClientsSendingRenews <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Since the client wants to register it, increase the number of clients sending renews</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>expectedNumberOfClientsSendingRenews <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>expectedNumberOfClientsSendingRenews <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token function">updateRenewsPerMinThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"No previous lease information found; it is new registration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 构建一个Lease</span>        Lease<span class="token operator">&lt;</span>InstanceInfo<span class="token operator">></span> lease <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lease</span><span class="token operator">&lt;</span>InstanceInfo<span class="token operator">></span><span class="token punctuation">(</span>registrant<span class="token punctuation">,</span> leaseDuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>existingLease <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lease<span class="token punctuation">.</span><span class="token function">setServiceUpTimestamp</span><span class="token punctuation">(</span>existingLease<span class="token punctuation">.</span><span class="token function">getServiceUpTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        gMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lease<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>recentRegisteredQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>            recentRegisteredQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>                System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                registrant<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"("</span> <span class="token operator">+</span> registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// This is where the initial state transfer of overridden status happens</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>InstanceStatus<span class="token punctuation">.</span>UNKNOWN<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getOverriddenStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Found overridden status {} for instance {}. Checking to see if needs to be add to the "</span>                         <span class="token operator">+</span> <span class="token string">"overrides"</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getOverriddenStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>overriddenInstanceStatusMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Not found overridden id {} and hence adding it"</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                overriddenInstanceStatusMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getOverriddenStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        InstanceStatus overriddenStatusFromMap <span class="token operator">=</span> overriddenInstanceStatusMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>overriddenStatusFromMap <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Storing overridden status {} from map"</span><span class="token punctuation">,</span> overriddenStatusFromMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            registrant<span class="token punctuation">.</span><span class="token function">setOverriddenStatus</span><span class="token punctuation">(</span>overriddenStatusFromMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Set the status based on the overridden status rules</span>        InstanceStatus overriddenInstanceStatus <span class="token operator">=</span> <span class="token function">getOverriddenInstanceStatus</span><span class="token punctuation">(</span>registrant<span class="token punctuation">,</span> existingLease<span class="token punctuation">,</span> isReplication<span class="token punctuation">)</span><span class="token punctuation">;</span>        registrant<span class="token punctuation">.</span><span class="token function">setStatusWithoutDirty</span><span class="token punctuation">(</span>overriddenInstanceStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 得到Lease实例，判断状态是否为UP</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>InstanceStatus<span class="token punctuation">.</span>UP<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lease<span class="token punctuation">.</span><span class="token function">serviceUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 设置注册类型为新增</span>        registrant<span class="token punctuation">.</span><span class="token function">setActionType</span><span class="token punctuation">(</span>ActionType<span class="token punctuation">.</span>ADDED<span class="token punctuation">)</span><span class="token punctuation">;</span>        recentlyChangedQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecentlyChangedItem</span><span class="token punctuation">(</span>lease<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrant<span class="token punctuation">.</span><span class="token function">setLastUpdatedTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 缓存过期</span>        <span class="token function">invalidateCache</span><span class="token punctuation">(</span>registrant<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getVIPAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getSecureVipAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Registered instance {}/{} with status {} (replication={})"</span><span class="token punctuation">,</span>                    registrant<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> registrant<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isReplication<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        read<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 register 完成之后，有一个 replicateToPeers() 方法，它用来实现集群节点之间信息复制</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">replicateToPeers</span><span class="token punctuation">(</span>Action action<span class="token punctuation">,</span> String appName<span class="token punctuation">,</span> String id<span class="token punctuation">,</span>                              InstanceInfo info <span class="token comment" spellcheck="true">/* optional */</span><span class="token punctuation">,</span>                              InstanceStatus newStatus <span class="token comment" spellcheck="true">/* optional */</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span> isReplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stopwatch tracer <span class="token operator">=</span> action<span class="token punctuation">.</span><span class="token function">getTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isReplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>            numberOfReplicationsLastMin<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// If it is a replication already, do not replicate again as this will create a poison replication</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>peerEurekaNodes <span class="token operator">==</span> Collections<span class="token punctuation">.</span>EMPTY_LIST <span class="token operator">||</span> isReplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取到所有的node</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> PeerEurekaNode node <span class="token operator">:</span> peerEurekaNodes<span class="token punctuation">.</span><span class="token function">getPeerEurekaNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// If the url represents this host, do not replicate to yourself.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>peerEurekaNodes<span class="token punctuation">.</span><span class="token function">isThisMyUrl</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getServiceUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 复制实例信息到每个node</span>            <span class="token function">replicateInstanceActionsToPeers</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> info<span class="token punctuation">,</span> newStatus<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        tracer<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>replicateInstanceActionsToPeers 实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">replicateInstanceActionsToPeers</span><span class="token punctuation">(</span>Action action<span class="token punctuation">,</span> String appName<span class="token punctuation">,</span>                                             String id<span class="token punctuation">,</span> InstanceInfo info<span class="token punctuation">,</span> InstanceStatus newStatus<span class="token punctuation">,</span>                                             PeerEurekaNode node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        InstanceInfo infoFromRegistry <span class="token operator">=</span> null<span class="token punctuation">;</span>        CurrentRequestVersion<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Version<span class="token punctuation">.</span>V2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断操作类型</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">case</span> Cancel<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 取消注册</span>                node<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> Heartbeat<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 心跳</span>                InstanceStatus overriddenStatus <span class="token operator">=</span> overriddenInstanceStatusMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                infoFromRegistry <span class="token operator">=</span> <span class="token function">getInstanceByAppAndId</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token punctuation">.</span><span class="token function">heartbeat</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> infoFromRegistry<span class="token punctuation">,</span> overriddenStatus<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> Register<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 注册</span>                node<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> StatusUpdate<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 状态变更</span>                infoFromRegistry <span class="token operator">=</span> <span class="token function">getInstanceByAppAndId</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token punctuation">.</span><span class="token function">statusUpdate</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> newStatus<span class="token punctuation">,</span> infoFromRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> DeleteStatusOverride<span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 删除被重写的实例</span>                infoFromRegistry <span class="token operator">=</span> <span class="token function">getInstanceByAppAndId</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token punctuation">.</span><span class="token function">deleteStatusOverride</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> id<span class="token punctuation">,</span> infoFromRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Cannot replicate information to {} for action {}"</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token function">getServiceUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> action<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Cloud学习】-2.Spring Cloud Eureka 服务注册中心</title>
      <link href="posts/b857daf6.html"/>
      <url>posts/b857daf6.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Service Discovery is one of the key tenets of a microservice-based architecture. Trying to hand-configure each client or some form of convention can be difficult to do and can be brittle. Eureka is the Netflix Service Discovery Server and Client. The server can be configured and deployed to be highly available, with each server replicating state about the registered services to the others.</p></blockquote><p>服务发现是基于微服务的体系结构的主要宗旨之一。尝试手动配置每个客户端或某种形式的约定可能很困难并且很脆弱。 Eureka是Netflix Service Discovery服务器和客户端。可以将服务器配置和部署为高度可用，每个服务器将有关已注册服务的状态复制到其他服务器。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><blockquote><p>The Eureka server does not have a back end store, but the service instances in the registry all have to send heartbeats to keep their registrations up to date (so this can be done in memory). Clients also have an in-memory cache of Eureka registrations (so they do not have to go to the registry for every request to a service).</p><p>By default, every Eureka server is also a Eureka client and requires (at least one) service URL to locate a peer. If you do not provide it, the service runs and works, but it fills your logs with a lot of noise about not being able to register with the peer.</p></blockquote><p>Eureka服务器没有后端存储，但是注册表中的所有服务实例都必须发送心跳信号以使其注册保持最新（这样可以在内存中完成）。客户端还具有Eureka注册的内存缓存（因此，不用每个请求都转发到注册中心）。</p><p>默认情况下，每个Eureka服务器也是Eureka客户端，并且需要（至少一个）服务URL来定位对等方。如果您不提供该服务，则该服务将运行并工作，但是它将使您的日志充满无法注册到对等方的噪音。</p><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE、Spring Cloud Hoxton.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200811220929570.png"></p><ul><li>nfx-eureka-client： eureka 客户端，注册到 eureka 服务端：<ul><li>user-api： 公共api，定义实体和接口；</li><li>user-service-provider： 服务提供方，注册到 eureka server</li><li>user-service-consumer： 服务调用方，注册到 eureka server</li></ul></li><li>nfx-eureka-server： eureka 服务端，负责提供服务注册及发现功能。</li></ul><h2 id="3-1-nfx-eureka-server"><a href="#3-1-nfx-eureka-server" class="headerlink" title="3.1 nfx-eureka-server"></a>3.1 nfx-eureka-server</h2><p><strong>3.1.1 代码说明</strong></p><p>eureka 服务端，供客户端进行注册，同时提供服务发现功能。</p><p><strong>3.1.2 maven 依赖</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.1.3 配置文件</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">nfx-eureka-server</span><span class="token comment" spellcheck="true"># 端口号</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9090</span><span class="token comment" spellcheck="true"># 服务注册中心主机名</span><span class="token attr-name">eureka.instance.hostname</span><span class="token punctuation">=</span><span class="token attr-value">localhost</span><span class="token comment" spellcheck="true"># 是否注册自己</span><span class="token attr-name">eureka.client.register-with-eureka</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 是否检索服务</span><span class="token attr-name">eureka.client.fetch-registry</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment" spellcheck="true"># eureka server 地址</span><span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://${eureka.instance.hostname}:${server.port}/eureka/</span></code></pre><p><strong>3.1.4 java代码</strong></p><p>NetflixEurekaServerApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过 @EnableEurekaServer 声明为 eureka 服务端</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NetflixEurekaServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NetflixEurekaServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-nfx-eureka-client"><a href="#3-2-nfx-eureka-client" class="headerlink" title="3.2 nfx-eureka-client"></a>3.2 nfx-eureka-client</h2><h3 id="3-2-1-user-api"><a href="#3-2-1-user-api" class="headerlink" title="3.2.1 user-api"></a>3.2.1 user-api</h3><p><strong>3.2.1.1 代码说明</strong></p><p>公共模型和接口定义</p><p><strong>3.2.1.2 java代码</strong></p><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>UserService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserModel <span class="token function">findById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    UserModel <span class="token function">update</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-2-user-service-provider"><a href="#3-2-2-user-service-provider" class="headerlink" title="3.2.2 user-service-provider"></a>3.2.2 user-service-provider</h3><p><strong>3.2.1 代码说明</strong></p><p>服务提供者，依赖 user-api，实现其中的接口；注册到 eureka server</p><p><strong>3.2.2 maven 依赖</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.soulballad.usage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>user-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.2.3 配置文件</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">eureka-client-provider</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8090</span><span class="token attr-name">eureka.server.host</span><span class="token punctuation">=</span><span class="token attr-value">localhost</span><span class="token attr-name">eureka.server.port</span><span class="token punctuation">=</span><span class="token attr-value">9090</span><span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://${eureka.server.host}:${eureka.server.port}/eureka/</span></code></pre><p><strong>3.2.4 java代码</strong></p><p>UserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 预置两条数据，所以起始值从2开始</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicLong ID_GENERATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模拟数据库操作</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> UserModel<span class="token operator">></span> USER_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"2000-01-02"</span><span class="token punctuation">,</span> <span class="token string">"beijing"</span><span class="token punctuation">,</span> <span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"1990-03-23"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"13888888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>USER_MAP<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">findById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">?</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> id <span class="token operator">=</span> ID_GENERATOR<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">update</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">findById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">update</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserProviderController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/provider/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProviderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/query/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">query</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/delete/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-3-user-service-consumer"><a href="#3-2-3-user-service-consumer" class="headerlink" title="3.2.3 user-service-consumer"></a>3.2.3 user-service-consumer</h3><p><strong>3.2.3.1 代码说明</strong></p><p>服务提供者，依赖 user-api，调用其中的接口；注册到 eureka server</p><p><strong>3.2.2 maven 依赖</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.soulballad.usage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>user-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.2.3 配置文件</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">eureka-client-consumer</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token attr-name">eureka.server.host</span><span class="token punctuation">=</span><span class="token attr-value">localhost</span><span class="token attr-name">eureka.server.port</span><span class="token punctuation">=</span><span class="token attr-value">9090</span><span class="token attr-name">eureka.client.service-url.defaultZone</span><span class="token punctuation">=</span><span class="token attr-value">http://${eureka.server.host}:${eureka.server.port}/eureka/</span></code></pre><p><strong>3.2.4 java代码</strong></p><p>UserServiceProxy.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// user-service-provider 的 application.properties 中 spring.application.name + prefix</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String USER_PROVIDER_PREFIX <span class="token operator">=</span> <span class="token string">"http://eureka-client-provider"</span> <span class="token operator">+</span> <span class="token string">"/provider/user"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在 UserServiceConsumerApplication 进行声明</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel<span class="token punctuation">[</span><span class="token punctuation">]</span> userArray <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>USER_PROVIDER_PREFIX <span class="token operator">+</span> <span class="token string">"/list"</span><span class="token punctuation">,</span> UserModel<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>userArray <span class="token operator">!=</span> null <span class="token operator">?</span> userArray <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">findById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>USER_PROVIDER_PREFIX <span class="token operator">+</span> <span class="token string">"/query/{id}"</span><span class="token punctuation">,</span> UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>USER_PROVIDER_PREFIX <span class="token operator">+</span> <span class="token string">"/add"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">,</span> UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">update</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        restTemplate<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>USER_PROVIDER_PREFIX <span class="token operator">+</span> <span class="token string">"/update"</span><span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findById</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> <span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        restTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>USER_PROVIDER_PREFIX <span class="token operator">+</span> <span class="token string">"/delete/{id}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserConsumerController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserConsumerController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/query/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">query</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/delete/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserServiceConsumerApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceConsumerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>UserServiceConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 负载均衡</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-git-地址"><a href="#3-3-git-地址" class="headerlink" title="3.3 git 地址"></a>3.3 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-cloud/spring-cloud-01-netflix/spring-cloud-nfx-02-eureka" target="_blank" rel="noopener">spring-cloud-nfx-02-eureka</a>: Spring Cloud 整合 Eureka 实现的分布式注册中心方案</p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><h2 id="4-1-nfx-eureka-server"><a href="#4-1-nfx-eureka-server" class="headerlink" title="4.1 nfx-eureka-server"></a>4.1 nfx-eureka-server</h2><p>启动 eureka 服务端 nfx-eureka-server，访问 <a href="http://localhost:9090，">http://localhost:9090，</a> 可以看到如下页面</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200811222357590.png"></p><p>没有任何服务注册到 nfx-eureka-server 上面来。</p><h2 id="4-2-user-service-provider"><a href="#4-2-user-service-provider" class="headerlink" title="4.2 user-service-provider"></a>4.2 user-service-provider</h2><p>然后再启动 user-service-provider，再次访问 <a href="http://localhost:9090，可以看到服务提供者已经注册上来了">http://localhost:9090，可以看到服务提供者已经注册上来了</a></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200811222733807.png"></p><p>在 netflix-eureka-client-provider 访问下列地址，观察输出信息是否符合预期。</p><p><strong>查询用户列表</strong></p><pre class=" language-http"><code class="language-http">###  GET /provider/user/listGET http://localhost:8090/provider/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200812205346758.png"></p><p><strong>根据id查询用户</strong></p><pre class=" language-http"><code class="language-http">###  GET /provider/user/query/{id}GET http://localhost:8090/provider/user/query/1<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200812205411260.png"></p><p><strong>新增用户</strong></p><pre class=" language-http"><code class="language-http">###  POST /provider/user/addPOST http://localhost:8090/provider/user/add<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"2000-01-01"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"wuhan"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"15999999999"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200812205752360.png"></p><p><strong>更新用户</strong></p><pre class=" language-http"><code class="language-http">###  PUT /provider/user/updatePUT http://localhost:8090/provider/user/update<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1980-01-01"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"guangzhou"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13888888888"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200812205523126.png"></p><p><strong>根据id删除用户</strong></p><pre class=" language-http"><code class="language-http">###  DELETE /provider/user/delete/{id}DELETE http://localhost:8090/provider/user/delete/3<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200812205818683.png"></p><p>可以看到 user-service-provider 提供的接口都可以正常运行</p><h2 id="4-3-user-service-consumer"><a href="#4-3-user-service-consumer" class="headerlink" title="4.3 user-service-consumer"></a>4.3 user-service-consumer</h2><p>然后再启动 user-service-consumer，再次访问 <a href="http://localhost:9090，可以看到服务提供者已经注册上来了">http://localhost:9090，可以看到服务提供者已经注册上来了</a></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200812215328355.png"></p><p>在 netflix-eureka-client-consumer 访问下列地址，观察输出信息是否符合预期。</p><p><strong>查询用户列表</strong></p><pre class=" language-http"><code class="language-http">###  GET /consumer/user/listGET http://localhost:8080/consumer/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200812214433717.png"></p><p><strong>根据id查询用户</strong></p><pre class=" language-http"><code class="language-http">###  GET /consumer/user/query/{id}GET http://localhost:8080/consumer/user/query/1<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200812214516798.png"></p><p><strong>新增用户</strong></p><pre class=" language-http"><code class="language-http">###  POST /consumer/user/addPOST http://localhost:8080/consumer/user/add<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"2000-01-01"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"wuhan"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"15999999999"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200812214548195.png"></p><p><strong>更新用户</strong></p><pre class=" language-http"><code class="language-http">###  PUT /consumer/user/updatePUT http://localhost:8080/consumer/user/update<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1980-01-01"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"shanghang-pudong"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13888888888"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200812214626683.png"></p><p><strong>根据id删除用户</strong></p><pre class=" language-http"><code class="language-http">###  DELETE /consumer/user/delete/{id}DELETE http://localhost:8080/consumer/user/delete/4<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200812214712772.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-cloud-netflix/docs/2.2.4.RELEASE/reference/html/#spring-cloud-eureka-server" target="_blank" rel="noopener">官方文档-Spring Cloud Netflix/Eureka</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring-Cloud】-1.Spring Cloud Ribbon 负载均衡实现原理</title>
      <link href="posts/95da5302.html"/>
      <url>posts/95da5302.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Cloud Ribbon： <a href="883eb3ff">【Spring Cloud学习】-1.Spring Cloud Ribbon 实现负载均衡</a></p></blockquote><h2 id="1-RestTemplate-调用如何负载均衡？"><a href="#1-RestTemplate-调用如何负载均衡？" class="headerlink" title="1.RestTemplate 调用如何负载均衡？"></a>1.RestTemplate 调用如何负载均衡？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/1-1.RestTemplate%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.jpg"></p><p>通过上面的调用流程可以发现，在 createRequest 时，创建了 InterceptingClientHttpRequest</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> ClientHttpRequest <span class="token function">createRequest</span><span class="token punctuation">(</span>URI uri<span class="token punctuation">,</span> HttpMethod httpMethod<span class="token punctuation">,</span> ClientHttpRequestFactory requestFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InterceptingClientHttpRequest</span><span class="token punctuation">(</span>requestFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">,</span> uri<span class="token punctuation">,</span> httpMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以在调用 request.execute 方法时，实际调用的是 InterceptingClientHttpRequest.execute，InterceptingClientHttpRequest 的类图如下</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200811205239027.png"></p><p>所以会先调用 AbstractClientHttpRequest 和 AbstractBufferingClientHttpRequest，最终调用 InterceptingClientHttpRequest 时，构造了一个调用链 execution</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> ClientHttpResponse <span class="token function">executeInternal</span><span class="token punctuation">(</span>HttpHeaders headers<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bufferedOutput<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>   InterceptingRequestExecution requestExecution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterceptingRequestExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> requestExecution<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> bufferedOutput<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>InterceptingRequestExecution 的构造函数中，传入一个 iterator 迭代器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">InterceptingRequestExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>iterator <span class="token operator">=</span> interceptors<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以执行 requestExecution.execute 时，会调用 interceptor 的拦截方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> ClientHttpResponse <span class="token function">execute</span><span class="token punctuation">(</span>HttpRequest request<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ClientHttpRequestInterceptor nextInterceptor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> nextInterceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> body<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ...</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的 interceptor 实际上是 LoadBalancerInterceptor， 所以最终通过 LoadBalancerInterceptor 实现了负载均衡，选择一个服务端进行调用。</p><h2 id="2-关键类是如何初始化的？"><a href="#2-关键类是如何初始化的？" class="headerlink" title="2.关键类是如何初始化的？"></a>2.关键类是如何初始化的？</h2><p>通过上面的分析，发现有几个关键的类：</p><ul><li>InterceptingClientHttpRequestFactory：创建了 InterceptingClientHttpRequest</li><li>InterceptingClientHttpRequest：调用了requestExecution.execute方法，最终执行了拦截器</li><li>LoadBalancerInterceptor：实现负载均衡的拦截器，通过构造函数传入 InterceptingRequestExecution 中</li><li>RibbonLoadBalancerClient： Ribbon 负载均衡客户端</li><li>ZoneAwareLoadBalancer：具体的负载均衡选择器</li></ul><p><strong>InterceptingClientHttpRequestFactory</strong></p><p>RestTemplate 继承自 InterceptingHttpAccessor，所以在 createRequest 中调用 getRequestFactory 方法时，会调用到 InterceptingHttpAccessor.getRequestFactory</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ClientHttpRequestFactory <span class="token function">getRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取 interceptors</span>    List<span class="token operator">&lt;</span>ClientHttpRequestInterceptor<span class="token operator">></span> interceptors <span class="token operator">=</span> <span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClientHttpRequestFactory factory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptingRequestFactory<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化一个 InterceptingClientHttpRequestFactory</span>            factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterceptingClientHttpRequestFactory</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interceptors<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>interceptingRequestFactory <span class="token operator">=</span> factory<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getRequestFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>InterceptingClientHttpRequest</strong></p><p>InterceptingClientHttpRequestFactory 继承自 AbstractClientHttpRequestFactoryWrapper，所以最终是在 InterceptingClientHttpRequestFactory.createRequest 方法中创建了 InterceptingClientHttpRequest 对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> ClientHttpRequest <span class="token function">createRequest</span><span class="token punctuation">(</span>URI uri<span class="token punctuation">,</span> HttpMethod httpMethod<span class="token punctuation">,</span> ClientHttpRequestFactory requestFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InterceptingClientHttpRequest</span><span class="token punctuation">(</span>requestFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">,</span> uri<span class="token punctuation">,</span> httpMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>LoadBalancerInterceptor</strong></p><p>负载均衡有一个自动装配类 LoadBalancerAutoConfiguration，在这个类中有一个 LoadBalancerInterceptorConfig 的内部类，它通过 ribbonInterceptor 方法声明了一个 LoadBalancerInterceptor 对象，然后又通过 restTemplateCustomizer 方法声明了一个 RestTemplateCustomizer对象。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">"org.springframework.retry.support.RetryTemplate"</span><span class="token punctuation">)</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LoadBalancerInterceptorConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> LoadBalancerInterceptor <span class="token function">ribbonInterceptor</span><span class="token punctuation">(</span>        LoadBalancerClient loadBalancerClient<span class="token punctuation">,</span>        LoadBalancerRequestFactory requestFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 声明一个 LoadBalancerInterceptor 拦截器对象</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadBalancerInterceptor</span><span class="token punctuation">(</span>loadBalancerClient<span class="token punctuation">,</span> requestFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> RestTemplateCustomizer <span class="token function">restTemplateCustomizer</span><span class="token punctuation">(</span>        <span class="token keyword">final</span> LoadBalancerInterceptor loadBalancerInterceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里声明了一个匿名类，通过lambda实现了customize方法</span>        <span class="token keyword">return</span> restTemplate <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>ClientHttpRequestInterceptor<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>                restTemplate<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>loadBalancerInterceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>            restTemplate<span class="token punctuation">.</span><span class="token function">setInterceptors</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>RestTemplateCustomizer 是一个接口，它里面只有一个 customize 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RestTemplateCustomizer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>RestTemplate restTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而在 loadBalancedRestTemplateInitializerDeprecated 方法中，这里遍历所有的 customizers，调用它的 customize 方法，所以最终将 loadBalancerInterceptor 放入到了 restTemplate 的 interceptors 字段中。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> SmartInitializingSingleton <span class="token function">loadBalancedRestTemplateInitializerDeprecated</span><span class="token punctuation">(</span>    <span class="token keyword">final</span> ObjectProvider<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>RestTemplateCustomizer<span class="token operator">>></span> restTemplateCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> restTemplateCustomizers<span class="token punctuation">.</span><span class="token function">ifAvailable</span><span class="token punctuation">(</span>customizers <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>RestTemplate restTemplate <span class="token operator">:</span> LoadBalancerAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>restTemplates<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>RestTemplateCustomizer customizer <span class="token operator">:</span> customizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>                customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>restTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>RibbonLoadBalancerClient</strong></p><p>在 RibbonAutoConfiguration#loadBalancerClient 中进行声明</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>LoadBalancerClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> LoadBalancerClient <span class="token function">loadBalancerClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RibbonLoadBalancerClient</span><span class="token punctuation">(</span><span class="token function">springClientFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>ZoneAwareLoadBalancer</strong></p><p>在 RibbonClientConfiguration#ribbonLoadBalancer 中进行声明</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token keyword">public</span> ILoadBalancer <span class="token function">ribbonLoadBalancer</span><span class="token punctuation">(</span>IClientConfig config<span class="token punctuation">,</span>                                        ServerList<span class="token operator">&lt;</span>Server<span class="token operator">></span> serverList<span class="token punctuation">,</span> ServerListFilter<span class="token operator">&lt;</span>Server<span class="token operator">></span> serverListFilter<span class="token punctuation">,</span>                                        IRule rule<span class="token punctuation">,</span> IPing ping<span class="token punctuation">,</span> ServerListUpdater serverListUpdater<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">isSet</span><span class="token punctuation">(</span>ILoadBalancer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertiesFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ILoadBalancer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZoneAwareLoadBalancer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> rule<span class="token punctuation">,</span> ping<span class="token punctuation">,</span> serverList<span class="token punctuation">,</span>                                       serverListFilter<span class="token punctuation">,</span> serverListUpdater<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Cloud学习】-1.Spring Cloud Ribbon 实现负载均衡</title>
      <link href="posts/883eb3ff.html"/>
      <url>posts/883eb3ff.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Ribbon is a client-side load balancer that gives you a lot of control over the behavior of HTTP and TCP clients. Feign already uses Ribbon, so, if you use <code>@FeignClient</code>, this section also applies.</p><p>A central concept in Ribbon is that of the named client. Each load balancer is part of an ensemble of components that work together to contact a remote server on demand, and the ensemble has a name that you give it as an application developer (for example, by using the <code>@FeignClient</code> annotation). On demand, Spring Cloud creates a new ensemble as an <code>ApplicationContext</code> for each named client by using <code>RibbonClientConfiguration</code>. This contains (amongst other things) an <code>ILoadBalancer</code>, a <code>RestClient</code>, and a <code>ServerListFilter</code>.</p></blockquote><p>Ribbon是客户端负载平衡器，可让您对HTTP和TCP客户端的行为进行大量控制。 Feign已经使用了Ribbon，因此，如果使用 <code>@FeignClient</code>，则本节也适用。 </p><p>Ribbon中的中心概念是指定客户端的概念。每个负载平衡器都是组件的一部分，这些组件可以一起工作以按需联系远程服务器，并且该组件具有一个名称，您可以将其命名为应用程序开发人员（例如，使用 <code>@FeignClient</code> 注解）。根据需要，Spring Cloud通过使用 <code>RibbonClientConfiguration</code> 为每个命名客户端创建一个新的集合作为 <code>ApplicationContext</code>。它包含（除其他事项外）一个 <code>ILoadBalancer</code>，一个 <code>RestClient</code> 和一个<code>ServerListFilter</code>。</p><h2 id="1-2-自定义-Ribbon"><a href="#1-2-自定义-Ribbon" class="headerlink" title="1.2 自定义 Ribbon"></a>1.2 自定义 Ribbon</h2><blockquote><p>You can configure some bits of a Ribbon client by using external properties in <code>&lt;client&gt;.ribbon.*</code>, which is similar to using the Netflix APIs natively, except that you can use Spring Boot configuration files. The native options can be inspected as static fields in <a href="https://github.com/Netflix/ribbon/blob/master/ribbon-core/src/main/java/com/netflix/client/config/CommonClientConfigKey.java" target="_blank" rel="noopener"><code>CommonClientConfigKey</code></a> (part of ribbon-core).</p></blockquote><p>您可以使用 <code>&lt;client&gt;.ribbon.*</code>中的外部属性来配置Ribbon客户端的某些地方，这与本机使用Netflix API相似，不同之处在于可以使用Spring Boot配置文件。可以在 <code>CommonClientConfigKey</code>（功能区核心的一部分）中将本地选项检查为静态字段。</p><p>The following list shows the supported properties&gt;:</p><ul><li><code>&lt;clientName&gt;.ribbon.NFLoadBalancerClassName</code>: Should implement <code>ILoadBalancer</code></li><li><code>&lt;clientName&gt;.ribbon.NFLoadBalancerRuleClassName</code>: Should implement <code>IRule</code></li><li><code>&lt;clientName&gt;.ribbon.NFLoadBalancerPingClassName</code>: Should implement <code>IPing</code></li><li><code>&lt;clientName&gt;.ribbon.NIWSServerListClassName</code>: Should implement <code>ServerList</code></li><li><code>&lt;clientName&gt;.ribbon.NIWSServerListFilterClassName</code>: Should implement <code>ServerListFilter</code></li></ul><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE、Spring Cloud Hoxton.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200810222057805.png"></p><ul><li>nfx-ribbon-client：ribbon 客户端，通过 ribbon 负载均衡调用服务；</li><li>nfx-ribbon-server：ribbon 服务端，负责提供服务供客户端调用。</li></ul><h2 id="3-1-nfx-ribbon-server"><a href="#3-1-nfx-ribbon-server" class="headerlink" title="3.1 nfx-ribbon-server"></a>3.1 nfx-ribbon-server</h2><p><strong>3.1.1 代码说明</strong></p><p>提供一个 restful 接口，供客户端调用</p><p><strong>3.1.2 maven 依赖</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.1.3 配置文件</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">nfx-ribbon-server</span><span class="token comment" spellcheck="true"># 配置浮动ip</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">${random.int[8081,8084]}</span></code></pre><p><strong>3.1.4 java代码</strong></p><p>NfxRibbonServerApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NfxRibbonServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NfxRibbonServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>RibbonServerController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/server"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonServerController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>RibbonServerController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/ribbon"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">ribbon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ribbon server is calling!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Ribbon server has started!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-nfx-ribbon-client"><a href="#3-2-nfx-ribbon-client" class="headerlink" title="3.2 nfx-ribbon-client"></a>3.2 nfx-ribbon-client</h2><p><strong>3.2.1 代码说明</strong></p><p>通过 ribbon 的负载均衡机制，调用 server 提供的接口</p><p><strong>3.2.2 maven 依赖</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>3.2.3 配置文件</strong></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">nfx-netflix-ribbon</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8070</span><span class="token attr-name">ribbon.eureka.enable</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 由于没有使用eureka，所以需要配置服务端地址，前面 nfx-ribbon-server 为服务端应用名</span><span class="token attr-name">nfx-ribbon-server.ribbon.listOfServers</span><span class="token punctuation">=</span><span class="token attr-value">localhost:8081,localhost:8082,localhost:8083</span><span class="token attr-name">nfx-ribbon-server.ribbon.ServerListRefreshInterval</span><span class="token punctuation">=</span><span class="token attr-value">1500</span></code></pre><p><strong>3.2.4 java代码</strong></p><p>NfxRibbonClientApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NfxRibbonClientApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NfxRibbonClientApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>RibbonConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> IRule <span class="token function">ribbonRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 轮询策略</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RoundRobinRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>RibbonClientController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/client"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RibbonClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> LoadBalancerClient loadBalancer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 直接使用 ribbon api     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/ribbon"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">ribbon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServiceInstance instance <span class="token operator">=</span> loadBalancer<span class="token punctuation">.</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token string">"nfx-ribbon-server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String host <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ribbon request: "</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ribbon request: "</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> port<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用 restTemplate 调用ribbon     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/rest"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">"http://nfx-ribbon-server/server/ribbon"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-3-git-地址"><a href="#3-3-git-地址" class="headerlink" title="3.3 git 地址"></a>3.3 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-cloud/spring-cloud-01-netflix/spring-cloud-nfx-04-ribbon" target="_blank" rel="noopener">spring-cloud-nfx-04-ribbon</a>: Spring Cloud 整合 Ribbon实现的分布式负载均衡方案</p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动三个 nfx-ribbon-server，端口分别为 8081/8082/8083；</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200810223000569.png"></p><p>然后再启动 nfx-ribbon-client ，在 spring-cloud-netflix-ribbon.http 访问下列地址，观察输出信息是否符合预期。</p><pre class=" language-http"><code class="language-http">### GET /client/ribbon （每次返回的地址都是不一样的）GET http://localhost:8070/client/ribbon</code></pre><p>可以看到，由于配置了 RoundRobinRule 的轮询策略，所以会依次输出：ribbon request: localhost:8081、ribbon request: localhost:8082、ribbon request: localhost:8083</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200810223247585.png"> </p><p>在 nfx-ribbon-client 的控制台，可以看到如下内容</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200810223343819.png"></p><pre class=" language-http"><code class="language-http">### GET /client/restGET http://localhost:8070/client/rest</code></pre><p>同理，使用 restTemplate 调用 nfx-ribbon-server 的接口时，会分别在三个控制台打印：<code>ribbon server is calling!</code></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-cloud-netflix/docs/2.2.4.RELEASE/reference/html/#spring-cloud-ribbon" target="_blank" rel="noopener">官方文档-Spring Cloud Netflix/Ribbon</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Ribbon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-16.Spring Boot Starter 加载和解析</title>
      <link href="posts/80c21ac2.html"/>
      <url>posts/80c21ac2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot Starter：<a href="610a5a80">【从零开始学Spring Boot】-17.Spring Boot Starter自定义</a></p></blockquote><h2 id="1-自定义-starter-原理分析"><a href="#1-自定义-starter-原理分析" class="headerlink" title="1.自定义 starter 原理分析"></a>1.自定义 starter 原理分析</h2><p>demo-spring-boot-starter 中 Hello 接口定义了 hello 方法，它又三个实现类，分别是：HelloGirl、HelloJava、HelloWorld。</p><p>它们三个都是在 HelloAutoConfiguration 中进行的声明，声明时通过条件注解 <code>@ConditionalOnProperty</code> 来区分具体要激活的 bean，而条件注解的值通过外部配置传入，所以就将选择权交给了使用者；同时这里还声明了 HelloTemplate，HelloTemplate 需要用到的属性值通过 HelloProperties 从外部配置文件中传入。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200730200120564.png"></p><p>HelloAutoConfiguration 配置在 <code>META-INF\spring.factories</code> 中，spring boot 会通过 SpringFactoriesLoader 来自动加载该位置的类，这是一种 SPI 机制，所以依赖了 demo-spring-boot-starter 的项目，会自动加载 HelloAutoConfiguration 这个装配类。</p><p><code>test-spring-boot-starter</code> 中的 application.properties 中配置了 <code>com.soulballad.hello.java.enable=true</code> 配置，所以会自动激活 HelloJava 的 bean；同时配置的HelloProperties 中其他属性也会一并被加载到上下文中。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200730200329099.png"></p><p>所以在 HelloController 中调用 helloTemplate 的 hello 方式时，最终会调用到 HelloJava 类。</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-17.Spring Boot Starter自定义</title>
      <link href="posts/610a5a80.html"/>
      <url>posts/610a5a80.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>A typical Spring Boot starter contains code to auto-configure and customize the infrastructure of a given technology, let’s call that “acme”. To make it easily extensible, a number of configuration keys in a dedicated namespace can be exposed to the environment. Finally, a single “starter” dependency is provided to help users get started as easily as possible.</p></blockquote><p>典型的Spring Boot Starter包含用于自动配置和自定义特定技术的基础架构的代码，我们称其为“ acme”。为了使其易于扩展，可以将专用命名空间中的许多配置项公开给环境。最后，提供了一个 starter 依赖项，以帮助用户尽可能轻松地使用它。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><blockquote><p>Concretely, a custom starter can contain the following:</p><ul><li>The <code>autoconfigure</code> module that contains the auto-configuration code for “acme”.</li><li>The <code>starter</code> module that provides a dependency to the <code>autoconfigure</code> module as well as “acme” and any additional dependencies that are typically useful. In a nutshell, adding the starter should provide everything needed to start using that library.</li></ul><p>This separation in two modules is in no way necessary. If “acme” has several flavours, options or optional features, then it is better to separate the auto-configuration as you can clearly express the fact some features are optional. Besides, you have the ability to craft a starter that provides an opinion about those optional dependencies. At the same time, others can rely only on the <code>autoconfigure</code> module and craft their own starter with different opinions.</p><p>If the auto-configuration is relatively straightforward and does not have optional feature, merging the two modules in the starter is definitely an option.</p></blockquote><p>具体而言，自定义启动器可以包含以下内容：</p><ul><li>自动配置模块，其中包含“ acme”的自动配置代码。</li><li>启动程序模块，它提供对自动配置模块的依赖以及“ acme”和通常有用的任何其他依赖。简而言之，添加启动程序应提供开始使用该库所需的一切。</li></ul><p>完全没有必要将这两个模块分开。如果“ acme”具有多种功能，选项或可选功能，则最好将自动配置分开，因为您可以清楚地表示某些功能是可选的。此外，您还可以制作一个启动器，以提供有关那些可选依赖项的意见。同时，其他人只能依靠自动配置模块并以不同的意见来制作自己的启动器。如果自动配置相对简单并且不具有可选功能，则将两个模块合并在启动器中绝对是一种选择。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200730193439123.png"></p><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>包含两个项目，两个项目的作用如下：</p><ul><li>demo-spring-boot-starter：自定义的starter，有一个Hello接口和几个实现类，通过自动装配类从外部获取配置来选择具体要激活的实例，同时helloTemplate的模板工具类来调用Hello中的hello方法。</li><li>test-spring-boot-starter：依赖 demo-spring-boot-starter，测试它的功能</li></ul><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><strong>demo-spring-boot-starter</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200730193759728.png"></p><p><strong>test-spring-boot-starter</strong></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200730193916069.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><p><strong>demo-spring-boot-starter</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p><strong>test-spring-boot-starter</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.soulballad.usage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p><strong>demo-spring-boot-starter</strong></p><p>META-INF\spring.factories</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 配置自动装配</span><span class="token attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token attr-value">\  com.soulballad.usage.springboot.autoconfiguration.HelloAutoConfiguration</span></code></pre><p><strong>test-spring-boot-starter</strong></p><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">com.soulballad.hello.java.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">com.soulballad.hello.detail.name</span><span class="token punctuation">=</span><span class="token attr-value">zhangsan</span><span class="token attr-name">com.soulballad.hello.detail.age</span><span class="token punctuation">=</span><span class="token attr-value">20</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p><strong>demo-spring-boot-starter</strong></p><p>Hello.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>HelloGirl.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloGirl</span> <span class="token keyword">implements</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello girl"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HelloJava.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJava</span> <span class="token keyword">implements</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello java"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HelloWorld.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token keyword">implements</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HelloProperties.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> HelloProperties<span class="token punctuation">.</span>HELLO_PREFIX<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HELLO_PREFIX <span class="token operator">=</span> <span class="token string">"com.soulballad.hello"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> detail<span class="token punctuation">;</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> detail<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDetail</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> detail<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>detail <span class="token operator">=</span> detail<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HelloAutoConfiguration.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>HelloProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HelloTemplate <span class="token function">helloTemplate</span><span class="token punctuation">(</span>Hello hello<span class="token punctuation">,</span> HelloProperties helloProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloTemplate</span><span class="token punctuation">(</span>hello<span class="token punctuation">,</span> helloProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> HelloProperties<span class="token punctuation">.</span>HELLO_PREFIX <span class="token operator">+</span> <span class="token string">".world"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"enable"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Hello <span class="token function">helloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> HelloProperties<span class="token punctuation">.</span>HELLO_PREFIX <span class="token operator">+</span> <span class="token string">".java"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"enable"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Hello <span class="token function">helloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloJava</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> HelloProperties<span class="token punctuation">.</span>HELLO_PREFIX <span class="token operator">+</span> <span class="token string">".girl"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"enable"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Hello <span class="token function">helloGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HelloTemplate.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloTemplate</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Hello hello<span class="token punctuation">;</span>    <span class="token keyword">private</span> HelloProperties helloProperties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HelloTemplate</span><span class="token punctuation">(</span>Hello hello<span class="token punctuation">,</span> HelloProperties helloProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hello <span class="token operator">=</span> hello<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>helloProperties <span class="token operator">=</span> helloProperties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> objectMap <span class="token operator">=</span> helloProperties<span class="token punctuation">.</span><span class="token function">getDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String helloName <span class="token operator">=</span> hello<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String description <span class="token operator">=</span> <span class="token string">"helloName: "</span> <span class="token operator">+</span> helloName <span class="token operator">+</span> <span class="token string">", properties: "</span> <span class="token operator">+</span> objectMap<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hello<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>test-spring-boot-starter</strong></p><p>HelloController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HelloTemplate helloTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> helloTemplate<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-11-custom-starter" target="_blank" rel="noopener">spring-boot/spring-boot-11-custom-starter</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>使用maven将 <code>demo-spring-boot-starter</code> 打成 jar 包，然后在 <code>test-spring-boot-starter</code> 中依赖这个 jar包</p><p>启动 <code>test-spring-boot-starter</code> 中 TestSpringBootStarterApplication.main 方法，在 test-spring-boot-starter.http 访问下列地址，观察输出信息是否符合预期。</p><pre class=" language-http"><code class="language-http">### GET /helloGET http://localhost:8080/hello</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200730195430873.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features-custom-starter-naming" target="_blank" rel="noopener">Spring Boot Features/Starter</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Starter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-15.Spring Boot MessageConverter 执行和原理</title>
      <link href="posts/a5bcdca6.html"/>
      <url>posts/a5bcdca6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot MessageConverter：<a href="d815b741">【从零开始学Spring Boot】-16.Spring Boot MessageConverter消息转</a></p></blockquote><h2 id="1-自定义MessageConverter执行流程"><a href="#1-自定义MessageConverter执行流程" class="headerlink" title="1.自定义MessageConverter执行流程"></a>1.自定义MessageConverter执行流程</h2><p>以 UserController#add1 为例，简单分析一下源码</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200729214822124.png" alt="image-20200729214822124.png"></p><p>在 AbstractMessageConverterMethodArgumentResolver#readWithMessageConverters 中有这样一段</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Object <span class="token function">readWithMessageConverters</span><span class="token punctuation">(</span>HttpInputMessage inputMessage<span class="token punctuation">,</span> MethodParameter parameter<span class="token punctuation">,</span> Type targetType<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> HttpMediaTypeNotSupportedException<span class="token punctuation">,</span> HttpMessageNotReadableException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmptyBodyCheckingHttpInputMessage</span><span class="token punctuation">(</span>inputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 遍历所有的 messageConverters</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> converter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converterType <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">)</span> converter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            GenericHttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> genericConverter <span class="token operator">=</span>                <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">GenericHttpMessageConverter</span> <span class="token operator">?</span> <span class="token punctuation">(</span>GenericHttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> converter <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行 canRead 方法，判断是否可以支持当前的 Content-Type</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> null <span class="token operator">?</span> genericConverter<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> contextClass<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span> <span class="token operator">:</span>                <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> converter<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    <span class="token comment" spellcheck="true">// 如果可以支持，判断是否有消息体</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">hasBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 解析前处理逻辑</span>                    HttpInputMessage msgToUse <span class="token operator">=</span>                        <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beforeBodyRead</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 调用 read 方法解析消息内容</span>                    body <span class="token operator">=</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> null <span class="token operator">?</span> genericConverter<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> contextClass<span class="token punctuation">,</span> msgToUse<span class="token punctuation">)</span> <span class="token operator">:</span>                            <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpMessageConverter<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> msgToUse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 解析后处理逻辑</span>                    body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterBodyRead</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> msgToUse<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 消息体为空时处理逻辑</span>                    body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleEmptyBody</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> message<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> converterType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpMessageNotReadableException</span><span class="token punctuation">(</span><span class="token string">"I/O error while reading input message"</span><span class="token punctuation">,</span> ex<span class="token punctuation">,</span> inputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">return</span> body<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里需要遍历 messageConverters 来寻找一个合适的处理器，那么这里的 messageConverters 如何获取到自定义的 HTTPMessageConverter 呢？</p><p>其实，在项目启动的时候，自定义 HTTPMessageConverter 被加载到 applicationContext 中。RequestMappingHandlerAdapter 在初始化完成后，调用其 afterPropertiesSet</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do this first, it may add ResponseBody advice beans</span>    <span class="token function">initControllerAdviceCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取参数处理的 resolvers</span>        List<span class="token operator">&lt;</span>HandlerMethodArgumentResolver<span class="token operator">></span> resolvers <span class="token operator">=</span> <span class="token function">getDefaultArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethodArgumentResolverComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResolvers</span><span class="token punctuation">(</span>resolvers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>initBinderArgumentResolvers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>HandlerMethodArgumentResolver<span class="token operator">></span> resolvers <span class="token operator">=</span> <span class="token function">getDefaultInitBinderArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>initBinderArgumentResolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethodArgumentResolverComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResolvers</span><span class="token punctuation">(</span>resolvers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>HandlerMethodReturnValueHandler<span class="token operator">></span> handlers <span class="token operator">=</span> <span class="token function">getDefaultReturnValueHandlers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerMethodReturnValueHandlerComposite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addHandlers</span><span class="token punctuation">(</span>handlers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 getDefaultArgumentResolvers 中有声明 RequestResponseBodyMethodProcessor 和 RequestPartMethodArgumentResolver，二者都需要调用 getMessageConverters 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> List<span class="token operator">&lt;</span>HandlerMethodArgumentResolver<span class="token operator">></span> <span class="token function">getDefaultArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>HandlerMethodArgumentResolver<span class="token operator">></span> resolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Annotation-based argument resolution</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParamMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParamMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathVariableMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathVariableMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MatrixVariableMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MatrixVariableMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletModelAttributeMethodProcessor</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestResponseBodyMethodProcessor</span><span class="token punctuation">(</span><span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestResponseBodyAdvice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestPartMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestResponseBodyAdvice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestHeaderMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestHeaderMapMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletCookieValueMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExpressionValueMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionAttributeMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestAttributeMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Type-based argument resolution</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletRequestMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletResponseMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpEntityMethodProcessor</span><span class="token punctuation">(</span><span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestResponseBodyAdvice<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedirectAttributesMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ModelMethodProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapMethodProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ErrorsMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionStatusMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UriComponentsBuilderMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Custom arguments</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getCustomArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        resolvers<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">getCustomArgumentResolvers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Catch-all</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RequestParamMethodArgumentResolver</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resolvers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletModelAttributeMethodProcessor</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> resolvers<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的 messageConverters 通过构造函数加入了一部分，也在 WebMvcAutoConfiguration 中进行了扩展。</p><h2 id="2-自定义MessageConverter加载"><a href="#2-自定义MessageConverter加载" class="headerlink" title="2.自定义MessageConverter加载"></a>2.自定义MessageConverter加载</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200729222813002.png" alt="image-20200729222813002.png"></p><p>在 spring boot 启动的时候，会加载到 WebMvcAutoConfiguration.EnableWebMvcConfiguration 中 requestMappingHandlerAdapter 方法，这个方法用来声明一个 RequestMappingHandlerAdapter 的 bean，它又通过调用 super.requestMappingHandlerAdapter 来进行实例化。</p><p>在 super.requestMappingHandlerAdapter 通过<code>adapter.setMessageConverters(getMessageConverters());</code> 将 messageConverters 设置到 adapter 上，这里的 getMessageConverters 实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 配置 messageConverters</span>        <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果messageConverters为空，加载默认的配置</span>            <span class="token function">addDefaultHttpMessageConverters</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 加载扩展的 messageConverter</span>        <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 extendMessageConverters 中通过委派，调用 DelegatingWebMvcConfiguration 的 extendMessageConverters 来扩展 messageConverters，最终调用到 WebMvcConfigurer 的 extendMessageConverters 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>WebMvcConfigurer delegate <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegates<span class="token punctuation">)</span> <span class="token punctuation">{</span>        delegate<span class="token punctuation">.</span><span class="token function">extendMessageConverters</span><span class="token punctuation">(</span>converters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>而 WebMvcConfig 恰好是 WebMvcConfigurer 的实现类，重写了它的 extendMessageConverters 方法，所以自定义的 HTTPMessageConverter 被加载到 RequestMappingHandlerAdapter 中。</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-16.Spring Boot MessageConverter消息转换器</title>
      <link href="posts/d815b741.html"/>
      <url>posts/d815b741.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring MVC uses the <code>HttpMessageConverter</code> interface to convert HTTP requests and responses. Sensible defaults are included out of the box. For example, objects can be automatically converted to JSON (by using the Jackson library) or XML (by using the Jackson XML extension, if available, or by using JAXB if the Jackson XML extension is not available). By default, strings are encoded in <code>UTF-8</code>.</p></blockquote><p>Spring MVC使用HttpMessageConverter接口转换HTTP请求和响应。开箱即用中包含明智的默认设置。例如，可以将对象自动转换为JSON（通过使用Jackson库）或XML（通过使用Jackson XML扩展（如果可用）或通过使用JAXB（如果Jackson XML扩展不可用））。默认情况下，字符串以UTF-8编码。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><p>HttpMessageConverter 是一个接口，它包含以下几个方法</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200729211313871.png"></p><ul><li>canRead： 判断是否支持解析当前 MediaType</li><li>canWrite： 判断是否支持输出当前 MediaType</li><li>getSupportedMediaTypes： 获取支持的 MediaTypes</li><li>read： 解析http消息内容</li><li>write： 输出指定MediaType的消息内容</li></ul><p>这里的MediaType即为http请求中常见的 Content-Type；例如：application/json、application/xml等</p><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>自定义HttpMessageConverter消息转换器，实现消息的解析和输出</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200729212037648.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>无配置</p><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> BigDecimal salary<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> Date birthday<span class="token punctuation">,</span> BigDecimal salary<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>UserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicLong ID_GENERATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> UserModel<span class="token operator">></span> USER_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel user1 <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"23456.11"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user2 <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"12345.67"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"13888888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>USER_MAP<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">findById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> id <span class="token operator">=</span> ID_GENERATOR<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">update</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>WebMvcConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 扩展 MessageConverter，将 PropertiesHttpMessageConverter 放在第一位</span>        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PropertiesHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>PropertiesHttpMessageConverter.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesHttpMessageConverter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHttpMessageConverter</span><span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">PropertiesHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"text/properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultCharset</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">readInternal</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">,</span> HttpInputMessage inputMessage<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> HttpMessageNotReadableException <span class="token punctuation">{</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getDefaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 要求对象必须有无参构造函数</span>        Object instance <span class="token operator">=</span> ReflectUtils<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>field <span class="token operator">-</span><span class="token operator">></span> props<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            String property <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> fieldType <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ReflectionUtils<span class="token punctuation">.</span><span class="token function">setField</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> <span class="token function">resolveFieldValue</span><span class="token punctuation">(</span>property<span class="token punctuation">,</span> fieldType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">writeInternal</span><span class="token punctuation">(</span>Object user<span class="token punctuation">,</span> HttpOutputMessage outputMessage<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> HttpMessageNotReadableException <span class="token punctuation">{</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            String fieldName <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object fieldValue <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>            props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>fieldValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>outputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getDefaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"written by properties message converter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Object <span class="token function">resolveFieldValue</span><span class="token punctuation">(</span>String property<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Short<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Short<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Byte<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Byte<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> property<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Float<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Float<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Double<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> fieldType<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> property<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add1"</span><span class="token punctuation">,</span> consumes <span class="token operator">=</span> <span class="token string">"text/properties"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">add1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add2"</span><span class="token punctuation">,</span> consumes <span class="token operator">=</span> <span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"text/properties"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">add2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-10-message-converter" target="_blank" rel="noopener">spring-boot/spring-boot-10-message-converter</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBoot10MessageConverterApplication.main 方法，在 spring-boot-message-converter.http 访问下列地址，观察输出信息是否符合预期。</p><p><strong>接收 <code>text/properties</code> 类型的参数，输出 <code>application/json</code> 格式内容</strong></p><pre class=" language-http"><code class="language-http">### POST /user/add1POST http://localhost:8080/user/add1<span class="token header-name keyword">Accept:</span> application/json;charset=utf-8<span class="token header-name keyword">Content-Type:</span> text/properties;charset=utf-8name=wangwuage=22birthday=1996-05-05salary=6666.66phone=13555555555</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200729212747549.png"></p><p><strong>接收 <code>application/json</code> 类型的参数，输出 <code>text/properties</code> 格式内容</strong></p><pre class=" language-http"><code class="language-http">### POST /user/add2POST http://localhost:8080/user/add2<span class="token header-name keyword">Accept:</span> text/properties;charset=utf-8<span class="token header-name keyword">Content-Type:</span> application/json;charset=utf-8<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span><span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1996-05-05"</span><span class="token punctuation">,</span><span class="token string">"salary"</span><span class="token punctuation">:</span> <span class="token string">"6666.66"</span><span class="token punctuation">,</span><span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13555555555"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200729212844773.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters" target="_blank" rel="noopener">Spring Boot Features/message-converters</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-14.Spring Boot WebFlux Server 装配及启动</title>
      <link href="posts/f9fd82a8.html"/>
      <url>posts/f9fd82a8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot WebFlux：<a href="30eaadc6">【从零开始学Spring Boot】-15.Spring Boot WebFlux路由</a></p></blockquote><h2 id="1-Webflux-Server-如何启动？"><a href="#1-Webflux-Server-如何启动？" class="headerlink" title="1.Webflux Server 如何启动？"></a>1.Webflux Server 如何启动？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728221934648.png"></p><p>使用 webflux 时，默认的 applicationContext 为 AnnotationConfigReactiveWebServerApplicationContext</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> ConfigurableApplicationContext <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> contextClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContextClass<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>contextClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> SERVLET<span class="token operator">:</span>                    contextClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DEFAULT_SERVLET_WEB_CONTEXT_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> REACTIVE<span class="token operator">:</span>                    contextClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DEFAULT_REACTIVE_WEB_CONTEXT_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    contextClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DEFAULT_CONTEXT_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                <span class="token string">"Unable create a default ApplicationContext, please specify an ApplicationContextClass"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>ConfigurableApplicationContext<span class="token punctuation">)</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以在 AnnotationConfigReactiveWebServerApplicationContext 中进行初始化和启动</p><h2 id="2-Webflux-默认-Server-为何是-Netty？"><a href="#2-Webflux-默认-Server-为何是-Netty？" class="headerlink" title="2.Webflux 默认 Server 为何是 Netty？"></a>2.Webflux 默认 Server 为何是 Netty？</h2><p>先看下 spring-boot-starter-webflux 的依赖结构</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728222250093.png"></p><p>在 spring-boot-autoconfigure/spring.factories 中有一个自动装配的类 ReactiveWebServerFactoryAutoConfiguration</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728222459008.png"></p><p>它的内容如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>ReactiveHttpInputMessage<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> ConditionalOnWebApplication<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>REACTIVE<span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ReactiveWebServerFactoryAutoConfiguration<span class="token punctuation">.</span>BeanPostProcessorsRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         ReactiveWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedTomcat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         ReactiveWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedJetty<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         ReactiveWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedUndertow<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         ReactiveWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedNetty<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveWebServerFactoryAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ReactiveWebServerFactoryCustomizer <span class="token function">reactiveWebServerFactoryCustomizer</span><span class="token punctuation">(</span>ServerProperties serverProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveWebServerFactoryCustomizer</span><span class="token punctuation">(</span>serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"org.apache.catalina.startup.Tomcat"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> TomcatReactiveWebServerFactoryCustomizer <span class="token function">tomcatReactiveWebServerFactoryCustomizer</span><span class="token punctuation">(</span>        ServerProperties serverProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatReactiveWebServerFactoryCustomizer</span><span class="token punctuation">(</span>serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"server.forward-headers-strategy"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"framework"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ForwardedHeaderTransformer <span class="token function">forwardedHeaderTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ForwardedHeaderTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    * Registers a {@link WebServerFactoryCustomizerBeanPostProcessor}. Registered via    * {@link ImportBeanDefinitionRegistrar} for early registration.    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BeanPostProcessorsRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span> BeanFactoryAware <span class="token punctuation">{</span>        <span class="token keyword">private</span> ConfigurableListableBeanFactory beanFactory<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span>BeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> <span class="token punctuation">(</span>ConfigurableListableBeanFactory<span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">registerSyntheticBeanIfMissing</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">"webServerFactoryCustomizerBeanPostProcessor"</span><span class="token punctuation">,</span>                                           WebServerFactoryCustomizerBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerSyntheticBeanIfMissing</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                RootBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                beanDefinition<span class="token punctuation">.</span><span class="token function">setSynthetic</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它里面通过 @Import 分别引入了 EmbeddedTomcat、EmbeddedJetty、EmbeddedUndertow、EmbeddedNetty，它们都是 ReactiveWebServerFactoryConfiguration 的内部类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ReactiveWebServerFactoryConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>ReactiveWebServerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> HttpServer<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedNetty</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        ReactorResourceFactory <span class="token function">reactorServerResourceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReactorResourceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        NettyReactiveWebServerFactory <span class="token function">nettyReactiveWebServerFactory</span><span class="token punctuation">(</span>ReactorResourceFactory resourceFactory<span class="token punctuation">,</span>                                                                    ObjectProvider<span class="token operator">&lt;</span>NettyRouteProvider<span class="token operator">></span> routes<span class="token punctuation">,</span> ObjectProvider<span class="token operator">&lt;</span>NettyServerCustomizer<span class="token operator">></span> serverCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            NettyReactiveWebServerFactory serverFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyReactiveWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverFactory<span class="token punctuation">.</span><span class="token function">setResourceFactory</span><span class="token punctuation">(</span>resourceFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            routes<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>serverFactory<span class="token operator">:</span><span class="token operator">:</span>addRouteProviders<span class="token punctuation">)</span><span class="token punctuation">;</span>            serverFactory<span class="token punctuation">.</span><span class="token function">getServerCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>serverCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> serverFactory<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>ReactiveWebServerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>startup<span class="token punctuation">.</span>Tomcat<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedTomcat</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        TomcatReactiveWebServerFactory <span class="token function">tomcatReactiveWebServerFactory</span><span class="token punctuation">(</span>            ObjectProvider<span class="token operator">&lt;</span>TomcatConnectorCustomizer<span class="token operator">></span> connectorCustomizers<span class="token punctuation">,</span>            ObjectProvider<span class="token operator">&lt;</span>TomcatContextCustomizer<span class="token operator">></span> contextCustomizers<span class="token punctuation">,</span>            ObjectProvider<span class="token operator">&lt;</span>TomcatProtocolHandlerCustomizer<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> protocolHandlerCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TomcatReactiveWebServerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatReactiveWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            factory<span class="token punctuation">.</span><span class="token function">getTomcatConnectorCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>connectorCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            factory<span class="token punctuation">.</span><span class="token function">getTomcatContextCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>contextCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            factory<span class="token punctuation">.</span><span class="token function">getTomcatProtocolHandlerCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>protocolHandlerCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> factory<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>ReactiveWebServerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> org<span class="token punctuation">.</span>eclipse<span class="token punctuation">.</span>jetty<span class="token punctuation">.</span>server<span class="token punctuation">.</span>Server<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedJetty</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        JettyResourceFactory <span class="token function">jettyServerResourceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JettyResourceFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        JettyReactiveWebServerFactory <span class="token function">jettyReactiveWebServerFactory</span><span class="token punctuation">(</span>JettyResourceFactory resourceFactory<span class="token punctuation">,</span>                                                                    ObjectProvider<span class="token operator">&lt;</span>JettyServerCustomizer<span class="token operator">></span> serverCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            JettyReactiveWebServerFactory serverFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JettyReactiveWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverFactory<span class="token punctuation">.</span><span class="token function">getServerCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>serverCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverFactory<span class="token punctuation">.</span><span class="token function">setResourceFactory</span><span class="token punctuation">(</span>resourceFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> serverFactory<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>ReactiveWebServerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Undertow<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedUndertow</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        UndertowReactiveWebServerFactory <span class="token function">undertowReactiveWebServerFactory</span><span class="token punctuation">(</span>            ObjectProvider<span class="token operator">&lt;</span>UndertowBuilderCustomizer<span class="token operator">></span> builderCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            UndertowReactiveWebServerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UndertowReactiveWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            factory<span class="token punctuation">.</span><span class="token function">getBuilderCustomizers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>builderCustomizers<span class="token punctuation">.</span><span class="token function">orderedStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> factory<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它们生效的条件分别是：</p><ul><li>EmbeddedTomcat： @ConditionalOnClass – Tomcat.class(apache)</li><li>EmbeddedJetty： @ConditionalOnClass – Server.class(jetty)</li><li>EmbeddedUndertow： @ConditionalOnClass – Undertow.class</li><li>EmbeddedNetty： @ConditionalOnClass – HttpServer.class</li></ul><p>结合上面的依赖分析，spring-boot-starter-webflux 中依赖了 reactor-netty.jar，而 HttpServer.class 恰好在 reactor-netty.jar 包中，所以 netty 生效。最终使用 EmbeddedNetty 启动服务。</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-15.Spring Boot WebFlux路由</title>
      <link href="posts/30eaadc6.html"/>
      <url>posts/30eaadc6.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>In WebFlux.fn, an HTTP request is handled with a <code>HandlerFunction</code>: a function that takes <code>ServerRequest</code> and returns a delayed <code>ServerResponse</code> (i.e. <code>Mono&lt;ServerResponse&gt;</code>). Both the request and the response object have immutable contracts that offer JDK 8-friendly access to the HTTP request and response. <code>HandlerFunction</code> is the equivalent of the body of a <code>@RequestMapping</code> method in the annotation-based programming model.</p><p>Incoming requests are routed to a handler function with a <code>RouterFunction</code>: a function that takes <code>ServerRequest</code> and returns a delayed <code>HandlerFunction</code> (i.e. <code>Mono&lt;HandlerFunction&gt;</code>). When the router function matches, a handler function is returned; otherwise an empty Mono. <code>RouterFunction</code> is the equivalent of a <code>@RequestMapping</code> annotation, but with the major difference that router functions provide not just data, but also behavior.</p><p><code>RouterFunctions.route()</code> provides a router builder that facilitates the creation of routers, as the following example shows:</p></blockquote><p>在WebFlux.fn中，HTTP请求由HandlerFunction处理：该函数接受ServerRequest并返回延迟的ServerResponse（即Mono <serverresponse>）。请求和响应对象都具有不可变的协定，这些协定为JDK 8提供了对HTTP请求和响应的友好访问。 HandlerFunction等效于基于注释的编程模型中@RequestMapping方法的主体。传入的请求被路由到带有RouterFunction的处理程序函数：该函数接受ServerRequest并返回延迟的HandlerFunction（即Mono <handlerfunction>）。当路由器功能匹配时，返回处理程序功能。否则为空Mono。 RouterFunction等效于@RequestMapping批注，但主要区别在于路由器功能不仅提供数据，而且还提供行为。 RouterFunctions.route() 提供了一个路由器构建器，可简化路由器的创建过程。</handlerfunction></serverresponse></p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><blockquote><p>Router functions are used to route the requests to the corresponding <code>HandlerFunction</code>. Typically, you do not write router functions yourself, but rather use a method on the <code>RouterFunctions</code> utility class to create one. <code>RouterFunctions.route()</code> (no parameters) provides you with a fluent builder for creating a router function, whereas <code>RouterFunctions.route(RequestPredicate, HandlerFunction)</code> offers a direct way to create a router.</p><p>Generally, it is recommended to use the <code>route()</code> builder, as it provides convenient short-cuts for typical mapping scenarios without requiring hard-to-discover static imports. For instance, the router function builder offers the method <code>GET(String, HandlerFunction)</code> to create a mapping for GET requests; and <code>POST(String, HandlerFunction)</code> for POSTs.</p><p>Besides HTTP method-based mapping, the route builder offers a way to introduce additional predicates when mapping to requests. For each HTTP method there is an overloaded variant that takes a <code>RequestPredicate</code> as a parameter, though which additional constraints can be expressed.</p></blockquote><p>路由器功能用于将请求路由到相应的HandlerFunction。通常，您不是自己编写路由器功能，而是使用RouterFunctions实用程序类上的方法创建一个。 RouterFunctions.route()(无参数)为您提供了一个流畅的生成器来创建路由器功能，而RouterFunctions.route(RequestPredicate，HandlerFunction)提供了直接创建路由器的方法。通常，建议使用route()构建器，因为它为典型的映射方案提供了便捷的捷径，而无需发现静态导入。例如，路由器功能构建器提供了GET(String，HandlerFunction)方法来为GET请求创建映射。和POST(String，HandlerFunction)进行POST。除了基于HTTP方法的映射外，路由构建器还提供了一种在映射到请求时引入其他谓词的方法。对于每个HTTP方法，都有一个以RequestPredicate作为参数的重载变体，尽管可以表达其他约束。</p><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>使用 <code>RouterFunction</code> 的方式使用 webflux</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728211754999.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>无配置</p><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>UserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 预置两条数据，所以起始值从2开始</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicLong ID_GENERATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模拟数据库操作</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> UserModel<span class="token operator">></span> USER_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"2000-01-02"</span><span class="token punctuation">,</span> <span class="token string">"beijing"</span><span class="token punctuation">,</span> <span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"1990-03-23"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"13888888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>USER_MAP<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">findById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> id <span class="token operator">=</span> ID_GENERATOR<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">update</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserHandler.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ServerResponse.ok().body(Flux.fromIterable(userRepository.findAll()), UserModel.class);</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>Flux<span class="token punctuation">.</span><span class="token function">fromStream</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">findById</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">,</span> UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span>ServerResponse<span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 404 Not Found</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>            request<span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>userModel <span class="token operator">-</span><span class="token operator">></span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">update</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*request.bodyToMono(UserModel.class)            .flatMap(user -> Mono.justOrEmpty(userRepository.findById(user.getId()))                .then(ServerResponse.ok().body(Mono.just(userRepository.update(user)), UserModel.class))                // .switchIfEmpty(Mono.error(new NotFoundException(String.valueOf(user.getId())))))                .switchIfEmpty(ServerResponse.notFound().build()));*/</span>        <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span>UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>body <span class="token operator">-</span><span class="token operator">></span> Mono<span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>foundUser <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                foundUser<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                foundUser<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                foundUser<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                foundUser<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                foundUser<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>foundUser<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>u <span class="token operator">-</span><span class="token operator">></span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token function">fromObject</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span>ServerResponse<span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">deleteById</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Long id <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">"not found!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 控制台异常：RuntimeException: 30</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">deleteId</span><span class="token punctuation">(</span>ServerRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Long id <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">justOrEmpty</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> ServerResponse<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">switchIfEmpty</span><span class="token punctuation">(</span>ServerResponse<span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserRouter.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RequestPredicates<span class="token punctuation">.</span>DELETE<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RequestPredicates<span class="token punctuation">.</span>GET<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RequestPredicates<span class="token punctuation">.</span>POST<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RequestPredicates<span class="token punctuation">.</span>PUT<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RequestPredicates<span class="token punctuation">.</span>accept<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RequestPredicates<span class="token punctuation">.</span>contentType<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RouterFunctions<span class="token punctuation">.</span>route<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>MediaType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>RouterFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span>ServerResponse<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRouter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserHandler userHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RouterFunction<span class="token operator">&lt;</span>ServerResponse<span class="token operator">></span> <span class="token function">routerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>list<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andRoute</span><span class="token punctuation">(</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/find/{id}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">accept</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>findById<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andRoute</span><span class="token punctuation">(</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/user/add"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>add<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andRoute</span><span class="token punctuation">(</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">"/user/update"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>update<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andRoute</span><span class="token punctuation">(</span><span class="token function">DELETE</span><span class="token punctuation">(</span><span class="token string">"/user/delete/{id}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userHandler<span class="token operator">:</span><span class="token operator">:</span>deleteId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-07-webflux/spring-boot-webflux-router" target="_blank" rel="noopener">spring-boot/spring-boot-07-webflux/spring-boot-webflux-router</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootWebfluxRouterApplication.main 方法，在 spring-boot-webflux-router.http 访问下列地址，观察输出信息是否符合预期。</p><p><strong>查询用户列表</strong></p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728212327686.png"></p><p><strong>根据id查询用户</strong></p><pre class=" language-http"><code class="language-http">### GET /user/find/{id}GET http://localhost:8080/user/find/1<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728212428240.png"></p><p><strong>新增用户</strong></p><pre class=" language-http"><code class="language-http">### POST /user/addPOST http://localhost:8080/user/add<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1995-06-23"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"guangzhou"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13777777777"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728212520918.png"></p><p><strong>更新用户（成功）</strong></p><pre class=" language-http"><code class="language-http">### PUT /user/update successPUT http://localhost:8080/user/update<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"lisi2"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1988-03-23"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"shanghai2"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13888888882"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728212644646.png"></p><p><strong>更新用户（失败）</strong></p><pre class=" language-http"><code class="language-http">### PUT /user/update fail  // 404 Not Found (id)PUT http://localhost:8080/user/update<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">222</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"lisi2"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1988-03-23"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"shanghai2"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13888888882"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728212727205.png"></p><p><strong>删除用户</strong></p><pre class=" language-http"><code class="language-http">### DELETE /user/delete/{id}DELETE http://localhost:8080/user/delete/3<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200728212821991.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/web-reactive.html#webflux-new-framework" target="_blank" rel="noopener">Spring Framework/WebFlux</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> WebFlux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-13.Spring Boot WebFlux 工作流程及原理</title>
      <link href="posts/c79d003e.html"/>
      <url>posts/c79d003e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot WebFlux：<a href="c98023ce">【从零开始学Spring Boot】-14.Spring Boot WebFlux初体验</a></p></blockquote><h2 id="1-Spring-WebFlux-运行流程"><a href="#1-Spring-WebFlux-运行流程" class="headerlink" title="1.Spring  WebFlux 运行流程"></a>1.Spring  WebFlux 运行流程</h2><p>在 Spring Mvc 中处理核心类是 DispatcherServlet，在 Spring WebFlux 中则是 DispatcherHandler。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727221259596.png"></p><ol><li>用户发送请求至请求处理器 DispatcherHandler。</li><li>DispatcherHandler 收到请求调用 handle 方法，判断是否有 handlerMappings ，如果没有直接返回 404；否则执行下一步。</li><li>从 handlerMappings 找到一个处理当前请求的映射器 HandlerMapping，一般使用的是 url 映射器。</li><li>如果没有找到能处理当前请求的映射器，返回404；否则调用 HandlerMapping。</li><li>使用找到的映射器；并从 handlerAdapters 中找到一个适配器；调用适配器的 handle 方法。</li><li>调用完成返回 HandlerResult，里面封装了返回值，映射器，异常等信息。</li><li>将 handlerResult 返回给 DispatcherHandler。</li><li>DispatcherHandler 处理返回的 HandleResult。</li><li>从 resultHandlers 中找到一个结果处理器。</li><li>返回这个结果处理器。</li><li>然后调用它的 handleResult 方法，生成响应信息。</li><li>将响应信息返回，比如直接输出的内容、设置到responseBody中的返回体或者渲染页面等。</li><li>将响应信息返回给 DispatcherHandler 。</li><li>DispatcherHandler 返回响应给用户。</li></ol><h2 id="2-Spring-WebFlux-运行原理"><a href="#2-Spring-WebFlux-运行原理" class="headerlink" title="2.Spring WebFlux 运行原理"></a>2.Spring WebFlux 运行原理</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727231134648.png" alt="image-20200727231134648.png"></p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-14.Spring Boot WebFlux初体验</title>
      <link href="posts/c98023ce.html"/>
      <url>posts/c98023ce.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring WebFlux is the new reactive web framework introduced in Spring Framework 5.0. Unlike Spring MVC, it does not require the Servlet API, is fully asynchronous and non-blocking, and implements the <a href="https://www.reactive-streams.org/" target="_blank" rel="noopener">Reactive Streams</a> specification through <a href="https://projectreactor.io/" target="_blank" rel="noopener">the Reactor project</a>.</p><p>Spring WebFlux comes in two flavors: functional and annotation-based. The annotation-based one is quite close to the Spring MVC model, as shown in the following example:</p></blockquote><p>Spring WebFlux 是 Spring Framework 5.0 中引入的新的响应式Web框架。与Spring MVC不同，它不需要Servlet API，是完全异步和非阻塞的，并且通过Reactor项目实现Reactive Streams规范。 Spring WebFlux有两种形式：功能性的和基于注释的。基于注释的模型非常类似于Spring MVC模型，如本文所示</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><blockquote><p>Reactive Streams plays an important role for interoperability. It is of interest to libraries and infrastructure components but less useful as an application API, because it is too low-level. Applications need a higher-level and richer, functional API to compose async logic — similar to the Java 8 <code>Stream</code> API but not only for collections. This is the role that reactive libraries play.</p><p><a href="https://github.com/reactor/reactor" target="_blank" rel="noopener">Reactor</a> is the reactive library of choice for Spring WebFlux. It provides the <a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html" target="_blank" rel="noopener"><code>Mono</code></a> and <a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html" target="_blank" rel="noopener"><code>Flux</code></a> API types to work on data sequences of 0..1 (<code>Mono</code>) and 0..N (<code>Flux</code>) through a rich set of operators aligned with the ReactiveX <a href="http://reactivex.io/documentation/operators.html" target="_blank" rel="noopener">vocabulary of operators</a>. Reactor is a Reactive Streams library and, therefore, all of its operators support non-blocking back pressure. Reactor has a strong focus on server-side Java. It is developed in close collaboration with Spring.</p><p>WebFlux requires Reactor as a core dependency but it is interoperable with other reactive libraries via Reactive Streams. As a general rule, a WebFlux API accepts a plain <code>Publisher</code> as input, adapts it to a Reactor type internally, uses that, and returns either a <code>Flux</code> or a <code>Mono</code> as output. So, you can pass any <code>Publisher</code> as input and you can apply operations on the output, but you need to adapt the output for use with another reactive library. Whenever feasible (for example, annotated controllers), WebFlux adapts transparently to the use of RxJava or another reactive library. See <a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/web-reactive.html#webflux-reactive-libraries" target="_blank" rel="noopener">Reactive Libraries</a> for more details.</p></blockquote><p>响应流对于互操作性起着重要作用。库和基础结构组件对此很感兴趣，但由于它太底层了，它作为应用程序API的用处不大。应用程序需要更高级别且功能更丰富的API来构成异步逻辑，这与Java 8 Stream API相似，但不仅适用于集合。这就是反应式库的作用。 </p><p>Reactor是Spring WebFlux的首选反应库。它提供了Mono和Flux API类型，以通过与ReactiveX运算符词汇对齐的一组丰富的运算符来处理 0..1 (<code>Mono</code>) 和 0..N (<code>Flux</code>) 的数据序列。 Reactor是Reactive Streams库，因此，它的所有运算符都支持无阻塞背压。 Reactor非常注重服务器端Java。它是与Spring紧密合作开发的。 </p><p>WebFlux需要Reactor作为核心依赖项，但是它可以通过Reactive Streams与其他React库进行互操作。通常，WebFlux API接受普通的发布者作为输入，在内部将其适应于Reactor类型，使用该类型，然后返回 <code>Flux</code> 或<code>Mono</code> 作为输出。因此，您可以将任何发布服务器作为输入传递，并且可以对输出应用操作，但是您需要调整输出以与其他反应式库一起使用。只要可行（例如，带注释的控制器），WebFlux就会透明地适应RxJava或其他反应式库的使用。有关更多详细信息，请参见反应式库。</p><h2 id="1-3-对比"><a href="#1-3-对比" class="headerlink" title="1.3 对比"></a>1.3 对比</h2><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>通过 <code>@RestController</code> 类似 Spring Mvc 的方式演示 Spring WebFlux 的使用</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727203818388.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>无内容</p><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>UserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 预置两条数据，所以起始值从2开始</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicLong ID_GENERATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模拟数据库操作</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> UserModel<span class="token operator">></span> USER_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"2000-01-02"</span><span class="token punctuation">,</span> <span class="token string">"beijing"</span><span class="token punctuation">,</span> <span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span>2L<span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"1990-03-23"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"13888888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>USER_MAP<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">findById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> id <span class="token operator">=</span> ID_GENERATOR<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">update</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Flux<span class="token punctuation">.</span><span class="token function">fromStream</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/find/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/delete/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Mono<span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-07-webflux/spring-boot-webflux-demo" target="_blank" rel="noopener">spring-boot/spring-boot-07-webflux/spring-boot-webflux-demo</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootWebfluxDemoApplication.main 方法，在 spring-boot-webflux-demo.http 访问下列地址，观察输出信息是否符合预期。</p><p><strong>查询用户列表</strong></p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727204816422.png"></p><p><strong>根据id查询用户</strong></p><pre class=" language-http"><code class="language-http">### GET /user/find/{id}GET http://localhost:8080/user/find/1<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727204913432.png"></p><p><strong>新增用户</strong></p><pre class=" language-http"><code class="language-http">### POST /user/addPOST http://localhost:8080/user/add<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1995-06-23"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"guangzhou"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13777777777"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727204953806.png"></p><p><strong>修改用户</strong></p><pre class=" language-http"><code class="language-http">### PUT /user/updatePUT http://localhost:8080/user/update<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"lisi2"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1988-03-23"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"shanghai2"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13888888882"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727205119947.png"></p><p><strong>根据id删除用户</strong></p><pre class=" language-http"><code class="language-http">### DELETE /user/delete/{id}DELETE http://localhost:8080/user/delete/3<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727205246770.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features" target="_blank" rel="noopener">Spring-Boot-Features/WebFlux</a></li><li><a href="https://docs.spring.io/spring/docs/5.2.7.RELEASE/spring-framework-reference/web-reactive.html#webflux-new-framework" target="_blank" rel="noopener">Spring Framework/WebFlux</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> WebFlux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-13.Spring Boot Jpa多数据源</title>
      <link href="posts/c3139111.html"/>
      <url>posts/c3139111.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>在实际项目中一般是一个数据源，但是在某些特殊场景可能需要多个数据源，这里以 spring boot jpa 为例演示一下多数据源的配置和使用。</p><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>配置两个数据源，分别是 masterDataSource 和 slaveDataSource，它们由两个配置类 MasterConfiguration 和 SlaveConfiguration 来加载，分别扫描不同路径下的 repository。最后通过测试类来调用。</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727200503199.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># master 数据源</span><span class="token attr-name">spring.datasource.master.jdbc-url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://172.16.11.125:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><span class="token attr-name">spring.datasource.master.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.master.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">spring.datasource.master.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment" spellcheck="true"># slave 数据源</span><span class="token attr-name">spring.datasource.slave.jdbc-url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://172.16.11.125:3306/test_jpa?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><span class="token attr-name">spring.datasource.slave.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.slave.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">spring.datasource.slave.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment" spellcheck="true"># 打印sql、自动建表、格式化sql</span><span class="token attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.jpa.generate-ddl</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token attr-value">create</span><span class="token attr-name">spring.jpa.properties.hibernate.format_sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.jpa.properties.hibernate.hbm2ddl.auto</span><span class="token punctuation">=</span><span class="token attr-value">create</span><span class="token attr-name">spring.jpa.properties.hibernate.dialect</span><span class="token punctuation">=</span><span class="token attr-value">org.hibernate.dialect.MySQL5InnoDBDialect</span><span class="token comment" spellcheck="true"># 日志打印</span><span class="token attr-name">logging.level.root</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span><span class="token attr-name">logging.level.org.hibernate</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span><span class="token attr-name">logging.level.org.hibernate.type.descriptor.sql.BasicBinder</span><span class="token punctuation">=</span><span class="token attr-value">TRACE</span><span class="token attr-name">logging.level.org.hibernate.type.descriptor.sql.BasicExtractor</span><span class="token punctuation">=</span><span class="token attr-value">TRACE</span><span class="token attr-name">logging.level.com.soulballad.usage</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>MasterUserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MasterUserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>UserModel<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>    UserModel <span class="token function">findByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    UserModel <span class="token function">findByPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>SlaveUserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SlaveUserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>UserModel<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>    UserModel <span class="token function">findByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    UserModel <span class="token function">findByPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>DataSourceConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JpaProperties jpaProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HibernateProperties hibernateProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"masterDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.master"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">masterDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"slaveDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.slave"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">slaveDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"vendorProperties"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getVendorProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hibernateProperties<span class="token punctuation">.</span><span class="token function">determineHibernateProperties</span><span class="token punctuation">(</span>jpaProperties<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HibernateSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MasterConfiguration.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>entityManagerFactoryRef <span class="token operator">=</span> <span class="token string">"entityManagerFactoryMaster"</span><span class="token punctuation">,</span>    transactionManagerRef <span class="token operator">=</span> <span class="token string">"transactionManagerMaster"</span><span class="token punctuation">,</span>    basePackages <span class="token operator">=</span> <span class="token string">"com.soulballad.usage.springboot.repository.master"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// repo(dao)所在位置</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MasterConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"masterDataSource"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> DataSource masterDataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"vendorProperties"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> vendorProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"entityManagerFactoryMaster"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="token function">entityManagerFactoryBean</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>masterDataSource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span>vendorProperties<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">packages</span><span class="token punctuation">(</span><span class="token string">"com.soulballad.usage.springboot.model"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 实体类所在位置</span>            <span class="token punctuation">.</span><span class="token function">persistenceUnit</span><span class="token punctuation">(</span><span class="token string">"masterPersistenceUnit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"entityManagerMaster"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> EntityManager <span class="token function">entityManager</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">entityManagerFactoryBean</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"transactionManagerMaster"</span><span class="token punctuation">)</span>    PlatformTransactionManager <span class="token function">transactionManager</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JpaTransactionManager</span><span class="token punctuation">(</span><span class="token function">entityManagerFactoryBean</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SlaveConfiguration.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>entityManagerFactoryRef <span class="token operator">=</span> <span class="token string">"entityManageFactorySlave"</span><span class="token punctuation">,</span>    transactionManagerRef <span class="token operator">=</span> <span class="token string">"transactionManagerSlave"</span><span class="token punctuation">,</span>    basePackages <span class="token operator">=</span> <span class="token string">"com.soulballad.usage.springboot.repository.slave"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SlaveConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"slaveDataSource"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> DataSource slaveDataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"vendorProperties"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> vendorProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"entityManageFactorySlave"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="token function">entityManagerFactoryBean</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>slaveDataSource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span>vendorProperties<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">packages</span><span class="token punctuation">(</span><span class="token string">"com.soulballad.usage.springboot.model"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">persistenceUnit</span><span class="token punctuation">(</span><span class="token string">"slavePersistenceUnit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"entityManageSlave"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> EntityManager <span class="token function">entityManager</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">entityManagerFactoryBean</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"transactionManagerSlave"</span><span class="token punctuation">)</span>    PlatformTransactionManager <span class="token function">transactionManager</span><span class="token punctuation">(</span>EntityManagerFactoryBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JpaTransactionManager</span><span class="token punctuation">(</span><span class="token function">entityManagerFactoryBean</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>测试类</strong>：</p><p>UserRepositoryTest.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepositoryTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MasterUserRepository masterUserRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> SlaveUserRepository slaveUserRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"2000-01-01"</span><span class="token punctuation">,</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span> <span class="token string">"13888888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"1999-01-01"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"13777777777"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"1998-01-01"</span><span class="token punctuation">,</span> <span class="token string">"beijing"</span><span class="token punctuation">,</span> <span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"zhaoliu"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"1997-01-01"</span><span class="token punctuation">,</span> <span class="token string">"guangzhou"</span><span class="token punctuation">,</span> <span class="token string">"13555555555"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel user5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"sunqi"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"1996-01-01"</span><span class="token punctuation">,</span> <span class="token string">"wuhan"</span><span class="token punctuation">,</span> <span class="token string">"13444444444"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> userList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">,</span> user4<span class="token punctuation">,</span> user5<span class="token punctuation">)</span><span class="token punctuation">;</span>        masterUserRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>        slaveUserRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_findByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel masterUser <span class="token operator">=</span> masterUserRepository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel slaveUser <span class="token operator">=</span> slaveUserRepository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>masterUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>slaveUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_findUserByPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel masterUser <span class="token operator">=</span> masterUserRepository<span class="token punctuation">.</span><span class="token function">findByPhone</span><span class="token punctuation">(</span><span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserModel slaveUser <span class="token operator">=</span> slaveUserRepository<span class="token punctuation">.</span><span class="token function">findByPhone</span><span class="token punctuation">(</span><span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>masterUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>slaveUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-06-jdbc/spring-boot-multi-datasource" target="_blank" rel="noopener">spring-boot/spring-boot-06-jdbc/spring-boot-multi-datasource</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootMultiDatasourceApplication.main 方法，执行测试类 UserRepositoryTest 中方法，观察结果是否符合预期。</p><p>UserRepositoryTest#test_findByName</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727201741838.png"></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727201521687.png"></p><p>UserRepositoryTest#test_findByName</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200727202013956.png"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> JDBC </tag>
            
            <tag> Jpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-12.Spring Boot Mybatis 查询流程及实现原理</title>
      <link href="posts/906fe0fc.html"/>
      <url>posts/906fe0fc.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot Mybatis：<a href="4c1ad05">【从零开始学Spring Boot】-12.Spring Boot Mybatis操作数据库</a></p></blockquote><p>以 UserServiceImpl#findUserByName 为例，分析一下相关源码。</p><h2 id="1-mybatis-的加载"><a href="#1-mybatis-的加载" class="headerlink" title="1.mybatis 的加载"></a>1.mybatis 的加载</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726184744481.png"></p><p>SqlSessionFactoryBean 实现了 InitializingBean 接口，重写了 afterPropertiesSet 方法，在这个方法中对 sqlSessionFactory 进行了初始化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>  <span class="token function">notNull</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token string">"Property 'dataSource' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">notNull</span><span class="token punctuation">(</span>sqlSessionFactoryBuilder<span class="token punctuation">,</span> <span class="token string">"Property 'sqlSessionFactoryBuilder' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">(</span>configuration <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> configLocation <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>configuration <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> configLocation <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">"Property 'configuration' and 'configLocation' can not specified with together"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory <span class="token operator">=</span> <span class="token function">buildSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 buildSqlSessionFactory 中解析 config 和 mapper 配置文件、扫描注解，将所有配置信息保存到 configuration 中。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 解析 mybatis-config.xml</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseConfiguration</span><span class="token punctuation">(</span>XNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// issue #117 read properties first</span>        <span class="token comment" spellcheck="true">// 解析 properties 节点</span>        <span class="token function">propertiesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 settings 节点</span>        Properties settings <span class="token operator">=</span> <span class="token function">settingsAsProperties</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadCustomVfs</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadCustomLogImpl</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 typeAliases 节点</span>        <span class="token function">typeAliasesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeAliases"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 plugins 节点</span>        <span class="token function">pluginElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"plugins"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 objectFactory 节点</span>        <span class="token function">objectFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 objectWrapperFactory 节点</span>        <span class="token function">objectWrapperFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectWrapperFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析 reflectorFactory 节点</span>        <span class="token function">reflectorFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"reflectorFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">settingsElement</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// read it after objectFactory and objectWrapperFactory issue #631</span>        <span class="token function">environmentsElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"environments"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">databaseIdProviderElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"databaseIdProvider"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">typeHandlerElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeHandlers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mapperElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"mappers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing SQL Mapper Configuration. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 解析 UserMapper.xml</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configuration<span class="token punctuation">.</span><span class="token function">isResourceLoaded</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解析 mapper 节点</span>        <span class="token function">configurationElement</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"/mapper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">addLoadedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 生成 MappedStatement 对象，保存到 configuration 中</span>        <span class="token function">bindMapperForNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">parsePendingResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parsePendingCacheRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parsePendingStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-UserMapper-的动态代理"><a href="#2-UserMapper-的动态代理" class="headerlink" title="2.UserMapper 的动态代理"></a>2.UserMapper 的动态代理</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726190240145.png"></p><p>MapperFactoryBean 是 UserMapper 实例化是对应的 beanClass，它继承自 DaoSupport 间接实现了 InitializingBean 接口，同时自己实现了 FactoryBean 接口，在 UserMapper 实例化时，会调用它的 getObject 方法，按照自定义逻辑创建对象。</p><p>在 getObject 中，它要返回一个 Mapper 对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> T <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mapperInterface<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的 getSqlSession 实际上调用父类 SqlSessionDaoSupport 的方法，返回一个 SqlSessionTemplate。它是 SqlSession 的一个实现类，重写了 SqlSession 中一些操作数据库的常用方法，相当于一个工具类。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getMapper</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getMapper</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> SqlSession sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> mapperRegistry<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>getMapper 是从解析配置文件后保存的 mapperRegistry 中获取一个 mapper 对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getMapper</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> SqlSession sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// MapperProxyFactory 工厂类</span>    <span class="token keyword">final</span> MapperProxyFactory<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperProxyFactory <span class="token operator">=</span> <span class="token punctuation">(</span>MapperProxyFactory<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> knownMappers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mapperProxyFactory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Type "</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">" is not known to the MapperRegistry."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mapperProxyFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Error getting mapper instance. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它通过 MapperProxyFactory 工厂类来创建具体的对象，创建时，最终生成为 Mapper 的代理对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> T <span class="token function">newInstance</span><span class="token punctuation">(</span>MapperProxy<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// jdk 动态代理</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> mapperInterface <span class="token punctuation">}</span><span class="token punctuation">,</span> mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> T <span class="token function">newInstance</span><span class="token punctuation">(</span>SqlSession sqlSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> MapperProxy<span class="token operator">&lt;</span>T<span class="token operator">></span> mapperProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperProxy</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> mapperInterface<span class="token punctuation">,</span> methodCache<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">newInstance</span><span class="token punctuation">(</span>mapperProxy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="3-mybatis查询执行流程"><a href="#3-mybatis查询执行流程" class="headerlink" title="3.mybatis查询执行流程"></a>3.mybatis查询执行流程</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726193730269.jpg"></p><p>由于 UserMapper 实际上是一个 MapperProxy 的代理对象，所以 UserServiceImpl 在调用 UserMapper 中方法时，实际调用到 MapperProxy 中的 invoke 方法。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726213127704.png"></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 返回一个 PlainMethodInvoker 对象，并调用 invoke 方法</span>            <span class="token keyword">return</span> <span class="token function">cachedInvoker</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> sqlSession<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> ExceptionUtil<span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>PlainMethodInvoker 是 MapperMethodInvoker 的一个实现，它的 invoke 方法如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> SqlSession sqlSession<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token keyword">return</span> mapperMethod<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终调用 sqlSession.selectOne 方法，这里的 sqlSession 是 SqlSessionTemplate</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">selectOne</span><span class="token punctuation">(</span>String statement<span class="token punctuation">,</span> Object parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionProxy<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而 sqlSessionProxy 是 sqlSession 的一个代理对象，它在 SqlSessionTemplate 构造函数中创建</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">SqlSessionTemplate</span><span class="token punctuation">(</span>SqlSessionFactory sqlSessionFactory<span class="token punctuation">,</span> ExecutorType executorType<span class="token punctuation">,</span>                          PersistenceExceptionTranslator exceptionTranslator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">notNull</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">,</span> <span class="token string">"Property 'sqlSessionFactory' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">notNull</span><span class="token punctuation">(</span>executorType<span class="token punctuation">,</span> <span class="token string">"Property 'executorType' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>executorType <span class="token operator">=</span> executorType<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator <span class="token operator">=</span> exceptionTranslator<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// jdk 代理，代理对象是 SqlSessionInterceptor，被代理对象时 SqlSessionFactory 的实例    </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionProxy <span class="token operator">=</span> <span class="token punctuation">(</span>SqlSession<span class="token punctuation">)</span> <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>SqlSessionFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> SqlSession<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以执行 SqlSessionInterceptor 中的 invoke 方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取 sqlSession，返回一个 DefaultSqlSession</span>    SqlSession sqlSession <span class="token operator">=</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span>SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">,</span>                                          SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>executorType<span class="token punctuation">,</span> SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用 selectOne 方法</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSqlSessionTransactional</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// force commit even on non-dirty sessions because some databases require</span>            <span class="token comment" spellcheck="true">// a commit/rollback before calling close()</span>            sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Throwable unwrapped <span class="token operator">=</span> <span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> unwrapped <span class="token keyword">instanceof</span> <span class="token class-name">PersistenceException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// release the connection to avoid a deadlock if the translator is no loaded. See issue #22</span>            <span class="token function">closeSqlSession</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSession <span class="token operator">=</span> null<span class="token punctuation">;</span>            Throwable translated <span class="token operator">=</span> SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>exceptionTranslator                <span class="token punctuation">.</span><span class="token function">translateExceptionIfPossible</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PersistenceException<span class="token punctuation">)</span> unwrapped<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>translated <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                unwrapped <span class="token operator">=</span> translated<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> unwrapped<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSession <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">closeSqlSession</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> SqlSessionTemplate<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过反射调用 selectOne 方法，目标对象是 DefaultSqlSession，</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span>String statement<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// MappedStatement 中封装了每个 sql 操作中各项参数</span>        MappedStatement ms <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用 executor 进行查询</span>        <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> <span class="token function">wrapCollection</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> Executor<span class="token punctuation">.</span>NO_RESULT_HANDLER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> ExceptionFactory<span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error querying database.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的 executor 获取 DefaultSqlSession 时创建</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Executor <span class="token function">newExecutor</span><span class="token punctuation">(</span>Transaction transaction<span class="token punctuation">,</span> ExecutorType executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 执行器类型，默认是 Simple</span>    executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> null <span class="token operator">?</span> defaultExecutorType <span class="token operator">:</span> executorType<span class="token punctuation">;</span>    executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> null <span class="token operator">?</span> ExecutorType<span class="token punctuation">.</span>SIMPLE <span class="token operator">:</span> executorType<span class="token punctuation">;</span>    Executor executor<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ExecutorType<span class="token punctuation">.</span>BATCH <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ExecutorType<span class="token punctuation">.</span>REUSE <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReuseExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个 SimpleExecutor</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// cacheEnabled 默认为 true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用 CachingExecutor 对 SimpleExecutor 进行装饰</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这里使用插件对 executor 进行代理，生成拦截器链。当前没配置插件</span>    executor <span class="token operator">=</span> <span class="token punctuation">(</span>Executor<span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> executor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>获取到的 executor 类型为 CachingExecutor，它装饰了 SimpleExecutor，SimpleExecutor 继承于 BaseExecutor。</p><p>所以执行查询时先调用 CachingExecutor#query，调用 delegate.query 时，又调用 BaseExecutor#query，这个 query 方法为模板 方法，最终调用到 SimpleExecutor#queryFromDatabase。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> CacheKey key<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">;</span>    localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> EXECUTION_PLACEHOLDER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行查询</span>        list <span class="token operator">=</span> <span class="token function">doQuery</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        localCache<span class="token punctuation">.</span><span class="token function">removeObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    localCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getStatementType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> StatementType<span class="token punctuation">.</span>CALLABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        localOutputParameterCache<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 doQuery 方法中，调用 handler.query</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">doQuery</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Configuration configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 handler</span>        StatementHandler handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构建 statement，包括获取 connection、设置参数</span>        stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用 handler 查询</span>        <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的 handler 是被 RoutingStatementHandler 装饰的 PreparedStatementHandler</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>Statement statement<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    PreparedStatement ps <span class="token operator">=</span> <span class="token punctuation">(</span>PreparedStatement<span class="token punctuation">)</span> statement<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行sql</span>    ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 处理结果集</span>    <span class="token keyword">return</span> resultSetHandler<span class="token punctuation">.</span><span class="token function">handleResultSets</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终调用 PreparedStatement 的 execute 方法完成查询。</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-12.Spring Boot Mybatis操作数据库</title>
      <link href="posts/4c1ad05.html"/>
      <url>posts/4c1ad05.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>The MyBatis-Spring-Boot-Starter help you build quickly MyBatis applications on top of the <a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a>.</p><p>By using this module you will achieve:</p><ul><li>Build standalone applications</li><li>Reduce the boilerplate to almost zero</li><li>Less XML configuration</li></ul></blockquote><p>MyBatis-Spring-Boot-Starter可帮助您在<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a>之上快速构建MyBatis应用程序。</p><p>通过使用此模块，您将实现：</p><ul><li>构建独立的应用程序</li><li>将样板减少到几乎为零</li><li>减少XML配置</li></ul><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><blockquote><p>As you may already know, to use MyBatis with Spring you need at least an <code>SqlSessionFactory</code> and at least one mapper interface.</p><p>MyBatis-Spring-Boot-Starter will:</p><ul><li>Autodetect an existing <code>DataSource</code></li><li>Will create and register an instance of a <code>SqlSessionFactory</code> passing that <code>DataSource</code> as an input using the <code>SqlSessionFactoryBean</code></li><li>Will create and register an instance of a <code>SqlSessionTemplate</code> got out of the <code>SqlSessionFactory</code></li><li>Auto-scan your mappers, link them to the <code>SqlSessionTemplate</code> and register them to Spring context so they can be injected into your beans</li></ul></blockquote><p>MyBatis-Spring-Boot-Starter 将会：</p><ul><li>自动检测已有的 <code>DataSource</code></li><li>将创建并注册一个 <code>SqlSessionFactory</code> 实例，并使用 <code>SqlSessionFactoryBean</code> 将该 <code>DataSource</code> 作为输入</li><li>将创建并注册一个从 <code>SqlSessionFactory</code> 中获取的 <code>SqlSessionTemplate</code> 实例</li><li>自动扫描您的映射器，将它们链接到 <code>SqlSessionTemplate</code> 并将它们注册到 Spring 上下文中，以便可以将它们注入到您的 bean 中</li></ul><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>spring boot 集成 mybatis，使用了 xml 和注解 两种配置方式。实现了单表的增删改查。</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200723214856482.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">mybatis.config-location</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mybatis/mybatis-config.xml</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mybatis/mapper/*.xml</span><span class="token attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token attr-value">com.soulballad.usage.springboot</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://172.16.11.125:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span></code></pre><p>mybatis-config.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Integer<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Long<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.Long<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HashMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.HashMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LinkedHashMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.LinkedHashMap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.ArrayList<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LinkedList<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.LinkedList<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>UserMapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" ></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.soulballad.usage.springboot.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.soulballad.usage.springboot.model.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phone<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        id, `name`, age, birthday, address, phone    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUserByName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        FROM t_user        WHERE `name` like concat('%', #{name}, '%')    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findUserByPhone<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>baseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        FROM t_user        WHERE phone = ${phone}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateByName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.soulballad.usage.springboot.model.UserModel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        UPDATE t_user SET phone = #{phone} WHERE `name` = #{name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteByName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       DELETE FROM t_user WHERE `name` = #{name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>UserMapper.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT id, `name`, age, birthday, address, phone FROM t_user"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"phone"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"phone"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UserModel <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    Page&lt;UserModel> findByPage(SpringDataWebProperties.Pageable pageable);</span>    List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findUserByPhone</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span> String phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">updateByName</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO t_user(`name`, age, birthday, address, phone) VALUES(#{name}, #{age}, #{birthday}, #{address}, #{phone})"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询所有数据     * @return user     */</span>    List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称查询     * @param name name     * @return user     */</span>    UserModel <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据电话查询     * @param phone 电话     * @return user     */</span>    List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findUserByPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称更新电话     * @param phone 电话     * @param name 名称     * @return 影响行数     */</span>    UserModel <span class="token function">updateByName</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称删除     * @param name 名称     * @return 影响行数     */</span>    UserModel <span class="token function">deleteByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增     * @param user user     * @return user     */</span>    UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findUserByPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">findUserByPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">updateByName</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">updateByName</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel user <span class="token operator">=</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        userMapper<span class="token punctuation">.</span><span class="token function">deleteByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span>UserModel user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userMapper<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/findByName/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/findByPhone/{phone}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findByPhone</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/updateByName"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">updateByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">updateByName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/deleteByName/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">deleteByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-06-jdbc/spring-boot-mybatis" target="_blank" rel="noopener">spring-boot/spring-boot-06-jdbc/spring-boot-mybatis</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootMybatisApplication.main 方法，在 spring-boot-mybatis.http 访问下列地址，观察输出信息是否符合预期。</p><p><strong>查询用户列表（所有）</strong></p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210408036.png"></p><p><strong>根据用户名查询</strong></p><pre class=" language-http"><code class="language-http">### GET /user/findByName/{name}GET http://localhost:8080/user/findByName/lisi<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210526269.png"></p><p><strong>根据手机号查询</strong></p><pre class=" language-http"><code class="language-http">### GET /user/findByPhone/{phone}GET http://localhost:8080/user/findByPhone/13666666666<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210624524.png"></p><p><strong>添加用户</strong></p><pre class=" language-http"><code class="language-http">### POST user/addPOST http://localhost:8080/user/add<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"abcd12"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1987-07-20"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"washington"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"15666666666"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726164659485.png"></p><p><strong>更新用户信息</strong></p><pre class=" language-http"><code class="language-http">### PUT /user/updateByNamePUT http://localhost:8080/user/updateByName<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13456789012"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210849107.png"></p><p><strong>删除用户</strong></p><pre class=" language-http"><code class="language-http">### DELETE /user/deleteByName/{name}DELETE http://localhost:8080/user/deleteByName/zhangsan<span class="token header-name keyword">Content-Type:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210950916.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="http://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">Mybatis官网</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> JDBC </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-11.Spring Boot JdbcTemplate 查询流程及原理</title>
      <link href="posts/b8ed8d8.html"/>
      <url>posts/b8ed8d8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot JdbcTemplate：<a href="168bdb80">【从零开始学Spring Boot】-11.Spring Boot JdbcTemplate操作数据库</a></p></blockquote><p>JdbcTemplate 是 spring 提供的一个操作数据库的工具类，它是模板方法模式的一种实现。它本身不会注入到 spring 容器中，需要在使用时声明。在创建 JdbcTemplate 对象时一般需要传入一个 datasource，所以在 DataSourceConfig 中同时读二者进行了声明。</p><h2 id="1-JdbcTemplate-查询执行流程"><a href="#1-JdbcTemplate-查询执行流程" class="headerlink" title="1.JdbcTemplate 查询执行流程"></a>1.JdbcTemplate 查询执行流程</h2><p>这里以 UserService#findUserById 为例说明，其他类似</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726163317151.png"></p><p>主要流程还是 jdbc 连接数据的操作，需要用户自己实现结果集映射，重写 RowMapper 中的 mapRow 方法。</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-11.Spring Boot JdbcTemplate操作数据库</title>
      <link href="posts/168bdb80.html"/>
      <url>posts/168bdb80.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>This is the central class in the JDBC core package. It simplifies the use of JDBC and helps to avoid common errors. It executes core JDBC workflow, leaving application code to provide SQL and extract results. This class executes SQL queries or updates, initiating iteration over ResultSets and catching JDBC exceptions and translating them to the generic, more informative exception hierarchy defined in the dao package.</p></blockquote><p>这是JDBC核心软件包中的中心类。它简化了JDBC的使用并有助于避免常见错误。它执行核心的JDBC工作流程，留下应用程序代码以提供SQL并提取结果。此类执行SQL查询或更新，在ResultSets上启动迭代并捕获JDBC异常，并将其转换为dao包中定义的通用，信息量更大的异常层次结构。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>使用 JdbcTemplate 连接 mysql 数据库，进行常见的数据库操作，并在 web 项目中展示。</p><p>同时配置了两个数据源，分别是：master、slave，可以方便的在二者之间切换。</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200722221011781.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.master.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://172.16.11.125:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><span class="token attr-name">spring.datasource.master.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.master.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">spring.datasource.master.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">spring.datasource.slave.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://172.16.11.125:3306/test_jpa?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><span class="token attr-name">spring.datasource.slave.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.slave.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">spring.datasource.slave.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>DataSourceConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.master"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSourceProperties <span class="token function">masterDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource.slave"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSourceProperties <span class="token function">slaveDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token keyword">public</span> DataSource <span class="token function">masterDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">masterDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">slaveDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">slaveDataSourceProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initializeDataSourceBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"masterJdbcTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JdbcTemplate <span class="token function">masterJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token function">masterDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"slaveJdbcTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> JdbcTemplate <span class="token function">slaveJdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token function">slaveDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserRowMapper.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRowMapper</span> <span class="token keyword">implements</span> <span class="token class-name">RowMapper</span><span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">mapRow</span><span class="token punctuation">(</span>ResultSet resultSet<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"birthday"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据id查找     * @param id id     * @return userModel     */</span>    UserModel <span class="token function">findUserById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称查找     * @param name name     * @return userModel     */</span>    UserModel <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询所有     * @return userModel     */</span>    List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增     * @param userModel userModel     * @return userModel     */</span>    UserModel <span class="token function">addUser</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增2     * @param userModel userModel     * @return userModel     */</span>    UserModel <span class="token function">insertUser</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增并获取主键     * @param userModel userModel     * @return userModel     */</span>    UserModel <span class="token function">insertAndGetPK</span><span class="token punctuation">(</span>UserModel userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据id更新地址     * @param address 地址     * @param id id     * @return userModel     */</span>    UserModel <span class="token function">updateAddressById</span><span class="token punctuation">(</span>String address<span class="token punctuation">,</span> Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据id删除     * @param id id     * @return userModel     */</span>    UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserServiceImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"masterJdbcTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">findUserById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select id, `name`, age, birthday, address, phone from t_user where id = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select id, `name`, age, birthday, address, phone from t_user where name = ?"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select id, `name`, age, birthday, address, phone from t_user"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// List&lt;Map&lt;String, Object>> maps = jdbcTemplate.queryForList(sql);</span>        <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token punctuation">(</span>UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">addUser</span><span class="token punctuation">(</span>UserModel user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO t_user(`name`, age, birthday, address, phone) VALUES (?, ?, ?, ?, ?);"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// jdbcTemplate.update(sql, new Object[] {user.getName(), user.getAge(), user.getBirthday(), user.getAddress(),</span>        <span class="token comment" spellcheck="true">// user.getPhone()});</span>        <span class="token comment" spellcheck="true">// 批量操作使用 batchUpdate</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">insertUser</span><span class="token punctuation">(</span>UserModel user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO t_user(`name`, age, birthday, address, phone) VALUES (?, ?, ?, ?, ?);"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> ps <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">insertAndGetPK</span><span class="token punctuation">(</span>UserModel user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO t_user(`name`, age, birthday, address, phone) VALUES (?, ?, ?, ?, ?);"</span><span class="token punctuation">;</span>        KeyHolder keyHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneratedKeyHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>connection <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            PreparedStatement ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ps<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> keyHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> pk <span class="token operator">=</span> keyHolder<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"insertAndGetPK pk is {}"</span><span class="token punctuation">,</span> pk<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserById</span><span class="token punctuation">(</span>pk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">updateAddressById</span><span class="token punctuation">(</span>String address<span class="token punctuation">,</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"UPDATE t_user set address = ? where id = ?"</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> address<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"DELETE FROM t_user where id = ?"</span><span class="token punctuation">;</span>        UserModel user <span class="token operator">=</span> <span class="token function">findUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>UserModel<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/findByName/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/findById/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/insert"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/insertAndGet"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">insertAndGet</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">insertAndGetPK</span><span class="token punctuation">(</span>userModel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/updateAddressById"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">updateAddressById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> UserModel userModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">updateAddressById</span><span class="token punctuation">(</span>userModel<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userModel<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/deleteById/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-06-jdbc/spring-boot-jdbc-template" target="_blank" rel="noopener">spring-boot/spring-boot-06-jdbc/spring-boot-jdbc-template</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootJdbcTemplateApplication.main 方法，在 spring-boot-jdbc-template.http 访问下列地址，观察输出信息是否符合预期。</p><p><strong>查询列表</strong></p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726154942345.png"></p><p><strong>根据姓名查询</strong></p><pre class=" language-http"><code class="language-http">### GET /user/findByName/{name}GET http://localhost:8080/user/findByName/zhangsan<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155020898.png"></p><p><strong>根据id查询</strong></p><pre class=" language-http"><code class="language-http">### GET /user/findById/{id}GET http://localhost:8080/user/findById/2<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155125169.png"></p><p><strong>添加用户</strong></p><pre class=" language-http"><code class="language-http">### POST /user/addPOST http://localhost:8080/user/add<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"aa123"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">31</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1989-05-21"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"hangzhou"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"15666666666"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155240977.png"></p><p><strong>添加用户2</strong></p><pre class=" language-http"><code class="language-http">### POST /user/insertPOST http://localhost:8080/user/insert<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"bb123"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1988-06-07"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"xian"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13455555555"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155320939.png"></p><p><strong>新增用户并返回主键</strong></p><pre class=" language-http"><code class="language-http">POST http://localhost:8080/user/insertAndGet<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"cc123"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span>  <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"1978-03-15"</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"nanjing"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13999999999"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155456317.png"></p><p><strong>更新用户地址</strong></p><pre class=" language-http"><code class="language-http">### PUT /user/updateAddressByIdPUT http://localhost:8080/user/updateAddressById<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token string">"address"</span><span class="token punctuation">:</span> <span class="token string">"suzhou"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155534709.png"></p><p><strong>根据id删除</strong></p><pre class=" language-http"><code class="language-http">### DELETE /user/deleteByIdDELETE http://localhost:8080/user/deleteById/7<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726155706289.png"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> JDBC </tag>
            
            <tag> JdbcTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-10.Spring Boot Jpa 查询流程及实现原理</title>
      <link href="posts/4ba425af.html"/>
      <url>posts/4ba425af.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot Jpa：<a href="170665fe">【从零开始学Spring Boot】-10.Spring Boot Jpa操作数据库</a></p></blockquote><h2 id="1-Repository-如何加载的？"><a href="#1-Repository-如何加载的？" class="headerlink" title="1.@Repository 如何加载的？"></a>1.@Repository 如何加载的？</h2><p>SpringBooApplication 应用启动时，会调用 createApplicationContext 方法，这里指定了默认 web 应用的类型是 AnnotationConfigServletWebServerApplicationContext。在 AnnotationConfigServletWebServerApplicationContext 的构造函数中，调用了 AnnotatedBeanDefinitionReader 的构造方法，最终通过 registerAnnotationConfigProcessors 方法将一些和注解扫描相关的 Processor 注册到 context 中，其中有一个类是 ConfigurationClassPostProcessor，这个比较关键。</p><p>在调用 refreshContext 方法时，最终会调用到 AbstractApplicationContext 的 refresh 方法，在这个流程中，invokeBeanFactoryPostProcessors 方法触发了 ConfigurationClassPostProcessor，将注解进行扫描，从而注册到 registry 中。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200722214637396.png"></p><h2 id="2-UserRepository-的动态代理"><a href="#2-UserRepository-的动态代理" class="headerlink" title="2.UserRepository 的动态代理"></a>2.UserRepository 的动态代理</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726121906729.png"></p><p>UserRepository 继承自 JpaRepository，JpaRepository 有一个 FactoryBean 叫 JpaRepositoryFactoryBean，它实现了InitializingBean 接口，在 afterPropertiesSet 中进行了代理操作。同时它也实现了 FactoryBean 接口，提供一个 getObject 方法来获取 bean 的实例。</p><p>在 factory.getRepository 方法中，有一个 getRepositoryInformation 方法，它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> RepositoryInformation <span class="token function">getRepositoryInformation</span><span class="token punctuation">(</span>RepositoryMetadata metadata<span class="token punctuation">,</span>                                                       RepositoryComposition composition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    RepositoryInformationCacheKey cacheKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RepositoryInformationCacheKey</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> composition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> repositoryInformationCache<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> key <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的 baseClass 为 SimpleJpaRepository</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> baseClass <span class="token operator">=</span> repositoryBaseClass<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token function">getRepositoryBaseClass</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRepositoryInformation</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> baseClass<span class="token punctuation">,</span> composition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的 getRepositoryBaseClass 获取一个 baseClass，实际返回一个 SimpleJpaRepository.class，这个 baseClass 在后面作为被代理对象使用。</p><p>在 getTargetRepositoryViaReflection 方法中，根据这个 baseClass，通过反射创建对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>R<span class="token operator">></span> R <span class="token function">getTargetRepositoryViaReflection</span><span class="token punctuation">(</span>RepositoryInformation information<span class="token punctuation">,</span>      Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> constructorArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取到 baseClass，即为 SimpleJpaRepository</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> baseClass <span class="token operator">=</span> information<span class="token punctuation">.</span><span class="token function">getRepositoryBaseClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token function">getTargetRepositoryViaReflection</span><span class="token punctuation">(</span>baseClass<span class="token punctuation">,</span> constructorArguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>R<span class="token operator">></span> R <span class="token function">getTargetRepositoryViaReflection</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> baseClass<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> constructorArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Optional<span class="token operator">&lt;</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> constructor <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">findConstructor</span><span class="token punctuation">(</span>baseClass<span class="token punctuation">,</span> constructorArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过反射创建对象对象</span>        <span class="token keyword">return</span> constructor<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>it <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>R<span class="token punctuation">)</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> constructorArguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>                        <span class="token string">"No suitable constructor found on %s to match the given arguments: %s. Make sure you implement a constructor taking these"</span><span class="token punctuation">,</span>                        baseClass<span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>constructorArguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Object<span class="token operator">:</span><span class="token operator">:</span>getClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>然后将这个对象作为 target 放到 result 中，result 又添加了一些 advisor 和 advice，这些在查询时被构建成链接器链</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取到一个 SimpleJpaRepository 实例</span>Object target <span class="token operator">=</span> <span class="token function">getTargetRepository</span><span class="token punctuation">(</span>information<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create proxy</span>ProxyFactory result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作为目标对象</span>result<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>result<span class="token punctuation">.</span><span class="token function">setInterfaces</span><span class="token punctuation">(</span>repositoryInterface<span class="token punctuation">,</span> Repository<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> TransactionalProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>MethodInvocationValidator<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>repositoryInterface<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   result<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInvocationValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 添加 advisor</span>result<span class="token punctuation">.</span><span class="token function">addAdvisor</span><span class="token punctuation">(</span>ExposeInvocationInterceptor<span class="token punctuation">.</span>ADVISOR<span class="token punctuation">)</span><span class="token punctuation">;</span>postProcessors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>processor <span class="token operator">-</span><span class="token operator">></span> processor<span class="token punctuation">.</span><span class="token function">postProcess</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> information<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>DefaultMethodInvokingMethodInterceptor<span class="token punctuation">.</span><span class="token function">hasDefaultMethods</span><span class="token punctuation">(</span>repositoryInterface<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   result<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultMethodInvokingMethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 添加 advice</span>ProjectionFactory projectionFactory <span class="token operator">=</span> <span class="token function">getProjectionFactory</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>result<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryExecutorMethodInterceptor</span><span class="token punctuation">(</span>information<span class="token punctuation">,</span> projectionFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>composition <span class="token operator">=</span> composition<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>RepositoryFragment<span class="token punctuation">.</span><span class="token function">implemented</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result<span class="token punctuation">.</span><span class="token function">addAdvice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImplementationMethodExecutionInterceptor</span><span class="token punctuation">(</span>composition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取代理对象</span>T repository <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> result<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726123554363.png"></p><p>最终生成的代理对象即为如下所示</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726123414685.png"></p><h2 id="3-Jpa-查询流程是怎样的？"><a href="#3-Jpa-查询流程是怎样的？" class="headerlink" title="3.Jpa 查询流程是怎样的？"></a>3.Jpa 查询流程是怎样的？</h2><p>这里以 UserServiceImpl#findUserByName 说一下 jpa 的查询流程</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200726135828933.png"></p><p>在 UserServiceImpl 调用了 UserRepository，UserRepository 是一个代理对象，它被 JdkDynamicAopProxy 所代理，所以执行 UserRepository  中方法时，会调用 JdkDynamicAopProxy 中 invoke 方法。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>   Object oldProxy <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   TargetSource targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>targetSource<span class="token punctuation">;</span>   Object target <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>equalsDefined <span class="token operator">&amp;&amp;</span> AopUtils<span class="token punctuation">.</span><span class="token function">isEqualsMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// The target does not implement the equals(Object) method itself.</span>         <span class="token keyword">return</span> <span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>hashCodeDefined <span class="token operator">&amp;&amp;</span> AopUtils<span class="token punctuation">.</span><span class="token function">isHashCodeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// The target does not implement the hashCode() method itself.</span>         <span class="token keyword">return</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DecoratingProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// There is only getDecoratedClass() declared -> dispatch to proxy config.</span>         <span class="token keyword">return</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">ultimateTargetClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>opaque <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>Advised<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Service invocations on ProxyConfig with the proxy config...</span>         <span class="token keyword">return</span> AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Object retVal<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Make invocation available if necessary.</span>         oldProxy <span class="token operator">=</span> AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>         setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// Get as late as possible to minimize the time we "own" the target,</span>      <span class="token comment" spellcheck="true">// in case it comes from a pool.</span>       <span class="token comment" spellcheck="true">// 获取目标对象</span>      target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">?</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Get the interception chain for this method.</span>       <span class="token comment" spellcheck="true">// 构建拦截链</span>      List<span class="token operator">&lt;</span>Object<span class="token operator">></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Check whether we have any advice. If we don't, we can fallback on direct</span>      <span class="token comment" spellcheck="true">// reflective invocation of the target, and avoid creating a MethodInvocation.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// We can skip creating a MethodInvocation: just invoke the target directly</span>         <span class="token comment" spellcheck="true">// Note that the final invoker must be an InvokerInterceptor so we know it does</span>         <span class="token comment" spellcheck="true">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span>         Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         retVal <span class="token operator">=</span> AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// We need to create a method invocation...</span>         MethodInvocation invocation <span class="token operator">=</span>               <span class="token keyword">new</span> <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Proceed to the joinpoint through the interceptor chain.</span>         retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// Massage return value if necessary.</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> retVal <span class="token operator">==</span> target <span class="token operator">&amp;&amp;</span>            returnType <span class="token operator">!=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span>RawTargetAccess<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Special case: it returned "this" and the return type of the method</span>         <span class="token comment" spellcheck="true">// is type-compatible. Note that we can't help if the target sets</span>         <span class="token comment" spellcheck="true">// a reference to itself in another returned object.</span>         retVal <span class="token operator">=</span> proxy<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> returnType <span class="token operator">!=</span> Void<span class="token punctuation">.</span>TYPE <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopInvocationException</span><span class="token punctuation">(</span>               <span class="token string">"Null return value from advice does not match primitive return type for: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Must have come from TargetSource.</span>         targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Restore old proxy.</span>         AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 JdkDynamicAopProxy  中会通过 getInterceptorsAndDynamicInterceptionAdvice 获取到一条链，实际上它是一个拦截器链，它由一下几个部分组成：</p><ul><li>ExposeInvocationInterceptor： 将当前的invocation设置到上下文中</li><li>CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor： 判断是自定义方法还是jpa中方法，如果是自定义方法直接执行下一个拦截器；否则绑定资源再执行下一个拦截器</li><li>PersistenceExceptionTranslationInterceptor： 捕获RuntimeException，出现异常之后拦截器才生效</li><li>TransactionInterceptor： 给后面要执行的拦截器添加后置事务处理</li><li>DefaultMethodInvokingMethodInterceptor： 判断是否 defaultMethod，如果不是走下一个拦截器；否则使用MethodHandle执行</li><li>RepositoryFactorySupport$QueryExecutorMethodInterceptor： 执行自定义查询</li><li>RepositoryFactorySupport$ImplementationMethodExecutionInterceptor：拦截 RepositoryComposition</li><li>PersistenceExceptionTranslationInterceptor：异常处理拦截器</li></ul><p>最终在 QueryExecutorMethodInterceptor 中调用 doInvoke 方法执行自定义查询</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">private</span> Object <span class="token function">doInvoke</span><span class="token punctuation">(</span>MethodInvocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Method method <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasQueryFor</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行查询</span>        <span class="token keyword">return</span> queries<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 继续执行下一个拦截器</span>    <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 execute 中，通过调用 AbstractJpaQuery#execute -&gt; AbstractJpaQuery#doExecute -&gt; JpaQueryExecution#execute -&gt; JpaQueryExecution.SingleEntityExecution#doExecute -&gt; AbstractProducedQuery#getSingleResult -&gt; AbstractProducedQuery#list -&gt; AbstractProducedQuery#doList -&gt; org.hibernate.internal.SessionImpl#list，使用 hibernate 完成查询。</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-10.Spring Boot Jpa操作数据库</title>
      <link href="posts/170665fe.html"/>
      <url>posts/170665fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>The Java Persistence API is a standard technology that lets you “map” objects to relational databases. The <code>spring-boot-starter-data-jpa</code> POM provides a quick way to get started. It provides the following key dependencies:</p><ul><li>Hibernate: One of the most popular JPA implementations.</li><li>Spring Data JPA: Makes it easy to implement JPA-based repositories.</li><li>Spring ORMs: Core ORM support from the Spring Framework.</li></ul></blockquote><p>Java Persistence API 是一种标准技术，可让您将对象“映射”到关系数据库。 spring-boot-starter-data-jpa POM提供了一种快速入门的方法。它提供以下关键依赖性：</p><ul><li>Hibernate：最流行的JPA实现之一。</li><li>Spring Data JPA：使基于JPA的存储库的实现变得容易。</li><li>Spring ORMs：Spring 框架对Core ORM的支持。</li></ul><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721204052309.png"></p><ul><li>基于Spring和JPA构建存储库的先进支持</li><li>支持 Querydsl 谓词，从而支持类型安全的JPA查询</li><li>实体类的透明审核</li><li>分页支持，动态查询执行，集成自定义数据访问代码的能力</li><li>在启动时验证 @Query 带注释的查询</li><li>支持基于XML的实体映射</li><li>通过引入 @EnableJpaRepositories，支持基于 JavaConfig 的存储库配置</li></ul><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>演示基于 <code>spring-boot-starter-data-jpa</code> 来操作数据库的简单 web mvc 项目。包括以下常用场景：</p><ul><li>单表的增、删、改、查</li><li>多表关联查询（这里使用2张表）</li><li>复杂条件混合查询</li><li>分页查询</li></ul><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721204828632.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://172.16.11.125:3306/test?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment" spellcheck="true"># 打印sql</span><span class="token attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 自动建表</span><span class="token attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token attr-value">create</span><span class="token comment" spellcheck="true"># 方言；innodb存储引擎</span><span class="token attr-name">spring.jpa.properties.hibernate.dialect</span><span class="token punctuation">=</span><span class="token attr-value">org.hibernate.dialect.MySQL5InnoDBDialect</span><span class="token comment" spellcheck="true"># 格式化sql</span><span class="token attr-name">spring.jpa.properties.hibernate.format_sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 打印sql中参数</span><span class="token attr-name">logging.level.org.hibernate.type.descriptor.sql.BasicBinder</span><span class="token punctuation">=</span><span class="token attr-value">trace</span><span class="token attr-name">spring.data.web.pageable.default-page-size</span><span class="token punctuation">=</span><span class="token attr-value">3</span><span class="token attr-name">spring.data.web.pageable.page-parameter</span><span class="token punctuation">=</span><span class="token attr-value">pageNum</span><span class="token attr-name">spring.data.web.pageable.size-parameter</span><span class="token punctuation">=</span><span class="token attr-value">pageSize</span><span class="token attr-name">spring.data.web.sort.sort-parameter</span><span class="token punctuation">=</span><span class="token attr-value">orderBy</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>Order.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>SEQUENCE<span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Long userId<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String orderCode<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> BigDecimal totalMoney<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String orderDate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span>Long userId<span class="token punctuation">,</span> String orderCode<span class="token punctuation">,</span> BigDecimal totalMoney<span class="token punctuation">,</span> String orderDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderCode <span class="token operator">=</span> orderCode<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>totalMoney <span class="token operator">=</span> totalMoney<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderDate <span class="token operator">=</span> orderDate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>User.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"t_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> String birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> String birthday<span class="token punctuation">,</span> String address<span class="token punctuation">,</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// get&amp;set&amp;toString</span><span class="token punctuation">}</span></code></pre><p>OrderRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>Order<span class="token punctuation">,</span> Long<span class="token operator">></span><span class="token punctuation">,</span> JpaSpecificationExecutor<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"select "</span>        <span class="token operator">+</span> <span class="token string">"o.id as orderId, o.orderCode as orderCode, o.orderDate as orderDate, o.userId as userId, "</span>        <span class="token operator">+</span> <span class="token string">"u.address as address, u.phone as phone, u.age as age from Order o inner join User u on o.userId = u.id where o.orderCode = ?1"</span><span class="token punctuation">)</span>    OrderInfo <span class="token function">selectOrderByCode</span><span class="token punctuation">(</span>String orderCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"select u from User u where u.name = ?1"</span><span class="token punctuation">)</span>    User <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"select u from User u"</span><span class="token punctuation">)</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByPage</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"select u from User u where u.phone = :phone"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUserByPhone</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">)</span> String phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Modifying</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"update User set phone = ?1 where name = ?2"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">updateByName</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Modifying</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"delete from User where name = :name"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>OrderService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询所有user     * @return order     */</span>    List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据订单号关联查询     * @param orderCode 订单号     * @return OrderInfo     */</span>    OrderInfo <span class="token function">selectOrderByCode</span><span class="token punctuation">(</span>String orderCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用example查询     * @param order 查询参数     * @return Order     */</span>    List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectByExample</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 多条件组合查询     * @param orderParam 查询参数     * @return Order     */</span>    Page<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectByCondition</span><span class="token punctuation">(</span>OrderParam orderParam<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询所有数据     * @return user     */</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称查询     * @param name name     * @return user     */</span>    User <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据电话查询     * @param phone 电话     * @return user     */</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUserByPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 分页查询     * @param pageable 分页参数     * @return user     */</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByPage</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称更新电话     * @param phone 电话     * @param name 名称     * @return 影响行数     */</span>    User <span class="token function">updateByName</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 根据名称删除     * @param name 名称     * @return 影响行数     */</span>    User <span class="token function">deleteByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增     * @param user user     * @return user     */</span>    User <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">findUserByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findUserByPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findUserByPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByPage</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findByPage</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">updateByName</span><span class="token punctuation">(</span>String phone<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userRepository<span class="token punctuation">.</span><span class="token function">updateByName</span><span class="token punctuation">(</span>phone<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">deleteByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">deleteByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>OrderServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderRepository orderRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> OrderInfo <span class="token function">selectOrderByCode</span><span class="token punctuation">(</span>String orderCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderRepository<span class="token punctuation">.</span><span class="token function">selectOrderByCode</span><span class="token punctuation">(</span>orderCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectByExample</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// exact：精确比配 contains: 模糊匹配 startsWith：从头匹配</span>        <span class="token comment" spellcheck="true">// 同 matcher -> matcher.exact();</span>        ExampleMatcher exampleMatcher <span class="token operator">=</span> <span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> GenericPropertyMatcher<span class="token operator">:</span><span class="token operator">:</span>exact<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">"orderCode"</span><span class="token punctuation">,</span> GenericPropertyMatcher<span class="token operator">:</span><span class="token operator">:</span>contains<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">"orderDate"</span><span class="token punctuation">,</span> GenericPropertyMatcher<span class="token operator">:</span><span class="token operator">:</span>startsWith<span class="token punctuation">)</span><span class="token punctuation">;</span>        Example<span class="token operator">&lt;</span>Order<span class="token operator">></span> example <span class="token operator">=</span> Example<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>order<span class="token punctuation">,</span> exampleMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> orderRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectByCondition</span><span class="token punctuation">(</span>OrderParam orderParam<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> query<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Predicate<span class="token operator">></span> predicates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// equal userId</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>orderParam<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// like orderCode</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>orderParam<span class="token punctuation">.</span><span class="token function">getOrderCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"orderCode"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"%"</span> <span class="token operator">+</span> orderParam<span class="token punctuation">.</span><span class="token function">getOrderCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// between</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>orderParam<span class="token punctuation">.</span><span class="token function">getOrderStartDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>orderParam<span class="token punctuation">.</span><span class="token function">getOrderEndDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"orderDate"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">.</span><span class="token function">getOrderStartDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">.</span><span class="token function">getOrderEndDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// greater than</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>orderParam<span class="token punctuation">.</span><span class="token function">getTotalMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                predicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"totalMoney"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> orderParam<span class="token punctuation">.</span><span class="token function">getTotalMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>predicates<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRestriction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>OrderInfo.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderInfo</span> <span class="token punctuation">{</span>    Long <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Long <span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getOrderCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">getOrderDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>OrderParam.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderParam</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> Long userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String orderCode<span class="token punctuation">;</span>    <span class="token keyword">private</span> BigDecimal totalMoney<span class="token punctuation">;</span>    <span class="token keyword">private</span> String orderStartDate<span class="token punctuation">;</span>    <span class="token keyword">private</span> String orderEndDate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get&amp;set</span><span class="token punctuation">}</span></code></pre><p>OrderController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/order"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderService orderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/queryByCode/{orderCode}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> OrderInfo <span class="token function">queryByCode</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String orderCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">selectOrderByCode</span><span class="token punctuation">(</span>orderCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/queryByExample"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">selectByExample</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/queryByCondition"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">queryByCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> OrderParam orderParam<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderService<span class="token punctuation">.</span><span class="token function">selectByCondition</span><span class="token punctuation">(</span>orderParam<span class="token punctuation">,</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/findByName/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/findByPhone/{phone}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByPhone</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findUserByPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/page"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">page</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">findByPage</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/updateByName"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">updateByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">updateByName</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/deleteByName/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">deleteByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>InitializeDataCommand.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitializeDataCommand</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> OrderRepository orderRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"2000-01-01"</span><span class="token punctuation">,</span> <span class="token string">"shenzhen"</span><span class="token punctuation">,</span> <span class="token string">"13888888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"1999-01-01"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"13777777777"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"1998-01-01"</span><span class="token punctuation">,</span> <span class="token string">"beijing"</span><span class="token punctuation">,</span> <span class="token string">"13666666666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhaoliu"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"1997-01-01"</span><span class="token punctuation">,</span> <span class="token string">"guangzhou"</span><span class="token punctuation">,</span> <span class="token string">"13555555555"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"sunqi"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">"1996-01-01"</span><span class="token punctuation">,</span> <span class="token string">"wuhan"</span><span class="token punctuation">,</span> <span class="token string">"13444444444"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecureRandom random <span class="token operator">=</span> SecureRandom<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"SHA1PRNG"</span><span class="token punctuation">,</span> <span class="token string">"SUN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DateTimeFormatter dateTimeFormatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalDateTime now <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">,</span> user4<span class="token punctuation">,</span> user5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Order<span class="token operator">></span> orders <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>user <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            Order order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            order<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            order<span class="token punctuation">.</span><span class="token function">setOrderCode</span><span class="token punctuation">(</span><span class="token string">"OC202005231205000"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            order<span class="token punctuation">.</span><span class="token function">setOrderDate</span><span class="token punctuation">(</span>dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            order<span class="token punctuation">.</span><span class="token function">setTotalMoney</span><span class="token punctuation">(</span>BigDecimal<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> order<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>orders<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-06-jdbc/spring-boot-data-jpa" target="_blank" rel="noopener">spring-boot/spring-boot-06-jdbc/spring-boot-data-jpa</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootJpaDemoApplication.main 方法，在 spring-boot-data-jpa.http 访问下列地址，观察输出信息是否符合预期。</p><h2 id="4-1-t-user"><a href="#4-1-t-user" class="headerlink" title="4.1 t_user"></a>4.1 t_user</h2><p><strong>查询用户列表（所有）</strong></p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210408036.png"></p><p><strong>根据用户名查询</strong></p><pre class=" language-http"><code class="language-http">### GET /user/findByName/{name}GET http://localhost:8080/user/findByName/lisi<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210526269.png"></p><p><strong>根据手机号查询</strong></p><pre class=" language-http"><code class="language-http">### GET /user/findByPhone/{phone}GET http://localhost:8080/user/findByPhone/13666666666<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210624524.png"></p><p><strong>查询用户列表（分页）</strong></p><pre class=" language-http"><code class="language-http">### GET /user/pageGET http://localhost:8080/user/page<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"pageable"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>     <span class="token string">"pageNumber"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>     <span class="token string">"pageSize"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>     <span class="token string">"orderBy"</span><span class="token punctuation">:</span><span class="token string">"age desc"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210744826.png"></p><p><strong>更新用户信息</strong></p><pre class=" language-http"><code class="language-http">### PUT /user/updateByNamePUT http://localhost:8080/user/updateByName<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span>  <span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"13456789012"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210849107.png"></p><p><strong>删除用户</strong></p><pre class=" language-http"><code class="language-http">### DELETE /user/deleteByName/{name}DELETE http://localhost:8080/user/deleteByName/zhangsan<span class="token header-name keyword">Content-Type:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721210950916.png"></p><h2 id="4-2-t-order"><a href="#4-2-t-order" class="headerlink" title="4.2 t_order"></a>4.2 t_order</h2><p><strong>查询订单列表（所有）</strong></p><pre class=" language-http"><code class="language-http">### GET  /order/listGET http://localhost:8080/order/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721211249281.png"></p><p><strong>根据订单编号关联查询</strong></p><pre class=" language-http"><code class="language-http">### GET /order/queryByCode/{orderCode}GET http://localhost:8080/order/queryByCode/OC2020052312050002<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721211331472.png"></p><p><strong>多条件查询订单</strong></p><pre class=" language-http"><code class="language-http">### GET /order/queryByExampleGET http://localhost:8080/order/queryByExample<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span><span class="token string">"userId"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"orderCode"</span><span class="token punctuation">:</span><span class="token string">"OC202005231"</span><span class="token punctuation">,</span><span class="token string">"orderDate"</span><span class="token punctuation">:</span> <span class="token string">"2020-05-17"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721211616720.png"></p><p><strong>多条件混合查询</strong></p><pre class=" language-http"><code class="language-http">### GET /order/queryByConditionGET http://localhost:8080/order/queryByCondition<span class="token header-name keyword">Accept:</span> application/json<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"userId"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token string">"orderCode"</span><span class="token punctuation">:</span> <span class="token string">"OC20200523"</span><span class="token punctuation">,</span>  <span class="token string">"totalMoney"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token string">"orderStartDate"</span><span class="token punctuation">:</span> <span class="token string">"2020-02-10 16:17:12"</span><span class="token punctuation">,</span>  <span class="token string">"orderEndDate"</span><span class="token punctuation">:</span> <span class="token string">"2020-05-30 16:17:12"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200721211716482.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://spring.io/projects/spring-data-jpa#overview" target="_blank" rel="noopener">官方 spring-data-jpa</a></li><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features-jpa-and-spring-data" target="_blank" rel="noopener">官方文档-Spring Boot Features/JPA</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> JDBC </tag>
            
            <tag> Jpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-9.Spring Boot Admin 请求和通信原理</title>
      <link href="posts/79a11b69.html"/>
      <url>posts/79a11b69.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot Admin：<a href="cae2760d">【从零开始学Spring Boot】-9.Spring Boot Admin</a></p></blockquote><h2 id="1-admin-server-的请求原理"><a href="#1-admin-server-的请求原理" class="headerlink" title="1.admin server 的请求原理"></a>1.admin server 的请求原理</h2><p>Spring Boot Admin 组件中，通过 <code>@EnableAdminServer</code> 标识一个 admin server 组件，并启动。EnableAdminServer 的内容如下.</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AdminServerMarkerConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAdminServer</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>EnableAdminServer 通过 @Import 导入一个 AdminServerMarkerConfiguration 配置类。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminServerMarkerConfiguration</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> Marker <span class="token function">adminServerMarker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Marker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Marker</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>AdminServerMarkerConfiguration 中定义了一个静态内部类 Marker，并将它声明为 Bean。那么这个 admin server 又是如何生效的呢？实际上，admin server 有一个自动装配类 AdminServerAutoConfiguration，这个类的内容如下。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>AdminServerMarkerConfiguration<span class="token punctuation">.</span>Marker<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>AdminServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ImportAutoConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">{</span> AdminServerInstanceWebClientConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> AdminServerWebConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> WebClientAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminServerAutoConfiguration</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> AdminServerProperties adminServerProperties<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">AdminServerAutoConfiguration</span><span class="token punctuation">(</span>AdminServerProperties adminServerProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties <span class="token operator">=</span> adminServerProperties<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> InstanceRegistry <span class="token function">instanceRegistry</span><span class="token punctuation">(</span>InstanceRepository instanceRepository<span class="token punctuation">,</span>         InstanceIdGenerator instanceIdGenerator<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InstanceRegistry</span><span class="token punctuation">(</span>instanceRepository<span class="token punctuation">,</span> instanceIdGenerator<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> ApplicationRegistry <span class="token function">applicationRegistry</span><span class="token punctuation">(</span>InstanceRegistry instanceRegistry<span class="token punctuation">,</span>         InstanceEventPublisher instanceEventPublisher<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationRegistry</span><span class="token punctuation">(</span>instanceRegistry<span class="token punctuation">,</span> instanceEventPublisher<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> InstanceIdGenerator <span class="token function">instanceIdGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashingInstanceUrlIdGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> StatusUpdater <span class="token function">statusUpdater</span><span class="token punctuation">(</span>InstanceRepository instanceRepository<span class="token punctuation">,</span>         InstanceWebClient<span class="token punctuation">.</span>Builder instanceWebClientBulder<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StatusUpdater</span><span class="token punctuation">(</span>instanceRepository<span class="token punctuation">,</span> instanceWebClientBulder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">"stop"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> StatusUpdateTrigger <span class="token function">statusUpdateTrigger</span><span class="token punctuation">(</span>StatusUpdater statusUpdater<span class="token punctuation">,</span> Publisher<span class="token operator">&lt;</span>InstanceEvent<span class="token operator">></span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>      StatusUpdateTrigger trigger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatusUpdateTrigger</span><span class="token punctuation">(</span>statusUpdater<span class="token punctuation">,</span> events<span class="token punctuation">)</span><span class="token punctuation">;</span>      trigger<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      trigger<span class="token punctuation">.</span><span class="token function">setLifetime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatusLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> trigger<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> EndpointDetector <span class="token function">endpointDetector</span><span class="token punctuation">(</span>InstanceRepository instanceRepository<span class="token punctuation">,</span>         InstanceWebClient<span class="token punctuation">.</span>Builder instanceWebClientBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>      InstanceWebClient instanceWebClient <span class="token operator">=</span> instanceWebClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ChainingStrategy strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainingStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryIndexEndpointStrategy</span><span class="token punctuation">(</span>instanceWebClient<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ProbeEndpointsStrategy</span><span class="token punctuation">(</span>instanceWebClient<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getProbedEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EndpointDetector</span><span class="token punctuation">(</span>instanceRepository<span class="token punctuation">,</span> strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">"stop"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> EndpointDetectionTrigger <span class="token function">endpointDetectionTrigger</span><span class="token punctuation">(</span>EndpointDetector endpointDetector<span class="token punctuation">,</span>         Publisher<span class="token operator">&lt;</span>InstanceEvent<span class="token operator">></span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EndpointDetectionTrigger</span><span class="token punctuation">(</span>endpointDetector<span class="token punctuation">,</span> events<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> InfoUpdater <span class="token function">infoUpdater</span><span class="token punctuation">(</span>InstanceRepository instanceRepository<span class="token punctuation">,</span>         InstanceWebClient<span class="token punctuation">.</span>Builder instanceWebClientBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InfoUpdater</span><span class="token punctuation">(</span>instanceRepository<span class="token punctuation">,</span> instanceWebClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">"stop"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span>   <span class="token keyword">public</span> InfoUpdateTrigger <span class="token function">infoUpdateTrigger</span><span class="token punctuation">(</span>InfoUpdater infoUpdater<span class="token punctuation">,</span> Publisher<span class="token operator">&lt;</span>InstanceEvent<span class="token operator">></span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span>      InfoUpdateTrigger trigger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfoUpdateTrigger</span><span class="token punctuation">(</span>infoUpdater<span class="token punctuation">,</span> events<span class="token punctuation">)</span><span class="token punctuation">;</span>      trigger<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInfoInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      trigger<span class="token punctuation">.</span><span class="token function">setLifetime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInfoLifetime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> trigger<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>InstanceEventStore<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> InMemoryEventStore <span class="token function">eventStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryEventStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">"stop"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>InstanceRepository<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> SnapshottingInstanceRepository <span class="token function">instanceRepository</span><span class="token punctuation">(</span>InstanceEventStore eventStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SnapshottingInstanceRepository</span><span class="token punctuation">(</span>eventStore<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>AdminServerAutoConfiguration 通过 @ImportAutoConfiguration 导入了 AdminServerWebConfiguration 和 </p><p>AdminServerInstanceWebClientConfiguration。查看 AdminServerWebConfiguration 内容</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminServerWebConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AdminServerProperties adminServerProperties<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AdminServerWebConfiguration</span><span class="token punctuation">(</span>AdminServerProperties adminServerProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties <span class="token operator">=</span> adminServerProperties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SimpleModule <span class="token function">adminJacksonModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleModule module <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        module<span class="token punctuation">.</span><span class="token function">addDeserializer</span><span class="token punctuation">(</span>Registration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RegistrationDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        module<span class="token punctuation">.</span><span class="token function">setSerializerModifier</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegistrationBeanSerializerModifier</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">SanitizingMapSerializer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getMetadataKeysToSanitize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> module<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> InstancesController <span class="token function">instancesController</span><span class="token punctuation">(</span>InstanceRegistry instanceRegistry<span class="token punctuation">,</span> InstanceEventStore eventStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InstancesController</span><span class="token punctuation">(</span>instanceRegistry<span class="token punctuation">,</span> eventStore<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> ApplicationsController <span class="token function">applicationsController</span><span class="token punctuation">(</span>ApplicationRegistry applicationRegistry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationsController</span><span class="token punctuation">(</span>applicationRegistry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// reactive web configuration ...</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> ConditionalOnWebApplication<span class="token punctuation">.</span>Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span>    <span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span>WebMvcAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServletRestApiConfirguation</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> AdminServerProperties adminServerProperties<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">ServletRestApiConfirguation</span><span class="token punctuation">(</span>AdminServerProperties adminServerProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties <span class="token operator">=</span> adminServerProperties<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token keyword">public</span> de<span class="token punctuation">.</span>codecentric<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>server<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>InstancesProxyController <span class="token function">instancesProxyController</span><span class="token punctuation">(</span>            InstanceRegistry instanceRegistry<span class="token punctuation">,</span> InstanceWebClient<span class="token punctuation">.</span>Builder instanceWebClientBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">de<span class="token punctuation">.</span>codecentric<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>server<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>InstancesProxyController</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getInstanceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIgnoredHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> instanceRegistry<span class="token punctuation">,</span>                instanceWebClientBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMappingHandlerMapping <span class="token function">adminHandlerMapping</span><span class="token punctuation">(</span>            ContentNegotiationManager contentNegotiationManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>            org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMappingHandlerMapping mapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">de<span class="token punctuation">.</span>codecentric<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>admin<span class="token punctuation">.</span>server<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>AdminControllerHandlerMapping</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>adminServerProperties<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mapping<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mapping<span class="token punctuation">.</span><span class="token function">setContentNegotiationManager</span><span class="token punctuation">(</span>contentNegotiationManager<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> mapping<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>默认 servlet 情况下，会使用 ServletRestApiConfirguation  配置，生成 web mvc 的服务。在 ServletRestApiConfirguation 声明了 AdminControllerHandlerMapping 的 RequestMappingHandlerMapping 实例对象。</p><p>这个 AdminControllerHandlerMapping 用来处理被 @AdminController 修饰的类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isHandler</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> AnnotatedElementUtils<span class="token punctuation">.</span><span class="token function">hasAnnotation</span><span class="token punctuation">(</span>beanType<span class="token punctuation">,</span> AdminController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>spring-boot-admin-server.jar 中提供了一些被 @AdminController 修饰的类，比如：ApplicationsController、NotificationFilterController、InstancesController、InstancesProxyController 等。ApplicationsController 内容如下。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AdminController</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationsController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ApplicationsController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ServerSentEvent<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> PING <span class="token operator">=</span> ServerSentEvent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">comment</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Flux<span class="token operator">&lt;</span>ServerSentEvent<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> PING_FLUX <span class="token operator">=</span> Flux<span class="token punctuation">.</span><span class="token function">interval</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span>ZERO<span class="token punctuation">,</span> Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span>10L<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tick<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> PING<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ApplicationRegistry registry<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ApplicationsController</span><span class="token punctuation">(</span>ApplicationRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>registry <span class="token operator">=</span> registry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/applications"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> MediaType<span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span>    <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>Application<span class="token operator">></span> <span class="token function">applications</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> registry<span class="token punctuation">.</span><span class="token function">getApplications</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/applications/{name}"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> MediaType<span class="token punctuation">.</span>APPLICATION_JSON_VALUE<span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ResponseEntity<span class="token operator">&lt;</span>Application<span class="token operator">>></span> <span class="token function">application</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> registry<span class="token punctuation">.</span><span class="token function">getApplication</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ResponseEntity<span class="token operator">:</span><span class="token operator">:</span>ok<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">defaultIfEmpty</span><span class="token punctuation">(</span>ResponseEntity<span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/applications"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> MediaType<span class="token punctuation">.</span>TEXT_EVENT_STREAM_VALUE<span class="token punctuation">)</span>    <span class="token keyword">public</span> Flux<span class="token operator">&lt;</span>ServerSentEvent<span class="token operator">&lt;</span>Application<span class="token operator">>></span> <span class="token function">applicationsStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> registry<span class="token punctuation">.</span><span class="token function">getApplicationStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ServerSentEvent<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">mergeWith</span><span class="token punctuation">(</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/applications/{name}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>ResponseEntity<span class="token operator">&lt;</span>Void<span class="token operator">>></span> <span class="token function">unregister</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Unregister application with name '{}'"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> registry<span class="token punctuation">.</span><span class="token function">deregister</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>deregistered<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>deregistered<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                           <span class="token operator">?</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">noContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Flux<span class="token operator">&lt;</span>ServerSentEvent<span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Flux<span class="token operator">&lt;</span>ServerSentEvent<span class="token operator">&lt;</span>T<span class="token operator">>></span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Flux<span class="token punctuation">)</span> PING_FLUX<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中 applications() 方法刚好处理 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> 跳转后的 <a href="http://localhost:8080/applications" target="_blank" rel="noopener">http://localhost:8080/applications</a> 请求。</p><h2 id="2-server-和-client-之间通信"><a href="#2-server-和-client-之间通信" class="headerlink" title="2.server 和 client 之间通信"></a>2.server 和 client 之间通信</h2><p>在 spring-boot-admin-server 中有自动装配类 AdminServerAutoConfiguration，相应地，在 spring-boot-admin-client 也有一个自动装配类。它是 SpringBootAdminClientAutoConfiguration。</p><p>这个 SpringBootAdminClientAutoConfiguration 声明了如下主要类型</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>SpringBootAdminClientEnabledCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> WebEndpointAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> RestTemplateAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebClientAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ClientProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> InstanceProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ManagementServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootAdminClientAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> ApplicationRegistrator <span class="token function">registrator</span><span class="token punctuation">(</span>RegistrationClient registrationClient<span class="token punctuation">,</span> ClientProperties client<span class="token punctuation">,</span> ApplicationFactory applicationFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationRegistrator</span><span class="token punctuation">(</span>applicationFactory<span class="token punctuation">,</span> registrationClient<span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getAdminUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">isRegisterOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> RegistrationApplicationListener <span class="token function">registrationListener</span><span class="token punctuation">(</span>ClientProperties client<span class="token punctuation">,</span>                                                                ApplicationRegistrator registrator<span class="token punctuation">,</span> Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RegistrationApplicationListener listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegistrationApplicationListener</span><span class="token punctuation">(</span>registrator<span class="token punctuation">)</span><span class="token punctuation">;</span>        listener<span class="token punctuation">.</span><span class="token function">setAutoRegister</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">isAutoRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listener<span class="token punctuation">.</span><span class="token function">setAutoDeregister</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">isAutoDeregistration</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listener<span class="token punctuation">.</span><span class="token function">setRegisterPeriod</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getPeriod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> listener<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> StartupDateMetadataContributor <span class="token function">startupDateMetadataContributor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StartupDateMetadataContributor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span>    <span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span>DispatcherServletAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ServletConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token keyword">public</span> ApplicationFactory <span class="token function">applicationFactory</span><span class="token punctuation">(</span>InstanceProperties instance<span class="token punctuation">,</span> ManagementServerProperties management<span class="token punctuation">,</span> ServerProperties server<span class="token punctuation">,</span> ServletContext servletContext<span class="token punctuation">,</span> PathMappedEndpoints pathMappedEndpoints<span class="token punctuation">,</span> WebEndpointProperties webEndpoint<span class="token punctuation">,</span> ObjectProvider<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>MetadataContributor<span class="token operator">>></span> metadataContributors<span class="token punctuation">,</span> DispatcherServletPath dispatcherServletPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletApplicationFactory</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> management<span class="token punctuation">,</span> server<span class="token punctuation">,</span> servletContext<span class="token punctuation">,</span> pathMappedEndpoints<span class="token punctuation">,</span> webEndpoint<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CompositeMetadataContributor</span><span class="token punctuation">(</span>                metadataContributors<span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span>Collections<span class="token operator">:</span><span class="token operator">:</span>emptyList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dispatcherServletPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>RestTemplateBuilder<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BlockingRegistrationClientConfig</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span>        <span class="token keyword">public</span> BlockingRegistrationClient <span class="token function">registrationClient</span><span class="token punctuation">(</span>ClientProperties client<span class="token punctuation">)</span> <span class="token punctuation">{</span>            RestTemplateBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplateBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getConnectTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getReadTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> client<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                builder <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">basicAuthentication</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> client<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BlockingRegistrationClient</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>ApplicationRegistrator 用来注册到 admin-server，其中定义了 register 和 deregister 方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Registers the client application at spring-boot-admin-server */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationRegistrator</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ApplicationRegistrator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> ConcurrentHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> LongAdder<span class="token operator">></span> attempts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicReference<span class="token operator">&lt;</span>String<span class="token operator">></span> registeredId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> ApplicationFactory applicationFactory<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> adminUrls<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> registerOnce<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">final</span> RegistrationClient registrationClient<span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token function">ApplicationRegistrator</span><span class="token punctuation">(</span>ApplicationFactory applicationFactory<span class="token punctuation">,</span> RegistrationClient registrationClient<span class="token punctuation">,</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> adminUrls<span class="token punctuation">,</span> <span class="token keyword">boolean</span> registerOnce<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>applicationFactory <span class="token operator">=</span> applicationFactory<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls <span class="token operator">=</span> adminUrls<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>registerOnce <span class="token operator">=</span> registerOnce<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>registrationClient <span class="token operator">=</span> registrationClient<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * Registers the client application at spring-boot-admin-server.    * @return true if successful registration on at least one admin server    */</span>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Application application <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationFactory<span class="token punctuation">.</span><span class="token function">createApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> isRegistrationSuccessful <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String adminUrl <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">)</span> <span class="token punctuation">{</span>         LongAdder attempt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attempts<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">LongAdder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">boolean</span> successful <span class="token operator">=</span> <span class="token function">register</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> adminUrl<span class="token punctuation">,</span> attempt<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>successful<span class="token punctuation">)</span> <span class="token punctuation">{</span>            attempt<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            attempt<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isRegistrationSuccessful <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerOnce<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> isRegistrationSuccessful<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span>Application application<span class="token punctuation">,</span> String adminUrl<span class="token punctuation">,</span> <span class="token keyword">boolean</span> firstAttempt<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         String id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registrationClient<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> application<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Application registered itself as {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Application refreshed itself as {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>firstAttempt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>                  <span class="token string">"Failed to register application as {} at spring-boot-admin ({}): {}. Further attempts are logged on DEBUG level"</span><span class="token punctuation">,</span>                  application<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Failed to register application as {} at spring-boot-admin ({}): {}"</span><span class="token punctuation">,</span> application<span class="token punctuation">,</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      String id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String adminUrl <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>registrationClient<span class="token punctuation">.</span><span class="token function">deregister</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerOnce<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Failed to deregister application (id={}) at spring-boot-admin ({}): {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> adminUrl<span class="token punctuation">,</span>                  ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * @return the id of this client as given by the admin server. Returns null if the    * client has not registered against the admin server yet.    */</span>   <span class="token keyword">public</span> String <span class="token function">getRegisteredId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>RegistrationApplicationListener 则是用来触发开始注册和停止注册任务，它实现了 InitializingBean 和 DisposableBean 接口，分别定定义了初始化完成后和销毁前的处理方式。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> ThreadPoolTaskScheduler taskScheduler<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">RegistrationApplicationListener</span><span class="token punctuation">(</span>ApplicationRegistrator registrator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>registrator<span class="token punctuation">,</span> <span class="token function">registrationTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明线程池</span><span class="token keyword">private</span> <span class="token keyword">static</span> ThreadPoolTaskScheduler <span class="token function">registrationTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ThreadPoolTaskScheduler taskScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    taskScheduler<span class="token punctuation">.</span><span class="token function">setPoolSize</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    taskScheduler<span class="token punctuation">.</span><span class="token function">setRemoveOnCancelPolicy</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    taskScheduler<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"registrationTask"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> taskScheduler<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">RegistrationApplicationListener</span><span class="token punctuation">(</span>ApplicationRegistrator registrator<span class="token punctuation">,</span> ThreadPoolTaskScheduler taskScheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>registrator <span class="token operator">=</span> registrator<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>taskScheduler <span class="token operator">=</span> taskScheduler<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现 InitializingBean 中 afterPropertiesSet 方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    taskScheduler<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现 DisposableBean 中 destroy 方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    taskScheduler<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>同时，它还接收 ApplicationReadyEvent 事件和 ContextClosedEvent 事件</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 接收 ApplicationReadyEvent 事件</span><span class="token annotation punctuation">@EventListener</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>LOWEST_PRECEDENCE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationReady</span><span class="token punctuation">(</span>ApplicationReadyEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>autoRegister<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 启动开始注册任务</span>        <span class="token function">startRegisterTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 接收 ContextClosedEvent 事件</span><span class="token annotation punctuation">@EventListener</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>LOWEST_PRECEDENCE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClosedContext</span><span class="token punctuation">(</span>ContextClosedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null        <span class="token operator">||</span> <span class="token string">"bootstrap"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 停止注册任务</span>        <span class="token function">stopRegisterTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>autoDeregister<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 删除注册内容</span>            registrator<span class="token punctuation">.</span><span class="token function">deregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 启动注册任务</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startRegisterTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scheduledTask <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>scheduledTask<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开启定时任务，默认执行周期 10s，定时任务调用 registrator::register 方法</span>    scheduledTask <span class="token operator">=</span> taskScheduler<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>registrator<span class="token operator">:</span><span class="token operator">:</span>register<span class="token punctuation">,</span> registerPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Scheduled registration task for every {}ms"</span><span class="token punctuation">,</span> registerPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 停止注册任务</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stopRegisterTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scheduledTask <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>scheduledTask<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取消任务</span>        scheduledTask<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Canceled registration task"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中 registrator.register 实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Application application <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationFactory<span class="token punctuation">.</span><span class="token function">createApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isRegistrationSuccessful <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String adminUrl <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LongAdder attempt <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attempts<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">LongAdder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册</span>        <span class="token keyword">boolean</span> successful <span class="token operator">=</span> <span class="token function">register</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> adminUrl<span class="token punctuation">,</span> attempt<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>successful<span class="token punctuation">)</span> <span class="token punctuation">{</span>            attempt<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            attempt<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isRegistrationSuccessful <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerOnce<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> isRegistrationSuccessful<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span>Application application<span class="token punctuation">,</span> String adminUrl<span class="token punctuation">,</span> <span class="token keyword">boolean</span> firstAttempt<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用 registrationClient 的 register 方法</span>        String id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registrationClient<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> application<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Application registered itself as {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Application refreshed itself as {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstAttempt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>                <span class="token string">"Failed to register application as {} at spring-boot-admin ({}): {}. Further attempts are logged on DEBUG level"</span><span class="token punctuation">,</span>                application<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Failed to register application as {} at spring-boot-admin ({}): {}"</span><span class="token punctuation">,</span> application<span class="token punctuation">,</span>                         <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终调用 registrationClient.register 方法，它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingRegistrationClient</span> <span class="token keyword">implements</span> <span class="token class-name">RegistrationClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ParameterizedTypeReference<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> RESPONSE_TYPE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterizedTypeReference</span><span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BlockingRegistrationClient</span><span class="token punctuation">(</span>RestTemplate restTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate <span class="token operator">=</span> restTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 向指定的 adminUrl 方式 Post 请求</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">register</span><span class="token punctuation">(</span>String adminUrl<span class="token punctuation">,</span> Application application<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResponseEntity<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> response <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> HttpMethod<span class="token punctuation">.</span>POST<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>application<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createRequestHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RESPONSE_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> HttpHeaders <span class="token function">createRequestHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HttpHeaders headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">setAccept</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> HttpHeaders<span class="token punctuation">.</span><span class="token function">readOnlyHttpHeaders</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>registrator.deregister</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String id <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String adminUrl <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adminUrls<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用 registrationClient 的 deregister 方法</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>registrationClient<span class="token punctuation">.</span><span class="token function">deregister</span><span class="token punctuation">(</span>adminUrl<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>registeredId<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerOnce<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Failed to deregister application (id={}) at spring-boot-admin ({}): {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> adminUrl<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终调用 registrationClient.deregister 方法，它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deregister</span><span class="token punctuation">(</span>String adminUrl<span class="token punctuation">,</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用 Delete 方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>restTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>adminUrl <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-8.Spring Boot WebEndpoint 请求原理</title>
      <link href="posts/740f06b3.html"/>
      <url>posts/740f06b3.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot Actuator监控：<a href="d660b501">【从零开始学Spring Boot】-8.Spring Boot Actuator监控</a></p></blockquote><h2 id="1-web-endpoint-请求原理"><a href="#1-web-endpoint-请求原理" class="headerlink" title="1.web endpoint 请求原理"></a>1.web endpoint 请求原理</h2><p>spring boot actuator 中有很多 endpoints，这里以 web endpoints 来简单分析一下原理。</p><p>spring-boot-starter-actuator.jar 依赖于 spring-boot-starter-actuator-autoconfigure.jar，spring-boot-starter-actuator-autoconfigure.jar 的结构如下，其中有用于自动装配的 spring.factories、源码、元数据的json信息以及元数据的配置信息。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719182234844.png"></p><p>在 spring.factories 中配置了很多的自动装配类，其中有一个叫 WebMvcEndpointManagementContextConfiguration，这个类中声明了 WebMvcEndpointHandlerMapping 的Bean。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ManagementContextConfiguration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebEndpointsSupplier<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>CorsEndpointProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcEndpointManagementContextConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> WebMvcEndpointHandlerMapping <span class="token function">webEndpointServletHandlerMapping</span><span class="token punctuation">(</span>WebEndpointsSupplier webEndpointsSupplier<span class="token punctuation">,</span>                                                                         ServletEndpointsSupplier servletEndpointsSupplier<span class="token punctuation">,</span> ControllerEndpointsSupplier controllerEndpointsSupplier<span class="token punctuation">,</span>                                                                         EndpointMediaTypes endpointMediaTypes<span class="token punctuation">,</span> CorsEndpointProperties corsProperties<span class="token punctuation">,</span>                                                                         WebEndpointProperties webEndpointProperties<span class="token punctuation">,</span> Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>ExposableEndpoint<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> allEndpoints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>ExposableWebEndpoint<span class="token operator">></span> webEndpoints <span class="token operator">=</span> webEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allEndpoints<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>webEndpoints<span class="token punctuation">)</span><span class="token punctuation">;</span>        allEndpoints<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>servletEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allEndpoints<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>controllerEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String basePath <span class="token operator">=</span> webEndpointProperties<span class="token punctuation">.</span><span class="token function">getBasePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EndpointMapping endpointMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EndpointMapping</span><span class="token punctuation">(</span>basePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> shouldRegisterLinksMapping <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>basePath<span class="token punctuation">)</span>            <span class="token operator">||</span> ManagementPortType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ManagementPortType<span class="token punctuation">.</span>DIFFERENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcEndpointHandlerMapping</span><span class="token punctuation">(</span>endpointMapping<span class="token punctuation">,</span> webEndpoints<span class="token punctuation">,</span> endpointMediaTypes<span class="token punctuation">,</span> corsProperties<span class="token punctuation">.</span><span class="token function">toCorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EndpointLinksResolver</span><span class="token punctuation">(</span>allEndpoints<span class="token punctuation">,</span> basePath<span class="token punctuation">)</span><span class="token punctuation">,</span> shouldRegisterLinksMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> ControllerEndpointHandlerMapping <span class="token function">controllerEndpointHandlerMapping</span><span class="token punctuation">(</span>        ControllerEndpointsSupplier controllerEndpointsSupplier<span class="token punctuation">,</span> CorsEndpointProperties corsProperties<span class="token punctuation">,</span>        WebEndpointProperties webEndpointProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        EndpointMapping endpointMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EndpointMapping</span><span class="token punctuation">(</span>webEndpointProperties<span class="token punctuation">.</span><span class="token function">getBasePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ControllerEndpointHandlerMapping</span><span class="token punctuation">(</span>endpointMapping<span class="token punctuation">,</span> controllerEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                    corsProperties<span class="token punctuation">.</span><span class="token function">toCorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>WebMvcEndpointHandlerMapping 的类图如下</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719183030011.png"></p><p>它有一个内部类 WebMvcLinksHandler，实现了 links 方法，通过 request 请求中的 url 找到对应的 handler，这里的 linksResolver 是一个 EndpointLinksResolver，他里面包含所有已经开启的 endpoint 信息</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcEndpointHandlerMapping</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractWebMvcEndpointHandlerMapping</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> EndpointLinksResolver linksResolver<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Creates a new {@code WebMvcEndpointHandlerMapping} instance that provides mappings     * for the given endpoints.     * @param endpointMapping the base mapping for all endpoints     * @param endpoints the web endpoints     * @param endpointMediaTypes media types consumed and produced by the endpoints     * @param corsConfiguration the CORS configuration for the endpoints or {@code null}     * @param linksResolver resolver for determining links to available endpoints     * @param shouldRegisterLinksMapping whether the links endpoint should be registered     */</span>    <span class="token keyword">public</span> <span class="token function">WebMvcEndpointHandlerMapping</span><span class="token punctuation">(</span>EndpointMapping endpointMapping<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>ExposableWebEndpoint<span class="token operator">></span> endpoints<span class="token punctuation">,</span>                                        EndpointMediaTypes endpointMediaTypes<span class="token punctuation">,</span> CorsConfiguration corsConfiguration<span class="token punctuation">,</span>                                        EndpointLinksResolver linksResolver<span class="token punctuation">,</span> <span class="token keyword">boolean</span> shouldRegisterLinksMapping<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>endpointMapping<span class="token punctuation">,</span> endpoints<span class="token punctuation">,</span> endpointMediaTypes<span class="token punctuation">,</span> corsConfiguration<span class="token punctuation">,</span> shouldRegisterLinksMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>linksResolver <span class="token operator">=</span> linksResolver<span class="token punctuation">;</span>        <span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> LinksHandler <span class="token function">getLinksHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcLinksHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Handler for root endpoint providing links.     */</span>    <span class="token keyword">class</span> <span class="token class-name">WebMvcLinksHandler</span> <span class="token keyword">implements</span> <span class="token class-name">LinksHandler</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token annotation punctuation">@ResponseBody</span>        <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Link<span class="token operator">>></span> <span class="token function">links</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">"_links"</span><span class="token punctuation">,</span>                                            WebMvcEndpointHandlerMapping<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>linksResolver<span class="token punctuation">.</span><span class="token function">resolveLinks</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Actuator root web endpoint"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>WebMvcEndpointHandlerMapping 继承自 AbstractWebMvcEndpointHandlerMapping，AbstractWebMvcEndpointHandlerMapping 继承自 RequestMappingInfoHandlerMapping，最终继承自 AbstractHandlerMethodMapping。AbstractHandlerMethodMapping 实现了 InitializingBean 接口，重写了 afterPropertiesSet()，所以在初始化的时候会调用该方法。该方法实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">initHandlerMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p> 在 AbstractWebMvcEndpointHandlerMapping 中进行了重写</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initHandlerMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>ExposableWebEndpoint endpoint <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>endpoints<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>WebOperation operation <span class="token operator">:</span> endpoint<span class="token punctuation">.</span><span class="token function">getOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">registerMappingForOperation</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> operation<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>shouldRegisterLinksMapping<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">registerLinksMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 registerLinksMapping 方法中将映射关系保存起来</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerLinksMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    PatternsRequestCondition patterns <span class="token operator">=</span> <span class="token function">patternsRequestConditionForPattern</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RequestMethodsRequestCondition methods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestMethodsRequestCondition</span><span class="token punctuation">(</span>RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token punctuation">;</span>    ProducesRequestCondition produces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducesRequestCondition</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>endpointMediaTypes<span class="token punctuation">.</span><span class="token function">getProduced</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                     <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>endpointMediaTypes<span class="token punctuation">.</span><span class="token function">getProduced</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RequestMappingInfo mapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestMappingInfo</span><span class="token punctuation">(</span>patterns<span class="token punctuation">,</span> methods<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> produces<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 handler</span>    LinksHandler linksHandler <span class="token operator">=</span> <span class="token function">getLinksHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册映射关系</span>    <span class="token function">registerMapping</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> linksHandler<span class="token punctuation">,</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">findMethod</span><span class="token punctuation">(</span>linksHandler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"links"</span><span class="token punctuation">,</span>                                                                      HttpServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpServletResponse<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的 getLinksHandler 获取的 handler 即为上面提到的 WebMvcLinksHandler，最终调用 registerMapping 方法保存到 mappingRegistry 中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerMapping</span><span class="token punctuation">(</span>T mapping<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Method method<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Register \""</span> <span class="token operator">+</span> mapping <span class="token operator">+</span> <span class="token string">"\" to "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">toGenericString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>mappingRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>mapping<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719184717237.png"></p><p>在请求 <a href="http://localhost:8080/actuator" target="_blank" rel="noopener">http://localhost:8080/actuator</a> 时，通过 DispatcherServlet 获取到一个 HandlerMapping，即为 AbstractWebMvcEndpointHandlerMapping，然后再调用  invokeHandlerMethod 方法时，最终调用到 </p><p>WebMvcEndpointHandlerMapping.WebMvcLinksHandler#links 方法，它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Link<span class="token operator">>></span> <span class="token function">links</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token string">"_links"</span><span class="token punctuation">,</span>         WebMvcEndpointHandlerMapping<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>linksResolver<span class="token punctuation">.</span><span class="token function">resolveLinks</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终返回 endpoints 对应的映射关系</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719185348091.png"></p><p>根据这里的返回结果，会调用到 HandlerMethodReturnValueHandlerComposite#handleReturnValue ，选择一个具体的 Handler 实现为 RequestResponseBodyMethodProcessor，最终调用 它的 handleReturnValue 方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleReturnValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Object returnValue<span class="token punctuation">,</span> MethodParameter returnType<span class="token punctuation">,</span> ModelAndViewContainer mavContainer<span class="token punctuation">,</span> NativeWebRequest webRequest<span class="token punctuation">)</span>    <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> HttpMediaTypeNotAcceptableException<span class="token punctuation">,</span> HttpMessageNotWritableException <span class="token punctuation">{</span>    mavContainer<span class="token punctuation">.</span><span class="token function">setRequestHandled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServletServerHttpRequest inputMessage <span class="token operator">=</span> <span class="token function">createInputMessage</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    ServletServerHttpResponse outputMessage <span class="token operator">=</span> <span class="token function">createOutputMessage</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Try even with null return value. ResponseBodyAdvice could get involved.</span>    <span class="token function">writeWithMessageConverters</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">,</span> returnType<span class="token punctuation">,</span> inputMessage<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终选择合适的 MessageConverter 将返回值进行输出</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">writeWithMessageConverters</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> T value<span class="token punctuation">,</span> MethodParameter returnType<span class="token punctuation">,</span> ServletServerHttpRequest inputMessage<span class="token punctuation">,</span> ServletServerHttpResponse outputMessage<span class="token punctuation">)</span>      <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> HttpMediaTypeNotAcceptableException<span class="token punctuation">,</span> HttpMessageNotWritableException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// ..</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedMediaType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      selectedMediaType <span class="token operator">=</span> selectedMediaType<span class="token punctuation">.</span><span class="token function">removeQualityValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> converter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>messageConverters<span class="token punctuation">)</span> <span class="token punctuation">{</span>         GenericHttpMessageConverter genericConverter <span class="token operator">=</span> <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">GenericHttpMessageConverter</span> <span class="token operator">?</span>               <span class="token punctuation">(</span>GenericHttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> converter <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> null <span class="token operator">?</span>               <span class="token punctuation">(</span><span class="token punctuation">(</span>GenericHttpMessageConverter<span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> valueType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">)</span> <span class="token operator">:</span>               converter<span class="token punctuation">.</span><span class="token function">canWrite</span><span class="token punctuation">(</span>valueType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            body <span class="token operator">=</span> <span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> returnType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span>                  <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">)</span> converter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  inputMessage<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               Object theBody <span class="token operator">=</span> body<span class="token punctuation">;</span>               LogFormatUtils<span class="token punctuation">.</span><span class="token function">traceDebug</span><span class="token punctuation">(</span>logger<span class="token punctuation">,</span> traceOn <span class="token operator">-</span><span class="token operator">></span>                     <span class="token string">"Writing ["</span> <span class="token operator">+</span> LogFormatUtils<span class="token punctuation">.</span><span class="token function">formatValue</span><span class="token punctuation">(</span>theBody<span class="token punctuation">,</span> <span class="token operator">!</span>traceOn<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token function">addContentDispositionHeader</span><span class="token punctuation">(</span>inputMessage<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>genericConverter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  genericConverter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpMessageConverter<span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> selectedMediaType<span class="token punctuation">,</span> outputMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Nothing to write: null body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-9.Spring Boot Admin</title>
      <link href="posts/cae2760d.html"/>
      <url>posts/cae2760d.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring Boot Admin is a community project to manage and monitor your <a href="http://projects.spring.io/spring-boot/" target="_blank" rel="noopener">Spring Boot</a> ® applications. The applications register with our Spring Boot Admin Client (via HTTP) or are discovered using Spring Cloud ® (e.g. Eureka, Consul). The UI is just a Vue.js application on top of the Spring Boot Actuator endpoints.</p></blockquote><p>Spring Boot Admin是一个社区项目，用于管理和监视Spring Boot® 应用程序。这些应用程序在我们的Spring Boot Admin Client中注册（通过HTTP），或者使用Spring Cloud®（例如，Eureka，Consul）发现。 UI只是Spring Boot Actuator端点之上的 Vue.js 应用程序。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ul><li>Show health status：显示健康状况</li><li>Show details, like：显示详细信息，例如<ul><li>JVM &amp; memory metrics：JVM 和 内存指标</li><li>micrometer.io metrics：micrometer io指标</li><li>Datasource metrics：数据源指标</li><li>Cache metrics：缓存指标</li></ul></li><li>Show build-info number：显示构建信息编号</li><li>Follow and download logfile：追踪并下载日志文件</li><li>View jvm system- &amp; environment-properties：查看 jvm 系统属性和环境属性</li><li>View Spring Boot Configuration Properties：查看 Spring Boot 配置属性</li><li>Support for Spring Cloud’s postable /env- &amp;/refresh-endpoint：支持Spring Cloud的可发布/ env-和// refresh-endpoint</li><li>Easy loglevel management：轻松的日志级别管理</li><li>Interact with JMX-beans：与JMX-beans交互</li><li>View thread dump：查看线程转储</li><li>View http-traces：查看http跟踪</li><li>View auditevents：查看审计事件</li><li>View http-endpoints：查看http端点</li><li>View scheduled tasks：查看定时任务</li><li>View and delete active sessions (using spring-session)：查看和删除活动会话（使用spring-session）</li><li>View Flyway / Liquibase database migrations：查看Flyway / Liquibase数据库迁移</li><li>Download heapdump：下载 heapdump</li><li>Notification on status change (via e-mail, Slack, Hipchat, …)：状态更改通知（通过电子邮件，Slack，Hipchat等）</li><li>Event journal of status changes (non persistent)：状态更改的事件日志（非持久性）</li></ul><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>使用 spring boot admin 需要两个项目：一个是 admin 项目，一个是 client 项目。admin 项目开启 SpringBoot Admin 功能，client 项目注册到 admin 项目上。</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719210837867.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><p>spring-boot-admin –&gt; pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>spring-boot-admin-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>spring-boot-admin-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span></code></pre><p>spring-boot-admin-server –&gt; pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>spring-boot-admin-client –&gt; pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>de.codecentric<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-admin-starter-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>spring-boot-admin-server –&gt; application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-admin-server</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span></code></pre><p>spring-boot-admin-client –&gt; application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-admin-client</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9090</span><span class="token comment" spellcheck="true"># 指定admin-server地址</span><span class="token attr-name">spring.boot.admin.client.url</span><span class="token punctuation">=</span><span class="token attr-value">http://localhost:8080</span><span class="token comment" spellcheck="true"># 监控所有的endpoint</span><span class="token attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token attr-value">*</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>SpringBootAdminServerApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAdminServer</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootAdminServerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootAdminServerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SpringBootAdminClientApplication.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootAdminClientApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootAdminClientApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-05-basis/spring-boot-admin" target="_blank" rel="noopener">spring-boot/spring-boot-05-basis/spring-boot-admin</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>先启动 SpringBootAdminServerApplication.main 方法，再启动 SpringBootAdminClientApplication.main 方法。</p><p>访问 <a href="http://localhost:8080/%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%B7%B3%E8%BD%AC%E5%88%B0" target="_blank" rel="noopener">http://localhost:8080/，会自动跳转到</a> Spring Boot Admin 界面，可以看到 spring-boot-admin-client 已经注册上来了</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719211412428.png"></p><p>点击 spring-boot-admin-client，可以查看各项监控指标</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719211606654.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://github.com/codecentric/spring-boot-admin" target="_blank" rel="noopener">Spring Boot Admin</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Admin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-8.Spring Boot Actuator监控</title>
      <link href="posts/d660b501.html"/>
      <url>posts/d660b501.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring Boot includes a number of additional features to help you monitor and manage your application when you push it to production. You can choose to manage and monitor your application by using HTTP endpoints or with JMX. Auditing, health, and metrics gathering can also be automatically applied to your application.</p></blockquote><p>Spring Boot包含许多附加功能，可在您将应用程序投入生产时帮助您监控和管理应用程序。您可以选择使用HTTP端点或JMX管理和监控您的应用程序。审计，健康状况和指标收集也可以自动应用于您的应用程序。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><blockquote><p>Actuator endpoints let you monitor and interact with your application. Spring Boot includes a number of built-in endpoints and lets you add your own. For example, the <code>health</code> endpoint provides basic application health information.</p></blockquote><p>监控端点使您可以监控应用程序并与之交互。 Spring Boot包含许多内置端点，您可以添加自己的端点。例如，运行健康状况端点提供基本的应用程序运行状况信息。</p><p>The following technology-agnostic endpoints are available：</p><table><thead><tr><th>ID</th><th>Description</th></tr></thead><tbody><tr><td>auditevents</td><td>Exposes audit events information for the current application. Requires an  AuditEventRepository bean.</td></tr><tr><td>beans</td><td>Displays a complete list of all the Spring beans in your application.</td></tr><tr><td>caches</td><td>Exposes available caches.</td></tr><tr><td>conditions</td><td>Shows the conditions that were evaluated on configuration and  auto-configuration classes and the reasons why they did or did not match.</td></tr><tr><td>configprops</td><td>Displays a collated list of all @ConfigurationProperties.</td></tr><tr><td>env</td><td>Exposes properties from Spring’s ConfigurableEnvironment.</td></tr><tr><td>flyway</td><td>Shows any Flyway database migrations that have been applied. Requires one  or more Flyway beans.</td></tr><tr><td>health</td><td>Shows application health information.</td></tr><tr><td>httptrace</td><td>Displays HTTP trace information (by default, the last 100 HTTP  request-response exchanges). Requires an HttpTraceRepository bean.</td></tr><tr><td>info</td><td>Displays arbitrary application info.</td></tr><tr><td>integrationgraph</td><td>Shows the Spring Integration graph. Requires a dependency on  spring-integration-core.</td></tr><tr><td>loggers</td><td>Shows and modifies the configuration of loggers in the application.</td></tr><tr><td>liquibase</td><td>Shows any Liquibase database migrations that have been applied. Requires  one or more Liquibase beans.</td></tr><tr><td>metrics</td><td>Shows ‘metrics’ information for the current application.</td></tr><tr><td>mappings</td><td>Displays a collated list of all @RequestMapping paths.</td></tr><tr><td>scheduledtasks</td><td>Displays the scheduled tasks in your application.</td></tr><tr><td>sessions</td><td>Allows retrieval and deletion of user sessions from a Spring  Session-backed session store. Requires a Servlet-based web application using  Spring Session.</td></tr><tr><td>shutdown</td><td>Lets the application be gracefully shutdown. Disabled by default.</td></tr><tr><td>threaddump</td><td>Performs a thread dump.</td></tr></tbody></table><p>If your application is a web application (Spring MVC, Spring WebFlux, or Jersey), you can use the following additional endpoints：</p><table><thead><tr><th>ID</th><th>Description</th></tr></thead><tbody><tr><td>heapdump</td><td>Returns an hprof heap dump file.</td></tr><tr><td>jolokia</td><td>Exposes JMX beans over HTTP (when Jolokia is on the classpath, not  available for WebFlux). Requires a dependency on jolokia-core.</td></tr><tr><td>logfile</td><td>Returns the contents of the logfile (if logging.file.name or  logging.file.path properties have been set). Supports the use of the HTTP  Range header to retrieve part of the log file’s content.</td></tr><tr><td>prometheus</td><td>Exposes metrics in a format that can be scraped by a Prometheus server.  Requires a dependency on micrometer-registry-prometheus.</td></tr></tbody></table><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>开启 endpoint，使用 http 进行访问</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719175106586.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">info.app.version</span><span class="token punctuation">=</span><span class="token attr-value">1.0.0</span><span class="token attr-name">info.app.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-actuator</span><span class="token attr-name">info.app.test</span><span class="token punctuation">=</span><span class="token attr-value">test</span><span class="token comment" spellcheck="true"># 启动所有endpoint</span><span class="token attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token attr-value">*</span><span class="token comment" spellcheck="true"># 显示详细信息</span><span class="token attr-name">management.endpoint.health.show-details</span><span class="token punctuation">=</span><span class="token attr-value">always</span><span class="token comment" spellcheck="true"># 关闭应用程序</span><span class="token attr-name">management.endpoint.shutdown.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>HelloController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-05-basis/spring-boot-actuator" target="_blank" rel="noopener">spring-boot/spring-boot-05-basis/spring-boot-actuator</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootActuatorApplication.main 方法，在 spring-boot-actuator.http 访问下列地址，观察输出信息。</p><pre class=" language-http"><code class="language-http">### GET /actuatorGET http://localhost:8080/actuator</code></pre><p>请求响应信息如下</p><pre class=" language-json"><code class="language-json">GET http<span class="token operator">:</span>//localhost<span class="token operator">:</span><span class="token number">8080</span>/actuatorHTTP/<span class="token number">1.1</span> <span class="token number">200</span> Content-Type<span class="token operator">:</span> application/vnd.spring-boot.actuator.v3+jsonTransfer-Encoding<span class="token operator">:</span> chunkedDate<span class="token operator">:</span> Sun<span class="token punctuation">,</span> <span class="token number">19</span> Jul <span class="token number">2020</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">32</span> GMT<span class="token punctuation">{</span>  <span class="token property">"_links"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"self"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"beans"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/beans"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"caches-cache"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/caches/{cache}"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"caches"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/caches"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"health"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/health"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"health-path"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/health/{*path}"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"info"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/info"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"conditions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/conditions"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"shutdown"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/shutdown"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"configprops"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/configprops"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/env"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"env-toMatch"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/env/{toMatch}"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"loggers"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/loggers"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"loggers-name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/loggers/{name}"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"heapdump"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/heapdump"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"threaddump"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/threaddump"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"metrics"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/metrics"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"metrics-requiredMetricName"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/metrics/{requiredMetricName}"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"scheduledtasks"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/scheduledtasks"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"href"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/actuator/mappings"</span><span class="token punctuation">,</span>      <span class="token property">"templated"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Response code<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">;</span> Time<span class="token operator">:</span> 48ms<span class="token punctuation">;</span> Content length<span class="token operator">:</span> <span class="token number">1659</span> bytes</code></pre><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/production-ready-features.html#production-ready" target="_blank" rel="noopener">官方文档-Spring Boot Features/Actuator</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Actuator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-7.Spring Boot Email 是如何装配的</title>
      <link href="posts/16cb54e2.html"/>
      <url>posts/16cb54e2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot Email 邮件发送：<a href="a2a90ed3">【从零开始学Spring Boot】-7.Spring Boot Email邮件发送</a></p></blockquote><h2 id="1-Email-自动装配"><a href="#1-Email-自动装配" class="headerlink" title="1.Email 自动装配"></a>1.Email 自动装配</h2><p>JavaMailSender 仅有一个实现 JavaMailSenderImpl</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719163739485.png"></p><p>在 Mail 的自动装配类 MailSenderAutoConfiguration 中有如下定义</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> MimeMessage<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MimeType<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MailSender<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>MailSender<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>MailSenderCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>MailProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> MailSenderJndiConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MailSenderPropertiesConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailSenderAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MailSenderCondition</span> <span class="token keyword">extends</span> <span class="token class-name">AnyNestedCondition</span> <span class="token punctuation">{</span>        <span class="token function">MailSenderCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>ConfigurationPhase<span class="token punctuation">.</span>PARSE_CONFIGURATION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mail"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"host"</span><span class="token punctuation">)</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HostProperty</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mail"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"jndi-name"</span><span class="token punctuation">)</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JndiNameProperty</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MailSenderAutoConfiguration 通过 @Import 对 MailSenderJndiConfiguration 和 MailSenderPropertiesConfiguration 进行导入，这两个类中声明了 JavaMailSenderImpl 对象</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>Session<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mail"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"jndi-name"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnJndi</span><span class="token keyword">class</span> <span class="token class-name">MailSenderJndiConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> MailProperties properties<span class="token punctuation">;</span>    <span class="token function">MailSenderJndiConfiguration</span><span class="token punctuation">(</span>MailProperties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properties <span class="token operator">=</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    JavaMailSenderImpl <span class="token function">mailSender</span><span class="token punctuation">(</span>Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JavaMailSenderImpl sender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaMailSenderImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sender<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getDefaultEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sender<span class="token punctuation">.</span><span class="token function">setSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    Session <span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String jndiName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getJndiName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> JndiLocatorDelegate<span class="token punctuation">.</span><span class="token function">createDefaultResourceRefLocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>jndiName<span class="token punctuation">,</span> Session<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NamingException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Unable to find Session in JNDI location %s"</span><span class="token punctuation">,</span> jndiName<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-7.Spring Boot Email邮件发送</title>
      <link href="posts/a2a90ed3.html"/>
      <url>posts/a2a90ed3.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>The Spring Framework provides an easy abstraction for sending email by using the <code>JavaMailSender</code> interface, and Spring Boot provides auto-configuration for it as well as a starter module.</p></blockquote><p>Spring Framework 通过使用 JavaMailSender 接口提供了用于发送电子邮件的简单抽象，Spring Boot 为它以及启动程序模块提供了自动装配。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><blockquote><p>If <code>spring.mail.host</code> and the relevant libraries (as defined by <code>spring-boot-starter-mail</code>) are available, a default <code>JavaMailSender</code> is created if none exists. The sender can be further customized by configuration items from the <code>spring.mail</code> namespace. See <a href="https://github.com/spring-projects/spring-boot/tree/v2.2.8.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java" target="_blank" rel="noopener"><code>MailProperties</code></a> for more details.</p></blockquote><p>如果有 “ spring.mail.host” 和相关的库（由“ spring-boot-starter-mail”定义）可用，那么如果不存在默认的“ JavaMailSender”，则会创建一个。可以通过 spring.mail 命名空间中的配置项进一步定制发送者。参考 <a href="https://github.com/spring-projects/spring-boot/tree/v2.2.8.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java" target="_blank" rel="noopener"><code>MailProperties</code></a> 以获取更多详细信息。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.mail"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Charset DEFAULT_CHARSET<span class="token punctuation">;</span>    <span class="token keyword">private</span> String host<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer port<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> String protocol <span class="token operator">=</span> <span class="token string">"smtp"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Charset defaultEncoding<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> properties<span class="token punctuation">;</span>    <span class="token keyword">private</span> String jndiName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get&amp;set</span><span class="token punctuation">}</span></code></pre><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>测试 spring boot 发送 email</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719163127844.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-email</span><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value">pop.qq.com</span><span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value">aaa@123.com</span><span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value">eiosdal</span><span class="token attr-name">spring.mail.default-encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span><span class="token attr-name">mail.from.addr</span><span class="token punctuation">=</span><span class="token attr-value">aaa@123.com</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>EmailSenderService.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmailSenderService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 发送简单邮件     * @param to 目的地     * @param subject 主题     * @param content 内容     */</span>    <span class="token keyword">void</span> <span class="token function">sendSimpleEmail</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发送含有html内容的邮件     * @param to 目的地     * @param subject 主题     * @param content 内容     */</span>    <span class="token keyword">void</span> <span class="token function">sendHtmlEmail</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发送带有附件的邮件     * @param to 目的地     * @param subject 主题     * @param content 内容     * @param filePath 附件路径     */</span>    <span class="token keyword">void</span> <span class="token function">sendEmailWithAttachments</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">,</span> String filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 发送带有静态资源（图片）的邮件     * @param to 目的地     * @param subject 主题     * @param content 内容     * @param resPath 资源路径     * @param resId 资源id     */</span>    <span class="token keyword">void</span> <span class="token function">sendEmailWithInlineResource</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">,</span> String resPath<span class="token punctuation">,</span> String resId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>EmailSenderServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailSenderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">EmailSenderService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> JavaMailSender mailSender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${mail.from.addr}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String from<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSimpleEmail</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleMailMessage message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendHtmlEmail</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MimeMessageHelper messageHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            messageHelper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>            messageHelper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>            messageHelper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>            messageHelper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendEmailWithAttachments</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">,</span> String filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileSystemResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String fileName <span class="token operator">=</span> filePath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>filePath<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span>separator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendEmailWithInlineResource</span><span class="token punctuation">(</span>String to<span class="token punctuation">,</span> String subject<span class="token punctuation">,</span> String content<span class="token punctuation">,</span> String resPath<span class="token punctuation">,</span> String resId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileSystemResource resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>resPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">addInline</span><span class="token punctuation">(</span>resId<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-05-basis/spring-boot-email" target="_blank" rel="noopener">spring-boot/spring-boot-05-basis/spring-boot-email</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>使用测试类进行测试，测试时替换成实际的邮件地址和内容</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootEmailApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmailSenderService senderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_send_simpleEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        senderService<span class="token punctuation">.</span><span class="token function">sendSimpleEmail</span><span class="token punctuation">(</span><span class="token string">"bbb@324.com"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features-email" target="_blank" rel="noopener">官方文档-Spring Boot Features/Email</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Email </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Gradle】-6.Gradle多模块项目</title>
      <link href="posts/96cae014.html"/>
      <url>posts/96cae014.html</url>
      
        <content type="html"><![CDATA[<p>假设有一个项目，它由3个模块组成：model、repository、web；</p><p>三个模块之间的依赖关系是：web -&gt; repository -&gt; model</p><h1 id="1-Settings"><a href="#1-Settings" class="headerlink" title="1. Settings"></a>1. Settings</h1><p>settings文件声明了所需的配置来实例化项目的层次结构。在默认情况下，这个文件被命名为 settings.gradle，并且和根项目的build.gradle文件放在一起。</p><h2 id="1-1-settings文件"><a href="#1-1-settings文件" class="headerlink" title="1.1 settings文件"></a>1.1 settings文件</h2><p>下面的清单显示了 settings 文件的内容。若想使每个子项目都成为构建的一-部分，则可以调用带有项目路径参数的 include 方法。</p><p>settings.gradle</p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">// 将给定的子项目添加到构建中，传给include方法的参数是项目路径，不是文件路径</span>include <span class="token string">'model'</span><span class="token comment" spellcheck="true">// 将项目的字符串数组传给方法调用，而不是为每个单独的子项目调用include方法</span>include <span class="token string">'repository'</span><span class="token punctuation">,</span> <span class="token string">'web'</span></code></pre><h2 id="1-2-settings-api"><a href="#1-2-settings-api" class="headerlink" title="1.2 settings api"></a>1.2 settings api</h2><p>Gradle组装构建之前，它会创建- - 个Settings类型的实例。Settings 接口是settings文件的直接表示。它的主要作用是添加Project实例参与多项目构建。<br>除了组装多项目构建之外，你可以在build.gradle脚本中做任何事情，因为你可以直接访问Gradle和Project接口。下图显示了Settings接口的相关方法及其联系。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718200953963.png"></p><h2 id="1-3-settings-执行"><a href="#1-3-settings-执行" class="headerlink" title="1.3 settings 执行"></a>1.3 settings 执行</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718201046536.png"></p><h1 id="2-配置子项目"><a href="#2-配置子项目" class="headerlink" title="2. 配置子项目"></a>2. 配置子项目</h1><h2 id="2-1-Project-API"><a href="#2-1-Project-API" class="headerlink" title="2.1 Project API"></a>2.1 Project API</h2><p>为了声明特定的项目构建代码，使用了project方法。至少必须提供项目路径(例如，:model)。</p><p>很多时候，你想要为所有的项目或只有子项目定义一些公 共的行为。为实现这些用例，Project API提供了两个专门的方法: allprojects和subprojects.假设你想要把Java插件应用到所有子项目中，因为你需要编译Java源代码。你可以通过在subprojects闭包参数中定义代码来实现。</p><p>在多项目构建中项目的默认执行顺序是基于它们的字母名称的。为了显式地控制在构建生命周期的配置阶段的执行顺序，你可以使用项目执行方法 evaluationDependsOn和evaluationDependsOnChildren。对于需要确保为一个项目设置的属性可以被其他项目使用的情况尤其如此。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718201332473.png"></p><h2 id="2-2-定义特定行为"><a href="#2-2-定义特定行为" class="headerlink" title="2.2 定义特定行为"></a>2.2 定义特定行为</h2><p>可以通过 project 方法来定义特定的项目行为。为了给三个子项目 model、repository、web 搭建构建基础环境，你需要为它们分别创建–个项目配置块。下面的清单显示了在 build.gradle 文件中的项目定义。</p><p>build.gradle</p><pre class=" language-groovy"><code class="language-groovy">ext<span class="token operator">.</span>projectIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'group'</span><span class="token punctuation">:</span> <span class="token string">'com.manning.gia'</span><span class="token punctuation">,</span> <span class="token string">'version'</span><span class="token punctuation">:</span> <span class="token string">'0.1'</span><span class="token punctuation">]</span>group <span class="token operator">=</span> projectIds<span class="token operator">.</span>groupversion <span class="token operator">=</span> projectIds<span class="token operator">.</span>version<span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':model'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    group <span class="token operator">=</span> projectIds<span class="token operator">.</span>group    version <span class="token operator">=</span> projectIds<span class="token operator">.</span>version    apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span><span class="token punctuation">}</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':repository'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    group <span class="token operator">=</span> projectIds<span class="token operator">.</span>group    version <span class="token operator">=</span> projectIds<span class="token operator">.</span>version    apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span><span class="token punctuation">}</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':web'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    group <span class="token operator">=</span> projectIds<span class="token operator">.</span>group    version <span class="token operator">=</span> projectIds<span class="token operator">.</span>version    apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span>    apply plugin<span class="token punctuation">:</span> <span class="token string">'war'</span>    <span class="token comment" spellcheck="true">//apply plugin: 'jetty'</span>    repositories <span class="token punctuation">{</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        providedCompile <span class="token string">'javax.servlet:servlet-api:2.5'</span>        runtime <span class="token string">'javax.servlet:jstl:1.1.2'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-3-项目间依赖"><a href="#2-3-项目间依赖" class="headerlink" title="2.3 项目间依赖"></a>2.3 项目间依赖</h2><pre class=" language-groovy"><code class="language-groovy"><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':model'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    group <span class="token operator">=</span> projectIds<span class="token operator">.</span>group    version <span class="token operator">=</span> projectIds<span class="token operator">.</span>version    apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span><span class="token punctuation">}</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':repository'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    group <span class="token operator">=</span> projectIds<span class="token operator">.</span>group    version <span class="token operator">=</span> projectIds<span class="token operator">.</span>version    apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span>    dependencies <span class="token punctuation">{</span>        compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':model'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':web'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    group <span class="token operator">=</span> projectIds<span class="token operator">.</span>group    version <span class="token operator">=</span> projectIds<span class="token operator">.</span>version    apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span>    apply plugin<span class="token punctuation">:</span> <span class="token string">'war'</span>    <span class="token comment" spellcheck="true">//apply plugin: 'jetty'</span>    repositories <span class="token punctuation">{</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':repository'</span><span class="token punctuation">)</span>        providedCompile <span class="token string">'javax.servlet:servlet-api:2.5'</span>        runtime <span class="token string">'javax.servlet:jstl:1.1.2'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-4-多项目部分构建"><a href="#2-4-多项目部分构建" class="headerlink" title="2.4 多项目部分构建"></a>2.4 多项目部分构建</h2><p>拥有几十个甚至上百个依赖的子项目的复杂多项目构建，将大大影响平均执行时间。Gradle 会遍历所有的项目依赖并确保它们是最新的。在开发阶段，通常知道在什么子项目中哪些源文件发生了变化。从技术上讲，不需要重新构建没有发生变化的子项目。</p><p>针对这些情况，Gradle 提供了部分构建特性。部分构建是通过命令 行选项- a 或 –no-rebuild 启用的。假设在子项目 repository 中只改变了 代码，但不想重新构建子项目 model。通过使用部分构建，可以省去检查子项目model的成本并且降低构建执行时间。如果你正工作在-一个拥有上百个子项目依赖的企业级项目中，你会感激在执行构建时节省的每一秒。 </p><pre class=" language-shell"><code class="language-shell">gradle :repository:build -a</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718202923606.png"></p><pre class=" language-shell"><code class="language-shell">gradle :repository:buildNeeded</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718203013571.png"></p><h2 id="2-5-跨项目task"><a href="#2-5-跨项目task" class="headerlink" title="2.5 跨项目task"></a>2.5 跨项目task</h2><p>假设在根项目和子项目中定义了一个名为 hello 的 task</p><p>build.gradle</p><pre class=" language-groovy"><code class="language-groovy">ext<span class="token operator">.</span>projectIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'group'</span><span class="token punctuation">:</span> <span class="token string">'com.manning.gia'</span><span class="token punctuation">,</span> <span class="token string">'version'</span><span class="token punctuation">:</span> <span class="token string">'0.1'</span><span class="token punctuation">]</span>group <span class="token operator">=</span> projectIds<span class="token operator">.</span>groupversion <span class="token operator">=</span> projectIds<span class="token operator">.</span>versiontask hello <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        println <span class="token string">'Hello from root project'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':model'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    group <span class="token operator">=</span> projectIds<span class="token operator">.</span>group    version <span class="token operator">=</span> projectIds<span class="token operator">.</span>version    apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span>    task hello <span class="token punctuation">{</span>        doLast <span class="token punctuation">{</span>            println <span class="token string">'Hello from model project'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':repository'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    group <span class="token operator">=</span> projectIds<span class="token operator">.</span>group    version <span class="token operator">=</span> projectIds<span class="token operator">.</span>version    apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span>    dependencies <span class="token punctuation">{</span>        compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':model'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    task hello <span class="token punctuation">{</span>        doLast <span class="token punctuation">{</span>            println <span class="token string">'Hello from repository project'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':web'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    group <span class="token operator">=</span> projectIds<span class="token operator">.</span>group    version <span class="token operator">=</span> projectIds<span class="token operator">.</span>version    apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span>    apply plugin<span class="token punctuation">:</span> <span class="token string">'war'</span>    repositories <span class="token punctuation">{</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':repository'</span><span class="token punctuation">)</span>        providedCompile <span class="token string">'javax.servlet:servlet-api:2.5'</span>        runtime <span class="token string">'javax.servlet:jstl:1.1.2'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718203415216.png"></p><p><strong>控制task执行顺序</strong></p><pre class=" language-groovy"><code class="language-groovy">task hello <span class="token punctuation">{</span>    doLast<span class="token punctuation">{</span>        println <span class="token string">'Hello from root project'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':model'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//...</span>    task <span class="token function">hello</span><span class="token punctuation">(</span>dependsOn<span class="token punctuation">:</span> <span class="token string">':repository:hello'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        doLast<span class="token punctuation">{</span>            println <span class="token string">'Hello from model project'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':repository'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    dependencies <span class="token punctuation">{</span>        compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':model'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    task hello <span class="token punctuation">{</span>        doLast<span class="token punctuation">{</span>            println <span class="token string">'Hello from repository project'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-6-定义公共行为"><a href="#2-6-定义公共行为" class="headerlink" title="2.6 定义公共行为"></a>2.6 定义公共行为</h2><pre class=" language-groovy"><code class="language-groovy">allprojects <span class="token punctuation">{</span>    group <span class="token operator">=</span> <span class="token string">'com.manning.gia'</span>    version <span class="token operator">=</span> <span class="token string">'0.1'</span><span class="token punctuation">}</span>subprojects <span class="token punctuation">{</span>    apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span><span class="token punctuation">}</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':repository'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dependencies <span class="token punctuation">{</span>        compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':model'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':web'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    apply plugin<span class="token punctuation">:</span> <span class="token string">'war'</span>    apply plugin<span class="token punctuation">:</span> <span class="token string">'jetty'</span>    repositories <span class="token punctuation">{</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':repository'</span><span class="token punctuation">)</span>        providedCompile <span class="token string">'javax.servlet:servlet-api:2.5'</span>        runtime <span class="token string">'javax.servlet:jstl:1.1.2'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-7-每个项目创建构建文件"><a href="#2-7-每个项目创建构建文件" class="headerlink" title="2.7 每个项目创建构建文件"></a>2.7 每个项目创建构建文件</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718203945699.png"></p><p>root -&gt; build.gradle</p><pre class=" language-groovy"><code class="language-groovy">allprojects <span class="token punctuation">{</span>    group <span class="token operator">=</span> <span class="token string">'com.manning.gia'</span>    version <span class="token operator">=</span> <span class="token string">'0.1'</span><span class="token punctuation">}</span>subprojects <span class="token punctuation">{</span>    apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span><span class="token punctuation">}</span></code></pre><p>model-&gt; build.gradle</p><p>空</p><p>repository-&gt; build.gradle</p><pre class=" language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>    compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':model'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>web-&gt; build.gradle</p><pre class=" language-groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'war'</span><span class="token comment" spellcheck="true">//apply plugin: 'jetty'</span>repositories <span class="token punctuation">{</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    compile <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">':repository'</span><span class="token punctuation">)</span>    providedCompile <span class="token string">'javax.servlet:servlet-api:2.5'</span>    runtime <span class="token string">'javax.servlet:jstl:1.1.2'</span><span class="token punctuation">}</span></code></pre><h1 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h1><ol><li>《实战Gradle 中文版》</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Gradle】-5.Gradle组件说明</title>
      <link href="posts/1d64b598.html"/>
      <url>posts/1d64b598.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-构建块"><a href="#1-构建块" class="headerlink" title="1. 构建块"></a>1. 构建块</h1><p>每个 Gradle 构建都包含三个基本构建块：project、task 和 property。每个构建包含至少-一个 project，进而又包含一个或 多个 task。 project 和 task 暴露的属性可以用来控制构建。</p><h2 id="1-1-project"><a href="#1-1-project" class="headerlink" title="1.1 project"></a>1.1 project</h2><p>在 Gradle 术语中，一个项目(project) 代表一个正在构建的组件(比如，一个 JAR文件)，或一个想要完成的目标，如部署应用程序。如果你使用过 Maven， 那么这个概念应该听起来很熟悉。Gradle 的 build.gradle 文件相当于 Maven 的 pom. xml。每个 Gradle 构建脚本至少定义一个项目。当构建进程启动后，Gradle 基于 build.gradle 中的配置实例化 org.gradle.api.Project 类，并且能够通过 project 变量使其隐式可用。下图显示了API 接口及其最重要的方法。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718170007325.png"></p><h2 id="1-2-task"><a href="#1-2-task" class="headerlink" title="1.2 task"></a>1.2 task</h2><p>task 的一 些重要功能：任务动作(task action)和任务依赖(task dependency)。任务动作定义了一个当任务执行时最小的工作单元。这可以简单到只打印文本如 “Hello world !” 或复杂到编译 Java 源代码。</p><p>很多时候，运行一个task之前需要运行另一个task，尤其是当task的运行需要另一个task的输出作为输入来完成自己的行动时更是如此。比如，你已经看到过在打包成一个JAR文件之前需要先编译Java源代码。让我们看看Gradle task 的API表示，org.gradle.api .Task接口，如下所示。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718170352282.png"></p><h2 id="1-3-property"><a href="#1-3-property" class="headerlink" title="1.3 property"></a>1.3 property</h2><p>每个 project 和 task 实例都提供了可以通过 getter 和 setter 方法访问的属性。一个属性可能是一个任务或项目的版本。</p><p><strong>扩展属性</strong></p><p>Gradle的很多领域模型类提供了特别的属性支持。在内部，这些属性以键值对的形式存储。为了添加属性，需要使用 ext 命名空间。</p><pre class=" language-groovy"><code class="language-groovy">project<span class="token operator">.</span>ext<span class="token operator">.</span>myProp <span class="token operator">=</span> <span class="token string">'myValue'</span>ext <span class="token punctuation">{</span>    someOtherProp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">}</span><span class="token keyword">assert</span> myProp <span class="token operator">==</span> <span class="token string">'myValue'</span>println project<span class="token operator">.</span>someOtherPropext<span class="token operator">.</span>someOtherProp <span class="token operator">=</span> <span class="token number">567</span></code></pre><p><strong>Gradle 属性</strong></p><p>Gradle属性可以通过在 gradle.properties 文件中声明直接添加到项目中，这个文件位于 <user_ home="">/ .gradle 目录或项目的根目录下。这些属性可以通过项目实例访问。记住，即使你有多个项目，每个用户也只能有一个 Gradle 属性文件在 <user_ home="">/ .gradle 目录下。这是目前 Gradle 对它的限制。在这个属性文件中声明的属性对所有的项目可用。我们假设下面的属性是在 gradle.properties文件中声明的:</user_></user_></p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">exampleProp</span> <span class="token punctuation">=</span> <span class="token attr-value">myValue</span><span class="token attr-name">someOtherProp</span> <span class="token punctuation">=</span> <span class="token attr-value">455</span></code></pre><p>可以按照如下方式访问这两个变量</p><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">assert</span> project<span class="token operator">.</span>exampleProp <span class="token operator">==</span> <span class="token string">'myValue'</span>task printGradleProperty <span class="token operator">&lt;&lt;</span> <span class="token punctuation">{</span>    println <span class="token string">"Second property: $someOtherProp"</span><span class="token punctuation">}</span></code></pre><p><strong>声明属性的其他方式</strong></p><ul><li><p>项目属性通过 -P 命令行选项提供</p></li><li><p>系统属性通过 -D 命令行选项提供</p></li><li><p>环境属性按照下面模式提供</p><p>ORG_GRADLE_PROJECT_propertyName=someValue</p></li></ul><h1 id="2-使用task"><a href="#2-使用task" class="headerlink" title="2. 使用task"></a>2. 使用task</h1><h2 id="2-1-声明-task"><a href="#2-1-声明-task" class="headerlink" title="2.1 声明 task"></a>2.1 声明 task</h2><pre class=" language-groovy"><code class="language-groovy">version <span class="token operator">=</span> <span class="token string">'0.1-SNAPSHOT'</span>task printVersion <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        println <span class="token string">"Version: $version"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>给 task 添加动作</strong></p><p>Task 接口提供了两个方法来定义 task 的动作：doFirst(Closure) 和 doLast(Closure) </p><pre class=" language-groovy"><code class="language-groovy">version <span class="token operator">=</span> <span class="token string">'0.1-SNAPSHOT'</span><span class="token comment" spellcheck="true">// 声明一个包含 doFirst 和 doLast 的 task</span>task printVersion <span class="token punctuation">{</span>    doFirst <span class="token punctuation">{</span>        println <span class="token string">"Before reading the project version"</span>    <span class="token punctuation">}</span>    doLast <span class="token punctuation">{</span>        println <span class="token string">"Version: $version"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在动作列表的开始添加 doFirst 闭包</span>printVersion<span class="token operator">.</span>doFirst <span class="token punctuation">{</span> println <span class="token string">"First action"</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在动作列表的最后添加闭包</span>printVersion<span class="token operator">.</span>doLast <span class="token punctuation">{</span> println <span class="token string">"Last action"</span> <span class="token punctuation">}</span> </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718172034922.png"></p><h2 id="2-2-定义task依赖"><a href="#2-2-定义task依赖" class="headerlink" title="2.2 定义task依赖"></a>2.2 定义task依赖</h2><p>dependsOn 方法允许声明依赖一个或多个 task。</p><pre class=" language-groovy"><code class="language-groovy">version <span class="token operator">=</span> <span class="token string">'0.1-SNAPSHOT'</span>task first <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        println <span class="token string">"first"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>task second <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        println <span class="token string">"second"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 指定多个 task 依赖</span>task <span class="token function">printVersion</span><span class="token punctuation">(</span>dependsOn<span class="token punctuation">:</span> <span class="token punctuation">[</span>second<span class="token punctuation">,</span> first<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        logger<span class="token operator">.</span>quiet <span class="token string">"Version: $version"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>task third <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        println <span class="token string">"third"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明依赖时按名称引用task</span>third<span class="token operator">.</span><span class="token function">dependsOn</span><span class="token punctuation">(</span><span class="token string">'printVersion'</span><span class="token punctuation">)</span>     </code></pre><p>通过调用 task third 来执行依赖链上其他 task，<code>gradle -q third</code></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718172555286.png"></p><h2 id="2-3-终结器-task"><a href="#2-3-终结器-task" class="headerlink" title="2.3 终结器 task"></a>2.3 终结器 task</h2><p>在实践中，你会发现所依赖的 task 执行后需要清理某种资源。一个典型的例子 就是 Web 容器需要对已经部署的应用程序运行集成测试。针对这种情景 Gradle提供了终结器 task(finalizertask)，即使终结器 task 失败了，Gradle 的 task 也会按预 期运行。”下面的代码片段展示了如何通过使用 Task 方法 finalizedBy 来使用一个 特定的终结器task。</p><pre class=" language-groovy"><code class="language-groovy">task first <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        println <span class="token string">"first"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>task second <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        println <span class="token string">"second"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明一个 task 被另一个终结</span>first<span class="token operator">.</span>finalizedBy second</code></pre><p>gradle -q first</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718173150154.png"></p><h2 id="2-4-task-配置"><a href="#2-4-task-配置" class="headerlink" title="2.4 task 配置"></a>2.4 task 配置</h2><p>version.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">major</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">minor</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">release</span><span class="token punctuation">=</span><span class="token attr-value">false</span></code></pre><p>build.gradle</p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">// Project 提供的file方法，创建一个相对于目录的java.io.File实例</span>ext<span class="token operator">.</span>versionFile <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'version.properties'</span><span class="token punctuation">)</span>task loadVersion <span class="token punctuation">{</span>    project<span class="token operator">.</span>version <span class="token operator">=</span> <span class="token function">readVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ProjectVersion <span class="token function">readVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    logger<span class="token operator">.</span>quiet <span class="token string">'Reading the version file.'</span>    <span class="token comment" spellcheck="true">// 文件不存在，抛出异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>versionFile<span class="token operator">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">GradleException</span><span class="token punctuation">(</span><span class="token string">"Required version file does not exist: $versionFile.canonicalPath"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Properties versionProps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    versionFile<span class="token operator">.</span>withInputStream <span class="token punctuation">{</span> stream <span class="token operator">-></span>        <span class="token comment" spellcheck="true">// 读取文件</span>        versionProps<span class="token operator">.</span><span class="token function">load</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">ProjectVersion</span><span class="token punctuation">(</span>versionProps<span class="token operator">.</span>major<span class="token operator">.</span><span class="token function">toInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> versionProps<span class="token operator">.</span>minor<span class="token operator">.</span><span class="token function">toInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> versionProps<span class="token operator">.</span>release<span class="token operator">.</span><span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>task printVersion <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        logger<span class="token operator">.</span>quiet <span class="token string">"Version: $version"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ProjectVersion</span> <span class="token punctuation">{</span>    Integer major    Integer minor    Boolean release    <span class="token function">ProjectVersion</span><span class="token punctuation">(</span>Integer major<span class="token punctuation">,</span> Integer minor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">.</span>major <span class="token operator">=</span> major        <span class="token keyword">this</span><span class="token operator">.</span>minor <span class="token operator">=</span> minor        <span class="token keyword">this</span><span class="token operator">.</span>release <span class="token operator">=</span> Boolean<span class="token operator">.</span>FALSE    <span class="token punctuation">}</span>    <span class="token function">ProjectVersion</span><span class="token punctuation">(</span>Integer major<span class="token punctuation">,</span> Integer minor<span class="token punctuation">,</span> Boolean release<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>major<span class="token punctuation">,</span> minor<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token operator">.</span>release <span class="token operator">=</span> release    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token string">"$major.$minor${release ? '' : '-SNAPSHOT'}"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718174053525.png"></p><h2 id="2-5-task的input和output"><a href="#2-5-task的input和output" class="headerlink" title="2.5 task的input和output"></a>2.5 task的input和output</h2><p>Gradle通过比较两个构建task的inputs和outputs来决定task是否是最新的，如图4.6所示。自从最后一个task 执行以来，如果inputs和outputs没有发生变化，则认为task是最新的。因此，只有当inputs和outputs不同时，task 才运行；否则将跳过。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718174219332.png"></p><p>version.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">major</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">minor</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">release</span><span class="token punctuation">=</span><span class="token attr-value">true</span></code></pre><p>gradle.build</p><pre class=" language-groovy"><code class="language-groovy">ext<span class="token operator">.</span>versionFile <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'version.properties'</span><span class="token punctuation">)</span>task loadVersion <span class="token punctuation">{</span>    project<span class="token operator">.</span>version <span class="token operator">=</span> <span class="token function">readVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ProjectVersion <span class="token function">readVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    logger<span class="token operator">.</span>quiet <span class="token string">'Reading the version file.'</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>versionFile<span class="token operator">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">GradleException</span><span class="token punctuation">(</span><span class="token string">"Required version file does not exit: $versionFile.canonicalPath"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Properties versionProps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    versionFile<span class="token operator">.</span>withInputStream <span class="token punctuation">{</span> stream <span class="token operator">-></span>        versionProps<span class="token operator">.</span><span class="token function">load</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">new</span> <span class="token class-name">ProjectVersion</span><span class="token punctuation">(</span>versionProps<span class="token operator">.</span>major<span class="token operator">.</span><span class="token function">toInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> versionProps<span class="token operator">.</span>minor<span class="token operator">.</span><span class="token function">toInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> versionProps<span class="token operator">.</span>release<span class="token operator">.</span><span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>task <span class="token function">makeReleaseVersion</span><span class="token punctuation">(</span>group<span class="token punctuation">:</span> <span class="token string">'versioning'</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">'Makes project a release version.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    inputs<span class="token operator">.</span><span class="token function">property</span><span class="token punctuation">(</span><span class="token string">'release'</span><span class="token punctuation">,</span> version<span class="token operator">.</span>release<span class="token punctuation">)</span>    outputs<span class="token operator">.</span>file versionFile    doLast <span class="token punctuation">{</span>        version<span class="token operator">.</span>release <span class="token operator">=</span> <span class="token boolean">true</span>        ant<span class="token operator">.</span><span class="token function">propertyfile</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> versionFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">entry</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token string">'release'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span> operation<span class="token punctuation">:</span> <span class="token string">'='</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ProjectVersion</span> <span class="token punctuation">{</span>    Integer major    Integer minor    Boolean release    <span class="token function">ProjectVersion</span><span class="token punctuation">(</span>Integer major<span class="token punctuation">,</span> Integer minor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token operator">.</span>major <span class="token operator">=</span> major        <span class="token keyword">this</span><span class="token operator">.</span>minor <span class="token operator">=</span> minor        <span class="token keyword">this</span><span class="token operator">.</span>release <span class="token operator">=</span> Boolean<span class="token operator">.</span>FALSE    <span class="token punctuation">}</span>    <span class="token function">ProjectVersion</span><span class="token punctuation">(</span>Integer major<span class="token punctuation">,</span> Integer minor<span class="token punctuation">,</span> Boolean release<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>major<span class="token punctuation">,</span> minor<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token operator">.</span>release <span class="token operator">=</span> release    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token string">"$major.$minor${release ? '' : '-SNAPSHOT'}"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718175909781.png"></p><h2 id="2-6-自定义task"><a href="#2-6-自定义task" class="headerlink" title="2.6 自定义task"></a>2.6 自定义task</h2><p><strong>编写自定的 task 类</strong></p><p>编写一个继承自 Gradle 默认 DefaultTask 的类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ReleaseVersionTask</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultTask</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过注解声明task的输入/输出</span>    <span class="token annotation punctuation">@Input</span> Boolean release    <span class="token annotation punctuation">@OutputFile</span> File destFile    <span class="token comment" spellcheck="true">// 在构造器中设置task的group和description属性</span>    <span class="token function">ReleaseVersionTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        group <span class="token operator">=</span> <span class="token string">'versioning'</span>        description <span class="token operator">=</span> <span class="token string">'Makes project a release version.'</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用注解声明将被执行的方法</span>    <span class="token annotation punctuation">@TaskAction</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        project<span class="token punctuation">.</span>version<span class="token punctuation">.</span>release <span class="token operator">=</span> <span class="token boolean">true</span>        ant<span class="token punctuation">.</span><span class="token function">propertyfile</span><span class="token punctuation">(</span>file<span class="token operator">:</span> destFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">entry</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token string">'release'</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span> operation<span class="token operator">:</span> <span class="token string">'='</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">'true'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>使用自定义task</strong></p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">// 定义一个增强的 ReleaseVersionTask 类型的 task</span>task <span class="token function">makeReleaseVersion</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> ReleaseVersionTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置自定义 task 的属性</span>    release <span class="token operator">=</span> version<span class="token operator">.</span>release    destFile <span class="token operator">=</span> versionFile<span class="token punctuation">}</span></code></pre><h2 id="2-7-Gradle-内置task"><a href="#2-7-Gradle-内置task" class="headerlink" title="2.7 Gradle 内置task"></a>2.7 Gradle 内置task</h2><p>Gradle 的内置 task 类型都是 DefaultTask 的派生类。因此，它们可以被构建脚本中的增强的 task 使用。Gradle 提供了广泛的 task 类型，但是在这个例子中只使用两个。下面的清单显示了在产品发布过程中用到的task类型 Zip 和Copy。</p><pre class=" language-groovy"><code class="language-groovy">task <span class="token function">createDistribution</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Zip<span class="token punctuation">,</span> dependsOn<span class="token punctuation">:</span> makeReleaseVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>    from war<span class="token operator">.</span>outputs<span class="token operator">.</span>files    <span class="token function">from</span><span class="token punctuation">(</span>sourceSets<span class="token operator">*.</span>allSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        into <span class="token string">'src'</span>    <span class="token punctuation">}</span>    <span class="token function">from</span><span class="token punctuation">(</span>rootDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        include versionFile<span class="token operator">.</span>name    <span class="token punctuation">}</span><span class="token punctuation">}</span>task <span class="token function">backupReleaseDistribution</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Copy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    from createDistribution<span class="token operator">.</span>outputs<span class="token operator">.</span>files    into <span class="token string">"$buildDir/backup"</span><span class="token punctuation">}</span>task <span class="token function">release</span><span class="token punctuation">(</span>dependsOn<span class="token punctuation">:</span> backupReleaseDistribution<span class="token punctuation">)</span> <span class="token punctuation">{</span>    doLast<span class="token punctuation">{</span>        logger<span class="token operator">.</span>quiet <span class="token string">'Releasing the project...'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2-8-task规则"><a href="#2-8-task规则" class="headerlink" title="2.8 task规则"></a>2.8 task规则</h2><p>有时候你可能会发现在某些情况下，自己所编写的多个task却做着类似的事情。例如，你想通过两个task扩展版本管理功能：一个用来增加项目的主版本，另一个对于次版本类别做同样的事情。假定这两个task都会将变化持续保存到版本文件中。</p><p>如果你比较下面清单中这两个 task 的 doLast 行为，就会发现主要是复制了代码并应用了次版本的变化。</p><p>incrementMajorVersion</p><pre class=" language-groovy"><code class="language-groovy">task <span class="token function">incrementMajorVersion</span><span class="token punctuation">(</span>group<span class="token punctuation">:</span> <span class="token string">'versioning'</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">'Increments project major version.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        String currentVersion <span class="token operator">=</span> version<span class="token operator">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">++</span>version<span class="token operator">.</span>major        String newVersion <span class="token operator">=</span> version<span class="token operator">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        logger<span class="token operator">.</span>info <span class="token string">"Incrementing major project version: $currentVersion -> $newVersion"</span>        <span class="token comment" spellcheck="true">// 使用 Ant 的property来增加属性文件中的特定属性</span>        ant<span class="token operator">.</span><span class="token function">propertyfile</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> versionFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">entry</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token string">'major'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">'int'</span><span class="token punctuation">,</span> operation<span class="token punctuation">:</span> <span class="token string">'+'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>incrementMinorVersion</p><pre class=" language-groovy"><code class="language-groovy">task <span class="token function">incrementMinorVersion</span><span class="token punctuation">(</span>group<span class="token punctuation">:</span> <span class="token string">'versioning'</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">'Increments project minor version.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        String currentVersion <span class="token operator">=</span> version<span class="token operator">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">++</span>version<span class="token operator">.</span>minor        String newVersion <span class="token operator">=</span> version<span class="token operator">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        logger<span class="token operator">.</span>info <span class="token string">"Incrementing minor project version: $currentVersion -> $newVersion"</span>        <span class="token comment" spellcheck="true">// 使用 Ant 的property来增加属性文件中的特定属性</span>        ant<span class="token operator">.</span><span class="token function">propertyfile</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> versionFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">entry</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token string">'minor'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">'int'</span><span class="token punctuation">,</span> operation<span class="token punctuation">:</span> <span class="token string">'+'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>合并相似逻辑到 task 规则中</p><pre class=" language-groovy"><code class="language-groovy">tasks<span class="token operator">.</span><span class="token function">addRule</span><span class="token punctuation">(</span><span class="token string">"Pattern: increment&lt;Classifier>Version – Increments the project version classifier."</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> String taskName <span class="token operator">-></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>taskName<span class="token operator">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> taskName<span class="token operator">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'Version'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">task</span><span class="token punctuation">(</span>taskName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            doLast <span class="token punctuation">{</span>                String classifier <span class="token operator">=</span> <span class="token punctuation">(</span>taskName <span class="token operator">-</span> <span class="token string">'increment'</span> <span class="token operator">-</span> <span class="token string">'Version'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                String currentVersion <span class="token operator">=</span> version<span class="token operator">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>classifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">'major'</span><span class="token punctuation">:</span> <span class="token operator">++</span>version<span class="token operator">.</span>major                        <span class="token keyword">break</span>                    <span class="token keyword">case</span> <span class="token string">'minor'</span><span class="token punctuation">:</span> <span class="token operator">++</span>version<span class="token operator">.</span>minor                        <span class="token keyword">break</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">GradleException</span><span class="token punctuation">(</span><span class="token string">"Invalid version type '$classifier. Allowed types: ['Major', 'Minor']"</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                String newVersion <span class="token operator">=</span> version<span class="token operator">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                logger<span class="token operator">.</span>info <span class="token string">"Incrementing $classifier project version: $currentVersion -> $newVersion"</span>                ant<span class="token operator">.</span><span class="token function">propertyfile</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> versionFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">entry</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> classifier<span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">'int'</span><span class="token punctuation">,</span> operation<span class="token punctuation">:</span> <span class="token string">'+'</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用 gradle tasks 查看</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718182548343.png"></p><h1 id="3-构建"><a href="#3-构建" class="headerlink" title="3. 构建"></a>3. 构建</h1><p>假设你想在开发周期中尽可能早地获得失败构建的反馈信息。对失败构建一个典型的反应是发送邮件给团队中的所有开发人员，以使代码恢复正常。有两种方式可以编写回调生命周期事件：在闭包中，或者是通过 Gradle API 所提供的监听器接口实现。</p><p>Gradle 不会引导你采用哪种方式去监听生命周期事件，这完全取决于你的选择。采用监听器实现最大的优势在于你处理的类通过编写单元测试是完全可测试的。下面为你提供一个有用的生命周期钩子(hook) 的想法，如图4.11 所示。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718182947161.png"></p><h2 id="3-1-连接task执行"><a href="#3-1-连接task执行" class="headerlink" title="3.1 连接task执行"></a>3.1 连接task执行</h2><p>在配置时，Gradle 决定了在执行阶段要运行的task的顺序。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718183157569.png"></p><p>通过生命周期钩子实现发布版本功能</p><pre class=" language-groovy"><code class="language-groovy">gradle<span class="token operator">.</span>taskGraph<span class="token operator">.</span>whenReady <span class="token punctuation">{</span> TaskExecutionGraph taskGraph <span class="token operator">-></span>    <span class="token comment" spellcheck="true">// 查看 task图 中是否包含 task release</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>taskGraph<span class="token operator">.</span><span class="token function">hasTask</span><span class="token punctuation">(</span>release<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>version<span class="token operator">.</span>release<span class="token punctuation">)</span> <span class="token punctuation">{</span>            version<span class="token operator">.</span>release <span class="token operator">=</span> <span class="token boolean">true</span>            ant<span class="token operator">.</span><span class="token function">propertyfile</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> versionFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">entry</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token string">'release'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span> operation<span class="token punctuation">:</span> <span class="token string">'='</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>task <span class="token function">createDistribution</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Zip<span class="token punctuation">)</span> <span class="token punctuation">{</span>    from war<span class="token operator">.</span>outputs<span class="token operator">.</span>files    <span class="token function">from</span><span class="token punctuation">(</span>sourceSets<span class="token operator">*.</span>allSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        into <span class="token string">'src'</span>    <span class="token punctuation">}</span>    <span class="token function">from</span><span class="token punctuation">(</span>rootDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        include versionFile<span class="token operator">.</span>name    <span class="token punctuation">}</span><span class="token punctuation">}</span>task <span class="token function">backupReleaseDistribution</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Copy<span class="token punctuation">)</span> <span class="token punctuation">{</span>    from createDistribution<span class="token operator">.</span>outputs<span class="token operator">.</span>files    into <span class="token string">"$buildDir/backup"</span><span class="token punctuation">}</span>task <span class="token function">release</span><span class="token punctuation">(</span>dependsOn<span class="token punctuation">:</span> backupReleaseDistribution<span class="token punctuation">)</span> <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        logger<span class="token operator">.</span>quiet <span class="token string">'Releasing the project...'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-2-实现task执行图监听器"><a href="#3-2-实现task执行图监听器" class="headerlink" title="3.2 实现task执行图监听器"></a>3.2 实现task执行图监听器</h2><p>用于监听 task执行图 事件的接口是由 TaskExecutionGraphListener 提供的。构建监听器需要实现 graphPopulated 方法。</p><p>通过声明周期监听器实现发布版本功能</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ReleaseVersionListener</span> <span class="token keyword">implements</span> <span class="token class-name">TaskExecutionGraphListener</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> String releaseTaskPath <span class="token operator">=</span> <span class="token string">':release'</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">graphPopulated</span><span class="token punctuation">(</span>TaskExecutionGraph taskGraph<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>taskGraph<span class="token punctuation">.</span><span class="token function">hasTask</span><span class="token punctuation">(</span>releaseTaskPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Task<span class="token operator">></span> allTasks <span class="token operator">=</span> taskGraph<span class="token punctuation">.</span>allTasks            Task releaseTask <span class="token operator">=</span> allTasks<span class="token punctuation">.</span>find <span class="token punctuation">{</span> it<span class="token punctuation">.</span>path <span class="token operator">==</span> releaseTaskPath <span class="token punctuation">}</span>            Project project <span class="token operator">=</span> releaseTask<span class="token punctuation">.</span>project            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>project<span class="token punctuation">.</span>version<span class="token punctuation">.</span>release<span class="token punctuation">)</span> <span class="token punctuation">{</span>                project<span class="token punctuation">.</span>version<span class="token punctuation">.</span>release <span class="token operator">=</span> <span class="token boolean">true</span>                project<span class="token punctuation">.</span>ant<span class="token punctuation">.</span><span class="token function">propertyfile</span><span class="token punctuation">(</span>file<span class="token operator">:</span> project<span class="token punctuation">.</span>versionFile<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">entry</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token string">'release'</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">'string'</span><span class="token punctuation">,</span> operation<span class="token operator">:</span> <span class="token string">'='</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">'true'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 注册监听器到 task 图</span>gradle<span class="token punctuation">.</span>taskGraph<span class="token punctuation">.</span><span class="token function">addTaskExecutionGraphListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReleaseVersionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Gradle】-4.Gradle构建Spring Boot项目</title>
      <link href="posts/4d80b27.html"/>
      <url>posts/4d80b27.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h1><p><strong>需要已在本地安装好了 Gradle，并配置环境变量</strong></p><h2 id="1-1-新建项目"><a href="#1-1-新建项目" class="headerlink" title="1.1 新建项目"></a>1.1 新建项目</h2><p>创建 spring boot 项目</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719124317076.png"></p><p>Type 选择 Gradle Project</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719124446086.png"></p><p>添加 web mvc 依赖</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719124503920.png"></p><p>finish 创建完成</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719124519051.png"></p><p>整个创建过程中，没法选择本地的 Gradle，所以要在项目创建完成后手动选择</p><h2 id="1-2-选择本地-Gradle"><a href="#1-2-选择本地-Gradle" class="headerlink" title="1.2 选择本地 Gradle"></a>1.2 选择本地 Gradle</h2><p>进入项目后会开始联网下载 Gradle，这个是由 IDEA 里面的 Gradle 插件决定的。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719125116023.png"></p><p>先停止下载，然后在 Settings -&gt; Build, Execution, Deployment -&gt; Gradle 中选择本地安装好的版本</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719125416052.png"></p><p>然后保存，就不会再下载 Gradle，可以直接成功</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719125530354.png"></p><h1 id="2-项目说明"><a href="#2-项目说明" class="headerlink" title="2. 项目说明"></a>2. 项目说明</h1><h2 id="2-1-项目结构"><a href="#2-1-项目结构" class="headerlink" title="2.1 项目结构"></a>2.1 项目结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719125908442.png"></p><h2 id="2-2-脚本说明"><a href="#2-2-脚本说明" class="headerlink" title="2.2 脚本说明"></a>2.2 脚本说明</h2><p>build.gradle 是整个项目的构建脚本，里面包含了项目依赖、项目属性、仓库、插件等多种配置。</p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">// 配置插件</span>plugins <span class="token punctuation">{</span>    id <span class="token string">'org.springframework.boot'</span> version <span class="token string">'2.1.15.RELEASE'</span>    id <span class="token string">'io.spring.dependency-management'</span> version <span class="token string">'1.0.9.RELEASE'</span>    id <span class="token string">'java'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 配置 group、version 属性</span>group <span class="token operator">=</span> <span class="token string">'com.soulballad.usage'</span>version <span class="token operator">=</span> <span class="token string">'0.0.1-SNAPSHOT'</span><span class="token comment" spellcheck="true">// 兼容 java 1.8 版本</span>sourceCompatibility <span class="token operator">=</span> <span class="token string">'1.8'</span><span class="token comment" spellcheck="true">// 配置依赖下载的仓库地址</span>repositories <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加 阿里云，优先使用阿里云仓库</span>    maven <span class="token punctuation">{</span> url <span class="token string">'http://maven.aliyun.com/nexus/content/groups/public/'</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 其次使用 maven 中央仓库</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 配置依赖</span>dependencies <span class="token punctuation">{</span>    implementation <span class="token string">'org.springframework.boot:spring-boot-starter-web'</span>    testImplementation <span class="token string">'org.springframework.boot:spring-boot-starter-test'</span><span class="token punctuation">}</span></code></pre><h2 id="2-3-执行构建"><a href="#2-3-执行构建" class="headerlink" title="2.3 执行构建"></a>2.3 执行构建</h2><p>在命令行中使用 <code>gradle build</code> 命令对整个项目进行构建，构建完成后会生成一个 <code>build</code> 文件夹，里面包含编译的class，打包的jar以及测试报告等一系列文件。</p><p>初次构建时，需要编译生成所有文件，耗时较长。再次构建时，Gradle 会进行增量构建，耗时大大缩短。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719130743188.png"></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719130954520.png"></p><h1 id="3-项目运行"><a href="#3-项目运行" class="headerlink" title="3. 项目运行"></a>3. 项目运行</h1><p>默认情况下，项目源文件中只包含一个 Spring Boot 的启动类，这里给它添加一个 DemoController，测试一下 Gradle 构建的项目是否能顺利运行。</p><p>DemoController.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>soulballad<span class="token punctuation">.</span>usage<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/demo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"the first gradle spring boot project!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动项目，访问 <a href="http://localhost:8080/demo" target="_blank" rel="noopener">http://localhost:8080/demo</a> ，查看输出信息</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719131547973.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Gradle】-3.Gradle构建Java项目</title>
      <link href="posts/ce500afa.html"/>
      <url>posts/ce500afa.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Java开发"><a href="#1-Java开发" class="headerlink" title="1. Java开发"></a>1. Java开发</h1><p>Java插件是Gradle自身装载的一个插件。Java插件提供的基本功能远比源代码编译和打包多。它为你的项目建立了一个标准的项目布局，并确保有意义、有顺序地执行任务。现在，为你的项目创建一个构建脚本并使用Java插件。</p><h2 id="1-1-使用插件"><a href="#1-1-使用插件" class="headerlink" title="1.1 使用插件"></a>1.1 使用插件</h2><p>使用java插件</p><pre class=" language-groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span></code></pre><h2 id="1-2-定制项目"><a href="#1-2-定制项目" class="headerlink" title="1.2 定制项目"></a>1.2 定制项目</h2><p>可以修改项目和插件属性</p><pre class=" language-groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span>version <span class="token operator">=</span> <span class="token number">0.1</span><span class="token comment" spellcheck="true">// 设置java版本编译兼容1.6</span>sourceCompatibility <span class="token operator">=</span> <span class="token number">1.6</span>jar <span class="token punctuation">{</span>    manifest <span class="token punctuation">{</span>        attributes <span class="token string">'Main-Class'</span><span class="token punctuation">:</span> <span class="token string">'com.manning.gia.todo.ToDoApp'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以修改项目结构</p><pre class=" language-groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span>version <span class="token operator">=</span> <span class="token number">0.1</span>sourceCompatibility <span class="token operator">=</span> <span class="token number">1.6</span><span class="token comment" spellcheck="true">// 指定打包jar的启动类属性</span>jar <span class="token punctuation">{</span>    manifest <span class="token punctuation">{</span>        attributes <span class="token string">'Main-Class'</span><span class="token punctuation">:</span> <span class="token string">'com.manning.gia.todo.ToDoApp'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 修改项目结构</span>sourceSets <span class="token punctuation">{</span>    main <span class="token punctuation">{</span>        java <span class="token punctuation">{</span>            srcDirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    test <span class="token punctuation">{</span>        java <span class="token punctuation">{</span>            srcDirs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 指定编译后文件输出目录</span>buildDir <span class="token operator">=</span> <span class="token string">'out'</span></code></pre><h2 id="1-3-使用外部依赖"><a href="#1-3-使用外部依赖" class="headerlink" title="1.3 使用外部依赖"></a>1.3 使用外部依赖</h2><p>定义仓库</p><pre class=" language-groovy"><code class="language-groovy">repositories <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置对maven central仓库的访问快捷方式</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>定义依赖</p><pre class=" language-groovy"><code class="language-groovy">dependencies <span class="token punctuation">{</span>    compile group<span class="token punctuation">:</span> <span class="token string">'org.apache.commons'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'commons-lang3'</span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token string">'3.1'</span><span class="token punctuation">}</span></code></pre><h1 id="2-web开发"><a href="#2-web开发" class="headerlink" title="2. web开发"></a>2. web开发</h1><p>build.gradle</p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">// 配置插件</span>apply plugin<span class="token punctuation">:</span> <span class="token string">'java'</span>apply plugin<span class="token punctuation">:</span> <span class="token string">'war'</span>apply plugin<span class="token punctuation">:</span> <span class="token string">'jetty'</span><span class="token comment" spellcheck="true">// 配置仓库地址</span>repositories <span class="token punctuation">{</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 配置依赖</span>dependencies <span class="token punctuation">{</span>    providedCompile <span class="token string">'javax.servlet:servlet-api:2.5'</span>    runtime <span class="token string">'javax.servlet:jstl:1.1.2'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定制jetty插件</span>jettyRun <span class="token punctuation">{</span>    httpPort <span class="token operator">=</span> <span class="token number">9090</span>    contextPath <span class="token operator">=</span> <span class="token string">'todo'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 改变web的源代码目录，默认webapp</span>webAppDirName <span class="token operator">=</span> <span class="token string">'webfiles'</span><span class="token comment" spellcheck="true">// 将css和js目录转移到war根目录下的static下</span>war <span class="token punctuation">{</span>    from <span class="token string">'static'</span><span class="token punctuation">}</span></code></pre><p>构建项目</p><pre class=" language-shell"><code class="language-shell">gradle build</code></pre><p>运行jetty</p><pre class=" language-groovy"><code class="language-groovy">gradle jettyRun</code></pre><h1 id="3-Gradle包装器"><a href="#3-Gradle包装器" class="headerlink" title="3. Gradle包装器"></a>3. Gradle包装器</h1><p>它是 Gradle 的核心特性，能够让机器在没有安装 Gradle 运行时的情况下运行Gradle 构建。它也让构建脚本运行在一个指定的 Gradle 版本上。它是通过自动从中心仓库下载 Gradle 运行时，解压和使用来实现的。最终的目标是创造一个独立于系统、 系统配置和 Gradle 版本的可靠和可重复的构建。</p><h2 id="3-1-配置包装器"><a href="#3-1-配置包装器" class="headerlink" title="3.1 配置包装器"></a>3.1 配置包装器</h2><p>在构建脚本中添加包装器任务</p><pre class=" language-groovy"><code class="language-groovy">task <span class="token function">wrapper</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Wrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//指定要使用的gradle版本</span>    gradleVersion <span class="token operator">=</span> <span class="token string">'5.0'</span><span class="token punctuation">}</span></code></pre><p>同时提供用于linux和windows使用的脚本 gradlew 和 gradlew.bat</p><h2 id="3-2-使用包装器"><a href="#3-2-使用包装器" class="headerlink" title="3.2 使用包装器"></a>3.2 使用包装器</h2><pre class=" language-shell"><code class="language-shell">gradlew.bat jettyRun</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718144713357.png"></p><p>当包装器任务被执行时，Gradle 运行时会被下载、解包并使用</p><h2 id="3-3-定制包装器"><a href="#3-3-定制包装器" class="headerlink" title="3.3 定制包装器"></a>3.3 定制包装器</h2><pre class=" language-groovy"><code class="language-groovy">task <span class="token function">wrapper</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Wrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//请求的gradle版本</span>    gradleVersion <span class="token operator">=</span> <span class="token string">'5.0'</span>    <span class="token comment" spellcheck="true">//获取gradle包装器的地址</span>    distributionUrl <span class="token operator">=</span> <span class="token string">'http://myenterprise.com/gradle/dists'</span>    <span class="token comment" spellcheck="true">//包装器被解压后存放的相对路径</span>    distributionPath <span class="token operator">=</span> <span class="token string">'gradle-dists'</span><span class="token punctuation">}</span></code></pre><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4. 参考"></a>4. 参考</h1><ol><li>《实战Gradle 中文版》</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Gradle】-2.Gradle安装和常用命令</title>
      <link href="posts/83b68e34.html"/>
      <url>posts/83b68e34.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装前检查"><a href="#1-安装前检查" class="headerlink" title="1. 安装前检查"></a>1. 安装前检查</h1><p>Gradle 依赖 JDK， 检查 JDK 是否已经安装 </p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718123347370.png"></p><h1 id="2-安装-Gradle"><a href="#2-安装-Gradle" class="headerlink" title="2. 安装 Gradle"></a>2. 安装 Gradle</h1><h2 id="2-1-下载-Gradle"><a href="#2-1-下载-Gradle" class="headerlink" title="2.1 下载 Gradle"></a>2.1 下载 Gradle</h2><p><a href="https://gradle.org/releases/" target="_blank" rel="noopener">https://gradle.org/releases/</a></p><p><a href="https://services.gradle.org/distributions/" target="_blank" rel="noopener">https://services.gradle.org/distributions/</a></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200715223051320.png"></p><h2 id="2-2-设置-Gradle-环境变量"><a href="#2-2-设置-Gradle-环境变量" class="headerlink" title="2.2 设置 Gradle 环境变量"></a>2.2 设置 Gradle 环境变量</h2><ol><li><p>windows 下安装</p><p>环境变量中增加名为 <code>GRADLE_HOME</code> 的变量名，值为 Gralde 的解压路径，例如： E:\Gradle</p><p> <code>GRADLE_HOME = E:\Develop\OpenSource\gradle-6.5.1-all</code></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718123537773.png"></p></li></ol><p>   在path的后追加  <code>%GRADLE_HOME%\bin</code>；</p><p>   <img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718123628530.png"></p><ol start="2"><li><p>linux 下安装</p><pre class=" language-shell"><code class="language-shell">export GRADLE_HOME=/opt/gradleexport PATH=$PATH:$GRADLE_HOME/bin</code></pre></li></ol><h2 id="2-3-验证-Gradle-是否安装成功"><a href="#2-3-验证-Gradle-是否安装成功" class="headerlink" title="2.3 验证 Gradle 是否安装成功"></a>2.3 验证 Gradle 是否安装成功</h2><p>使用 gradle -v 命令查看 Gradle 版本信息</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718123746956.png"></p><h2 id="2-4-修改默认缓存目录"><a href="#2-4-修改默认缓存目录" class="headerlink" title="2.4 修改默认缓存目录"></a>2.4 修改默认缓存目录</h2><p>gradle 默认缓存目录在 C:\Users\{user}\.gradle 目录下，类似 maven 默认的 .m2 目录，可以把它修改为其他地方</p><p>使用命令 <code>[gradle -g 目录路径]</code> 进行修改，例如 gradle -g E:\gradle\repository</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718124043581.png"></p><h1 id="3-hello-world"><a href="#3-hello-world" class="headerlink" title="3. hello world"></a>3. hello world</h1><p>新建 build.gradle 文件，内容如下</p><pre class=" language-groovy"><code class="language-groovy">task helloWorld <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        println <span class="token string">'hello World'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里新建了一个 task，它只有一个操作，就是 doLast，在调用 doLast 的时候打印 “hello World”，这里的 println 就相当于 java 中的 System.out.println；</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718125236469.png"></p><p>使用 <code>gradle -q helloWorld</code> 命令运行 task，输出 <code>hello world</code></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718125415399.png"></p><h1 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4. 常用命令"></a>4. 常用命令</h1><h2 id="4-1-列出所有task"><a href="#4-1-列出所有task" class="headerlink" title="4.1 列出所有task"></a>4.1 列出所有task</h2><pre class=" language-shell"><code class="language-shell">gradle -q tasks</code></pre><p>使用 –all 参数查看详细信息</p><pre class=" language-shell"><code class="language-shell">gradle -q tasks --all</code></pre><h2 id="4-2-执行-task"><a href="#4-2-执行-task" class="headerlink" title="4.2 执行 task"></a>4.2 执行 task</h2><p>有如下脚本文件 build.gradle，定义了几个task</p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">// 定义一个任务 startSession</span>task startSession <span class="token punctuation">{</span>    doLast <span class="token punctuation">{</span>        <span class="token function">chant</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义一个 chant 方法</span><span class="token keyword">def</span> <span class="token function">chant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ant<span class="token operator">.</span>echo <span class="token string">'Repeat after me...'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 生成3个任务，分别是 yayGradle0，yayGradle1，yayGradle2</span><span class="token number">3</span><span class="token operator">.</span>times <span class="token punctuation">{</span>    task <span class="token string">"yayGradle$it"</span> <span class="token punctuation">{</span>        doLast <span class="token punctuation">{</span>            println <span class="token string">'Gradle rocks'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// dependsOn 表示依赖关系，yayGradle0 的执行依赖于 startSession</span>yayGradle0<span class="token operator">.</span>dependsOn startSessionyayGradle2<span class="token operator">.</span>dependsOn yayGradle1<span class="token punctuation">,</span> yayGradle0<span class="token comment" spellcheck="true">// groupTherapy 执行依赖于 yayGradle2</span>task <span class="token function">groupTherapy</span><span class="token punctuation">(</span>dependsOn<span class="token punctuation">:</span> yayGradle2<span class="token punctuation">)</span></code></pre><p>使用 <code>gradle yayGradle0 groupTherapy</code> 来进行调用，输出如下结果：</p><pre class=" language-shell"><code class="language-shell">gradle yayGradle0 groupTherapy</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718131455303.png"></p><p>结合输入结果和脚本，可以得到如下执行顺序：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718130518288.png"></p><p>如果要排除一个任务，可以使用 -x 参数</p><pre class=" language-shell"><code class="language-shell"># 排除 yayGradle0gradle groupTherapy -x yayGradle0 </code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718131719071.png"></p><h2 id="4-3-命令行参数"><a href="#4-3-命令行参数" class="headerlink" title="4.3 命令行参数"></a>4.3 命令行参数</h2><p>部分参数</p><pre class=" language-shell"><code class="language-shell">-?, -h, --help                     显示帮助信息.-b, --build-file                   默认构建文件是 build.gradle，可以使用该参数指定其他文件.--build-cache                      开启构建缓存-c, --settings-file                指定设置文件，默认是 settings.gradle.--continue                         中间任务失败也继续执行.-D, --system-prop                  通过JVM的方式指定系统参数 (e.g. -Dmyprop=myvalue).-d, --debug                        以debug方式打印日志.--daemon                           使用Gradle守护进行执行构建-g, --gradle-user-home             指定Gradle的默认目录 user home-I, --init-script                  指定初始化脚本.-i, --info                         指定日志级别.--no-build-cache                   关闭构建缓存.-P, --project-prop                 指定参数，可以使用-P向构建脚本传参 (e.g -Pmyprop=myvalue).-p, --project-dir                  指定脚本运行目录，默认当前目录-q, --quiet                        只打印error日志.-v, --version                      打印版本信息.-w, --warn                         日志界别设置为 warn.-x, --exclude-task                 在构建过程中排除某个任务.</code></pre><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h1><ol><li>《实战Gradle 中文版》</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Gradle】-1.Gradle基础介绍</title>
      <link href="posts/8c005aec.html"/>
      <url>posts/8c005aec.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-项目自动化的好处"><a href="#1-项目自动化的好处" class="headerlink" title="1. 项目自动化的好处"></a>1. 项目自动化的好处</h1><ol><li>防止手动介入</li><li>创建可重复的构建</li><li>让构建便携</li></ol><h1 id="2-项目自动化的类型"><a href="#2-项目自动化的类型" class="headerlink" title="2. 项目自动化的类型"></a>2. 项目自动化的类型</h1><ol><li>按需构建：开发人员在自己的机器上触发构建</li><li>触发构建：代码提交到版本控制系统时触发构建</li><li>预定构建：通过定时任务进行构建</li></ol><h1 id="3-构建工具"><a href="#3-构建工具" class="headerlink" title="3. 构建工具"></a>3. 构建工具</h1><h2 id="3-1-构建工具的组成"><a href="#3-1-构建工具的组成" class="headerlink" title="3.1 构建工具的组成"></a>3.1 构建工具的组成</h2><p>构建文件+构建的输入输出+构建引擎+依赖管理器</p><p><strong>构建文件</strong></p><p>构建文件包含了构建所需的配置信息、定义外部依赖，例如第三方类库，还包含了以任务形式实现某个特殊目的的指令和它们的相互依赖关系。</p><p><strong>构建的输入输出</strong></p><p>一个任务会接收一个输入，然后执行一系列步骤，最后产生-一个输出。某些任务也许不需要输入，也不需要产生一个必要的输出。在复杂的任务依赖关系中，也许会使用一个依赖任务的输出作为输入。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200719112517549.png"></p><p><strong>构建引擎</strong></p><p>构建文件的一.步步指令或者规则集必须被翻译成构建工具可以理解的内部模型。构建引擎会在运行时处理构建文件，解析任务之间的依赖，设置好执行所需要的全部配置。<br>一旦内部模型建立好了， 引擎就会按照正确的顺序去执行一系列任务。某些构建工具还允许你通过API去访问这个模型，以便在运行时获取构建信息。</p><p><strong>依赖管理器</strong></p><p>依赖管理器用于处理你在build文件中声明的依赖定义，从工件仓库(例如，本地文件系统、一个FTP或者HTTP服务器)中解析它们，并使它们对项目可用。依赖通常是指外部依赖，一种JAR文件形式的可重用类库(例如，Log4j 对日志的支持)。该仓库就像是依赖的储藏所，通过标识符组织和描述它们，例如名字和版本。<br>一个典型的仓库可以是HTTP服务器或者本地文件系统。</p><h2 id="3-2-Java构建工具"><a href="#3-2-Java构建工具" class="headerlink" title="3.2 Java构建工具"></a>3.2 Java构建工具</h2><h3 id="3-2-1-Ant"><a href="#3-2-1-Ant" class="headerlink" title="3.2.1 Ant"></a>3.2.1 Ant</h3><p>Apache Ant (Another Neat Tool)是一个用Java编写的开源构建工具。其主要目 的是在Java项目中为常用任务提供自动化，例如编译源代码、运行单元测试、打包 JAR文件和生成Javadoc文档。另外，它还为文件系统和存档操作提供了许多不同 的预定义任务。如果任何一个任务不满足需求，那么你就可以用Java写新的任务来 扩展构建。<br>虽然Ant的核心是用Java编写的，但是build文件是通过XML表示的，这样 就可以在任何运行时环境下使用了。Ant 不提供依赖管理器，所以你需要自己管理 外部依赖。然而，Ant 可以和另一个Apache项目Ivy 很好地集成，它是一个完善且独立的依赖管理器。要集成Ant和Ivy需要一些额外的工作， 而且要为每个独立的 项目手动配置。让我们一起看一个样例构建脚本。</p><ol><li><p>示例：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-app<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dist<span class="token punctuation">"</span></span> <span class="token attr-name">basedir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- set global properties for this build --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>src<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>build<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>build<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dist<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dist<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>version<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Create the build directory structure used by compile --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mkdir</span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${build}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>compile<span class="token punctuation">"</span></span> <span class="token attr-name">depends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>compile the source<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Compile the java code from ${src} into ${build} --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javac</span> <span class="token attr-name">srcdir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${src}<span class="token punctuation">"</span></span> <span class="token attr-name">destdir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${build}<span class="token punctuation">"</span></span> <span class="token attr-name">classpath</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lib/commons-lang3-3.1.jar<span class="token punctuation">"</span></span> <span class="token attr-name">includeantruntime</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dist<span class="token punctuation">"</span></span> <span class="token attr-name">depends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>compile<span class="token punctuation">"</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>generate the distribution<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Create the distribution directory --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mkdir</span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dist}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jar</span> <span class="token attr-name">jarfile</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dist}/my-app-${version}.jar<span class="token punctuation">"</span></span> <span class="token attr-name">basedir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${build}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clean<span class="token punctuation">"</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clean up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Delete the ${build} and ${dist} directory trees --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${build}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${dist}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>缺点：</p><ol><li>使用xml定义构建逻辑，会导致构建脚本过于臃肿</li><li>复杂的构建逻辑会导致又长又难以维护的构建脚本。无法定义类似 if-else 的逻辑结构</li><li>没有提供任何指导来告诉你如何构建项目，可能会导致每次构建的结果都不一样</li><li>无法知道有多少类被编译或多少个task被执行；没有提供获取内存信息的api</li><li>如果没有lvy，很难管理依赖</li></ol></li></ol><h3 id="3-2-2-Maven"><a href="#3-2-2-Maven" class="headerlink" title="3.2.2 Maven"></a>3.2.2 Maven</h3><p>Maven选择约定优于配置的思想，这意味着它为你的项目配置 和行为提供了有意义的默认值。项目自然而然就知道去哪些目录寻找源代码以及构 建运行时有哪些task去执行。如果你的项目遵从默认值，那么只需要写几行XML 就可以建立-一个完整的项目。另外，Maven 也拥有为应用产生包含Javadoc 在内的 HTML格式项目文档的能力。<br> Maven的核心功能可以通过开发定制的插件来扩展。Maven的社区非常活跃，几乎支持构建的每个方面，从集成其他工具到生成报告，你都能够找到合适的插件。如果找不到满足需求的插件，你也可以自己去写。</p><ol><li><p>示例：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0                              http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mycompany.app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>my-app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre></li><li><p>缺点：</p><ol><li>maven推荐一个默认的生命周期，常常会太过限制，可能不适合你的项目需求</li><li>编写扩展过于麻烦，需要使用Mojos</li></ol></li></ol><h1 id="4-为什么学习-Gradle"><a href="#4-为什么学习-Gradle" class="headerlink" title="4. 为什么学习 Gradle"></a>4. 为什么学习 Gradle</h1><h2 id="4-1-gradle-特性"><a href="#4-1-gradle-特性" class="headerlink" title="4.1 gradle 特性"></a>4.1 gradle 特性</h2><ol><li><p>可表达性的构建语言的底层API</p></li><li><p>Gradle 就是 Groovy：gradle 的 DSL 由Groovy 实现</p></li><li><p>灵活的约定：默认配置可轻松改变</p></li><li><p>鲁棒和强大的依赖管理</p></li><li><p>可扩展的构建：支持增量构建和部分构建</p></li><li><p>轻松的可扩展性：编写插件方便</p></li><li><p>和其他构建工具集成：支持 Ant 和 Maven 等的迁移和支持</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200718122415471.png"></p></li></ol><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h1><ol><li>《实战Gradle 中文版》</li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目构建工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-6.Spring Boot Banner 是如何打印的</title>
      <link href="posts/c0ad46e7.html"/>
      <url>posts/c0ad46e7.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot Banner打印：<a href="82defbf4">【从零开始学Spring Boot】-6.Spring Boot Banner自定义</a></p></blockquote><h2 id="1-banner-是如何打印的？"><a href="#1-banner-是如何打印的？" class="headerlink" title="1.banner 是如何打印的？"></a>1.banner 是如何打印的？</h2><p>banner 是如何打印的呢？</p><p>在 spring boot 项目启动时，调用 run 方法，最终会调用到 printBanner 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ApplicationArguments applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurableEnvironment environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印 banner</span>        Banner printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Banner <span class="token function">printBanner</span><span class="token punctuation">(</span>ConfigurableEnvironment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果关闭 banner，直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bannerMode <span class="token operator">==</span> Banner<span class="token punctuation">.</span>Mode<span class="token punctuation">.</span>OFF<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 默认 resourceLoader=null，使用 DefaultResourceLoader</span>    ResourceLoader resourceLoader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader        <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SpringApplicationBannerPrinter bannerPrinter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplicationBannerPrinter</span><span class="token punctuation">(</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>banner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// bannerMode 有3中取值，OFF、CONSOLE、LOG，这里默认为 CONSOLE</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bannerMode <span class="token operator">==</span> Mode<span class="token punctuation">.</span>LOG<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bannerPrinter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 打印 banner</span>    <span class="token keyword">return</span> bannerPrinter<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">,</span> System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>bannerPrinter.print</p><pre class=" language-java"><code class="language-java">Banner <span class="token function">print</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> sourceClass<span class="token punctuation">,</span> PrintStream out<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取 banner，先获获取图片类型，再获取文本类型，都没有则答应 Spring Boot</span>    Banner banner <span class="token operator">=</span> <span class="token function">getBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果有多种类型，循环打印；按照添加顺序，先图片再文本</span>    banner<span class="token punctuation">.</span><span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> sourceClass<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PrintedBanner</span><span class="token punctuation">(</span>banner<span class="token punctuation">,</span> sourceClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>banner.printBanner</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> sourceClass<span class="token punctuation">,</span> PrintStream out<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Banner banner <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>banners<span class="token punctuation">)</span> <span class="token punctuation">{</span>        banner<span class="token punctuation">.</span><span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> sourceClass<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里进行文本打印，ResourceBanner.printBanner</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> sourceClass<span class="token punctuation">,</span> PrintStream out<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取编码格式</span>        String banner <span class="token operator">=</span> StreamUtils<span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                 environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"spring.banner.charset"</span><span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理 banner 文件中属性值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertyResolver resolver <span class="token operator">:</span> <span class="token function">getPropertyResolvers</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> sourceClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            banner <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>banner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 使用 java bio 进行打印</span>        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>banner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>            <span class="token string">"Banner not printable: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resource <span class="token operator">+</span> <span class="token string">" ("</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": '"</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"')"</span><span class="token punctuation">,</span>            ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-6.Spring Boot Banner自定义</title>
      <link href="posts/82defbf4.html"/>
      <url>posts/82defbf4.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>The banner that is printed on start up can be changed by adding a <code>banner.txt</code> file to your classpath or by setting the <code>spring.banner.location</code> property to the location of such a file. If the file has an encoding other than UTF-8, you can set <code>spring.banner.charset</code>. In addition to a text file, you can also add a <code>banner.gif</code>, <code>banner.jpg</code>, or <code>banner.png</code> image file to your classpath or set the <code>spring.banner.image.location</code> property. Images are converted into an ASCII art representation and printed above any text banner.</p></blockquote><p>banner 是在启动时打印的内容，可以通过在 classpath 下添加 “ banner.txt” 文件或 设置“ spring.banner.location” 属性值来改变 banner 的内容。如果文件的编码不是UTF-8，则可以通过<code>spring.banner.charset</code> 进行设置。除了文本文件之外，您还可以在 classpath 下添加 <code>banner.gif</code>，<code>banner.jpg</code> 或 <code>banner.png</code> 图像文件或设置 <code>spring.banner.image.location</code> 属性。图片将被转换为 ASCII 的形式进行展现并在文本内容之前打印。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><p>banner.txt 可以包含如下内容</p><table><thead><tr><th align="left">Variable</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>${application.version}</code></td><td align="left">The version number of your application, as declared in <code>MANIFEST.MF</code>. For example, <code>Implementation-Version: 1.0</code> is printed as <code>1.0</code>.</td></tr><tr><td align="left"><code>${application.formatted-version}</code></td><td align="left">The version number of your application, as declared in <code>MANIFEST.MF</code> and formatted for display (surrounded with brackets and prefixed with <code>v</code>). For example <code>(v1.0)</code>.</td></tr><tr><td align="left"><code>${spring-boot.version}</code></td><td align="left">The Spring Boot version that you are using. For example <code>2.2.8.RELEASE</code>.</td></tr><tr><td align="left"><code>${spring-boot.formatted-version}</code></td><td align="left">The Spring Boot version that you are using, formatted for display (surrounded with brackets and prefixed with <code>v</code>). For example <code>(v2.2.8.RELEASE)</code>.</td></tr><tr><td align="left"><code>${Ansi.NAME}</code> (or <code>${AnsiColor.NAME}</code>, <code>${AnsiBackground.NAME}</code>, <code>${AnsiStyle.NAME}</code>)</td><td align="left">Where <code>NAME</code> is the name of an ANSI escape code. See <a href="https://github.com/spring-projects/spring-boot/tree/v2.2.8.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiPropertySource.java" target="_blank" rel="noopener"><code>AnsiPropertySource</code></a> for details.</td></tr><tr><td align="left"><code>${application.title}</code></td><td align="left">The title of your application, as declared in <code>MANIFEST.MF</code>. For example <code>Implementation-Title: MyApp</code> is printed as <code>MyApp</code>.</td></tr></tbody></table><blockquote><p> The <code>SpringApplication.setBanner(…)</code> method can be used if you want to generate a banner programmatically. Use the <code>org.springframework.boot.Banner</code> interface and implement your own <code>printBanner()</code> method.</p><p>You can also use the <code>spring.main.banner-mode</code> property to determine if the banner has to be printed on <code>System.out</code> (<code>console</code>), sent to the configured logger (<code>log</code>), or not produced at all (<code>off</code>).</p></blockquote><p>如果您要以编程方式生成 banner，则可以使用 SpringApplication.setBanner(…) 方法。使用org.springframework.boot.Banner 接口并实现自己的 printBanner() 方法。您还可以使用 spring.main.banner-mode 属性来确定横幅是否必须在 System.out（控制台）上打印，发送到配置的 logger（日志）或者完全不生成（关闭）。</p><h1 id="2-演示环境"><a href="#2-演示环境" class="headerlink" title="2.演示环境"></a>2.演示环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-演示代码"><a href="#3-演示代码" class="headerlink" title="3.演示代码"></a>3.演示代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>自定义 banner.txt，在项目启动时打印自定义 banner</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200713193628565.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">application.version</span><span class="token punctuation">=</span><span class="token attr-value">0.0.1-SNAPSHOT</span><span class="token attr-name">application.formatted-version</span><span class="token punctuation">=</span><span class="token attr-value">0.0.1</span><span class="token attr-name">application.title</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-banner</span></code></pre><p>banner.txt</p><pre class=" language-tex"><code class="language-tex">${application.version}${application.formatted-version}${application.title}${AnsiColor.BRIGHT_GREEN}$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$${AnsiColor.BRIGHT_CYAN}$$       _________  __  __/ / /_  ____ _/ / /___ _____/ /    $$${AnsiColor.BRIGHT_CYAN}$$      / ___/ __ \/ / / / / __ \/ __ `/ / / __ `/ __  /     $$${AnsiColor.BRIGHT_CYAN}$$     (__  ) /_/ / /_/ / / /_/ / /_/ / / / /_/ / /_/ /      $$${AnsiColor.BRIGHT_CYAN}$$    /____/\____/\__,_/_/_.___/\__,_/_/_/\__,_/\__,_/       $$${AnsiColor.BRIGHT_GREEN}$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$               ${AnsiColor.BRIGHT_RED}Spring Boot: ${spring-boot.formatted-version}</code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-05-basis/spring-boot-banner" target="_blank" rel="noopener">spring-boot/spring-boot-05-basis/spring-boot-banner</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootBannerApplication.main 方法，打印出 banner.txt 中内容</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200713193939809.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features-banner" target="_blank" rel="noopener">官方文档-Spring Boot Features/Banner</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Banner </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-5.Spring Boot Profile 是如何生效的</title>
      <link href="posts/32c5ef91.html"/>
      <url>posts/32c5ef91.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot Profile 环境隔离： <a href="4ce990ec">【从零开始学Spring Boot】-5.Spring Boot Profile环境隔离</a></p></blockquote><h2 id="1-Spring-Boot-中-Profile-是如何生效的？"><a href="#1-Spring-Boot-中-Profile-是如何生效的？" class="headerlink" title="1.Spring Boot 中 Profile 是如何生效的？"></a>1.Spring Boot 中 Profile 是如何生效的？</h2><p>在启动类启动的时候，按照如下顺序调用 SpringApplication.run -&gt; prepareEnvironment -&gt; </p><p>listeners.environmentPrepared -&gt; listener.environmentPrepared -&gt; initialMulticaster.multicastEvent</p><p>-&gt; getApplicationListeners -&gt; invokeListener -&gt; doInvokeListener -&gt; listener.onApplicationEvent</p><p>在 ApplicationListener 中，有一个 ConfigFileApplicationListener，这个监听器用来解析配置文件，所以会调用它的 onApplicationEvent 方法，它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>ApplicationEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationEnvironmentPreparedEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onApplicationEnvironmentPreparedEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ApplicationEnvironmentPreparedEvent<span class="token punctuation">)</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationPreparedEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onApplicationPreparedEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动时这里的 event 是 ApplicationEnvironmentPreparedEvent，所以会执行 onApplicationEnvironmentPreparedEvent 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onApplicationEnvironmentPreparedEvent</span><span class="token punctuation">(</span>ApplicationEnvironmentPreparedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从 spring.factories 中获取 EnvironmentPostProcessor</span>    List<span class="token operator">&lt;</span>EnvironmentPostProcessor<span class="token operator">></span> postProcessors <span class="token operator">=</span> <span class="token function">loadPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将当前 ConfigFileApplicationListener 加入到 postProcessors 中</span>    postProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据 @Ordered 配置的顺序进行排序</span>    AnnotationAwareOrderComparator<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>postProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 触发 postProcessEnvironment 方法</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>EnvironmentPostProcessor postProcessor <span class="token operator">:</span> postProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>        postProcessor<span class="token punctuation">.</span><span class="token function">postProcessEnvironment</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getSpringApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ConfigFileApplicationListener 的 postProcessEnvironment 实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessEnvironment</span><span class="token punctuation">(</span>ConfigurableEnvironment environment<span class="token punctuation">,</span> SpringApplication application<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加配置文件</span>    <span class="token function">addPropertySources</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> application<span class="token punctuation">.</span><span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addPropertySources</span><span class="token punctuation">(</span>ConfigurableEnvironment environment<span class="token punctuation">,</span> ResourceLoader resourceLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    RandomValuePropertySource<span class="token punctuation">.</span><span class="token function">addToEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加载配置文件</span>    <span class="token keyword">new</span> <span class="token class-name">Loader</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> resourceLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Loader 的构造函数中，使用 SpringFactoriesLoader 加载 PropertySourceLoader，它有两个实现类：PropertiesPropertySourceLoader 和 YamlPropertySourceLoader，前者解析 .properties 和 .xml，后者解析 .yml 和 .yaml，在 spring.factories 中，PropertiesPropertySourceLoader 在前，所以先解析 .properties 文件，YamlPropertySourceLoader中 .yml 在前，先解析 .yml</p><pre class=" language-java"><code class="language-java"><span class="token function">Loader</span><span class="token punctuation">(</span>ConfigurableEnvironment environment<span class="token punctuation">,</span> ResourceLoader resourceLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> environment<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>placeholdersResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertySourcesPlaceholdersResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> <span class="token punctuation">(</span>resourceLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> resourceLoader <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>propertySourceLoaders <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactories</span><span class="token punctuation">(</span>PropertySourceLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                                                                     <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 load() 方法中，获取所有的 profiles，然后通过 load 方法记在对应的配置文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    FilteredPropertySource<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> DEFAULT_PROPERTIES<span class="token punctuation">,</span> LOAD_FILTERED_PROPERTY<span class="token punctuation">,</span> <span class="token punctuation">(</span>defaultProperties<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>profiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>processedProfiles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>activatedProfiles <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loaded <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化 Profiles</span>        <span class="token function">initializeProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Profile profile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDefaultProfile</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">addProfileToEnvironment</span><span class="token punctuation">(</span>profile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 加载配置文件</span>            <span class="token function">load</span><span class="token punctuation">(</span>profile<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>getPositiveProfileFilter<span class="token punctuation">,</span>                 <span class="token function">addToLoaded</span><span class="token punctuation">(</span>MutablePropertySources<span class="token operator">:</span><span class="token operator">:</span>addLast<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>processedProfiles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">load</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>getNegativeProfileFilter<span class="token punctuation">,</span> <span class="token function">addToLoaded</span><span class="token punctuation">(</span>MutablePropertySources<span class="token operator">:</span><span class="token operator">:</span>addFirst<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addLoadedPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">applyActiveProfiles</span><span class="token punctuation">(</span>defaultProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>initializeProfiles()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initializeProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// The default profile for these purposes is represented as null. We add it</span>    <span class="token comment" spellcheck="true">// first so that it is processed first and has lowest priority.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 spring.profiles.active 值</span>    Set<span class="token operator">&lt;</span>Profile<span class="token operator">></span> activatedViaProperty <span class="token operator">=</span> <span class="token function">getProfilesFromProperty</span><span class="token punctuation">(</span>ACTIVE_PROFILES_PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 spring.profiles.include 值</span>    Set<span class="token operator">&lt;</span>Profile<span class="token operator">></span> includedViaProperty <span class="token operator">=</span> <span class="token function">getProfilesFromProperty</span><span class="token punctuation">(</span>INCLUDE_PROFILES_PROPERTY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从其他途径获取 profile</span>    List<span class="token operator">&lt;</span>Profile<span class="token operator">></span> otherActiveProfiles <span class="token operator">=</span> <span class="token function">getOtherActiveProfiles</span><span class="token punctuation">(</span>activatedViaProperty<span class="token punctuation">,</span> includedViaProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>otherActiveProfiles<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Any pre-existing active profiles set via property sources (e.g.</span>    <span class="token comment" spellcheck="true">// System properties) take precedence over those added in config files.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>includedViaProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addActiveProfiles</span><span class="token punctuation">(</span>activatedViaProperty<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// only has null profile</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String defaultProfileName <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">getDefaultProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Profile defaultProfile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Profile</span><span class="token punctuation">(</span>defaultProfileName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>defaultProfile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>load()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span>Profile profile<span class="token punctuation">,</span> DocumentFilterFactory filterFactory<span class="token punctuation">,</span> DocumentConsumer consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">getSearchLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isFolder <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> names <span class="token operator">=</span> isFolder <span class="token operator">?</span> <span class="token function">getSearchNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> NO_SEARCH_NAMES<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加载配置文件</span>        names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">load</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> name<span class="token punctuation">,</span> profile<span class="token punctuation">,</span> filterFactory<span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span>String location<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> Profile profile<span class="token punctuation">,</span> DocumentFilterFactory filterFactory<span class="token punctuation">,</span>                  DocumentConsumer consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertySourceLoader loader <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertySourceLoaders<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canLoadFileExtension</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 加载配置文件</span>                <span class="token function">load</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> location<span class="token punctuation">,</span> profile<span class="token punctuation">,</span> filterFactory<span class="token punctuation">.</span><span class="token function">getDocumentFilter</span><span class="token punctuation">(</span>profile<span class="token punctuation">)</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"File extension of config file location '"</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"' is not known to any PropertySourceLoader. If the location is meant to reference "</span>  <span class="token operator">+</span> <span class="token string">"a directory, it must end in '/'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> processed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertySourceLoader loader <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertySourceLoaders<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String fileExtension <span class="token operator">:</span> loader<span class="token punctuation">.</span><span class="token function">getFileExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>processed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fileExtension<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">loadForFileExtension</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> location <span class="token operator">+</span> name<span class="token punctuation">,</span> <span class="token string">"."</span> <span class="token operator">+</span> fileExtension<span class="token punctuation">,</span> profile<span class="token punctuation">,</span> filterFactory<span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-5.Spring Boot Profile环境隔离</title>
      <link href="posts/4ce990ec.html"/>
      <url>posts/4ce990ec.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring Profiles provide a way to segregate parts of your application configuration and make it be available only in certain environments. Any <code>@Component</code>, <code>@Configuration</code> or <code>@ConfigurationProperties</code> can be marked with <code>@Profile</code> to limit when it is loaded</p></blockquote><p>Spring Profiles 提供了一种隔离应用程序配置部分并使之仅在某些环境中可用的方法。任何 @Component，@ Configuration 或 @ConfigurationProperties 都可以用 @Profile 标记来限制它的加载。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ol><li>可在 xml 中使用；</li><li>可以修饰类、注解、方法；</li><li>可以通过 命令行、系统属性、启动变量、配置文件 等方式激活；</li></ol><h1 id="2-环境"><a href="#2-环境" class="headerlink" title="2.环境"></a>2.环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><h2 id="3-1-代码说明"><a href="#3-1-代码说明" class="headerlink" title="3.1 代码说明"></a>3.1 代码说明</h2><p>提供了 dev、prod 两套环境的配置和代码，测试激活不同的 profile，功能是否如预期</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712213800400.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre><p>application-dev.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-profile</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token attr-name">user.age</span><span class="token punctuation">=</span><span class="token attr-value">20</span></code></pre><p>application-prod.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-profile</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9090</span><span class="token attr-name">user.age</span><span class="token punctuation">=</span><span class="token attr-value">30</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>UserModel.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${user.age}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"UserModel{name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">", age='"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>DevConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DevConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserModel <span class="token function">userModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ProdConfig.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"prod"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProdConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserModel <span class="token function">userModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserModel userModel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userModel<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userModel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserController</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/get"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/dev"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">devUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"dev-user"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"prod"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/prod"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserModel <span class="token function">prodUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserModel</span><span class="token punctuation">(</span><span class="token string">"prod-user"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-05-basis/spring-boot-profile" target="_blank" rel="noopener">spring-boor/spring-boot-05-basis/spring-boot-profile</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><h2 id="4-1-profile-的几种激活方式"><a href="#4-1-profile-的几种激活方式" class="headerlink" title="4.1 profile 的几种激活方式"></a>4.1 profile 的几种激活方式</h2><ol><li><p>使用 jar 包启动时，指定为命令行参数</p><pre class=" language-shell"><code class="language-shell">java -jar spring-boot-profile-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev</code></pre></li><li><p>使用 jar 包启动时，指定为启动参数</p><pre class=" language-shell"><code class="language-shell">java -Dspring.profiles.active=dev -jar spring-boot-profile-0.0.1-SNAPSHOT.jar</code></pre></li><li><p>通过配置文件指定</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre></li><li><p>通过代码设定为系统变量</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"spring.profiles.active"</span><span class="token punctuation">,</span> <span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>启动类中指定</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">SpringApplicationBuilder</span><span class="token punctuation">(</span>SpringBootProfileApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span><span class="token string">"spring.profiles.active=dev"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>idea 启动时指定（配置任意一处即可）</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712215905347.png"></p></li><li><p>web.xml 中配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>spring.profiles.active<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>dev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span></code></pre></li></ol><p><strong>优先级</strong></p><blockquote><p>命令行方式 &gt; Java系统属性方式 &gt; 系统变量方式 &gt; 配置文件方式</p></blockquote><p>profile 值可以指定多个，例如： –spring.profiles.active=dev,test</p><h2 id="4-2-profile-测试"><a href="#4-2-profile-测试" class="headerlink" title="4.2 profile 测试"></a>4.2 profile 测试</h2><p>按照上面任意一种方式激活 profile，分别设置为 dev 和 prod，启动 SpringBootProfileApplication.main 方法，在 spring-boot-profile.http 访问下列地址，观察输出信息是否符合预期。</p><h3 id="4-2-1-profile-dev"><a href="#4-2-1-profile-dev" class="headerlink" title="4.2.1 profile=dev"></a>4.2.1 profile=dev</h3><pre class=" language-http"><code class="language-http">### GET /user/getGET http://localhost:8080/user/get</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712220956293.png"></p><pre class=" language-http"><code class="language-http">### GET /user/devGET http://localhost:8080/user/dev</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712221024383.png"></p><h3 id="4-2-1-profile-prod"><a href="#4-2-1-profile-prod" class="headerlink" title="4.2.1 profile=prod"></a>4.2.1 profile=prod</h3><pre class=" language-http"><code class="language-http">### GET /user/getGET http://localhost:9090/user/get</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712221132961.png"></p><pre class=" language-http"><code class="language-http">### GET /user/prodGET http://localhost:9090/user/prod</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712221202214.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.2.8.RELEASE/reference/html/spring-boot-features.html#boot-features-profiles" target="_blank" rel="noopener">官方文档–Spring Boot Features/Profiles</a></li><li><a href="https://www.cnblogs.com/jingmoxukong/p/10151785.html" target="_blank" rel="noopener">SpringBoot 教程之 profile 的应用</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Profile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-4.Spring Boot 参数校验是如何实现的</title>
      <link href="posts/24d616a1.html"/>
      <url>posts/24d616a1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot 参数校验：<a href="28985c9a">【从零开始学Spring Boot】-4.Spring Boot Validation 参数校验</a></p></blockquote><h2 id="1-注解校验如何生效的？"><a href="#1-注解校验如何生效的？" class="headerlink" title="1.注解校验如何生效的？"></a>1.注解校验如何生效的？</h2><p>在 UserController#add 方法上有使用 @Valid 注解，标明这个方法需要校验，同时也可以使用 @Validated 注解标明要校验的位置。那么 @Valid 是如何生效的呢？</p><p>在 <a href="https://blog.csdn.net/u010139373/article/details/107303452" target="_blank" rel="noopener">SpringBoot学习(三)——WebMVC及其工作原理</a> 中，有跟踪 Spring MVC 的运行原理，@Valid 的注解校验就在 </p><p>RequestMappingHandlerAdapter#invokeHandlerMethod 方法中</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712204316361.png"></p><p>在 ConstraintTree#validateSingleConstraint 中使用具体的 Validator 对参数进行校验</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> V<span class="token operator">></span> Set<span class="token operator">&lt;</span>ConstraintViolation<span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token function">validateSingleConstraint</span><span class="token punctuation">(</span>ValidationContext<span class="token operator">&lt;</span>T<span class="token operator">></span> executionContext<span class="token punctuation">,</span> ValueContext<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> valueContext<span class="token punctuation">,</span> ConstraintValidatorContextImpl constraintValidatorContext<span class="token punctuation">,</span> ConstraintValidator<span class="token operator">&lt;</span>A<span class="token punctuation">,</span> V<span class="token operator">></span> validator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> isValid<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        V validatedValue <span class="token operator">=</span> valueContext<span class="token punctuation">.</span><span class="token function">getCurrentValidatedValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isValid <span class="token operator">=</span> validator<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span>validatedValue<span class="token punctuation">,</span> constraintValidatorContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> var7<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>var7 <span class="token keyword">instanceof</span> <span class="token class-name">ConstraintDeclarationException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> var7<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> LOG<span class="token punctuation">.</span><span class="token function">getExceptionDuringIsValidCallException</span><span class="token punctuation">(</span>var7<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">!</span>isValid <span class="token operator">?</span> executionContext<span class="token punctuation">.</span><span class="token function">createConstraintViolations</span><span class="token punctuation">(</span>valueContext<span class="token punctuation">,</span> constraintValidatorContext<span class="token punctuation">)</span> <span class="token operator">:</span> Collections<span class="token punctuation">.</span><span class="token function">emptySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712204519662.png"></p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-4.Spring Boot Validation 参数校验</title>
      <link href="posts/28985c9a.html"/>
      <url>posts/28985c9a.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>The method validation feature supported by Bean Validation 1.1 is automatically enabled as long as a JSR-303 implementation (such as Hibernate validator) is on the classpath. This lets bean methods be annotated with <code>javax.validation</code> constraints on their parameters and/or on their return value. Target classes with such annotated methods need to be annotated with the <code>@Validated</code> annotation at the type level for their methods to be searched for inline constraint annotations.</p></blockquote><p>只要 JSR-303 的实现（例如Hibernate验证器）在 classpath下，就会自动启用 Bean Validation 1.1 支持的方法验证功能。这使 bean 方法的参数和/或返回值可以使用 javax.validation 注解进行约束。具有此类注释方法的目标类需要在类型级别使用@Validated注释进行注释，以便在其方法中搜索内联约束注释。</p><h1 id="2-环境"><a href="#2-环境" class="headerlink" title="2.环境"></a>2.环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li><li>数据库：h2</li></ol><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><h2 id="3-1-功能说明"><a href="#3-1-功能说明" class="headerlink" title="3.1 功能说明"></a>3.1 功能说明</h2><p>用户 User 类里面有 id、name、age、idCard 等字段，这些字段在处理的时候通过注解进行校验；其中 name、age 字段校验使用的是 spring boot 依赖的组件中提供的注解；而 idCard 使用自定义注解 @IdCard；这些注解都支持国际化，最终通过 jpa 保存到 h2 数据库中。</p><p>UserCommand 用来预置几条数据。</p><h2 id="3-2-代码结构"><a href="#3-2-代码结构" class="headerlink" title="3.2 代码结构"></a>3.2 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712172518494.png"></p><h2 id="3-3-maven-依赖"><a href="#3-3-maven-依赖" class="headerlink" title="3.3 maven 依赖"></a>3.3 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-4-配置文件"><a href="#3-4-配置文件" class="headerlink" title="3.4 配置文件"></a>3.4 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 开启h2数据库</span><span class="token attr-name">spring.h2.console.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 配置h2数据库</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:h2:mem:user</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">org.h2.Driver</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">sad</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">sae</span><span class="token comment" spellcheck="true"># 是否显示sql语句</span><span class="token attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">hibernate.dialect</span><span class="token punctuation">=</span><span class="token attr-value">org.hibernate.dialect.H2Dialect</span><span class="token attr-name">hibernate.hbm2ddl.auto</span><span class="token punctuation">=</span><span class="token attr-value">create</span></code></pre><p>ValidationMessages.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">com.soulballad.usage.model.validation.id.card.message</span><span class="token punctuation">=</span><span class="token attr-value">the id card length must be 18 and matches rule</span><span class="token attr-name">model.user.NAME_SIZE_BETWEEN_2_AND_20</span><span class="token punctuation">=</span><span class="token attr-value">the length of name must be greater than 2 and less than 20</span><span class="token attr-name">model.user.NAME_NOT_BLANK</span><span class="token punctuation">=</span><span class="token attr-value">name cannot be blank</span><span class="token attr-name">model.user.AGE_MIN_1</span><span class="token punctuation">=</span><span class="token attr-value">the minimum of age is 1</span><span class="token attr-name">model.user.AGE_MAX_200</span><span class="token punctuation">=</span><span class="token attr-value">the maximum of age is 200</span><span class="token attr-name">model.user.AGE_NOT_NULL</span><span class="token punctuation">=</span><span class="token attr-value">age cannot be null</span><span class="token attr-name">model.user.ID_CARD_NOT_NULL</span><span class="token punctuation">=</span><span class="token attr-value">id card cannot be null</span></code></pre><p>ValidationMessages_zh_CN.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 身份证号必须是符合规则的18位</span><span class="token attr-name">com.soulballad.usage.model.validation.id.card.message</span><span class="token punctuation">=</span><span class="token attr-value">\u8eab\u4efd\u8bc1\u53f7\u5fc5\u987b\u662f\u7b26\u5408\u89c4\u5219\u768418\u4f4d</span><span class="token comment" spellcheck="true"># 姓名长度必须大于2小于20</span><span class="token attr-name">model.user.NAME_SIZE_BETWEEN_2_AND_20</span><span class="token punctuation">=</span><span class="token attr-value">\u59d3\u540d\u957f\u5ea6\u5fc5\u987b\u5927\u4e8e2\u5c0f\u4e8e20</span><span class="token comment" spellcheck="true"># 姓名不能为空</span><span class="token attr-name">model.user.NAME_NOT_BLANK</span><span class="token punctuation">=</span><span class="token attr-value">\u59d3\u540d\u4e0d\u80fd\u4e3a\u7a7a</span><span class="token comment" spellcheck="true"># 年龄最小为1</span><span class="token attr-name">model.user.AGE_MIN_1</span><span class="token punctuation">=</span><span class="token attr-value">\u5e74\u9f84\u6700\u5c0f\u4e3a1</span><span class="token comment" spellcheck="true"># 年龄最大为200</span><span class="token attr-name">model.user.AGE_MAX_200</span><span class="token punctuation">=</span><span class="token attr-value">\u5e74\u9f84\u6700\u5927\u4e3a200</span><span class="token comment" spellcheck="true"># 年龄不能为空</span><span class="token attr-name">model.user.AGE_NOT_NULL</span><span class="token punctuation">=</span><span class="token attr-value">\u5e74\u9f84\u4e0d\u80fd\u4e3a\u7a7a</span><span class="token comment" spellcheck="true"># 身份证号不能为空</span><span class="token attr-name">model.user.ID_CARD_NOT_NULL</span><span class="token punctuation">=</span><span class="token attr-value">\u8eab\u4efd\u8bc1\u53f7\u4e0d\u80fd\u4e3a\u7a7a</span></code></pre><h2 id="3-5-java代码"><a href="#3-5-java代码" class="headerlink" title="3.5 java代码"></a>3.5 java代码</h2><p>User.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@JsonIgnoreProperties</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"hibernateLazyInitializer"</span><span class="token punctuation">,</span> <span class="token string">"handler"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"{model.user.NAME_SIZE_BETWEEN_2_AND_20}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"{model.user.NAME_NOT_BLANK}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"{model.user.AGE_MIN_1}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"{model.user.AGE_MAX_200}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"{model.user.AGE_NOT_NULL}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@IdCard</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"{model.user.ID_CARD_NOT_NULL}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String idCard<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get&amp;set&amp;constructors&amp;toString</span><span class="token punctuation">}</span></code></pre><p>UserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>UserServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">getUserById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">add</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">delete</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>IdCard.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @apiNote : 自定义注解校验 {@link com.soulballad.usage.springboot.model.User} 中的idCard字段该注解中参数和 {@link NotNull} 中成员一致，不过 {@link NotNull} 中通过 {@link Repeatable} 声明了它是可复用的， *  并通过 {@link Constraint} 注解声明注解的功能实现类 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Constraint</span><span class="token punctuation">(</span>validatedBy <span class="token operator">=</span> <span class="token punctuation">{</span>IdCardValidator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">IdCard</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ValidationMessages.properties 扩展自</span>    <span class="token comment" spellcheck="true">// org.hibernate.validator.hibernate-validator.6.0.19.Final.hibernate-validator-6.0.19.Final.jar!\org\hibernate\validator\ValidationMessages.properties</span>    String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"{com.soulballad.usage.model.validation.id.card.message}"</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">groups</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Payload</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>IdCardValidator.java</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @apiNote : IdCard校验：注解{@link IdCard}的校验功能实现，需要实现{@link ConstraintValidator}接口， 泛型中两个参数分别为 {@link IdCard} 和 @IdCard *          修饰的字段对应类型 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdCardValidator</span> <span class="token keyword">implements</span> <span class="token class-name">ConstraintValidator</span><span class="token operator">&lt;</span>IdCard<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>String value<span class="token punctuation">,</span> ConstraintValidatorContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 校验身份证号：正规身份证号 18=2(省)+2(市)+2(区/县)+8(出生日期)+2(顺序码)+1(性别)+1(校验码)</span>        <span class="token comment" spellcheck="true">// 这里使用正则简单校验一下</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 身份证号正则表达式</span>        String regex <span class="token operator">=</span> <span class="token string">"^[1-9]\\d{5}(18|19|20)\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Pattern<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>IdCard constraintAnnotation<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/get/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/delete/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/update"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>PUT<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserCommand.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserCommand</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 身份证号由 http://sfz.uzuzuz.com/ 在线生成</span>        User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"110101200303072399"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token string">"110113198708074275"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token string">"110113197308182272"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">,</span> user3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>3L<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-6-git-地址"><a href="#3-6-git-地址" class="headerlink" title="3.6 git 地址"></a>3.6 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-04-bean-validate" target="_blank" rel="noopener">spring-boot/spring-boot-04-bean-validate</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBoot04BeanValidateApplication.main 方法，在 spring-boot-04-bean-validate.http 访问下列地址，观察输出信息是否符合预期。</p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712175001915.png"></p><pre class=" language-http"><code class="language-http">### GET /user/get/{id}GET http://localhost:8080/user/get/1<span class="token header-name keyword">Accept:</span> application/json</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712175029788.png"></p><pre class=" language-http"><code class="language-http">### POST /user/add successPOST http://localhost:8080/user/add<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Accept:</span> */*<span class="token header-name keyword">Cache-Control:</span> no-cache<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"zhaoliu"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span>  <span class="token string">"idCard"</span><span class="token punctuation">:</span> <span class="token string">"110101200303072399"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712175147586.png"></p><pre class=" language-http"><code class="language-http">### POST /user/add idCard&amp;name&amp;age illegalPOST http://localhost:8080/user/add<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Accept:</span> */*# Accept-Language: en_US 使用此配置可选择中、英文错误提示<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">243</span><span class="token punctuation">,</span>  <span class="token string">"idCard"</span><span class="token punctuation">:</span> <span class="token string">"1101003072399"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712182715264.png"></p><pre class=" language-http"><code class="language-http">### PUT /user/update successPUT http://localhost:8080/user/update<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Accept:</span> */*<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"sunqi"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">43</span><span class="token punctuation">,</span>  <span class="token string">"idCard"</span><span class="token punctuation">:</span> <span class="token string">"110101200303072399"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712182912860.png"></p><pre class=" language-http"><code class="language-http">### DELETE /user/delete/{id} successDELETE http://localhost:8080/user/delete/1<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Accept:</span> */*</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712183003589.png"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Validation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-3.Spring Boot WebMVC 工作流程及原理 </title>
      <link href="posts/f12c731c.html"/>
      <url>posts/f12c731c.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot WebMVC：<a href="8cee4bf5">【从零开始学Spring Boot】-3.Spring Boot WebMVC</a></p></blockquote><h2 id="1-Spring-WebMvc-运行流程是怎样的？"><a href="#1-Spring-WebMvc-运行流程是怎样的？" class="headerlink" title="1.Spring  WebMvc 运行流程是怎样的？"></a>1.Spring  WebMvc 运行流程是怎样的？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712125443758.png"></p><ol><li>用户发送请求至前端控制器 DispatcherServlet。</li><li>DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器。</li><li>处理器映射器找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet，一般使用的是 url 映射器。</li><li>DispatcherServlet 调用 HandlerAdapter 处理器适配器。</li><li>HandlerAdapter 经过适配调用具体的处理器(Controller，也叫后端控制器)。</li><li>Controller 执行完成返回 ModelAndView。</li><li>HandlerAdapter 将 ModelAndView 返回给 DispatcherServlet。</li><li>DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。</li><li>ViewReslover 解析后返回具体 View。</li><li>DispatcherServlet 根据 View 进行渲染视图（即将模型数据填充至视图中）。</li><li>DispatcherServlet 返回响应给用户。</li></ol><h2 id="2-Spring-WebMvc-的原理"><a href="#2-Spring-WebMvc-的原理" class="headerlink" title="2.Spring  WebMvc 的原理"></a>2.Spring  WebMvc 的原理</h2><p>DispatcherServlet 其实也是一个 HttpServlet，它的类图如下</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712130010099.png"></p><p>在传统的 HttpServlet 中，它的生命周期包含 init、service、destroy，在 service 中一般有 doGet、doPost 分别来处理 get、post 请求。DispatcherServlet 即是在 HttpServlet 上面进行的扩展。</p><p>SpringMvc 的初始化时序图：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712135114830.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initStrategies</span><span class="token punctuation">(</span>ApplicationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化上传组件，用于文件上传等</span>    <span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化本地化组件，用于国际化</span>    <span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化主题组件</span>    <span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化处理器映射器</span>    <span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化处理器适配器</span>    <span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化异常处理器</span>    <span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化请求-视图名称翻译器</span>    <span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化视图处理器</span>    <span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化 FlashMapManager</span>    <span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>SpringMvc 的运行时序图：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712133642964.png"></p><h2 id="3-DispatcherServlet-是如何初始化的？"><a href="#3-DispatcherServlet-是如何初始化的？" class="headerlink" title="3.DispatcherServlet 是如何初始化的？"></a>3.DispatcherServlet 是如何初始化的？</h2><p>在一般的 Spring WebMvc 项目中，通常会在 web.xml 中配置好 DispatcherServlet，如下所示</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 配置DispatcherServlet --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 指定spring mvc配置文件位置 不指定使用默认情况 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:application-context.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 设置启动顺序 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- ServLet 匹配映射 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><p>那么，在 Spring Boot 项目中，DispatcherServlet 又是如何配置的呢？</p><p>其实，在 <code>spring-boot-autoconfigure/META-INF/spring.factories</code> 中有这样一个配置</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712140206806.png"></p><p>这个 DispatcherServletAutoConfiguration 即是 DispatcherServlet 的自动装配类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span>ServletWebServerFactoryAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServletAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME <span class="token operator">=</span> <span class="token string">"dispatcherServlet"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>DefaultDispatcherServletCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>ServletRegistration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> HttpProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebMvcProperties<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServletConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DEFAULT_DISPATCHER_SERVLET_BEAN_NAME<span class="token punctuation">)</span>        <span class="token keyword">public</span> DispatcherServlet <span class="token function">dispatcherServlet</span><span class="token punctuation">(</span>HttpProperties httpProperties<span class="token punctuation">,</span> WebMvcProperties webMvcProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            DispatcherServlet dispatcherServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcherServlet<span class="token punctuation">.</span><span class="token function">setDispatchOptionsRequest</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isDispatchOptionsRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcherServlet<span class="token punctuation">.</span><span class="token function">setDispatchTraceRequest</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isDispatchTraceRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcherServlet<span class="token punctuation">.</span><span class="token function">setThrowExceptionIfNoHandlerFound</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isThrowExceptionIfNoHandlerFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcherServlet<span class="token punctuation">.</span><span class="token function">setPublishEvents</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isPublishRequestHandledEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcherServlet<span class="token punctuation">.</span><span class="token function">setEnableLoggingRequestDetails</span><span class="token punctuation">(</span>httpProperties<span class="token punctuation">.</span><span class="token function">isLogRequestDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> dispatcherServlet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-3.Spring Boot WebMVC</title>
      <link href="posts/8cee4bf5.html"/>
      <url>posts/8cee4bf5.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>The Spring portfolio provides two parallel stacks. One is based on a Servlet API with Spring MVC and Spring Data constructs. The other is a fully reactive stack that takes advantage of Spring WebFlux and Spring Data’s reactive repositories. In both cases, Spring Security has you covered with native support for both stacks. <a href="https://spring.io/reactive" target="_blank" rel="noopener">https://spring.io/reactive</a></p></blockquote><p>Spring产品组合提供了两个并行技术栈。一种基于带有 Spring MVC 和 Spring Data 结构的 Servlet API。另一个是完全响应式技术栈，该栈利用了 Spring WebFlux 和 Spring Data 的响应式存储库。在这两种情况下，Spring Security 都为两个堆栈提供了本机支持。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ol><li><strong>清晰的角色划分</strong>：控制器(controller)、验证器(validator)、命令对象(command obect)、表单对象(form object)、模型对象(model object)、Servlet分发器(DispatcherServlet)、处理器映射(handler mapping)、试图解析器(view resoler)等等。每一个角色都可以由一个专门的对象来实现。</li><li>强大而直接的配置方式：将框架类和应用程序类都能作为JavaBean配置，支持跨多个context的引用，例如，在web控制器中对业务对象和验证器validator)的引用。</li><li>可适配、非侵入：可以根据不同的应用场景，选择合适的控制器子类(simple型、command型、from型、wizard型、multi-action型或者自定义)，而不是一个单一控制器(比如Action/ActionForm)继承。</li><li>可重用的业务代码：可以使用现有的业务对象作为命令或表单对象，而不需要去扩展某个特定框架的基类。</li><li>可定制的绑定(binding)和验证(validation)：比如将类型不匹配作为应用级的验证错误，这可以保证错误的值。再比如本地化的日期和数字绑定等等。在其他某些框架中，你只能使用字符串表单对象，需要手动解析它并转换到业务对象。</li><li>可定制的handler mapping和view resolution：Spring提供从最简单的URL映射，到复杂的、专用的定制策略。与某些web MVC框架强制开发人员使用单一特定技术相比，Spring显得更加灵活。</li><li>灵活的model转换：在Springweb框架中，使用基于Map的键/值对来达到轻易的与各种视图技术集成。</li><li>可定制的本地化和主题(theme)解析：支持在JSP中可选择地使用Spring标签库、支持JSTL、支持Velocity(不需要额外的中间层)等等。</li><li>简单而强大的JSP标签库(Spring Tag Library)：支持包括诸如数据绑定和主题(theme)之类的许多功能。他提供在标记方面的最大灵活性。</li><li>JSP表单标签库：在Spring2.0中引入的表单标签库，使用在JSP编写表单更加容易。</li><li>Spring Bean的生命周期可以被限制在当前的HTTp Request或者HTTp Session。准确的说，这并非Spring MVC框架本身特性，而应归属于Spring MVC使用的WebApplicationContext容器。</li></ol><h2 id="1-3-对比-WebFlux"><a href="#1-3-对比-WebFlux" class="headerlink" title="1.3 对比 WebFlux"></a>1.3 对比 WebFlux</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712115043143.png"></p><h1 id="2-环境"><a href="#2-环境" class="headerlink" title="2.环境"></a>2.环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><h2 id="3-1-代码结构"><a href="#3-1-代码结构" class="headerlink" title="3.1 代码结构"></a>3.1 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712115216437.png"></p><h2 id="3-2-maven-依赖"><a href="#3-2-maven-依赖" class="headerlink" title="3.2 maven 依赖"></a>3.2 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="3-3-java代码"><a href="#3-3-java代码" class="headerlink" title="3.3 java代码"></a>3.3 java代码</h2><p>User.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * id     */</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 姓名     */</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserRepository.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 生成id</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicInteger ID_GENERATOR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模拟内存数据库</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> User<span class="token operator">></span> USER_MAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>USER_MAP<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> User <span class="token function">getUserById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> User <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>ID_GENERATOR<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> User <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        USER_MAP<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> User <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> USER_MAP<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> nameList <span class="token operator">=</span> USER_MAP<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nameList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">getUserById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">exist</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/list"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/get/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/add"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">,</span> UriComponentsBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"duplicated"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"the user already exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>ALREADY_REPORTED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        userService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpHeaders headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/user/get/{id}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildAndExpand</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>headers<span class="token punctuation">,</span> HttpStatus<span class="token punctuation">.</span>CREATED<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/update"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>PUT<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/delete/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-4-git-地址"><a href="#3-4-git-地址" class="headerlink" title="3.4 git 地址"></a>3.4 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-03-webmvc" target="_blank" rel="noopener">spring-boot/spring-boot-03-webmvc</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBoot03WebApplication.main 方法，在 spring-boot-03-webmvc.http 访问下列地址，观察输出信息是否符合预期。</p><pre class=" language-http"><code class="language-http">### GET /user/listGET http://localhost:8080/user/list</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712121034670.png"></p><p>由于数据保存在内存中，最开始没有数据，所以返回为空。可以调用 /add 添加数据后再查询</p><pre class=" language-http"><code class="language-http">### GET /user/get/{id}GET http://localhost:8080/user/get/1</code></pre><p>通过 id 查询同样为空，可以调用 /add 添加数据后再查询</p><pre class=" language-http"><code class="language-http">### POST /user/addPOST http://localhost:8080/user/add<span class="token header-name keyword">Content-Type:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"zhangsan"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712121240211.png"></p><p>这里响应码为 201，同时响应头中 location 设定为一个新的地址</p><pre class=" language-http"><code class="language-http">### PUT /user/updatePUT http://localhost:8080/user/update<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Accept:</span> application/json<span class="token application/json"><span class="token punctuation">{</span>  <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"lisi"</span><span class="token punctuation">}</span></span></code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712121406103.png"></p><pre class=" language-http"><code class="language-http">### DELETE /user/delete/{id}DELETE http://localhost:8080/user/delete/1</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200712121427892.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://www.cnblogs.com/Renyi-Fan/p/7847738.html" target="_blank" rel="noopener">SpringMVC的优点</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> WebMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-2.Spring Boot 是如何解析配置注解的</title>
      <link href="posts/3ca6fc82.html"/>
      <url>posts/3ca6fc82.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot 的配置解析： <a href="b9258c0">【从零开始学Spring Boot】-2.Spring Boot ConfigurationProperties 配置</a></p></blockquote><h2 id="1-ConfigurationProperties-是如何生效的？"><a href="#1-ConfigurationProperties-是如何生效的？" class="headerlink" title="1.@ConfigurationProperties 是如何生效的？"></a>1.@ConfigurationProperties 是如何生效的？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711210302871.png"></p><p>@SpringBootApplication 注解是一个复合注解，它里面包含一个 @ConfigurationPropertiesScan，这个里面又有一个 @EnableConfigurationProperties，@ConfigurationProperties 的作用与它有关。</p><p>@ConfigurationProperties 中通过 @Import 引入一个 EnableConfigurationPropertiesRegistrar，它里面有一个 registerBeanDefinitions 方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">registerInfrastructureBeans</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    ConfigurationPropertiesBeanRegistrar beanRegistrar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationPropertiesBeanRegistrar</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getTypes</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>beanRegistrar<span class="token operator">:</span><span class="token operator">:</span>register<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>registerBeanDefinitions 调用一个 registerInfrastructureBeans ，这个方法将 属性绑定后置处理器、bean 校验器、元数据注入到 registry 中，这里的 registry 保存了所有 bean 信息。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerInfrastructureBeans</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ConfigurationPropertiesBindingPostProcessor<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    ConfigurationPropertiesBeanDefinitionValidator<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    ConfigurationBeanFactoryMetadata<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过查看类图可以知道，ConfigurationPropertiesBindingPostProcessor 是 BeanPostProcessor 的一个实现类</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711215341386.png"></p><p>它在 bean 实例化的时候发生作用，BeanPostProcessor 提供了 postProcessBeforeInitialization 和 </p><p>postProcessAfterInitialization 两个方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 ConfigurationPropertiesBindingPostProcessor 的 postProcessBeforeInitialization 方法中提供了对于属性值的注入</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 属性绑定</span>    <span class="token function">bind</span><span class="token punctuation">(</span>ConfigurationPropertiesBean<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 bind 方法中，通过 ConfigurationPropertiesBinder 来绑定 ConfigurationProperties 中属性</p><pre class=" language-java"><code class="language-java">BindResult<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">bind</span><span class="token punctuation">(</span>ConfigurationPropertiesBean propertiesBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Bindable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> target <span class="token operator">=</span> propertiesBean<span class="token punctuation">.</span><span class="token function">asBindTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取目标 bean 上的 @ConfigurationProperties 注解</span>    ConfigurationProperties annotation <span class="token operator">=</span> propertiesBean<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 BindHandler</span>    BindHandler bindHandler <span class="token operator">=</span> <span class="token function">getBindHandler</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> annotation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过配置的 prefix 和 BindHandler 进行属性绑定</span>    <span class="token keyword">return</span> <span class="token function">getBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> bindHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>到这里已经比较清晰了，后面的就是从 应用上下文中获取属性值，然后转换成对应的类型，再将属性值设置给目标对象。</p><h2 id="2-Value-是如何生效的？"><a href="#2-Value-是如何生效的？" class="headerlink" title="2.@Value 是如何生效的？"></a>2.@Value 是如何生效的？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711214716859.png"></p><p>这个流程中，doCreateBean 前面的流程实际上是 spirng bean 的初始化流程，在初始化过程中，会对 bean 的依赖和字段进行填充；BeanPostProcessor 也是在这个阶段发生作用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bp <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        InstantiationAwareBeanPostProcessor ibp <span class="token operator">=</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor<span class="token punctuation">)</span> bp<span class="token punctuation">;</span>        PropertyValues pvsToUse <span class="token operator">=</span> ibp<span class="token punctuation">.</span><span class="token function">postProcessProperties</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pvsToUse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>filteredPds <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                filteredPds <span class="token operator">=</span> <span class="token function">filterPropertyDescriptorsForDependencyCheck</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> mbd<span class="token punctuation">.</span>allowCaching<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            pvsToUse <span class="token operator">=</span> ibp<span class="token punctuation">.</span><span class="token function">postProcessPropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> filteredPds<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pvsToUse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        pvs <span class="token operator">=</span> pvsToUse<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用注解进行 bean 注入的时候，会有一个 AutowiredAnnotationBeanPostProcessor 的处理类，它里面有一个 postProcessProperties 方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> PropertyValues <span class="token function">postProcessProperties</span><span class="token punctuation">(</span>PropertyValues pvs<span class="token punctuation">,</span> Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    InjectionMetadata metadata <span class="token operator">=</span> <span class="token function">findAutowiringMetadata</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        metadata<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">"Injection of autowired dependencies failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pvs<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>InjectionMetadata 是类的注入元数据，这里通过它来对 bean 中的属性进行注入，它里面提供了多种注入元件，而 ConfigurationProperties 主要通过字段属性进行注入</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711221221448.png"></p><p>AutowiredFieldElement 的 inject 方法实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String beanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> PropertyValues pvs<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Field field <span class="token operator">=</span> <span class="token punctuation">(</span>Field<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>member<span class="token punctuation">;</span>    Object value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否已缓存，如果缓存了，直接获取</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> <span class="token function">resolvedCachedArgument</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cachedFieldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果没有缓存，需要从 beanFactory 中获取具体值，然后缓存起来</span>        DependencyDescriptor desc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DependencyDescriptor</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>required<span class="token punctuation">)</span><span class="token punctuation">;</span>        desc<span class="token punctuation">.</span><span class="token function">setContainingClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> autowiredBeanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>beanFactory <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"No BeanFactory available"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TypeConverter typeConverter <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">resolveDependency</span><span class="token punctuation">(</span>desc<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">,</span> typeConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsatisfiedDependencyException</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InjectionPoint</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>cached<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>required<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>cachedFieldValue <span class="token operator">=</span> desc<span class="token punctuation">;</span>                    <span class="token function">registerDependentBeans</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> autowiredBeanNames<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>autowiredBeanNames<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        String autowiredBeanName <span class="token operator">=</span> autowiredBeanNames<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                            beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>autowiredBeanName<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 将获取到的值缓存起来</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>cachedFieldValue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShortcutDependencyDescriptor</span><span class="token punctuation">(</span>                                desc<span class="token punctuation">,</span> autowiredBeanName<span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>cachedFieldValue <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 修改标记</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>cached <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 最终将获取到的值，通过反射进行注入</span>        ReflectionUtils<span class="token punctuation">.</span><span class="token function">makeAccessible</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来调用流程是 resolveDependency -&gt; doResolveDependency -&gt; resolveEmbeddedValue</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> String <span class="token function">resolveEmbeddedValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> String value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String result <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>StringValueResolver resolver <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后调用到 PropertyPlaceholderConfigurer，通过解析配置文件获取到最终值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> String <span class="token function">resolveStringValue</span><span class="token punctuation">(</span>String strVal<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    String resolved <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">replacePlaceholders</span><span class="token punctuation">(</span>strVal<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>trimValues<span class="token punctuation">)</span> <span class="token punctuation">{</span>        resolved <span class="token operator">=</span> resolved<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>resolved<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>nullValue<span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span> resolved<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-2.Spring Boot ConfigurationProperties 配置</title>
      <link href="posts/b9258c0.html"/>
      <url>posts/b9258c0.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Annotation for externalized configuration. Add this to a class definition or a @Bean method in a @Configuration class if you want to bind and validate some external Properties (e.g. from a .properties file). </p><p>Binding is either performed by calling setters on the annotated class or, if @ConstructorBinding is in use, by binding to the constructor parameters. </p><p>Note that contrary to  @Value, SpEL expressions are not evaluated since property values are externalized.</p></blockquote><p>一个外部化配置的注解。如果您要绑定和验证某些外部属性（例如，来自.properties文件），则将其添加到类定义或 @Configuration 类中的 @Bean 方法中。</p><p>绑定可以通过在带注释的类上调用setter来执行，或者，如果正在使用 @ConstructorBinding，则可以通过绑定到构造函数参数来执行。</p><p>请注意，与@Value相反，由于属性值是外部化的，因此不评估SpEL表达式。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>METHOD <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">ConfigurationProperties</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">ignoreInvalidFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">ignoreUnknownFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="1-3-对比-Value"><a href="#1-3-对比-Value" class="headerlink" title="1.3 对比 @Value"></a>1.3 对比 @Value</h2><table><thead><tr><th></th><th>@Configuration</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SPEL语法</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><h1 id="2-环境"><a href="#2-环境" class="headerlink" title="2.环境"></a>2.环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><h2 id="3-1-代码结构"><a href="#3-1-代码结构" class="headerlink" title="3.1 代码结构"></a>3.1 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711201606906.png"></p><h2 id="3-2-maven-依赖"><a href="#3-2-maven-依赖" class="headerlink" title="3.2 maven 依赖"></a>3.2 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h2 id="3-3-配置文件"><a href="#3-3-配置文件" class="headerlink" title="3.3 配置文件"></a>3.3 配置文件</h2><p>application.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">user.prop.name</span><span class="token punctuation">=</span><span class="token attr-value">zhangsan</span><span class="token attr-name">user.prop.age</span><span class="token punctuation">=</span><span class="token attr-value">20</span></code></pre><h2 id="3-4-java代码"><a href="#3-4-java代码" class="headerlink" title="3.4 java代码"></a>3.4 java代码</h2><p>UserProperties.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Validated</span> <span class="token comment" spellcheck="true">// JSR303数据校验</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"user.prop"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProperties</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Range</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserProps.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserProps</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${user.prop.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// SPEL 表达式</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"#{10 * 2}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserProperties userProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserProps userProps<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/get/1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getUser1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userProperties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'s age is "</span> <span class="token operator">+</span> userProperties<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/get/2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userProps<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'s age is "</span> <span class="token operator">+</span> userProps<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-5-git-地址"><a href="#3-5-git-地址" class="headerlink" title="3.5 git 地址"></a>3.5 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-02-config" target="_blank" rel="noopener">spring-boot/spring-boot-02-config</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBoot02ConfigApplication.main 方法，在 spring-boot-02-config.http 访问如下两个地址，输出 “zhangsan’s age is 20” 表示请求成功</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711202711465.png"></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200711202749942.png"></p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h1><ol><li><a href="https://blog.csdn.net/qq_43513205/article/details/86564166" target="_blank" rel="noopener">@ConfigurationProperties与@Value的区别</a></li><li><a href="https://blog.csdn.net/wyzdwb/article/details/87458325" target="_blank" rel="noopener">springboot中@Value的工作原理</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Configuration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码分析-Spring Boot】-1.Spring Boot 的启动流程和加载原理</title>
      <link href="posts/464104e0.html"/>
      <url>posts/464104e0.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot 的初步使用： <a href="3aaee350">【从零开始学Spring Boot】-1.第一个Spring Boot应用</a></p></blockquote><h2 id="1-Spring-Boot-启动流程是怎样的？"><a href="#1-Spring-Boot-启动流程是怎样的？" class="headerlink" title="1.Spring Boot 启动流程是怎样的？"></a>1.Spring Boot 启动流程是怎样的？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709221114156.png"></p><p>从 main 方法开始</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringBootDemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SpringApplication.run -&gt; ConfigurableApplicationContext</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    StopWatch stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ConfigurableApplicationContext context <span class="token operator">=</span> null<span class="token punctuation">;</span>    Collection<span class="token operator">&lt;</span>SpringBootExceptionReporter<span class="token operator">></span> exceptionReporters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置 “java.awt.headless” 属性</span>    <span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用 SpringFactoryLoader 获取 SpringApplicationRunListener 实例的 listeners</span>    SpringApplicationRunListeners listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 逐个启动 SpringApplicationRunListener，应用开始启动事件</span>    listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ApplicationArguments applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 Environment，根据 webType 获取不同类型；并配置 propertySource 和 profiles</span>        ConfigurableEnvironment environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打印 banner</span>        Banner printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 spring 应用上下文，类型和 webType 有关</span>        context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用 SpringFactoryLoader 获取 SpringBootExceptionReporter 实例的 exceptionReporters</span>        exceptionReporters <span class="token operator">=</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>SpringBootExceptionReporter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                                                         <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> ConfigurableApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上下文预处理，spring boot</span>        <span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 刷新上下文，spring context</span>        <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上下文后置处理，暂为空</span>        <span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// listeners 启动完成事件</span>        listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 触发 ApplicationRunner 和 CommandLineRunner</span>        <span class="token function">callRunners</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 引用运行事件，开始监听</span>        listeners<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="2-Spring-Boot-如何加载-Tomcat？"><a href="#2-Spring-Boot-如何加载-Tomcat？" class="headerlink" title="2.Spring Boot 如何加载 Tomcat？"></a>2.Spring Boot 如何加载 Tomcat？</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709223727507.png"></p><p>SpringApplication.run -&gt; ConfigurableApplicationContext ，跟踪 tomcat 的创建过程，主要看 createApplicationContext() 和 refreshContext() 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>        context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>        <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>createApplicationContext() 创建 spring 应用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> ConfigurableApplicationContext <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> contextClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContextClass<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>contextClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> SERVLET<span class="token operator">:</span>                    contextClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DEFAULT_SERVLET_WEB_CONTEXT_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> REACTIVE<span class="token operator">:</span>                    contextClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DEFAULT_REACTIVE_WEB_CONTEXT_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    contextClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DEFAULT_CONTEXT_CLASS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                <span class="token string">"Unable create a default ApplicationContext, please specify an ApplicationContextClass"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>ConfigurableApplicationContext<span class="token punctuation">)</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终创建的应用类型和 webApplicationType 有关，webApplicationType 在 SpringApplication 的构造函数中进行实例化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">SpringApplication</span><span class="token punctuation">(</span>ResourceLoader resourceLoader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> primarySources<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> resourceLoader<span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">,</span> <span class="token string">"PrimarySources must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>primarySources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType <span class="token operator">=</span> WebApplicationType<span class="token punctuation">.</span><span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>ApplicationContextInitializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>ApplicationListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>默认类型为 WebApplicationType.SERVLET</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> WebApplicationType <span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span>WEBFLUX_INDICATOR_CLASS<span class="token punctuation">,</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span>WEBMVC_INDICATOR_CLASS<span class="token punctuation">,</span> null<span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span>JERSEY_INDICATOR_CLASS<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> WebApplicationType<span class="token punctuation">.</span>REACTIVE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String className <span class="token operator">:</span> SERVLET_INDICATOR_CLASSES<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ClassUtils<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> WebApplicationType<span class="token punctuation">.</span>NONE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> WebApplicationType<span class="token punctuation">.</span>SERVLET<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 refreshContext 中调用了 refresh(context) 方法，这里的 applicationContext 为 AnnotationConfigServletWebServerApplicationContext</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Assert<span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>AbstractApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractApplicationContext<span class="token punctuation">)</span> applicationContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后调用 AbstractApplicationContext.refresh() 方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> var9<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ...</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>onRefresh() 是一个钩子方法，根据上面分析，这里使用的是 servlet，所以会调用到 </p><p>ServletWebServerApplicationContext.onRefresh()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Unable to start web server"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 ServletWebServerApplicationContext 中调用 createWebServer() 创建 web 服务</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    WebServer webServer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webServer<span class="token punctuation">;</span>    ServletContext servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>webServer <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> servletContext <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServletWebServerFactory factory <span class="token operator">=</span> <span class="token function">getWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>webServer <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Cannot initialize servlet context"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的 factory 通过 ServletWebServerFactory 来实例化，所以创建 ServletWebServer</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709225432357.png"></p><p>最终在 TomcatServletWebServerFactory 中创建了 Tomcat、Connector、Engine、Host 等，这里可以结合 apache-tomcat 的配置文件 server.xml 来分析几者之间的层级关系</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709225721299.png"></p><h2 id="3-Spring-Boot-默认容器为何是-tomcat？"><a href="#3-Spring-Boot-默认容器为何是-tomcat？" class="headerlink" title="3.Spring Boot 默认容器为何是 tomcat？"></a>3.Spring Boot 默认容器为何是 tomcat？</h2><p>先看下 spring-boot-starter-web 的依赖结构</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200710214932703.png"></p><p>spring-boot-starter-web 依赖了 spring-boot-starter-tomcat，又依赖了 tomcat-embed-core。但是只凭这个，并不能说明默认容器为 tomca 的原因。</p><p>要弄清这个问题，就要涉及到 Spring Boot 的自动装配，以及 WebServer 的装配。</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200710220743014.png"></p><p>@SpringBootApplication 是一个复合注解，它包含如下内容</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConfigurationPropertiesScan</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>其中 @EnableAutoConfiguration 和自动装配相关，@EnableAutoConfiguration 声明如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>@Import 导入一个 AutoConfigurationImportSelector，这个 Selector 中 selectImports() 实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> NO_IMPORTS<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    AutoConfigurationMetadata autoConfigurationMetadata <span class="token operator">=</span> AutoConfigurationMetadataLoader        <span class="token punctuation">.</span><span class="token function">loadMetadata</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    AutoConfigurationEntry autoConfigurationEntry <span class="token operator">=</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>autoConfigurationMetadata<span class="token punctuation">,</span>                                                                              annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>autoConfigurationEntry<span class="token punctuation">.</span><span class="token function">getConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中 getAutoConfigurationEntry 获取自动装配类型，它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> AutoConfigurationEntry <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>AutoConfigurationMetadata autoConfigurationMetadata<span class="token punctuation">,</span>                                                           AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 是否开启自动装配，默认开启，可通过 spring.boot.enableautoconfiguration 进行配置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> EMPTY_ENTRY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取元注解中的属性，它是一个 LinkedHashMap</span>    AnnotationAttributes attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取要自动装配类的类名</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 去重</span>    configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 要排除的装配类</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 过滤</span>    configurations <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 触发自动装配导入事件</span>    <span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfigurationEntry</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 getCandidateConfigurations 获取所有自动装配类，这个方法通过 SpringFactoriesLoader 加载 META-INF/spring.factories 中的内容，在 spring-boot-autoconfigure 的 spring.factories 中有如下内容</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200710222137689.png"></p><p>其中有一条配置为 EmbeddedWebServerFactoryCustomizerAutoConfiguration，这个即为内容 webServer 的自动装配类</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200710222221906.png"></p><p>它的实现如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedWebServerFactoryCustomizerAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Tomcat is being used.     */</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Tomcat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> UpgradeProtocol<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TomcatWebServerFactoryCustomizerConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> TomcatWebServerFactoryCustomizer <span class="token function">tomcatWebServerFactoryCustomizer</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span>                                                                                 ServerProperties serverProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatWebServerFactoryCustomizer</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Jetty is being used.     */</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Server<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Loader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebAppContext<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JettyWebServerFactoryCustomizerConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> JettyWebServerFactoryCustomizer <span class="token function">jettyWebServerFactoryCustomizer</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span>                                                                               ServerProperties serverProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JettyWebServerFactoryCustomizer</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Undertow is being used.     */</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Undertow<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> SslClientAuthMode<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">UndertowWebServerFactoryCustomizerConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> UndertowWebServerFactoryCustomizer <span class="token function">undertowWebServerFactoryCustomizer</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span>                                                                                     ServerProperties serverProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UndertowWebServerFactoryCustomizer</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Nested configuration if Netty is being used.     */</span>    <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>HttpServer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NettyWebServerFactoryCustomizerConfiguration</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token keyword">public</span> NettyWebServerFactoryCustomizer <span class="token function">nettyWebServerFactoryCustomizer</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">,</span>                                                                               ServerProperties serverProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NettyWebServerFactoryCustomizer</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> serverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结合上面 spring-boot-starter-web 中引入了 tomcat-embed-core 依赖，可以发现，默认装配的类型即为 </p><p>TomcatWebServerFactoryCustomizerConfiguration</p>]]></content>
      
      
      <categories>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零开始学Spring Boot】-1.第一个Spring Boot应用</title>
      <link href="posts/3aaee350.html"/>
      <url>posts/3aaee350.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”. We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.</p></blockquote><p>Spring Boot 可以轻松创建单独的，基于生产级的 Spring 应用程序，您需要做的可能“<strong>仅仅是去运行</strong>”。 我们提供了 Spring Platform 对 Spring 框架和第三方库进行处理，尽可能的降低使用的复杂度。大多数情况下 Spring Boot 应用只需要非常少的配置。</p><h2 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h2><ul><li>Create stand-alone Spring applications（创建独立的 spring 应用）</li><li>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files) （集成 tomcat，jetty，undertow 等内置容器，无需打包成 war 包）</li><li>Provide opinionated ‘starter’ dependencies to simplify your build configuration （提供众多 starter 扩展来简化依赖配置）</li><li>Automatically configure Spring and 3rd party libraries whenever possible（无论何时都可以自动装配 spring 和第三方依赖）</li><li>Provide production-ready features such as metrics, health checks, and externalized configuration（提供生产环境特性，如 指标信息、健康检查和外部化配置等）</li><li>Absolutely no code generation and no requirement for XML configuration （无需代码生成和 xml 配置）</li></ul><h2 id="1-3-对比-Spring"><a href="#1-3-对比-Spring" class="headerlink" title="1.3 对比 Spring"></a>1.3 对比 Spring</h2><ol><li><p>Spring 是一种生态，它包含各种组件，针对开发中存在的问题提供了多种解决方案；</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200407193005410.png"></p></li><li><p>Spring Boot 为快速启动且最小化配置的 Spring 应用而设计，并且具备用于构建生产级应用的各种特性，提供了一些内置 starter；</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709204302088.png"></p></li><li><p>Spring 应用需要复杂配置，一般在需要在 xml 中配置各种依赖；Spring Boot 简化了这些配置，默认使用注解进行扫描，最多只需要在 application.properties 中提供额外配置；</p></li><li><p>使用 maven 构建 Spring 应用需要提供各种 pom 依赖；而 Spring Boot 只需要提供了 starter 即可，starter 中已经对所需依赖进行了封装；</p></li><li><p>Spring 应用最终需要打成 war 包放到 Severlet 容器中进行运行；而 Spring Boot 可以打成 jar 包，使用 java -jar 命令直接运行；</p></li><li><p>…</p></li></ol><h1 id="2-环境"><a href="#2-环境" class="headerlink" title="2.环境"></a>2.环境</h1><ol><li>JDK 1.8.0_201</li><li>Spring Boot 2.2.0.RELEASE</li><li>构建工具（apache maven 3.6.3）</li><li>开发工具（IntelliJ IDEA ）</li></ol><h1 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h1><h2 id="3-1-代码结构"><a href="#3-1-代码结构" class="headerlink" title="3.1 代码结构"></a>3.1 代码结构</h2><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709233145417.png"></p><h2 id="3-2-maven-依赖"><a href="#3-2-maven-依赖" class="headerlink" title="3.2 maven 依赖"></a>3.2 maven 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><h2 id="3-3-java代码"><a href="#3-3-java代码" class="headerlink" title="3.3 java代码"></a>3.3 java代码</h2><p>DemoController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/demo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"demo"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-4-git-地址"><a href="#3-4-git-地址" class="headerlink" title="3.4 git 地址"></a>3.4 git 地址</h2><p><a href="https://github.com/Soulballad/spring-usage-examples/tree/master/spring-boot/spring-boot-01-demo" target="_blank" rel="noopener">spring-boot/spring-boot-01-demo</a></p><h1 id="4-效果展示"><a href="#4-效果展示" class="headerlink" title="4.效果展示"></a>4.效果展示</h1><p>启动 SpringBootDemoApplication.main 方法，访问如下地址，页面显示 “demo” 表示服务运行正常</p><pre class=" language-http"><code class="language-http">### GET /demoGET http://localhost:8080/demo</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200709205650117.png"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> WebMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Arthas应用场景</title>
      <link href="posts/b73d9add.html"/>
      <url>posts/b73d9add.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-ognl获取bean"><a href="#1-ognl获取bean" class="headerlink" title="1. ognl获取bean"></a>1. ognl获取bean</h1><p>SpringContextUtil，通常代码中会有类似这样的工具类用来获取 bean 实例</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringContextUtil</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        SpringContextUtil<span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id can not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id must be greater than 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用 arthas 连接 spring 应用，执行如下操作：</p><blockquote><ol><li><p>查找全类名</p><pre class=" language-shell"><code class="language-shell">sc *SpringContextUtil</code></pre></li><li><p>查找类加载器</p><pre class=" language-shell"><code class="language-shell">sc -d *SpringContextUtil | grep classLoaderHash</code></pre></li><li><p>使用ognl表达式获取bean，并调用方法</p><pre class=" language-shell"><code class="language-shell">> ognl -c 18b4aac2 '@com.soulballad.usage.arthasdemo.util.SpringContextUtil@getBean("userController").getUser(2)'</code></pre></li></ol></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519154539999.png"></p><br><h1 id="2-watch观测方法调用"><a href="#2-watch观测方法调用" class="headerlink" title="2. watch观测方法调用"></a>2. watch观测方法调用</h1><pre class=" language-shell"><code class="language-shell"># 查看 UserController 下所有方法的 参数、对象、返回值watch com.soulballad.usage.arthasdemo.web.UserController * '{params,target,returnObj}'</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519155222425.png"></p><p>watch 支持方法调用前、调用后、异常抛出等多个场景观测，同时还可以在第四个参数中使用条件进行过滤，比如：</p><pre class=" language-shell"><code class="language-shell">watch com.soulballad.usage.arthasdemo.web.UserController * '{returnObj}' 'params[0]>10'watch com.soulballad.usage.arthasdemo.web.UserController * '{returnObj}' '#cost>10'</code></pre><br><h1 id="3-热更新"><a href="#3-热更新" class="headerlink" title="3. 热更新"></a>3. 热更新</h1><p>步骤：使用jad反编译 -&gt; 修改文件 -&gt; 使用mc重新编译修改后的文件-&gt;使用redefine加载重新编译后的类</p><p>上述 UserController 访问 <code>user/0</code>，会出现如下错误：</p><blockquote><p>There was an unexpected error (type=Internal Server Error, status=500).<br>id must be greater than 1</p></blockquote><p>现对其进行热更新</p><blockquote><ol><li><p>反编译 UserController </p><pre class=" language-shell"><code class="language-shell"># --source-only 只输出源码jad --source-only com.soulballad.usage.arthasdemo.web.UserController > UserController.java</code></pre></li><li><p>修改编译后的文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>soulballad<span class="token punctuation">.</span>usage<span class="token punctuation">.</span>arthasdemo<span class="token punctuation">.</span>web<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>soulballad<span class="token punctuation">.</span>usage<span class="token punctuation">.</span>arthasdemo<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>soulballad<span class="token punctuation">.</span>usage<span class="token punctuation">.</span>arthasdemo<span class="token punctuation">.</span>util<span class="token punctuation">.</span>SpringContextUtil<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"/user/{id}"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id can not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// throw new IllegalArgumentException("id must be greater than 1");</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>重新编译</p><pre class=" language-shell"><code class="language-shell"># 使用mc重新编译修改后的文件，这里需要使用 -c 指定类加载器sc -d com.soulballad.usage.arthasdemo.web.UserController | grep classLoaderHashmc -c 18b4aac2 UserController.java</code></pre><p>编译完成会出现一个路径，这个路径就是编译后class文件的位置</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519160730384.png"></p></li><li><p>使用redefine重新加载</p><pre class=" language-shell"><code class="language-shell"># redefine 后面使用上一步的路径，需要将 \ 转成 /redefine ../UserController.class</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519160948601.png"></p></li><li><p>更新后结果</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519161238976.png"></p></li></ol></blockquote><br><h1 id="4-更新日志级别"><a href="#4-更新日志级别" class="headerlink" title="4. 更新日志级别"></a>4. 更新日志级别</h1><p>查找类加载器</p><pre class=" language-shell"><code class="language-shell">sc -d *UserController | grep classLoaderHash</code></pre><p>查看更新前日志级别</p><pre class=" language-shell"><code class="language-shell">ognl -c 18b4aac2 '@com.soulballad.usage.arthasdemo.web.UserController@LOGGER'</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519161959204.png"></p><p>更新日志级别为 DEBUG</p><pre class=" language-shell"><code class="language-shell">ognl -c 18b4aac2 '@com.soulballad.usage.arthasdemo.web.UserController@LOGGER.setLevel(@ch.qos.logback.classic.Level@DEBUG)'</code></pre><p>查看更新后日志级别</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519163825883.png"></p><br><h1 id="5-tt获取spring上下文"><a href="#5-tt获取spring上下文" class="headerlink" title="5. tt获取spring上下文"></a>5. tt获取spring上下文</h1><p>执行 <code>tt</code> 命令来记录 <code>RequestMappingHandlerAdapter#invokeHandlerMethod</code> 的请求</p><pre class=" language-shell"><code class="language-shell">tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod</code></pre><p>然后访问 <code>user/1</code>，arthas 会记录访问时间片（time fragment）</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519164201326.png"></p><p>可以用 <code>tt</code> 命令的 <code>-i</code> 参数来指定index，并且用 <code>-w</code> 参数来执行ognl表达式来获取spring context：</p><pre class=" language-shell"><code class="language-shell">tt -i 1000 -w 'target.getApplicationContext()'</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519164620433.png"></p><p>可以从 applicationContext 中获取 bean，触发方法调用</p><pre class=" language-shell"><code class="language-shell">tt -i 1000 -w 'target.getApplicationContext().getBean("userController").getUser(2)'</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519164751963.png"></p><br><h1 id="6-链接"><a href="#6-链接" class="headerlink" title="6. 链接"></a>6. 链接</h1><ul><li>Arthas: <a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">https://github.com/alibaba/arthas</a></li><li><a href="https://alibaba.github.io/arthas/tt.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/tt.html</a></li><li><a href="https://alibaba.github.io/arthas/ognl.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/ognl.html</a></li><li><a href="https://alibaba.github.io/arthas/redefine.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/redefine.html</a></li><li><a href="https://alibaba.github.io/arthas/watch.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/watch.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 问题定位分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Arthas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Arthas基础命令</title>
      <link href="posts/d9175acd.html"/>
      <url>posts/d9175acd.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Arthas-简介"><a href="#1-Arthas-简介" class="headerlink" title="1. Arthas 简介"></a>1. Arthas 简介</h1><p>Arthas 是 Alibaba 开源的 Java 诊断工具，根据官方介绍，它提供了如下工功能：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517111859.png"></p><p>官方文档地址： <a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">https://alibaba.github.io/arthas/</a></p><p>github 源码地址： <a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">https://github.com/alibaba/arthas</a></p><br><h1 id="2-Arthas-安装"><a href="#2-Arthas-安装" class="headerlink" title="2. Arthas 安装"></a>2. Arthas 安装</h1><h2 id="启动-Arthas"><a href="#启动-Arthas" class="headerlink" title="启动 Arthas"></a>启动 Arthas</h2><pre class=" language-shell"><code class="language-shell"># 下载 arthascurl -O https://alibaba.github.io/arthas/arthas-boot.jar# 通过如下命令启动java -jar arthas-boot.jar</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517161911.png"></p><p>选择进程 id 按下回车，就可以连接到对应的 java 应用，首次启动会下载一些文件到 “<code>C:/Users/${user}/.arthas/lib/3.2.0/arthas</code>“ 目录</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200517154635722.png" alt="20200517154635722"></p><p>arthas 启动支持多个参数，可以使用 <code>-h</code> 查看</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517161841.png"></p><pre class=" language-shell"><code class="language-shell">EXAMPLES:  java -jar arthas-boot.jar <pid>  java -jar arthas-boot.jar --target-ip 0.0.0.0  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws'  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws'--agent-id bvDOe8XbTM2pQWjF4cfw  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>  java -jar arthas-boot.jar -f batch.as <pid>  java -jar arthas-boot.jar --use-version 3.2.0  java -jar arthas-boot.jar --versions  java -jar arthas-boot.jar --session-timeout 3600  java -jar arthas-boot.jar --attach-only  java -jar arthas-boot.jar --repo-mirror aliyun --use-httpWIKI:  https://alibaba.github.io/arthas</code></pre><br><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>arthas 连接成功后，使用 help 可以看到提供的一些命令</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517161913.png"></p><p>每个命令可以使用 <code>-h</code> 参数查看帮助信息，里面有<code>EXAMPLES</code>和<code>WIKI</code>链接</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517161912.png"></p><br><h2 id="webconsole"><a href="#webconsole" class="headerlink" title="webconsole"></a>webconsole</h2><p>arthas 启动后，可以通过浏览器进行访问，地址 <a href="http://localhost:8563/" target="_blank" rel="noopener">http://localhost:8563/</a></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194019.png"></p><br><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><p>如果只是退出当前的连接，可以用<code>quit</code>或者<code>exit</code>命令。Attach到目标进程上的arthas还会继续运行，端口会保持开放，下次连接时可以直接连接上。</p><p>如果想完全退出arthas，可以执行<code>stop</code>命令。</p><br><h1 id="3-Arthas-命令"><a href="#3-Arthas-命令" class="headerlink" title="3. Arthas 命令"></a>3. Arthas 命令</h1><h2 id="dashboard"><a href="#dashboard" class="headerlink" title="dashboard"></a>dashboard</h2><p>查看面板信息，主要包含cpu 内存使用信息，可以按  <code>Ctrl+C</code> 或者 输入 <code>q</code> 退出</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517163427.png" alt="_images/dashboard.png"></p><p>数据说明</p><ul><li>ID: Java级别的线程ID，注意这个ID不能跟jstack中的nativeID一一对应</li><li>NAME: 线程名</li><li>GROUP: 线程组名</li><li>PRIORITY: 线程优先级, 1~10之间的数字，越大表示优先级越高</li><li>STATE: 线程的状态</li><li>CPU%: 线程消耗的cpu占比，采样100ms，将所有线程在这100ms内的cpu使用量求和，再算出每个线程的cpu使用占比。</li><li>TIME: 线程运行总时间，数据格式为<code>分：秒</code></li><li>INTERRUPTED: 线程当前的中断位状态</li><li>DAEMON: 是否是daemon线程</li></ul><br><h2 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h2><p>查看线程使用情况</p><pre class=" language-shell"><code class="language-shell"># 查看所有线程信息thread# 查看具体线程的栈，查看线程ID 16的栈：thread 16# 查看CPU使用率top n线程的栈thread -n 3# 查看5秒内的CPU使用率top n线程栈thread -n 3 -i 5000# 查找线程是否有阻塞thread -b</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517163428.png"></p><br><h2 id="sysprop"><a href="#sysprop" class="headerlink" title="sysprop"></a>sysprop</h2><p>查看当前JVM的系统属性，支持 pipeline</p><pre class=" language-shell"><code class="language-shell">sysprop # 查询所有属性sysprop key # 查看key对应的属性sysprop key value # 修改属性值sysprop | grep java # 查询包含java的属性sysprop | wc -l # 统计数量</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194020.png"></p><br><h2 id="sysenv"><a href="#sysenv" class="headerlink" title="sysenv"></a>sysenv</h2><p>查看当前JVM的环境属性</p><p>用法和 sysprop 类似，不支持修改</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194024.png"></p><br><h2 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h2><p>查看logger信息，更新logger level</p><pre class=" language-shell"><code class="language-shell">logger # 查看所有logger对象信息logger -n [name] # 查看名为name的logger信息logger -c [classloader] -n [name] -l ERROR # 修改名为name的logger级别为ERROR，需指定类加载器</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194023.png"></p><br><h2 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h2><p>查看JVM已加载的类信息</p><pre class=" language-shell"><code class="language-shell">sc -d org.apache.commons.lang.StringUtils # 查看StringUtils详细信息sc -d org/apache/commons/lang/StringUtils # 查看StringUtils详细信息sc -d *StringUtils # 查看StringUtils，根据*匹配sc -d -f org.apache.commons.lang.StringUtils # 查看类及成员变量信息，f要配合d使用才有效</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194022.png"></p><br><h2 id="sm"><a href="#sm" class="headerlink" title="sm"></a>sm</h2><p>查看已加载类的方法信息，用法和 <code>sc</code> 类似</p><pre class=" language-shell"><code class="language-shell">sm java.lang.String # 查看String的所有方法sm -d org.apache.commons.lang.StringUtils # 查看String方法详情sm -d org/apache/commons/lang/StringUtils # 查看String方法详情sm *StringUtils *  # 查看String方法，根据*匹配</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194025.png"></p><br><h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><p>dump 已加载类的 bytecode 到特定目录</p><pre class=" language-shell"><code class="language-shell">dump java.lang.String # dump java.lang.String.class文件dump java.lang.* # dump 批量dumpdump -d /tmp/output java.lang.String # dump到指定目录dump org/apache/commons/lang/StringUtils # dump，支持目录格式dump *StringUtils # dump，根据*匹配</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194021.png"></p><br><h2 id="jad"><a href="#jad" class="headerlink" title="jad"></a>jad</h2><p>反编译指定已加载类的源码</p><pre class=" language-shell"><code class="language-shell">jad java.lang.String # 反编译String类jad java.lang.String toString # 反编译指定方法jad --source-only java.lang.String # 反编绎时只显示源代码jad -c 39eb305e org/apache/log4j/Logger # 反编译指定classloader</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194027.png"></p><br><h2 id="classloader"><a href="#classloader" class="headerlink" title="classloader"></a>classloader</h2><p>查看classloader的继承树，urls，类加载信息</p><pre class=" language-shell"><code class="language-shell">classloader    # 列出所有classLoaderclassloader -t # 树形结构列出所有classLoaderclassloader -l # 统计每个classLoader加载类数量classloader -c 327a647b # 查看具体的classLoaderclassloader -a # 列出所有加载的类classloader -c 659e0bfd --load demo.MathGame # 使用指定classLoader加载类</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194026.png"></p><br><h2 id="mc"><a href="#mc" class="headerlink" title="mc"></a>mc</h2><p>编译<code>.java</code>文件生成<code>.class</code></p><pre class=" language-shell"><code class="language-shell">mc /tmp/Test.java    # 编译Test.javamc -c 327a647b /tmp/Test.java # 使用 -c 指定classLoadermc -d /tmp/output /tmp/ClassA.java /tmp/ClassB.java # 使用 -d 指定输出目录</code></pre><br><h2 id="redefine"><a href="#redefine" class="headerlink" title="redefine"></a>redefine</h2><p>加载外部的<code>.class</code>文件</p><blockquote><p><code>redefine</code>命令和<code>jad</code>/<code>watch</code>/<code>trace</code>/<code>monitor</code>/<code>tt</code>等命令会冲突。执行完<code>redefine</code>之后，如果再执行上面提到的命令，则会把<code>redefine</code>的字节码重置。 原因是jdk本身redefine和Retransform是不同的机制，同时使用两种机制来更新字节码，只有最后修改的会生效。</p></blockquote><pre class=" language-shell"><code class="language-shell">redefine /tmp/Test.class    # 加载类redefine -c 327a647b /tmp/Test.class /tmp/Test\$Inner.class # 指定classLoader</code></pre><p>通常结合 jad/mc 使用</p><ul><li>jad命令反编译，然后可以用其它编译器，比如vim来修改源码</li><li>mc命令来内存编译修改过的代码</li><li>用redefine命令加载新的字节码</li></ul><p>redefine的限制</p><ul><li>不允许新增加 field/method</li><li>正在跑的函数，没有退出不能生效</li></ul><br><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>方法执行数据观测</p><pre class=" language-shell"><code class="language-shell"># 方法调用前观察，可以是非静态方法watch -b org.apache.commons.lang.StringUtils isBlank params# 在方法结束之后(正常返回和异常返回)观察watch -f org.apache.commons.lang.StringUtils isBlank returnObj# 指定输出结果的属性遍历深度，2watch org.apache.commons.lang.StringUtils isBlank '{params, target, returnObj}' -x 2# 耗时100ms时输出watch *StringUtils isBlank params '#cost>100'</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id can not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id must be greater than 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用如下 watch 命令，然后访问 <a href="http://localhost:9090/user/10" target="_blank" rel="noopener">http://localhost:9090/user/10</a></p><pre class=" language-shell"><code class="language-shell">watch com.soulballad.usage.arthasdemo.web.UserController getUser "{params,target,returnObj}" -x 2 -b -s -n 2</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194029.png"></p><ul><li>参数里<code>-n 2</code>，表示只执行两次</li><li>输出结果中，第一次输出的是方法调用前的观察结果，第二次输出的是方法返回后的表达式的结果</li><li>结果的输出顺序和事件发生的先后顺序一致，和命令中 <code>-s -b</code> 的顺序无关</li></ul><br><h2 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h2><p>方法内部调用路径，并输出方法路径上的每个节点上耗时</p><pre class=" language-shell"><code class="language-shell">trace org.apache.commons.lang.StringUtils isBlank # 查看isBlank方法调用路径及耗时trace *StringUtils isBlank # 使用*匹配trace *StringUtils isBlank '#cost>100' # 过滤只输出耗时大于100ms的记录# 正则表达式，支持多个路径记录trace -E com.test.ClassA|org.test.ClassB method1|method2|method3 trace demo.MathGame run -n 5 # 只执行5次trace demo.MathGame run --skipJDKMethod false # 不跳过jdk中方法，默认为true</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194028.png"></p><br><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>输出当前方法被调用的调用路径</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194031.png"></p><p>支持条件过滤和 ognl 表达式</p><br><h2 id="tt"><a href="#tt" class="headerlink" title="tt"></a>tt</h2><p>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</p><pre class=" language-shell"><code class="language-shell">tt -t *StringUtils isEmpty # 记录isEmpty方法调用tt -t *StringUtils isEmpty params[0].length==1 # 解决方法重载tt -l # 查看所有记录tt -i 1000 # 查询index为1000的记录详情tt -i 1000 -p # 根据index重新触发调用tt -i 1000 -p --replay-times 3 --replay-interval 3000 # 指定触发间隔和次数tt --delete-all # 删除所有记录</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194030.png"></p><br><h2 id="ognl"><a href="#ognl" class="headerlink" title="ognl"></a>ognl</h2><p>执行ognl表达式</p><pre class=" language-shell"><code class="language-shell">ognl '@java.lang.System@out.println("hello")' # 调用静态函数ognl -x 2 '@Singleton@getInstance()' # 2层ognl '@Demo@staticFiled' # 输出静态变量值# 把java.home和java.runtime.name的系统属性放到一个集合中输出ognl '#value1=@System@getProperty("java.home"), #value2=@System@getProperty("java.runtime.name"), {#value1, #value2}'ognl -c 5d113a51 '@com.taobao.arthas.core.GlobalOptions@isDump' # 输出false</code></pre>]]></content>
      
      
      <categories>
          
          <category> 问题定位分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Arthas </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
