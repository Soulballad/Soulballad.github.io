<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>(Arthas)2、Arthas应用场景</title>
      <link href="2020/10/29/arthas-2-arthas-ying-yong-chang-jing/"/>
      <url>2020/10/29/arthas-2-arthas-ying-yong-chang-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="1-ognl获取bean"><a href="#1-ognl获取bean" class="headerlink" title="1. ognl获取bean"></a>1. ognl获取bean</h1><p>SpringContextUtil，通常代码中会有类似这样的工具类用来获取 bean 实例</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringContextUtil</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        SpringContextUtil<span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>UserController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id can not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id must be greater than 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用 arthas 连接 spring 应用，执行如下操作：</p><blockquote><ol><li><p>查找全类名</p><pre class=" language-shell"><code class="language-shell">sc *SpringContextUtil</code></pre></li><li><p>查找类加载器</p><pre class=" language-shell"><code class="language-shell">sc -d *SpringContextUtil | grep classLoaderHash</code></pre></li><li><p>使用ognl表达式获取bean，并调用方法</p><pre class=" language-shell"><code class="language-shell">> ognl -c 18b4aac2 '@com.soulballad.usage.arthasdemo.util.SpringContextUtil@getBean("userController").getUser(2)'</code></pre></li></ol></blockquote><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519154539999.png" alt="image-20200519154539999"></p><br><h1 id="2-watch观测方法调用"><a href="#2-watch观测方法调用" class="headerlink" title="2. watch观测方法调用"></a>2. watch观测方法调用</h1><pre class=" language-shell"><code class="language-shell"># 查看 UserController 下所有方法的 参数、对象、返回值watch com.soulballad.usage.arthasdemo.web.UserController * '{params,target,returnObj}'</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519155222425.png" alt="image-20200519155222425"></p><p>watch 支持方法调用前、调用后、异常抛出等多个场景观测，同时还可以在第四个参数中使用条件进行过滤，比如：</p><pre class=" language-shell"><code class="language-shell">watch com.soulballad.usage.arthasdemo.web.UserController * '{returnObj}' 'params[0]>10'watch com.soulballad.usage.arthasdemo.web.UserController * '{returnObj}' '#cost>10'</code></pre><br><h1 id="3-热更新"><a href="#3-热更新" class="headerlink" title="3. 热更新"></a>3. 热更新</h1><p>步骤：使用jad反编译 -&gt; 修改文件 -&gt; 使用mc重新编译修改后的文件-&gt;使用redefine加载重新编译后的类</p><p>上述 UserController 访问 <code>user/0</code>，会出现如下错误：</p><blockquote><p>There was an unexpected error (type=Internal Server Error, status=500).<br>id must be greater than 1</p></blockquote><p>现对其进行热更新</p><blockquote><ol><li><p>反编译 UserController </p><pre class=" language-shell"><code class="language-shell"># --source-only 只输出源码jad --source-only com.soulballad.usage.arthasdemo.web.UserController > UserController.java</code></pre></li><li><p>修改编译后的文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>soulballad<span class="token punctuation">.</span>usage<span class="token punctuation">.</span>arthasdemo<span class="token punctuation">.</span>web<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>soulballad<span class="token punctuation">.</span>usage<span class="token punctuation">.</span>arthasdemo<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>soulballad<span class="token punctuation">.</span>usage<span class="token punctuation">.</span>arthasdemo<span class="token punctuation">.</span>util<span class="token punctuation">.</span>SpringContextUtil<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>GetMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PathVariable<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"/user/{id}"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id can not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// throw new IllegalArgumentException("id must be greater than 1");</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>重新编译</p><pre class=" language-shell"><code class="language-shell"># 使用mc重新编译修改后的文件，这里需要使用 -c 指定类加载器sc -d com.soulballad.usage.arthasdemo.web.UserController | grep classLoaderHashmc -c 18b4aac2 UserController.java</code></pre><p>编译完成会出现一个路径，这个路径就是编译后class文件的位置</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519160730384.png" alt="image-20200519160730384"></p></li><li><p>使用redefine重新加载</p><pre class=" language-shell"><code class="language-shell"># redefine 后面使用上一步的路径，需要将 \ 转成 /redefine ../UserController.class</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519160948601.png" alt="image-20200519160948601"></p></li><li><p>更新后结果</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519161238976.png" alt="image-20200519161238976"></p></li></ol></blockquote><br><h1 id="4-更新日志级别"><a href="#4-更新日志级别" class="headerlink" title="4. 更新日志级别"></a>4. 更新日志级别</h1><p>查找类加载器</p><pre class=" language-shell"><code class="language-shell">sc -d *UserController | grep classLoaderHash</code></pre><p>查看更新前日志级别</p><pre class=" language-shell"><code class="language-shell">ognl -c 18b4aac2 '@com.soulballad.usage.arthasdemo.web.UserController@LOGGER'</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519161959204.png" alt="image-20200519161959204"></p><p>更新日志级别为 DEBUG</p><pre class=" language-shell"><code class="language-shell">ognl -c 18b4aac2 '@com.soulballad.usage.arthasdemo.web.UserController@LOGGER.setLevel(@ch.qos.logback.classic.Level@DEBUG)'</code></pre><p>查看更新后日志级别</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519163825883.png" alt="image-20200519163825883"></p><br><h1 id="5-tt获取spring上下文"><a href="#5-tt获取spring上下文" class="headerlink" title="5. tt获取spring上下文"></a>5. tt获取spring上下文</h1><p>执行 <code>tt</code> 命令来记录 <code>RequestMappingHandlerAdapter#invokeHandlerMethod</code> 的请求</p><pre class=" language-shell"><code class="language-shell">tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod</code></pre><p>然后访问 <code>user/1</code>，arthas 会记录访问时间片（time fragment）</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519164201326.png" alt="image-20200519164201326"></p><p>可以用 <code>tt</code> 命令的 <code>-i</code> 参数来指定index，并且用 <code>-w</code> 参数来执行ognl表达式来获取spring context：</p><pre class=" language-shell"><code class="language-shell">tt -i 1000 -w 'target.getApplicationContext()'</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519164620433.png" alt="image-20200519164620433"></p><p>可以从 applicationContext 中获取 bean，触发方法调用</p><pre class=" language-shell"><code class="language-shell">tt -i 1000 -w 'target.getApplicationContext().getBean("userController").getUser(2)'</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200519164751963.png" alt="image-20200519164751963"></p><br><h1 id="6-链接"><a href="#6-链接" class="headerlink" title="6. 链接"></a>6. 链接</h1><ul><li>Arthas: <a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">https://github.com/alibaba/arthas</a></li><li><a href="https://alibaba.github.io/arthas/tt.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/tt.html</a></li><li><a href="https://alibaba.github.io/arthas/ognl.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/ognl.html</a></li><li><a href="https://alibaba.github.io/arthas/redefine.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/redefine.html</a></li><li><a href="https://alibaba.github.io/arthas/watch.html" target="_blank" rel="noopener">https://alibaba.github.io/arthas/watch.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 诊断 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arthas </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Arthas)1、Arthas基础命令</title>
      <link href="2020/10/29/arthas-1-arthas-ji-chu-ming-ling/"/>
      <url>2020/10/29/arthas-1-arthas-ji-chu-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="1、Arthas-简介"><a href="#1、Arthas-简介" class="headerlink" title="1、Arthas 简介"></a>1、Arthas 简介</h1><p>Arthas 是 Alibaba 开源的 Java 诊断工具，根据官方介绍，它提供了如下工功能：</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517111859.png" alt="image-20200517111854420"></p><p>官方文档地址： <a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">https://alibaba.github.io/arthas/</a></p><p>github 源码地址： <a href="https://github.com/alibaba/arthas" target="_blank" rel="noopener">https://github.com/alibaba/arthas</a></p><br><h1 id="2、Arthas-安装"><a href="#2、Arthas-安装" class="headerlink" title="2、Arthas 安装"></a>2、Arthas 安装</h1><h2 id="启动-Arthas"><a href="#启动-Arthas" class="headerlink" title="启动 Arthas"></a>启动 Arthas</h2><pre class=" language-shell"><code class="language-shell"># 下载 arthascurl -O https://alibaba.github.io/arthas/arthas-boot.jar# 通过如下命令启动java -jar arthas-boot.jar</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517161911.png" alt="image-20200517155128106"></p><p>选择进程 id 按下回车，就可以连接到对应的 java 应用，首次启动会下载一些文件到 “<code>C:/Users/${user}/.arthas/lib/3.2.0/arthas</code>“ 目录</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/image-20200517154635722.png" alt="20200517154635722"></p><p>arthas 启动支持多个参数，可以使用 <code>-h</code> 查看</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517161841.png" alt="image-20200517161835635"></p><pre class=" language-shell"><code class="language-shell">EXAMPLES:  java -jar arthas-boot.jar <pid>  java -jar arthas-boot.jar --target-ip 0.0.0.0  java -jar arthas-boot.jar --telnet-port 9999 --http-port -1  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws'  java -jar arthas-boot.jar --tunnel-server 'ws://192.168.10.11:7777/ws'--agent-id bvDOe8XbTM2pQWjF4cfw  java -jar arthas-boot.jar --stat-url 'http://192.168.10.11:8080/api/stat'  java -jar arthas-boot.jar -c 'sysprop; thread' <pid>  java -jar arthas-boot.jar -f batch.as <pid>  java -jar arthas-boot.jar --use-version 3.2.0  java -jar arthas-boot.jar --versions  java -jar arthas-boot.jar --session-timeout 3600  java -jar arthas-boot.jar --attach-only  java -jar arthas-boot.jar --repo-mirror aliyun --use-httpWIKI:  https://alibaba.github.io/arthas</code></pre><br><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>arthas 连接成功后，使用 help 可以看到提供的一些命令</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517161913.png" alt="image-20200517155940521"></p><p>每个命令可以使用 <code>-h</code> 参数查看帮助信息，里面有<code>EXAMPLES</code>和<code>WIKI</code>链接</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517161912.png" alt="image-20200517154635722"></p><br><h2 id="webconsole"><a href="#webconsole" class="headerlink" title="webconsole"></a>webconsole</h2><p>arthas 启动后，可以通过浏览器进行访问，地址 <a href="http://localhost:8563/" target="_blank" rel="noopener">http://localhost:8563/</a></p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194019.png" alt="image-20200517162105397"></p><br><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><p>如果只是退出当前的连接，可以用<code>quit</code>或者<code>exit</code>命令。Attach到目标进程上的arthas还会继续运行，端口会保持开放，下次连接时可以直接连接上。</p><p>如果想完全退出arthas，可以执行<code>stop</code>命令。</p><br><p>3、# Arthas 命令</p><h2 id="dashboard"><a href="#dashboard" class="headerlink" title="dashboard"></a>dashboard</h2><p>查看面板信息，主要包含cpu 内存使用信息，可以按  <code>Ctrl+C</code> 或者 输入 <code>q</code> 退出</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517163427.png" alt="_images/dashboard.png"></p><p>数据说明</p><ul><li>ID: Java级别的线程ID，注意这个ID不能跟jstack中的nativeID一一对应</li><li>NAME: 线程名</li><li>GROUP: 线程组名</li><li>PRIORITY: 线程优先级, 1~10之间的数字，越大表示优先级越高</li><li>STATE: 线程的状态</li><li>CPU%: 线程消耗的cpu占比，采样100ms，将所有线程在这100ms内的cpu使用量求和，再算出每个线程的cpu使用占比。</li><li>TIME: 线程运行总时间，数据格式为<code>分：秒</code></li><li>INTERRUPTED: 线程当前的中断位状态</li><li>DAEMON: 是否是daemon线程</li></ul><br><h2 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h2><p>查看线程使用情况</p><pre class=" language-shell"><code class="language-shell"># 查看所有线程信息thread# 查看具体线程的栈，查看线程ID 16的栈：thread 16# 查看CPU使用率top n线程的栈thread -n 3# 查看5秒内的CPU使用率top n线程栈thread -n 3 -i 5000# 查找线程是否有阻塞thread -b</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517163428.png" alt="image-20200517163025955"></p><br><h2 id="sysprop"><a href="#sysprop" class="headerlink" title="sysprop"></a>sysprop</h2><p>查看当前JVM的系统属性，支持 pipeline</p><pre class=" language-shell"><code class="language-shell">sysprop # 查询所有属性sysprop key # 查看key对应的属性sysprop key value # 修改属性值sysprop | grep java # 查询包含java的属性sysprop | wc -l # 统计数量</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194020.png" alt="image-20200517163647024"></p><br><h2 id="sysenv"><a href="#sysenv" class="headerlink" title="sysenv"></a>sysenv</h2><p>查看当前JVM的环境属性</p><p>用法和 sysprop 类似，不支持修改</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194024.png" alt="image-20200517170505831"></p><br><h2 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h2><p>查看logger信息，更新logger level</p><pre class=" language-shell"><code class="language-shell">logger # 查看所有logger对象信息logger -n [name] # 查看名为name的logger信息logger -c [classloader] -n [name] -l ERROR # 修改名为name的logger级别为ERROR，需指定类加载器</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194023.png" alt="image-20200517165827604"></p><br><h2 id="sc"><a href="#sc" class="headerlink" title="sc"></a>sc</h2><p>查看JVM已加载的类信息</p><pre class=" language-shell"><code class="language-shell">sc -d org.apache.commons.lang.StringUtils # 查看StringUtils详细信息sc -d org/apache/commons/lang/StringUtils # 查看StringUtils详细信息sc -d *StringUtils # 查看StringUtils，根据*匹配sc -d -f org.apache.commons.lang.StringUtils # 查看类及成员变量信息，f要配合d使用才有效</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194022.png" alt="image-20200517165504773"></p><br><h2 id="sm"><a href="#sm" class="headerlink" title="sm"></a>sm</h2><p>查看已加载类的方法信息，用法和 <code>sc</code> 类似</p><pre class=" language-shell"><code class="language-shell">sm java.lang.String # 查看String的所有方法sm -d org.apache.commons.lang.StringUtils # 查看String方法详情sm -d org/apache/commons/lang/StringUtils # 查看String方法详情sm *StringUtils *  # 查看String方法，根据*匹配</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194025.png" alt="image-20200517170620766"></p><br><h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><p>dump 已加载类的 bytecode 到特定目录</p><pre class=" language-shell"><code class="language-shell">dump java.lang.String # dump java.lang.String.class文件dump java.lang.* # dump 批量dumpdump -d /tmp/output java.lang.String # dump到指定目录dump org/apache/commons/lang/StringUtils # dump，支持目录格式dump *StringUtils # dump，根据*匹配</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194021.png" alt="image-20200517164153476"></p><br><h2 id="jad"><a href="#jad" class="headerlink" title="jad"></a>jad</h2><p>反编译指定已加载类的源码</p><pre class=" language-shell"><code class="language-shell">jad java.lang.String # 反编译String类jad java.lang.String toString # 反编译指定方法jad --source-only java.lang.String # 反编绎时只显示源代码jad -c 39eb305e org/apache/log4j/Logger # 反编译指定classloader</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194027.png" alt="image-20200517171304855"></p><br><h2 id="classloader"><a href="#classloader" class="headerlink" title="classloader"></a>classloader</h2><p>查看classloader的继承树，urls，类加载信息</p><pre class=" language-shell"><code class="language-shell">classloader    # 列出所有classLoaderclassloader -t # 树形结构列出所有classLoaderclassloader -l # 统计每个classLoader加载类数量classloader -c 327a647b # 查看具体的classLoaderclassloader -a # 列出所有加载的类classloader -c 659e0bfd --load demo.MathGame # 使用指定classLoader加载类</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194026.png" alt="image-20200517171909021"></p><br><h2 id="mc"><a href="#mc" class="headerlink" title="mc"></a>mc</h2><p>编译<code>.java</code>文件生成<code>.class</code></p><pre class=" language-shell"><code class="language-shell">mc /tmp/Test.java    # 编译Test.javamc -c 327a647b /tmp/Test.java # 使用 -c 指定classLoadermc -d /tmp/output /tmp/ClassA.java /tmp/ClassB.java # 使用 -d 指定输出目录</code></pre><br><h2 id="redefine"><a href="#redefine" class="headerlink" title="redefine"></a>redefine</h2><p>加载外部的<code>.class</code>文件</p><blockquote><p><code>redefine</code>命令和<code>jad</code>/<code>watch</code>/<code>trace</code>/<code>monitor</code>/<code>tt</code>等命令会冲突。执行完<code>redefine</code>之后，如果再执行上面提到的命令，则会把<code>redefine</code>的字节码重置。 原因是jdk本身redefine和Retransform是不同的机制，同时使用两种机制来更新字节码，只有最后修改的会生效。</p></blockquote><pre class=" language-shell"><code class="language-shell">redefine /tmp/Test.class    # 加载类redefine -c 327a647b /tmp/Test.class /tmp/Test\$Inner.class # 指定classLoader</code></pre><p>通常结合 jad/mc 使用</p><ul><li>jad命令反编译，然后可以用其它编译器，比如vim来修改源码</li><li>mc命令来内存编译修改过的代码</li><li>用redefine命令加载新的字节码</li></ul><p>redefine的限制</p><ul><li>不允许新增加 field/method</li><li>正在跑的函数，没有退出不能生效</li></ul><br><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>方法执行数据观测</p><pre class=" language-shell"><code class="language-shell"># 方法调用前观察，可以是非静态方法watch -b org.apache.commons.lang.StringUtils isBlank params# 在方法结束之后(正常返回和异常返回)观察watch -f org.apache.commons.lang.StringUtils isBlank returnObj# 指定输出结果的属性遍历深度，2watch org.apache.commons.lang.StringUtils isBlank '{params, target, returnObj}' -x 2# 耗时100ms时输出watch *StringUtils isBlank params '#cost>100'</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id can not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"id must be greater than 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用如下 watch 命令，然后访问 <a href="http://localhost:9090/user/10" target="_blank" rel="noopener">http://localhost:9090/user/10</a></p><pre class=" language-shell"><code class="language-shell">watch com.soulballad.usage.arthasdemo.web.UserController getUser "{params,target,returnObj}" -x 2 -b -s -n 2</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194029.png" alt="image-20200517175917004"></p><ul><li>参数里<code>-n 2</code>，表示只执行两次</li><li>输出结果中，第一次输出的是方法调用前的观察结果，第二次输出的是方法返回后的表达式的结果</li><li>结果的输出顺序和事件发生的先后顺序一致，和命令中 <code>-s -b</code> 的顺序无关</li></ul><br><h2 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h2><p>方法内部调用路径，并输出方法路径上的每个节点上耗时</p><pre class=" language-shell"><code class="language-shell">trace org.apache.commons.lang.StringUtils isBlank # 查看isBlank方法调用路径及耗时trace *StringUtils isBlank # 使用*匹配trace *StringUtils isBlank '#cost>100' # 过滤只输出耗时大于100ms的记录# 正则表达式，支持多个路径记录trace -E com.test.ClassA|org.test.ClassB method1|method2|method3 trace demo.MathGame run -n 5 # 只执行5次trace demo.MathGame run --skipJDKMethod false # 不跳过jdk中方法，默认为true</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194028.png" alt="image-20200517180614199"></p><br><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>输出当前方法被调用的调用路径</p><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194031.png" alt="image-20200517181157825"></p><p>支持条件过滤和 ognl 表达式</p><br><h2 id="tt"><a href="#tt" class="headerlink" title="tt"></a>tt</h2><p>方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</p><pre class=" language-shell"><code class="language-shell">tt -t *StringUtils isEmpty # 记录isEmpty方法调用tt -t *StringUtils isEmpty params[0].length==1 # 解决方法重载tt -l # 查看所有记录tt -i 1000 # 查询index为1000的记录详情tt -i 1000 -p # 根据index重新触发调用tt -i 1000 -p --replay-times 3 --replay-interval 3000 # 指定触发间隔和次数tt --delete-all # 删除所有记录</code></pre><p><img src="https://gitee.com/soulballad/PicGo/raw/master/img/20200517194030.png" alt="image-20200517190220743"></p><br><h2 id="ognl"><a href="#ognl" class="headerlink" title="ognl"></a>ognl</h2><p>执行ognl表达式</p><pre class=" language-shell"><code class="language-shell">ognl '@java.lang.System@out.println("hello")' # 调用静态函数ognl -x 2 '@Singleton@getInstance()' # 2层ognl '@Demo@staticFiled' # 输出静态变量值# 把java.home和java.runtime.name的系统属性放到一个集合中输出ognl '#value1=@System@getProperty("java.home"), #value2=@System@getProperty("java.runtime.name"), {#value1, #value2}'ognl -c 5d113a51 '@com.taobao.arthas.core.GlobalOptions@isDump' # 输出false</code></pre>]]></content>
      
      
      <categories>
          
          <category> 诊断 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arthas </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Github Pages和Hexo搭建博客</title>
      <link href="2020/10/27/shi-yong-github-pages-he-hexo-da-jian-bo-ke/"/>
      <url>2020/10/27/shi-yong-github-pages-he-hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h3 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h3><ul><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_14" target="_blank" rel="noopener">● 前言</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_22" target="_blank" rel="noopener">● 入门</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Nodejsfont_33" target="_blank" rel="noopener">● 安装 Node.js</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Gitfont_40" target="_blank" rel="noopener">● 安装 Git</a></li><li><ul><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Gitfont_46" target="_blank" rel="noopener">• 检验Git是否安装成功</a></li></ul></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_Hexo_font_56" target="_blank" rel="noopener">● 安装Hexo</a></li><li><ul><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_Hexo_font_64" target="_blank" rel="noopener">• Hexo 初始化配置</a></li></ul></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_73" target="_blank" rel="noopener">● 本地查看效果</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Github_Pages_font_86" target="_blank" rel="noopener">● 将博客部署到 Github Pages 上</a></li><li><ul><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000___Github_font_89" target="_blank" rel="noopener">• 注册 Github 账户</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_92" target="_blank" rel="noopener">• 创建项目代码库</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__SSH_font_96" target="_blank" rel="noopener">• 配置 SSH 密钥</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__GitHub_font_127" target="_blank" rel="noopener">• 在 GitHub 账户中添加你的公钥</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__font_140" target="_blank" rel="noopener">• 测试</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Git__font_153" target="_blank" rel="noopener">• 配置 Git 个人信息</a></li></ul></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Hexo__Github_font_162" target="_blank" rel="noopener">● 将本地的 Hexo 文件更新到 Github 的库中</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_201" target="_blank" rel="noopener">● 在博客上发表文章</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_259" target="_blank" rel="noopener">● 为博客更换自己喜欢的主题</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Hexo_font_301" target="_blank" rel="noopener">● 为你的 Hexo 博客配置个性域名</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_327" target="_blank" rel="noopener">● 博客美化和实用功能的添加</a></li><li><a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000_font_332" target="_blank" rel="noopener">● 结语</a></li></ul><hr><h1 id="●-前言"><a href="#●-前言" class="headerlink" title="● 前言"></a>● 前言</h1><p>这是一篇有关如何使用 Github Pages 和 Hexo 搭建属于自己独立博客的详尽教程，本人是软件工程专业本科生，目前只学习了C和C++编程语言，对网站开发的有关知识几乎为零，这也是我搭建好自己的博客之后写的第一篇博客，刚开始搭建博客的时候自己也是网上各种百度，由于自己属于小白那种，历经了千辛万苦才弄好，所以借这个机会写一篇小白真正能看懂的博客搭建教程，教你一步一步走向成功的彼岸！</p><p>推荐文章： <a href="http://www.cnblogs.com/jhzhu/p/3893297.html" target="_blank" rel="noopener">《我为什么写博客》</a> （By 知明所以）<br>　　　　 　<a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="noopener">《为什么你应该（从现在开始就）写博客》</a> (By 刘未鹏 | Mind Hacks)</p><h1 id="●-入门"><a href="#●-入门" class="headerlink" title="● 入门"></a>● 入门</h1><blockquote><p>Github Pages</p></blockquote><p>Github Pages可以被认为是用户编写的、托管在github上的静态网页。使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。此外还可以绑定自己的域名。</p><blockquote><p>Hexo</p></blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="●-安装-Node-js"><a href="#●-安装-Node-js" class="headerlink" title="● 安装 Node.js"></a>● 安装 Node.js</h1><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">点击此处</a>访问官网，按需下载相应版本，默认安装可以了<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY0ODFkMzc0MC5wbmc" alt="img"></p><p>注：本人在安装过程中出现了Warning 1909,无法创建快捷方式，这种情况很少出现，如果在安装过程中也有这种情况请参考百度文库（win10系统实测可行）：<a href="https://wenku.baidu.com/view/4ad59110964bcf84b9d57ba5.html" target="_blank" rel="noopener">《Win7安装程序警告1909无法创建快捷方式》</a><br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY0Yzk5ZjcwOC5wbmc" alt="img"></p><h1 id="●-安装-Git"><a href="#●-安装-Git" class="headerlink" title="● 安装 Git"></a>● 安装 Git</h1><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">点击此处</a>访问官网，按需下载相应版本，默认安装即可<br>参考资料：<a href="https://www.cnblogs.com/jytx/p/5602927.html" target="_blank" rel="noopener">《如何在windows下安装GIT》</a> （By 俊雨廷休）<br>　　　　　<a href="http://git.oschina.net/progit/" target="_blank" rel="noopener">《Pro Git（中文版）》</a></p><h2 id="•-检验Git是否安装成功"><a href="#•-检验Git是否安装成功" class="headerlink" title="• 检验Git是否安装成功"></a>• 检验Git是否安装成功</h2><p>同时按下 Win 键和 R 键打开运行窗口,输入 cmd ，然后输入以下命令，有相应版本信息显示则安装成功，若不正确可以卸载软件重新安装，此外若安装成功，在桌面右键鼠标，可以看到菜单里多了 Git GUI Here 和 Git Bash Here两个选项，第一个是图形界面的Git操作，另一个是命令行</p><pre><code>$ git --version  $ node -v  $ npm -v</code></pre><p><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY0ZWU4YTc5NC5wbmc" alt="img"><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY1MGVjMjA5Mi5wbmc" alt="img"></p><h1 id="●-安装Hexo"><a href="#●-安装Hexo" class="headerlink" title="● 安装Hexo"></a>● 安装Hexo</h1><p>选择一个磁盘，新建一个文件夹，自己重命名文件夹（如：我的文件夹为：Ｅ\TRHX_Blog），博客相关文件将储存在此文件夹下，在该文件夹下右键鼠标，点击 Git Bash Here，输入以下 npm 命令即可安装，第一个命令表示安装 hexo，第二个命令表示安装 hexo 部署到 git page 的 deployer，如图所示即为安装成功</p><pre><code>$ npm install hexo-cli -g  $ npm install hexo-deployer-git --save  </code></pre><p><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY1M2Q0YjAxOS5wbmc" alt="img"></p><h2 id="•-Hexo-初始化配置"><a href="#•-Hexo-初始化配置" class="headerlink" title="• Hexo 初始化配置"></a>• Hexo 初始化配置</h2><p>在刚才新建的文件夹里面再次新建一个 Hexo 文件夹（如：我的文件夹为：E\TRHX_Blog\Hexo）,进入该 Hexo 文件夹右键鼠标，点击 Git Bash Here，输入以下命令，如图所示则安装成功</p><pre><code>$ hexo init</code></pre><p><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY1NjZiNGI2Yi5wbmc" alt="img"></p><p>Hexo 安装完成后，将会在指定文件夹中新建所需要的文件，Hexo 文件夹下的目录如下：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY1OGQyZWVlNS5wbmc" alt="img"></p><h1 id="●-本地查看效果"><a href="#●-本地查看效果" class="headerlink" title="● 本地查看效果"></a>● 本地查看效果</h1><p>执行以下命令，执行完即可登录 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看效果</p><pre><code>$ hexo generate  $ hexo server  </code></pre><p>显示以下信息说明操作成功：</p><pre><code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></pre><p>登录 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看效果：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY1YjdjNzRkMi5wbmc" alt="img"></p><h1 id="●-将博客部署到-Github-Pages-上"><a href="#●-将博客部署到-Github-Pages-上" class="headerlink" title="● 将博客部署到 Github Pages 上"></a>● 将博客部署到 Github Pages 上</h1><p>到目前为止，我们的本地博客就成功搭建了，但是现在我们只能通过本地连接查看博客，我们要做的是让其他人也能够访问我们的博客，这就需要我们将博客部署到Github Pages上</p><h2 id="•-注册-Github-账户"><a href="#•-注册-Github-账户" class="headerlink" title="• 注册 Github 账户"></a>• 注册 Github 账户</h2><p><a href="https://github.com/" target="_blank" rel="noopener">点击此处</a>访问 Github 官网，点击 Sign Up 注册账户</p><h2 id="•-创建项目代码库"><a href="#•-创建项目代码库" class="headerlink" title="• 创建项目代码库"></a>• 创建项目代码库</h2><p>点击 New repository 开始创建，步骤及注意事项见下图：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY1ZTA5MzBjMi5wbmc" alt="img"></p><h2 id="•-配置-SSH-密钥"><a href="#•-配置-SSH-密钥" class="headerlink" title="• 配置 SSH 密钥"></a>• 配置 SSH 密钥</h2><p>只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面（如：我的文件夹为：Ｅ\TRHX_Blog） Git Bash Here 输入以下命令：</p><pre><code>$ ssh-keygen -t rsa -C "your email@example.com" //引号里面填写你的邮箱地址，比如我的是tanrenhou@126.com</code></pre><p>之后会出现：</p><pre><code>Generating public/private rsa key pair.  Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):  //到这里可以直接回车将密钥按默认文件进行存储</code></pre><p>然后会出现：</p><pre><code>Enter passphrase (empty for no passphrase):  //这里是要你输入密码，其实不需要输什么密码，直接回车就行 Enter same passphrase again:  </code></pre><p>接下来屏幕会显示：</p><pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.  Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.  The key fingerprint is:  这里是各种字母数字组成的字符串，结尾是你的邮箱  The key's randomart image is:  这里也是各种字母数字符号组成的字符串</code></pre><p>运行以下命令，将公钥的内容复制到系统粘贴板上</p><pre><code>$ clip &lt; ~/.ssh/id_rsa.pub</code></pre><h2 id="•-在-GitHub-账户中添加你的公钥"><a href="#•-在-GitHub-账户中添加你的公钥" class="headerlink" title="• 在 GitHub 账户中添加你的公钥"></a>• 在 GitHub 账户中添加你的公钥</h2><p>① 登陆 GitHub，进入 Settings：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY2MDZlNzU1OC5wbmc" alt="img"></p><p>② 点击 SSH and GPG Keys：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY2MjJiNDU4OC5wbmc" alt="img"></p><p>③ 选择 New SSH key：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY2M2ViMWFiMi5wbmc" alt="img"></p><p>④ 粘贴密钥：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY2YmMxZmM4Ny5wbmc" alt="img"></p><h2 id="•-测试"><a href="#•-测试" class="headerlink" title="• 测试"></a>• 测试</h2><p>输入以下命令：注意：<a href="mailto:git@github.com">git@github.com</a>不要做任何更改！</p><pre><code>$ ssh -T git@github.com</code></pre><p>之后会显示：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY2ZTNiNDgwMy5wbmc" alt="img"></p><p>输入 yes 后会显示：<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY3MDJjNDZkNi5wbmc" alt="img"></p><p>此时表示设置正确</p><h2 id="•-配置-Git-个人信息"><a href="#•-配置-Git-个人信息" class="headerlink" title="• 配置 Git 个人信息"></a>• 配置 Git 个人信息</h2><p>Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致</p><pre><code>$ git config --global user.name "此处填你的用户名"  $ git config --global user.email  "此处填你的邮箱"</code></pre><p>到此为止 SSH Key 配置成功，本机已成功连接到 Github</p><h1 id="●-将本地的-Hexo-文件更新到-Github-的库中"><a href="#●-将本地的-Hexo-文件更新到-Github-的库中" class="headerlink" title="● 将本地的 Hexo 文件更新到 Github 的库中"></a>● 将本地的 Hexo 文件更新到 Github 的库中</h1><p>① 登录 Github 打开自己的项目 your name.github.io<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY3MjBjY2FlMC5wbmc" alt="img"></p><p>② 鼠标移到 Clone or download 按钮，选择 Use SSH<br><img src="E:\笔记\自己整理\typora-user-images\20190816220246218.png" alt="img"></p><p>③ 一键复制地址<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY3NmNiM2RhNC5wbmc" alt="img"></p><p>④ 打开你创建的 Hexo 文件夹（如：E:\TRHX_Blog\Hexo），右键用记事本（Notepad++或者VS code等都可以）打开该文件夹下的 _config.yml 文件<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY3OGI4YmEzZS5wbmc" alt="img"></p><p>⑤ 按下图修改 _config.yml 文件并保存<br><img src="E:\笔记\自己整理\typora-user-images\aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMDMvMjUvNWM5OGY3ZTExZWVkNy5wbmc" alt="img"></p><p>⑥ 在 Hexo 文件夹下分别执行以下命令</p><pre><code>$ hexo g  $ hexo d</code></pre><p>或者直接执行</p><pre><code>$ hexo g -d</code></pre><p>执行完之后会让你输入你的 Github 的账号和密码，如果此时报以下错误，说明你的 deployer 没有安装成功</p><pre><code>ERROR Deployer not found: git</code></pre><p>需要执行以下命令再安装一次：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>再执行 <code>hexo g -d</code>，你的博客就会部署到 Github 上了</p><p>⑦ 访问博客</p><p>你的博客地址：https://你的用户名.github.io，比如我的是：<a href="https://trhx.github.io/" target="_blank" rel="noopener">https://trhx.github.io</a> ,现在每个人都可以通过此链接访问你的博客了</p><h1 id="●-在博客上发表文章"><a href="#●-在博客上发表文章" class="headerlink" title="● 在博客上发表文章"></a>● 在博客上发表文章</h1><p>博客已经成功搭建了，但是我们该怎么写博客呢？</p><p>① 新建一个空文章，输入以下命令，会在项目 \Hexo\source_posts 中生成 文章标题.md 文件，文章标题根据需要命名</p><pre><code>$ hexo n "文章标题"</code></pre><p>也可以直接在 \Hexo\source_posts 目录下右键鼠标新建文本文档，改后缀为 .md 即可，这种方法比较方便</p><p>② 用编辑器编写文章</p><p>md 全称 Markdown， Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会， .md 文件可以使用支持 Markdown 语法的编辑器编辑，然后保存文件到 \Hexo\source_posts 文件夹下即可</p><p>推荐 Windows 上使用 MarkdownPad2 或者小书匠 编辑器，macOS 上使用 Mou 编辑器，Linux 上使用 Remarkable编辑器，Web 端上使用CSDN ，其他编辑器推荐可以参考我的另一篇文章：<a href="https://blog.csdn.net/qq_36759224/article/details/82229243" target="_blank" rel="noopener">《最新主流 Markdown 编辑器推荐》</a></p><p>文章标题，标签，分类，封面图片，摘要等，可以在 Front-matter 里面配置（Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，官方文档：<a href="https://hexo.io/zh-cn/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/front-matter</a> ），举个例子：</p><pre class=" language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>layout: 页面布局（配合主题文档使用）title: 文章名称date: 文章日期comments: 文章是否开启评论photos: 文章封面图（仅部分主题支持）tags:   <span class="token list punctuation">-</span> 文章标签一  <span class="token list punctuation">-</span> 文章标签二categories: 文章分类<span class="token title important">description: 文章描述，即要在首页显示的摘要（仅部分主题支持）<span class="token punctuation">---</span></span>这里是摘要<span class="token comment" spellcheck="true">&lt;!-- more --></span>这里是正文注意：description 和 <span class="token comment" spellcheck="true">&lt;!-- more --></span> 方式显示摘要二选一即可，部分主题不支持description，每个配置英文冒号后面要空一格，不同主题配置有所差异，具体要参考主题文档</code></pre><p>当我们用编辑器写好文章后，可以使用以下命令将其推送到服务器上</p><pre><code>$ hexo g  $ hexo d</code></pre><p>或者将两个命令合二为一输入以下命令：</p><pre><code>$ hexo d -g</code></pre><p>现在访问你的博客就可以看见写好的文章啦！</p><p>原文链接： <a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">https://blog.csdn.net/qq_36759224/article/details/82121420</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Github Pages </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/10/27/hello-world/"/>
      <url>2020/10/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
